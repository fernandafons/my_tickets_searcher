/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qtsqlglobal.sip"
#include <qtsqlglobal.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlResult.cpp"


class sipQSqlResult : public  ::QSqlResult
{
public:
    sipQSqlResult(const  ::QSqlDriver*);
    virtual ~sipQSqlResult();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant lastInsertId() const SIP_OVERRIDE;
     ::QSqlRecord record() const SIP_OVERRIDE;
    int numRowsAffected() SIP_OVERRIDE;
    int size() SIP_OVERRIDE;
    bool fetchLast() SIP_OVERRIDE;
    bool fetchFirst() SIP_OVERRIDE;
    bool fetchPrevious() SIP_OVERRIDE;
    bool fetchNext() SIP_OVERRIDE;
    bool fetch(int) SIP_OVERRIDE;
    bool reset(const  ::QString&) SIP_OVERRIDE;
    bool isNull(int) SIP_OVERRIDE;
     ::QVariant data(int) SIP_OVERRIDE;
    void bindValue(const  ::QString&,const  ::QVariant&, ::QSql::ParamType) SIP_OVERRIDE;
    void bindValue(int,const  ::QVariant&, ::QSql::ParamType) SIP_OVERRIDE;
    bool savePrepare(const  ::QString&) SIP_OVERRIDE;
    bool prepare(const  ::QString&) SIP_OVERRIDE;
    bool exec() SIP_OVERRIDE;
    void setForwardOnly(bool) SIP_OVERRIDE;
    void setSelect(bool) SIP_OVERRIDE;
    void setQuery(const  ::QString&) SIP_OVERRIDE;
    void setLastError(const  ::QSqlError&) SIP_OVERRIDE;
    void setActive(bool) SIP_OVERRIDE;
    void setAt(int) SIP_OVERRIDE;
     ::QVariant handle() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlResult(const sipQSqlResult &);
    sipQSqlResult &operator = (const sipQSqlResult &);

    char sipPyMethods[25];
};

sipQSqlResult::sipQSqlResult(const  ::QSqlDriver*a0):  ::QSqlResult(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlResult::~sipQSqlResult()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QVariant sipQSqlResult::lastInsertId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_lastInsertId);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_lastInsertId);
#endif

    if (!sipMeth)
        return  ::QSqlResult::lastInsertId();

    extern  ::QVariant sipVH_QtSql_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_14(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSqlRecord sipQSqlResult::record() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_record);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_record);
#endif

    if (!sipMeth)
        return  ::QSqlResult::record();

    extern  ::QSqlRecord sipVH_QtSql_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_70(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSqlResult::numRowsAffected()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, sipName_QSqlResult, sipName_numRowsAffected);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, sipName_QSqlResult, sipName_numRowsAffected);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtSql_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_69(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSqlResult::size()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, sipName_QSqlResult, sipName_size);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, sipName_QSqlResult, sipName_size);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtSql_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_69(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchLast()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, sipName_QSqlResult, sipName_fetchLast);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, sipName_QSqlResult, sipName_fetchLast);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchFirst()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, sipName_QSqlResult, sipName_fetchFirst);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, sipName_QSqlResult, sipName_fetchFirst);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchPrevious()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_fetchPrevious);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_fetchPrevious);
#endif

    if (!sipMeth)
        return  ::QSqlResult::fetchPrevious();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchNext()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_fetchNext);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_fetchNext);
#endif

    if (!sipMeth)
        return  ::QSqlResult::fetchNext();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetch(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, sipName_QSqlResult, sipName_fetch);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, sipName_QSqlResult, sipName_fetch);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtSql_62(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::reset(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, sipName_QSqlResult, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, sipName_QSqlResult, sipName_reset);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_21(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::isNull(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, sipName_QSqlResult, sipName_isNull);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, sipName_QSqlResult, sipName_isNull);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtSql_62(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQSqlResult::data(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, sipName_QSqlResult, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, sipName_QSqlResult, sipName_data);
#endif

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtSql_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtSql_68(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::bindValue(const  ::QString& a0,const  ::QVariant& a1, ::QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_bindValue);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_bindValue);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QVariant&, ::QSql::ParamType);

    sipVH_QtSql_67(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlResult::bindValue(int a0,const  ::QVariant& a1, ::QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_bindValue);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_bindValue);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QVariant&, ::QSql::ParamType);

    sipVH_QtSql_66(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlResult::savePrepare(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_savePrepare);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_savePrepare);
#endif

    if (!sipMeth)
        return  ::QSqlResult::savePrepare(a0);

    extern bool sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_21(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::prepare(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_prepare);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_prepare);
#endif

    if (!sipMeth)
        return  ::QSqlResult::prepare(a0);

    extern bool sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_21(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_exec);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_exec);
#endif

    if (!sipMeth)
        return  ::QSqlResult::exec();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSqlResult::setForwardOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_setForwardOnly);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_setForwardOnly);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setForwardOnly(a0);
        return;
    }

    extern void sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSql_19(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setSelect(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_setSelect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_setSelect);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setSelect(a0);
        return;
    }

    extern void sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSql_19(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setQuery(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_setQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_setQuery);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setQuery(a0);
        return;
    }

    extern void sipVH_QtSql_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtSql_57(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setLastError(const  ::QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_setLastError);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_setLastError);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSqlError&);

    sipVH_QtSql_20(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setActive(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_setActive);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_setActive);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setActive(a0);
        return;
    }

    extern void sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSql_19(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_setAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_setAt);
#endif

    if (!sipMeth)
    {
         ::QSqlResult::setAt(a0);
        return;
    }

    extern void sipVH_QtSql_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtSql_59(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQSqlResult::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_handle);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_handle);
#endif

    if (!sipMeth)
        return  ::QSqlResult::handle();

    extern  ::QVariant sipVH_QtSql_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_14(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSqlResult_handle, "handle(self) -> Any");

extern "C" {static PyObject *meth_QSqlResult_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSqlResult::handle() : sipCpp->handle()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_handle, doc_QSqlResult_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_at, "at(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_at(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->at();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_at, doc_QSqlResult_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_lastQuery, "lastQuery(self) -> str");

extern "C" {static PyObject *meth_QSqlResult_lastQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->lastQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastQuery, doc_QSqlResult_lastQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_lastError, "lastError(self) -> QSqlError");

extern "C" {static PyObject *meth_QSqlResult_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QSqlError*sipRes;

            sipRes = new  ::QSqlError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QSqlError,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastError, doc_QSqlResult_lastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isValid, doc_QSqlResult_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isActive, doc_QSqlResult_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_isSelect, "isSelect(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelect();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isSelect, doc_QSqlResult_isSelect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_isForwardOnly, "isForwardOnly(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForwardOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isForwardOnly, doc_QSqlResult_isForwardOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_driver, "driver(self) -> QSqlDriver");

extern "C" {static PyObject *meth_QSqlResult_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            const  ::QSqlDriver*sipRes;

            sipRes = sipCpp->driver();

            return sipConvertFromType(const_cast< ::QSqlDriver *>(sipRes),sipType_QSqlDriver,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_driver, doc_QSqlResult_driver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setAt, "setAt(self, int)");

extern "C" {static PyObject *meth_QSqlResult_setAt(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setAt(a0) : sipCpp->setAt(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setAt, doc_QSqlResult_setAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setActive, "setActive(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setActive(a0) : sipCpp->setActive(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setActive, doc_QSqlResult_setActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setLastError, "setLastError(self, QSqlError)");

extern "C" {static PyObject *meth_QSqlResult_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlError* a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QSqlError, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setLastError(*a0) : sipCpp->setLastError(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setLastError, doc_QSqlResult_setLastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setQuery, "setQuery(self, str)");

extern "C" {static PyObject *meth_QSqlResult_setQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setQuery(*a0) : sipCpp->setQuery(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setQuery, doc_QSqlResult_setQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setSelect, "setSelect(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setSelect(a0) : sipCpp->setSelect(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setSelect, doc_QSqlResult_setSelect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_setForwardOnly, "setForwardOnly(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::setForwardOnly(a0) : sipCpp->setForwardOnly(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setForwardOnly, doc_QSqlResult_setForwardOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_exec_, "exec_(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_exec_(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::exec() : sipCpp->exec());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_exec_, doc_QSqlResult_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_exec, "exec(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_exec(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_exec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::exec() : sipCpp->exec());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_exec, doc_QSqlResult_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_prepare, "prepare(self, str) -> bool");

extern "C" {static PyObject *meth_QSqlResult_prepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::prepare(*a0) : sipCpp->prepare(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_prepare, doc_QSqlResult_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_savePrepare, "savePrepare(self, str) -> bool");

extern "C" {static PyObject *meth_QSqlResult_savePrepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_savePrepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::savePrepare(*a0) : sipCpp->savePrepare(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_savePrepare, doc_QSqlResult_savePrepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_bindValue, "bindValue(self, int, Any, Union[QSql.ParamType, QSql.ParamTypeFlag])\n"
"bindValue(self, str, Any, Union[QSql.ParamType, QSql.ParamTypeFlag])");

extern "C" {static PyObject *meth_QSqlResult_bindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSql::ParamType* a2;
        int a2State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, &a0, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::bindValue(a0,*a1,*a2) : sipCpp->bindValue(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSql::ParamType* a2;
        int a2State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlResult::bindValue(*a0,*a1,*a2) : sipCpp->bindValue(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValue, doc_QSqlResult_bindValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_addBindValue, "addBindValue(self, Any, Union[QSql.ParamType, QSql.ParamTypeFlag])");

extern "C" {static PyObject *meth_QSqlResult_addBindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_addBindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QSql::ParamType* a1;
        int a1State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QSql_ParamType, &a1, &a1State))
        {
            sipCpp->addBindValue(*a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QSql_ParamType,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_addBindValue, doc_QSqlResult_addBindValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_boundValue, "boundValue(self, str) -> Any\n"
"boundValue(self, int) -> Any");

extern "C" {static PyObject *meth_QSqlResult_boundValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->boundValue(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->boundValue(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValue, doc_QSqlResult_boundValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_bindValueType, "bindValueType(self, str) -> QSql.ParamType\n"
"bindValueType(self, int) -> QSql.ParamType");

extern "C" {static PyObject *meth_QSqlResult_bindValueType(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValueType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QSql::ParamType*sipRes;

            sipRes = new  ::QSql::ParamType(sipCpp->bindValueType(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
             ::QSql::ParamType*sipRes;

            sipRes = new  ::QSql::ParamType(sipCpp->bindValueType(a0));

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValueType, doc_QSqlResult_bindValueType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_boundValueCount, "boundValueCount(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_boundValueCount(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->boundValueCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueCount, doc_QSqlResult_boundValueCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_boundValues, "boundValues(self) -> List[Any]");

extern "C" {static PyObject *meth_QSqlResult_boundValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVector< ::QVariant>*sipRes;

            sipRes = &sipCpp->boundValues();

            return sipConvertFromType(sipRes,sipType_QVector_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValues, doc_QSqlResult_boundValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_executedQuery, "executedQuery(self) -> str");

extern "C" {static PyObject *meth_QSqlResult_executedQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_executedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->executedQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_executedQuery, doc_QSqlResult_executedQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_boundValueName, "boundValueName(self, int) -> str");

extern "C" {static PyObject *meth_QSqlResult_boundValueName(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->boundValueName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueName, doc_QSqlResult_boundValueName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_clear, "clear(self)");

extern "C" {static PyObject *meth_QSqlResult_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_clear, doc_QSqlResult_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_hasOutValues, "hasOutValues(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_hasOutValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_hasOutValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasOutValues();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_hasOutValues, doc_QSqlResult_hasOutValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_bindingSyntax, "bindingSyntax(self) -> QSqlResult.BindingSyntax");

extern "C" {static PyObject *meth_QSqlResult_bindingSyntax(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindingSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QSqlResult::BindingSyntax sipRes;

            sipRes = sipCpp->bindingSyntax();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSqlResult_BindingSyntax);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindingSyntax, doc_QSqlResult_bindingSyntax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_data, "data(self, int) -> Any");

extern "C" {static PyObject *meth_QSqlResult_data(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_data);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QVariant(sipCpp->data(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_data, doc_QSqlResult_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_isNull, "isNull(self, int) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_isNull);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->isNull(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isNull, doc_QSqlResult_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_reset, "reset(self, str) -> bool");

extern "C" {static PyObject *meth_QSqlResult_reset(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_reset);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->reset(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_reset, doc_QSqlResult_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_fetch, "fetch(self, int) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetch(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetch);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetch(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetch, doc_QSqlResult_fetch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_fetchNext, "fetchNext(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchNext(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::fetchNext() : sipCpp->fetchNext());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchNext, doc_QSqlResult_fetchNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_fetchPrevious, "fetchPrevious(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchPrevious(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlResult::fetchPrevious() : sipCpp->fetchPrevious());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchPrevious, doc_QSqlResult_fetchPrevious);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_fetchFirst, "fetchFirst(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchFirst(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchFirst);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetchFirst();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchFirst, doc_QSqlResult_fetchFirst);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_fetchLast, "fetchLast(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchLast(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchLast);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetchLast();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchLast, doc_QSqlResult_fetchLast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_size, "size(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_size(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_size);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->size();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_size, doc_QSqlResult_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_numRowsAffected, "numRowsAffected(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_numRowsAffected(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_numRowsAffected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_numRowsAffected);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->numRowsAffected();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_numRowsAffected, doc_QSqlResult_numRowsAffected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_record, "record(self) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlResult_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QSqlRecord*sipRes;

            sipRes = new  ::QSqlRecord((sipSelfWasArg ? sipCpp-> ::QSqlResult::record() : sipCpp->record()));

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_record, doc_QSqlResult_record);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlResult_lastInsertId, "lastInsertId(self) -> Any");

extern "C" {static PyObject *meth_QSqlResult_lastInsertId(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastInsertId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSqlResult::lastInsertId() : sipCpp->lastInsertId()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastInsertId, doc_QSqlResult_lastInsertId);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlResult(void *, int);}
static void release_QSqlResult(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlResult *>(sipCppV);
    else
        delete reinterpret_cast< ::QSqlResult *>(sipCppV);
}


extern "C" {static void dealloc_QSqlResult(sipSimpleWrapper *);}
static void dealloc_QSqlResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSqlResult *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSqlResult(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSqlResult(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlResult(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSqlResult *sipCpp = SIP_NULLPTR;

    {
        const  ::QSqlDriver* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QSqlDriver, &a0))
        {
            sipCpp = new sipQSqlResult(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSqlResult[] = {
    {sipName_addBindValue, meth_QSqlResult_addBindValue, METH_VARARGS, doc_QSqlResult_addBindValue},
    {sipName_at, meth_QSqlResult_at, METH_VARARGS, doc_QSqlResult_at},
    {sipName_bindValue, meth_QSqlResult_bindValue, METH_VARARGS, doc_QSqlResult_bindValue},
    {sipName_bindValueType, meth_QSqlResult_bindValueType, METH_VARARGS, doc_QSqlResult_bindValueType},
    {sipName_bindingSyntax, meth_QSqlResult_bindingSyntax, METH_VARARGS, doc_QSqlResult_bindingSyntax},
    {sipName_boundValue, meth_QSqlResult_boundValue, METH_VARARGS, doc_QSqlResult_boundValue},
    {sipName_boundValueCount, meth_QSqlResult_boundValueCount, METH_VARARGS, doc_QSqlResult_boundValueCount},
    {sipName_boundValueName, meth_QSqlResult_boundValueName, METH_VARARGS, doc_QSqlResult_boundValueName},
    {sipName_boundValues, meth_QSqlResult_boundValues, METH_VARARGS, doc_QSqlResult_boundValues},
    {sipName_clear, meth_QSqlResult_clear, METH_VARARGS, doc_QSqlResult_clear},
    {sipName_data, meth_QSqlResult_data, METH_VARARGS, doc_QSqlResult_data},
    {sipName_driver, meth_QSqlResult_driver, METH_VARARGS, doc_QSqlResult_driver},
    {sipName_exec, meth_QSqlResult_exec, METH_VARARGS, doc_QSqlResult_exec},
    {sipName_exec_, meth_QSqlResult_exec_, METH_VARARGS, doc_QSqlResult_exec_},
    {sipName_executedQuery, meth_QSqlResult_executedQuery, METH_VARARGS, doc_QSqlResult_executedQuery},
    {sipName_fetch, meth_QSqlResult_fetch, METH_VARARGS, doc_QSqlResult_fetch},
    {sipName_fetchFirst, meth_QSqlResult_fetchFirst, METH_VARARGS, doc_QSqlResult_fetchFirst},
    {sipName_fetchLast, meth_QSqlResult_fetchLast, METH_VARARGS, doc_QSqlResult_fetchLast},
    {sipName_fetchNext, meth_QSqlResult_fetchNext, METH_VARARGS, doc_QSqlResult_fetchNext},
    {sipName_fetchPrevious, meth_QSqlResult_fetchPrevious, METH_VARARGS, doc_QSqlResult_fetchPrevious},
    {sipName_handle, meth_QSqlResult_handle, METH_VARARGS, doc_QSqlResult_handle},
    {sipName_hasOutValues, meth_QSqlResult_hasOutValues, METH_VARARGS, doc_QSqlResult_hasOutValues},
    {sipName_isActive, meth_QSqlResult_isActive, METH_VARARGS, doc_QSqlResult_isActive},
    {sipName_isForwardOnly, meth_QSqlResult_isForwardOnly, METH_VARARGS, doc_QSqlResult_isForwardOnly},
    {sipName_isNull, meth_QSqlResult_isNull, METH_VARARGS, doc_QSqlResult_isNull},
    {sipName_isSelect, meth_QSqlResult_isSelect, METH_VARARGS, doc_QSqlResult_isSelect},
    {sipName_isValid, meth_QSqlResult_isValid, METH_VARARGS, doc_QSqlResult_isValid},
    {sipName_lastError, meth_QSqlResult_lastError, METH_VARARGS, doc_QSqlResult_lastError},
    {sipName_lastInsertId, meth_QSqlResult_lastInsertId, METH_VARARGS, doc_QSqlResult_lastInsertId},
    {sipName_lastQuery, meth_QSqlResult_lastQuery, METH_VARARGS, doc_QSqlResult_lastQuery},
    {sipName_numRowsAffected, meth_QSqlResult_numRowsAffected, METH_VARARGS, doc_QSqlResult_numRowsAffected},
    {sipName_prepare, meth_QSqlResult_prepare, METH_VARARGS, doc_QSqlResult_prepare},
    {sipName_record, meth_QSqlResult_record, METH_VARARGS, doc_QSqlResult_record},
    {sipName_reset, meth_QSqlResult_reset, METH_VARARGS, doc_QSqlResult_reset},
    {sipName_savePrepare, meth_QSqlResult_savePrepare, METH_VARARGS, doc_QSqlResult_savePrepare},
    {sipName_setActive, meth_QSqlResult_setActive, METH_VARARGS, doc_QSqlResult_setActive},
    {sipName_setAt, meth_QSqlResult_setAt, METH_VARARGS, doc_QSqlResult_setAt},
    {sipName_setForwardOnly, meth_QSqlResult_setForwardOnly, METH_VARARGS, doc_QSqlResult_setForwardOnly},
    {sipName_setLastError, meth_QSqlResult_setLastError, METH_VARARGS, doc_QSqlResult_setLastError},
    {sipName_setQuery, meth_QSqlResult_setQuery, METH_VARARGS, doc_QSqlResult_setQuery},
    {sipName_setSelect, meth_QSqlResult_setSelect, METH_VARARGS, doc_QSqlResult_setSelect},
    {sipName_size, meth_QSqlResult_size, METH_VARARGS, doc_QSqlResult_size}
};

static sipEnumMemberDef enummembers_QSqlResult[] = {
    {sipName_NamedBinding, static_cast<int>( ::QSqlResult::NamedBinding), 29},
    {sipName_PositionalBinding, static_cast<int>( ::QSqlResult::PositionalBinding), 29},
};

PyDoc_STRVAR(doc_QSqlResult, "\1QSqlResult(QSqlDriver)");


static pyqt5ClassPluginDef plugin_QSqlResult = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtSql_QSqlResult = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSqlResult,
        SIP_NULLPTR,
        &plugin_QSqlResult
    },
    {
        sipNameNr_QSqlResult,
        {0, 0, 1},
        42, methods_QSqlResult,
        2, enummembers_QSqlResult,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSqlResult,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSqlResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSqlResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSqlResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
