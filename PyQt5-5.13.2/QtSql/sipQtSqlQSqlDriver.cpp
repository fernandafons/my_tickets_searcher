/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qtsqlglobal.sip"
#include <qtsqlglobal.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlDriver.cpp"


class sipQSqlDriver : public  ::QSqlDriver
{
public:
    sipQSqlDriver( ::QObject*);
    virtual ~sipQSqlDriver();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString stripDelimiters(const  ::QString&, ::QSqlDriver::IdentifierType) const SIP_OVERRIDE;
    bool isIdentifierEscaped(const  ::QString&, ::QSqlDriver::IdentifierType) const SIP_OVERRIDE;
     ::QStringList subscribedToNotifications() const SIP_OVERRIDE;
    bool unsubscribeFromNotification(const  ::QString&) SIP_OVERRIDE;
    bool subscribeToNotification(const  ::QString&) SIP_OVERRIDE;
    void setLastError(const  ::QSqlError&) SIP_OVERRIDE;
    void setOpenError(bool) SIP_OVERRIDE;
    void setOpen(bool) SIP_OVERRIDE;
    bool open(const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,int,const  ::QString&) SIP_OVERRIDE;
     ::QSqlResult* createResult() const SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
    bool hasFeature( ::QSqlDriver::DriverFeature) const SIP_OVERRIDE;
     ::QVariant handle() const SIP_OVERRIDE;
     ::QString sqlStatement( ::QSqlDriver::StatementType,const  ::QString&,const  ::QSqlRecord&,bool) const SIP_OVERRIDE;
     ::QString escapeIdentifier(const  ::QString&, ::QSqlDriver::IdentifierType) const SIP_OVERRIDE;
     ::QString formatValue(const  ::QSqlField&,bool) const SIP_OVERRIDE;
     ::QSqlRecord record(const  ::QString&) const SIP_OVERRIDE;
     ::QSqlIndex primaryIndex(const  ::QString&) const SIP_OVERRIDE;
     ::QStringList tables( ::QSql::TableType) const SIP_OVERRIDE;
    bool rollbackTransaction() SIP_OVERRIDE;
    bool commitTransaction() SIP_OVERRIDE;
    bool beginTransaction() SIP_OVERRIDE;
    bool isOpen() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlDriver(const sipQSqlDriver &);
    sipQSqlDriver &operator = (const sipQSqlDriver &);

    char sipPyMethods[30];
};

sipQSqlDriver::sipQSqlDriver( ::QObject*a0):  ::QSqlDriver(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlDriver::~sipQSqlDriver()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSqlDriver::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlDriver);

    return  ::QSqlDriver::metaObject();
}

int sipQSqlDriver::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSqlDriver::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlDriver,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQSqlDriver::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlDriver, _clname, &sipCpp) ? sipCpp :  ::QSqlDriver::qt_metacast(_clname));
}

 ::QString sipQSqlDriver::stripDelimiters(const  ::QString& a0, ::QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_stripDelimiters);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_stripDelimiters);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::stripDelimiters(a0,a1);

    extern  ::QString sipVH_QtSql_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSqlDriver::IdentifierType);

    return sipVH_QtSql_12(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlDriver::isIdentifierEscaped(const  ::QString& a0, ::QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isIdentifierEscaped);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_isIdentifierEscaped);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::isIdentifierEscaped(a0,a1);

    extern bool sipVH_QtSql_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSqlDriver::IdentifierType);

    return sipVH_QtSql_23(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQSqlDriver::subscribedToNotifications() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_subscribedToNotifications);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_subscribedToNotifications);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::subscribedToNotifications();

    extern  ::QStringList sipVH_QtSql_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_22(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::unsubscribeFromNotification(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_unsubscribeFromNotification);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_unsubscribeFromNotification);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::unsubscribeFromNotification(a0);

    extern bool sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_21(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::subscribeToNotification(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_subscribeToNotification);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_subscribeToNotification);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::subscribeToNotification(a0);

    extern bool sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_21(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setLastError(const  ::QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_setLastError);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_setLastError);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSqlError&);

    sipVH_QtSql_20(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpenError(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_setOpenError);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_setOpenError);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::setOpenError(a0);
        return;
    }

    extern void sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSql_19(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpen(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_setOpen);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_setOpen);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::setOpen(a0);
        return;
    }

    extern void sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSql_19(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::open(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3,int a4,const  ::QString& a5)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, sipName_QSqlDriver, sipName_open);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, sipName_QSqlDriver, sipName_open);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,int,const  ::QString&);

    return sipVH_QtSql_18(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5);
}

 ::QSqlResult* sipQSqlDriver::createResult() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QSqlDriver, sipName_createResult);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, sipName_QSqlDriver, sipName_createResult);
#endif

    if (!sipMeth)
        return 0;

    extern  ::QSqlResult* sipVH_QtSql_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_17(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSqlDriver::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, sipName_QSqlDriver, sipName_close);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, sipName_QSqlDriver, sipName_close);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtSql_16(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::hasFeature( ::QSqlDriver::DriverFeature a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QSqlDriver, sipName_hasFeature);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, sipName_QSqlDriver, sipName_hasFeature);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSqlDriver::DriverFeature);

    return sipVH_QtSql_15(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQSqlDriver::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_handle);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_handle);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::handle();

    extern  ::QVariant sipVH_QtSql_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_14(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQSqlDriver::sqlStatement( ::QSqlDriver::StatementType a0,const  ::QString& a1,const  ::QSqlRecord& a2,bool a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sqlStatement);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_sqlStatement);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::sqlStatement(a0,a1,a2,a3);

    extern  ::QString sipVH_QtSql_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSqlDriver::StatementType,const  ::QString&,const  ::QSqlRecord&,bool);

    return sipVH_QtSql_13(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QString sipQSqlDriver::escapeIdentifier(const  ::QString& a0, ::QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_escapeIdentifier);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_escapeIdentifier);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::escapeIdentifier(a0,a1);

    extern  ::QString sipVH_QtSql_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSqlDriver::IdentifierType);

    return sipVH_QtSql_12(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QString sipQSqlDriver::formatValue(const  ::QSqlField& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_formatValue);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_formatValue);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::formatValue(a0,a1);

    extern  ::QString sipVH_QtSql_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSqlField&,bool);

    return sipVH_QtSql_11(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QSqlRecord sipQSqlDriver::record(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_record);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_record);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::record(a0);

    extern  ::QSqlRecord sipVH_QtSql_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_10(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSqlIndex sipQSqlDriver::primaryIndex(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_primaryIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_primaryIndex);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::primaryIndex(a0);

    extern  ::QSqlIndex sipVH_QtSql_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtSql_9(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQSqlDriver::tables( ::QSql::TableType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_tables);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_tables);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::tables(a0);

    extern  ::QStringList sipVH_QtSql_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSql::TableType);

    return sipVH_QtSql_8(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::rollbackTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_rollbackTransaction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_rollbackTransaction);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::rollbackTransaction();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::commitTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_commitTransaction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_commitTransaction);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::commitTransaction();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::beginTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_beginTransaction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_beginTransaction);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::beginTransaction();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::isOpen() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[22]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isOpen);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[22]), sipPySelf, SIP_NULLPTR, sipName_isOpen);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::isOpen();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSqlDriver::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::event(a0);

    extern bool sipVH_QtSql_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtSql_6(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QSqlDriver::eventFilter(a0,a1);

    extern bool sipVH_QtSql_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtSql_5(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSqlDriver::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::timerEvent(a0);
        return;
    }

    extern void sipVH_QtSql_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtSql_4(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::childEvent(a0);
        return;
    }

    extern void sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtSql_3(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::customEvent(a0);
        return;
    }

    extern void sipVH_QtSql_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSql_2(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::connectNotify(a0);
        return;
    }

    extern void sipVH_QtSql_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSql_1(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QSqlDriver::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtSql_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSql_1(sipGILState, sipImportedVirtErrorHandlers_QtSql_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSqlDriver_isOpen, "isOpen(self) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::isOpen() : sipCpp->isOpen());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpen, doc_QSqlDriver_isOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_isOpenError, "isOpenError(self) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpenError();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpenError, doc_QSqlDriver_isOpenError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_beginTransaction, "beginTransaction(self) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_beginTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_beginTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::beginTransaction() : sipCpp->beginTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_beginTransaction, doc_QSqlDriver_beginTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_commitTransaction, "commitTransaction(self) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::commitTransaction() : sipCpp->commitTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_commitTransaction, doc_QSqlDriver_commitTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_rollbackTransaction, "rollbackTransaction(self) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::rollbackTransaction() : sipCpp->rollbackTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_rollbackTransaction, doc_QSqlDriver_rollbackTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_tables, "tables(self, QSql.TableType) -> List[str]");

extern "C" {static PyObject *meth_QSqlDriver_tables(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_tables(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSql::TableType a0;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_TableType, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QSqlDriver::tables(a0) : sipCpp->tables(a0)));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_tables, doc_QSqlDriver_tables);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_primaryIndex, "primaryIndex(self, str) -> QSqlIndex");

extern "C" {static PyObject *meth_QSqlDriver_primaryIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_primaryIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QSqlIndex*sipRes;

            sipRes = new  ::QSqlIndex((sipSelfWasArg ? sipCpp-> ::QSqlDriver::primaryIndex(*a0) : sipCpp->primaryIndex(*a0)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_primaryIndex, doc_QSqlDriver_primaryIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_record, "record(self, str) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlDriver_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QSqlRecord*sipRes;

            sipRes = new  ::QSqlRecord((sipSelfWasArg ? sipCpp-> ::QSqlDriver::record(*a0) : sipCpp->record(*a0)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_record, doc_QSqlDriver_record);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_formatValue, "formatValue(self, QSqlField, trimStrings: bool = False) -> str");

extern "C" {static PyObject *meth_QSqlDriver_formatValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_formatValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlField* a0;
        bool a1 = 0;
        const  ::QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_trimStrings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlField, &a0, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QSqlDriver::formatValue(*a0,a1) : sipCpp->formatValue(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_formatValue, doc_QSqlDriver_formatValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_escapeIdentifier, "escapeIdentifier(self, str, QSqlDriver.IdentifierType) -> str");

extern "C" {static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlDriver::IdentifierType a1;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QSqlDriver::escapeIdentifier(*a0,a1) : sipCpp->escapeIdentifier(*a0,a1)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_escapeIdentifier, doc_QSqlDriver_escapeIdentifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_sqlStatement, "sqlStatement(self, QSqlDriver.StatementType, str, QSqlRecord, bool) -> str");

extern "C" {static PyObject *meth_QSqlDriver_sqlStatement(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_sqlStatement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlDriver::StatementType a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QSqlRecord* a2;
        bool a3;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J9b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_StatementType, &a0, sipType_QString,&a1, &a1State, sipType_QSqlRecord, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QSqlDriver::sqlStatement(a0,*a1,*a2,a3) : sipCpp->sqlStatement(a0,*a1,*a2,a3)));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_sqlStatement, doc_QSqlDriver_sqlStatement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_lastError, "lastError(self) -> QSqlError");

extern "C" {static PyObject *meth_QSqlDriver_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QSqlError*sipRes;

            sipRes = new  ::QSqlError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QSqlError,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_lastError, doc_QSqlDriver_lastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_handle, "handle(self) -> Any");

extern "C" {static PyObject *meth_QSqlDriver_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSqlDriver::handle() : sipCpp->handle()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_handle, doc_QSqlDriver_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_hasFeature, "hasFeature(self, QSqlDriver.DriverFeature) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlDriver::DriverFeature a0;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_DriverFeature, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_hasFeature);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hasFeature(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_hasFeature, doc_QSqlDriver_hasFeature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_close, "close(self)");

extern "C" {static PyObject *meth_QSqlDriver_close(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_close);
                return SIP_NULLPTR;
            }

            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_close, doc_QSqlDriver_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_createResult, "createResult(self) -> QSqlResult");

extern "C" {static PyObject *meth_QSqlDriver_createResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_createResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QSqlResult*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_createResult);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->createResult();

            return sipConvertFromNewType(sipRes,sipType_QSqlResult,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_createResult, doc_QSqlDriver_createResult);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_open, "open(self, str, user: str = '', password: str = '', host: str = '', port: int = -1, options: str = '') -> bool");

extern "C" {static PyObject *meth_QSqlDriver_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
         ::QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_user,
            sipName_password,
            sipName_host,
            sipName_port,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1J1iJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4, sipType_QString,&a5, &a5State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_open);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(*a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_open, doc_QSqlDriver_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpen, "setOpen(self, bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlDriver::setOpen(a0) : sipCpp->setOpen(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpen, doc_QSqlDriver_setOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpenError, "setOpenError(self, bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlDriver::setOpenError(a0) : sipCpp->setOpenError(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpenError, doc_QSqlDriver_setOpenError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_setLastError, "setLastError(self, QSqlError)");

extern "C" {static PyObject *meth_QSqlDriver_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlError* a0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlError, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSqlDriver::setLastError(*a0) : sipCpp->setLastError(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setLastError, doc_QSqlDriver_setLastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribeToNotification, "subscribeToNotification(self, str) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::subscribeToNotification(*a0) : sipCpp->subscribeToNotification(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribeToNotification, doc_QSqlDriver_subscribeToNotification);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_unsubscribeFromNotification, "unsubscribeFromNotification(self, str) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::unsubscribeFromNotification(*a0) : sipCpp->unsubscribeFromNotification(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_unsubscribeFromNotification, doc_QSqlDriver_unsubscribeFromNotification);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribedToNotifications, "subscribedToNotifications(self) -> List[str]");

extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QSqlDriver::subscribedToNotifications() : sipCpp->subscribedToNotifications()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribedToNotifications, doc_QSqlDriver_subscribedToNotifications);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_isIdentifierEscaped, "isIdentifierEscaped(self, str, QSqlDriver.IdentifierType) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlDriver::IdentifierType a1;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlDriver::isIdentifierEscaped(*a0,a1) : sipCpp->isIdentifierEscaped(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isIdentifierEscaped, doc_QSqlDriver_isIdentifierEscaped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_stripDelimiters, "stripDelimiters(self, str, QSqlDriver.IdentifierType) -> str");

extern "C" {static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlDriver::IdentifierType a1;
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QSqlDriver::stripDelimiters(*a0,a1) : sipCpp->stripDelimiters(*a0,a1)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_stripDelimiters, doc_QSqlDriver_stripDelimiters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_setNumericalPrecisionPolicy, "setNumericalPrecisionPolicy(self, QSql.NumericalPrecisionPolicy)");

extern "C" {static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSql::NumericalPrecisionPolicy a0;
         ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            sipCpp->setNumericalPrecisionPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setNumericalPrecisionPolicy, doc_QSqlDriver_setNumericalPrecisionPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_numericalPrecisionPolicy, "numericalPrecisionPolicy(self) -> QSql.NumericalPrecisionPolicy");

extern "C" {static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QSql::NumericalPrecisionPolicy sipRes;

            sipRes = sipCpp->numericalPrecisionPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_numericalPrecisionPolicy, doc_QSqlDriver_numericalPrecisionPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlDriver_dbmsType, "dbmsType(self) -> QSqlDriver.DbmsType");

extern "C" {static PyObject *meth_QSqlDriver_dbmsType(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_dbmsType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
             ::QSqlDriver::DbmsType sipRes;

            sipRes = sipCpp->dbmsType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSqlDriver_DbmsType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_dbmsType, doc_QSqlDriver_dbmsType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSqlDriver(void *, const sipTypeDef *);}
static void *cast_QSqlDriver(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSqlDriver *sipCpp = reinterpret_cast< ::QSqlDriver *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlDriver(void *, int);}
static void release_QSqlDriver(void *sipCppV, int)
{
     ::QSqlDriver *sipCpp = reinterpret_cast< ::QSqlDriver *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSqlDriver(sipSimpleWrapper *);}
static void dealloc_QSqlDriver(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSqlDriver *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSqlDriver(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSqlDriver(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlDriver(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlDriver *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSqlDriver(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlDriver[] = {{10, 0, 1}};


static PyMethodDef methods_QSqlDriver[] = {
    {sipName_beginTransaction, meth_QSqlDriver_beginTransaction, METH_VARARGS, doc_QSqlDriver_beginTransaction},
    {sipName_close, meth_QSqlDriver_close, METH_VARARGS, doc_QSqlDriver_close},
    {sipName_commitTransaction, meth_QSqlDriver_commitTransaction, METH_VARARGS, doc_QSqlDriver_commitTransaction},
    {sipName_createResult, meth_QSqlDriver_createResult, METH_VARARGS, doc_QSqlDriver_createResult},
    {sipName_dbmsType, meth_QSqlDriver_dbmsType, METH_VARARGS, doc_QSqlDriver_dbmsType},
    {sipName_escapeIdentifier, meth_QSqlDriver_escapeIdentifier, METH_VARARGS, doc_QSqlDriver_escapeIdentifier},
    {sipName_formatValue, SIP_MLMETH_CAST(meth_QSqlDriver_formatValue), METH_VARARGS|METH_KEYWORDS, doc_QSqlDriver_formatValue},
    {sipName_handle, meth_QSqlDriver_handle, METH_VARARGS, doc_QSqlDriver_handle},
    {sipName_hasFeature, meth_QSqlDriver_hasFeature, METH_VARARGS, doc_QSqlDriver_hasFeature},
    {sipName_isIdentifierEscaped, meth_QSqlDriver_isIdentifierEscaped, METH_VARARGS, doc_QSqlDriver_isIdentifierEscaped},
    {sipName_isOpen, meth_QSqlDriver_isOpen, METH_VARARGS, doc_QSqlDriver_isOpen},
    {sipName_isOpenError, meth_QSqlDriver_isOpenError, METH_VARARGS, doc_QSqlDriver_isOpenError},
    {sipName_lastError, meth_QSqlDriver_lastError, METH_VARARGS, doc_QSqlDriver_lastError},
    {sipName_numericalPrecisionPolicy, meth_QSqlDriver_numericalPrecisionPolicy, METH_VARARGS, doc_QSqlDriver_numericalPrecisionPolicy},
    {sipName_open, SIP_MLMETH_CAST(meth_QSqlDriver_open), METH_VARARGS|METH_KEYWORDS, doc_QSqlDriver_open},
    {sipName_primaryIndex, meth_QSqlDriver_primaryIndex, METH_VARARGS, doc_QSqlDriver_primaryIndex},
    {sipName_record, meth_QSqlDriver_record, METH_VARARGS, doc_QSqlDriver_record},
    {sipName_rollbackTransaction, meth_QSqlDriver_rollbackTransaction, METH_VARARGS, doc_QSqlDriver_rollbackTransaction},
    {sipName_setLastError, meth_QSqlDriver_setLastError, METH_VARARGS, doc_QSqlDriver_setLastError},
    {sipName_setNumericalPrecisionPolicy, meth_QSqlDriver_setNumericalPrecisionPolicy, METH_VARARGS, doc_QSqlDriver_setNumericalPrecisionPolicy},
    {sipName_setOpen, meth_QSqlDriver_setOpen, METH_VARARGS, doc_QSqlDriver_setOpen},
    {sipName_setOpenError, meth_QSqlDriver_setOpenError, METH_VARARGS, doc_QSqlDriver_setOpenError},
    {sipName_sqlStatement, meth_QSqlDriver_sqlStatement, METH_VARARGS, doc_QSqlDriver_sqlStatement},
    {sipName_stripDelimiters, meth_QSqlDriver_stripDelimiters, METH_VARARGS, doc_QSqlDriver_stripDelimiters},
    {sipName_subscribeToNotification, meth_QSqlDriver_subscribeToNotification, METH_VARARGS, doc_QSqlDriver_subscribeToNotification},
    {sipName_subscribedToNotifications, meth_QSqlDriver_subscribedToNotifications, METH_VARARGS, doc_QSqlDriver_subscribedToNotifications},
    {sipName_tables, meth_QSqlDriver_tables, METH_VARARGS, doc_QSqlDriver_tables},
    {sipName_unsubscribeFromNotification, meth_QSqlDriver_unsubscribeFromNotification, METH_VARARGS, doc_QSqlDriver_unsubscribeFromNotification}
};

static sipEnumMemberDef enummembers_QSqlDriver[] = {
    {sipName_BLOB, static_cast<int>( ::QSqlDriver::BLOB), 10},
    {sipName_BatchOperations, static_cast<int>( ::QSqlDriver::BatchOperations), 10},
    {sipName_DB2, static_cast<int>( ::QSqlDriver::DB2), 9},
    {sipName_DeleteStatement, static_cast<int>( ::QSqlDriver::DeleteStatement), 13},
    {sipName_EventNotifications, static_cast<int>( ::QSqlDriver::EventNotifications), 10},
    {sipName_FieldName, static_cast<int>( ::QSqlDriver::FieldName), 11},
    {sipName_FinishQuery, static_cast<int>( ::QSqlDriver::FinishQuery), 10},
    {sipName_InsertStatement, static_cast<int>( ::QSqlDriver::InsertStatement), 13},
    {sipName_Interbase, static_cast<int>( ::QSqlDriver::Interbase), 9},
    {sipName_LastInsertId, static_cast<int>( ::QSqlDriver::LastInsertId), 10},
    {sipName_LowPrecisionNumbers, static_cast<int>( ::QSqlDriver::LowPrecisionNumbers), 10},
    {sipName_MSSqlServer, static_cast<int>( ::QSqlDriver::MSSqlServer), 9},
    {sipName_MultipleResultSets, static_cast<int>( ::QSqlDriver::MultipleResultSets), 10},
    {sipName_MySqlServer, static_cast<int>( ::QSqlDriver::MySqlServer), 9},
    {sipName_NamedPlaceholders, static_cast<int>( ::QSqlDriver::NamedPlaceholders), 10},
    {sipName_Oracle, static_cast<int>( ::QSqlDriver::Oracle), 9},
    {sipName_OtherSource, static_cast<int>( ::QSqlDriver::OtherSource), 12},
    {sipName_PositionalPlaceholders, static_cast<int>( ::QSqlDriver::PositionalPlaceholders), 10},
    {sipName_PostgreSQL, static_cast<int>( ::QSqlDriver::PostgreSQL), 9},
    {sipName_PreparedQueries, static_cast<int>( ::QSqlDriver::PreparedQueries), 10},
    {sipName_QuerySize, static_cast<int>( ::QSqlDriver::QuerySize), 10},
    {sipName_SQLite, static_cast<int>( ::QSqlDriver::SQLite), 9},
    {sipName_SelectStatement, static_cast<int>( ::QSqlDriver::SelectStatement), 13},
    {sipName_SelfSource, static_cast<int>( ::QSqlDriver::SelfSource), 12},
    {sipName_SimpleLocking, static_cast<int>( ::QSqlDriver::SimpleLocking), 10},
    {sipName_Sybase, static_cast<int>( ::QSqlDriver::Sybase), 9},
    {sipName_TableName, static_cast<int>( ::QSqlDriver::TableName), 11},
    {sipName_Transactions, static_cast<int>( ::QSqlDriver::Transactions), 10},
    {sipName_Unicode, static_cast<int>( ::QSqlDriver::Unicode), 10},
    {sipName_UnknownDbms, static_cast<int>( ::QSqlDriver::UnknownDbms), 9},
    {sipName_UnknownSource, static_cast<int>( ::QSqlDriver::UnknownSource), 12},
    {sipName_UpdateStatement, static_cast<int>( ::QSqlDriver::UpdateStatement), 13},
    {sipName_WhereStatement, static_cast<int>( ::QSqlDriver::WhereStatement), 13},
};

PyDoc_STRVAR(doc_QSqlDriver, "\1QSqlDriver(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSqlDriver[] = {
    {"notification(QString)", "\1notification(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"notification(QString,QSqlDriver::NotificationSource,QVariant)", "\1notification(self, str, QSqlDriver.NotificationSource, Any)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSqlDriver = {
    & ::QSqlDriver::staticMetaObject,
    0,
    signals_QSqlDriver,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtSql_QSqlDriver = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSqlDriver,
        SIP_NULLPTR,
        &plugin_QSqlDriver
    },
    {
        sipNameNr_QSqlDriver,
        {0, 0, 1},
        28, methods_QSqlDriver,
        33, enummembers_QSqlDriver,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSqlDriver,
    -1,
    -1,
    supers_QSqlDriver,
    SIP_NULLPTR,
    init_type_QSqlDriver,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSqlDriver,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSqlDriver,
    cast_QSqlDriver,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
