/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlField.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlField.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtSql/sipQtSqlQSqlField.cpp"


PyDoc_STRVAR(doc_QSqlField_setValue, "setValue(self, Any)");

extern "C" {static PyObject *meth_QSqlField_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setValue, doc_QSqlField_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_value, "value(self) -> Any");

extern "C" {static PyObject *meth_QSqlField_value(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_value, doc_QSqlField_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QSqlField_setName(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setName, doc_QSqlField_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_name, "name(self) -> str");

extern "C" {static PyObject *meth_QSqlField_name(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_name, doc_QSqlField_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSqlField_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_isNull, doc_QSqlField_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QSqlField_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setReadOnly, doc_QSqlField_setReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QSqlField_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_isReadOnly, doc_QSqlField_isReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_clear, "clear(self)");

extern "C" {static PyObject *meth_QSqlField_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_clear, doc_QSqlField_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_type, "type(self) -> QVariant.Type");

extern "C" {static PyObject *meth_QSqlField_type(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QVariant::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_type, doc_QSqlField_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_isAutoValue, "isAutoValue(self) -> bool");

extern "C" {static PyObject *meth_QSqlField_isAutoValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_isAutoValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAutoValue();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_isAutoValue, doc_QSqlField_isAutoValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setType, "setType(self, QVariant.Type)");

extern "C" {static PyObject *meth_QSqlField_setType(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant::Type a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QVariant_Type, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setType, doc_QSqlField_setType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setRequiredStatus, "setRequiredStatus(self, QSqlField.RequiredStatus)");

extern "C" {static PyObject *meth_QSqlField_setRequiredStatus(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setRequiredStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSqlField::RequiredStatus a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QSqlField_RequiredStatus, &a0))
        {
            sipCpp->setRequiredStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setRequiredStatus, doc_QSqlField_setRequiredStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setRequired, "setRequired(self, bool)");

extern "C" {static PyObject *meth_QSqlField_setRequired(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setRequired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setRequired(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setRequired, doc_QSqlField_setRequired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setLength, "setLength(self, int)");

extern "C" {static PyObject *meth_QSqlField_setLength(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setLength, doc_QSqlField_setLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setPrecision, "setPrecision(self, int)");

extern "C" {static PyObject *meth_QSqlField_setPrecision(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setPrecision, doc_QSqlField_setPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setDefaultValue, "setDefaultValue(self, Any)");

extern "C" {static PyObject *meth_QSqlField_setDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setDefaultValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setDefaultValue, doc_QSqlField_setDefaultValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setSqlType, "setSqlType(self, int)");

extern "C" {static PyObject *meth_QSqlField_setSqlType(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setSqlType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setSqlType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setSqlType, doc_QSqlField_setSqlType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setGenerated, "setGenerated(self, bool)");

extern "C" {static PyObject *meth_QSqlField_setGenerated(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setGenerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setGenerated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setGenerated, doc_QSqlField_setGenerated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setAutoValue, "setAutoValue(self, bool)");

extern "C" {static PyObject *meth_QSqlField_setAutoValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setAutoValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlField, &sipCpp, &a0))
        {
            sipCpp->setAutoValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setAutoValue, doc_QSqlField_setAutoValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_requiredStatus, "requiredStatus(self) -> QSqlField.RequiredStatus");

extern "C" {static PyObject *meth_QSqlField_requiredStatus(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_requiredStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QSqlField::RequiredStatus sipRes;

            sipRes = sipCpp->requiredStatus();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSqlField_RequiredStatus);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_requiredStatus, doc_QSqlField_requiredStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_length, "length(self) -> int");

extern "C" {static PyObject *meth_QSqlField_length(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_length, doc_QSqlField_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_precision, "precision(self) -> int");

extern "C" {static PyObject *meth_QSqlField_precision(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_precision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->precision();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_precision, doc_QSqlField_precision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_defaultValue, "defaultValue(self) -> Any");

extern "C" {static PyObject *meth_QSqlField_defaultValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_defaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->defaultValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_defaultValue, doc_QSqlField_defaultValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_typeID, "typeID(self) -> int");

extern "C" {static PyObject *meth_QSqlField_typeID(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_typeID(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->typeID();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_typeID, doc_QSqlField_typeID);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_isGenerated, "isGenerated(self) -> bool");

extern "C" {static PyObject *meth_QSqlField_isGenerated(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_isGenerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGenerated();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_isGenerated, doc_QSqlField_isGenerated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSqlField_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_isValid, doc_QSqlField_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_setTableName, "setTableName(self, str)");

extern "C" {static PyObject *meth_QSqlField_setTableName(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_setTableName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlField, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTableName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_setTableName, doc_QSqlField_setTableName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSqlField_tableName, "tableName(self) -> str");

extern "C" {static PyObject *meth_QSqlField_tableName(PyObject *, PyObject *);}
static PyObject *meth_QSqlField_tableName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlField, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tableName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSqlField, sipName_tableName, doc_QSqlField_tableName);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSqlField___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSqlField___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSqlField *sipCpp = reinterpret_cast< ::QSqlField *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSqlField));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSqlField, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSqlField::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtSql, ne_slot, sipType_QSqlField, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSqlField___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSqlField___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSqlField *sipCpp = reinterpret_cast< ::QSqlField *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSqlField));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSqlField* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSqlField, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSqlField::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtSql, eq_slot, sipType_QSqlField, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlField(void *, int);}
static void release_QSqlField(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSqlField *>(sipCppV);
}


extern "C" {static void *array_QSqlField(Py_ssize_t);}
static void *array_QSqlField(Py_ssize_t sipNrElem)
{
    return new  ::QSqlField[sipNrElem];
}


extern "C" {static void assign_QSqlField(void *, Py_ssize_t, void *);}
static void assign_QSqlField(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSqlField *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSqlField *>(sipSrc);
}


extern "C" {static void *copy_QSqlField(const void *, Py_ssize_t);}
static void *copy_QSqlField(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QSqlField(reinterpret_cast<const  ::QSqlField *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSqlField(sipSimpleWrapper *);}
static void dealloc_QSqlField(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSqlField(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSqlField(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlField(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSqlField *sipCpp = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
         ::QVariant::Type a1 = QVariant::Invalid;

        static const char *sipKwdList[] = {
            sipName_fieldName,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1E", sipType_QString,&a0, &a0State, sipType_QVariant_Type, &a1))
        {
            sipCpp = new  ::QSqlField(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QVariant::Type a1;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1EJ1", sipType_QString,&a0, &a0State, sipType_QVariant_Type, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp = new  ::QSqlField(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QSqlField* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSqlField, &a0))
        {
            sipCpp = new  ::QSqlField(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSqlField[] = {
    {(void *)slot_QSqlField___ne__, ne_slot},
    {(void *)slot_QSqlField___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSqlField[] = {
    {sipName_clear, meth_QSqlField_clear, METH_VARARGS, doc_QSqlField_clear},
    {sipName_defaultValue, meth_QSqlField_defaultValue, METH_VARARGS, doc_QSqlField_defaultValue},
    {sipName_isAutoValue, meth_QSqlField_isAutoValue, METH_VARARGS, doc_QSqlField_isAutoValue},
    {sipName_isGenerated, meth_QSqlField_isGenerated, METH_VARARGS, doc_QSqlField_isGenerated},
    {sipName_isNull, meth_QSqlField_isNull, METH_VARARGS, doc_QSqlField_isNull},
    {sipName_isReadOnly, meth_QSqlField_isReadOnly, METH_VARARGS, doc_QSqlField_isReadOnly},
    {sipName_isValid, meth_QSqlField_isValid, METH_VARARGS, doc_QSqlField_isValid},
    {sipName_length, meth_QSqlField_length, METH_VARARGS, doc_QSqlField_length},
    {sipName_name, meth_QSqlField_name, METH_VARARGS, doc_QSqlField_name},
    {sipName_precision, meth_QSqlField_precision, METH_VARARGS, doc_QSqlField_precision},
    {sipName_requiredStatus, meth_QSqlField_requiredStatus, METH_VARARGS, doc_QSqlField_requiredStatus},
    {sipName_setAutoValue, meth_QSqlField_setAutoValue, METH_VARARGS, doc_QSqlField_setAutoValue},
    {sipName_setDefaultValue, meth_QSqlField_setDefaultValue, METH_VARARGS, doc_QSqlField_setDefaultValue},
    {sipName_setGenerated, meth_QSqlField_setGenerated, METH_VARARGS, doc_QSqlField_setGenerated},
    {sipName_setLength, meth_QSqlField_setLength, METH_VARARGS, doc_QSqlField_setLength},
    {sipName_setName, meth_QSqlField_setName, METH_VARARGS, doc_QSqlField_setName},
    {sipName_setPrecision, meth_QSqlField_setPrecision, METH_VARARGS, doc_QSqlField_setPrecision},
    {sipName_setReadOnly, meth_QSqlField_setReadOnly, METH_VARARGS, doc_QSqlField_setReadOnly},
    {sipName_setRequired, meth_QSqlField_setRequired, METH_VARARGS, doc_QSqlField_setRequired},
    {sipName_setRequiredStatus, meth_QSqlField_setRequiredStatus, METH_VARARGS, doc_QSqlField_setRequiredStatus},
    {sipName_setSqlType, meth_QSqlField_setSqlType, METH_VARARGS, doc_QSqlField_setSqlType},
    {sipName_setTableName, meth_QSqlField_setTableName, METH_VARARGS, doc_QSqlField_setTableName},
    {sipName_setType, meth_QSqlField_setType, METH_VARARGS, doc_QSqlField_setType},
    {sipName_setValue, meth_QSqlField_setValue, METH_VARARGS, doc_QSqlField_setValue},
    {sipName_tableName, meth_QSqlField_tableName, METH_VARARGS, doc_QSqlField_tableName},
    {sipName_type, meth_QSqlField_type, METH_VARARGS, doc_QSqlField_type},
    {sipName_typeID, meth_QSqlField_typeID, METH_VARARGS, doc_QSqlField_typeID},
    {sipName_value, meth_QSqlField_value, METH_VARARGS, doc_QSqlField_value}
};

static sipEnumMemberDef enummembers_QSqlField[] = {
    {sipName_Optional, static_cast<int>( ::QSqlField::Optional), 18},
    {sipName_Required, static_cast<int>( ::QSqlField::Required), 18},
    {sipName_Unknown, static_cast<int>( ::QSqlField::Unknown), 18},
};

PyDoc_STRVAR(doc_QSqlField, "\1QSqlField(fieldName: str = '', type: QVariant.Type = QVariant.Invalid)\n"
"QSqlField(str, QVariant.Type, str)\n"
"QSqlField(QSqlField)");


static pyqt5ClassPluginDef plugin_QSqlField = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtSql_QSqlField = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSqlField,
        SIP_NULLPTR,
        &plugin_QSqlField
    },
    {
        sipNameNr_QSqlField,
        {0, 0, 1},
        28, methods_QSqlField,
        3, enummembers_QSqlField,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSqlField,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSqlField,
    init_type_QSqlField,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSqlField,
    assign_QSqlField,
    array_QSqlField,
    copy_QSqlField,
    release_QSqlField,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
