/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusservicewatcher.sip"
#include <qdbusservicewatcher.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusservicewatcher.sip"
#include <qdbusservicewatcher.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusServiceWatcher.cpp"


class sipQDBusServiceWatcher : public  ::QDBusServiceWatcher
{
public:
    sipQDBusServiceWatcher( ::QObject*);
    sipQDBusServiceWatcher(const  ::QString&,const  ::QDBusConnection&, ::QDBusServiceWatcher::WatchMode, ::QObject*);
    virtual ~sipQDBusServiceWatcher();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDBusServiceWatcher(const sipQDBusServiceWatcher &);
    sipQDBusServiceWatcher &operator = (const sipQDBusServiceWatcher &);

    char sipPyMethods[7];
};

sipQDBusServiceWatcher::sipQDBusServiceWatcher( ::QObject*a0):  ::QDBusServiceWatcher(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDBusServiceWatcher::sipQDBusServiceWatcher(const  ::QString& a0,const  ::QDBusConnection& a1, ::QDBusServiceWatcher::WatchMode a2, ::QObject*a3):  ::QDBusServiceWatcher(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDBusServiceWatcher::~sipQDBusServiceWatcher()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDBusServiceWatcher::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtDBus_qt_metaobject(sipPySelf,sipType_QDBusServiceWatcher);

    return  ::QDBusServiceWatcher::metaObject();
}

int sipQDBusServiceWatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDBusServiceWatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtDBus_qt_metacall(sipPySelf,sipType_QDBusServiceWatcher,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQDBusServiceWatcher::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtDBus_qt_metacast(sipPySelf, sipType_QDBusServiceWatcher, _clname, &sipCpp) ? sipCpp :  ::QDBusServiceWatcher::qt_metacast(_clname));
}

bool sipQDBusServiceWatcher::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QDBusServiceWatcher::event(a0);

    extern bool sipVH_QtDBus_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDBus_5(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDBusServiceWatcher::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QDBusServiceWatcher::eventFilter(a0,a1);

    extern bool sipVH_QtDBus_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtDBus_4(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDBusServiceWatcher::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QDBusServiceWatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtDBus_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtDBus_3(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QDBusServiceWatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtDBus_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtDBus_2(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QDBusServiceWatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtDBus_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDBus_1(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QDBusServiceWatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtDBus_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtDBus_0(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDBusServiceWatcher::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QDBusServiceWatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtDBus_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtDBus_0(sipGILState, sipImportedVirtErrorHandlers_QtDBus_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_watchedServices, "watchedServices(self) -> List[str]");

extern "C" {static PyObject *meth_QDBusServiceWatcher_watchedServices(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_watchedServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->watchedServices());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_watchedServices, doc_QDBusServiceWatcher_watchedServices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setWatchedServices, "setWatchedServices(self, Iterable[str])");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setWatchedServices(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setWatchedServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setWatchedServices(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setWatchedServices, doc_QDBusServiceWatcher_setWatchedServices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_addWatchedService, "addWatchedService(self, str)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_addWatchedService(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_addWatchedService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addWatchedService(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_addWatchedService, doc_QDBusServiceWatcher_addWatchedService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_removeWatchedService, "removeWatchedService(self, str) -> bool");

extern "C" {static PyObject *meth_QDBusServiceWatcher_removeWatchedService(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_removeWatchedService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->removeWatchedService(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_removeWatchedService, doc_QDBusServiceWatcher_removeWatchedService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_watchMode, "watchMode(self) -> QDBusServiceWatcher.WatchMode");

extern "C" {static PyObject *meth_QDBusServiceWatcher_watchMode(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_watchMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
             ::QDBusServiceWatcher::WatchMode*sipRes;

            sipRes = new  ::QDBusServiceWatcher::WatchMode(sipCpp->watchMode());

            return sipConvertFromNewType(sipRes,sipType_QDBusServiceWatcher_WatchMode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_watchMode, doc_QDBusServiceWatcher_watchMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setWatchMode, "setWatchMode(self, Union[QDBusServiceWatcher.WatchMode, QDBusServiceWatcher.WatchModeFlag])");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setWatchMode(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setWatchMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDBusServiceWatcher::WatchMode* a0;
        int a0State = 0;
         ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QDBusServiceWatcher_WatchMode, &a0, &a0State))
        {
            sipCpp->setWatchMode(*a0);
            sipReleaseType(a0,sipType_QDBusServiceWatcher_WatchMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setWatchMode, doc_QDBusServiceWatcher_setWatchMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_connection, "connection(self) -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusServiceWatcher_connection(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_connection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp))
        {
             ::QDBusConnection*sipRes;

            sipRes = new  ::QDBusConnection(sipCpp->connection());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_connection, doc_QDBusServiceWatcher_connection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusServiceWatcher_setConnection, "setConnection(self, QDBusConnection)");

extern "C" {static PyObject *meth_QDBusServiceWatcher_setConnection(PyObject *, PyObject *);}
static PyObject *meth_QDBusServiceWatcher_setConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusConnection* a0;
         ::QDBusServiceWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDBusServiceWatcher, &sipCpp, sipType_QDBusConnection, &a0))
        {
            sipCpp->setConnection(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusServiceWatcher, sipName_setConnection, doc_QDBusServiceWatcher_setConnection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDBusServiceWatcher(void *, const sipTypeDef *);}
static void *cast_QDBusServiceWatcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDBusServiceWatcher *sipCpp = reinterpret_cast< ::QDBusServiceWatcher *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusServiceWatcher(void *, int);}
static void release_QDBusServiceWatcher(void *sipCppV, int)
{
     ::QDBusServiceWatcher *sipCpp = reinterpret_cast< ::QDBusServiceWatcher *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QDBusServiceWatcher(Py_ssize_t);}
static void *array_QDBusServiceWatcher(Py_ssize_t sipNrElem)
{
    return new  ::QDBusServiceWatcher[sipNrElem];
}


extern "C" {static void dealloc_QDBusServiceWatcher(sipSimpleWrapper *);}
static void dealloc_QDBusServiceWatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDBusServiceWatcher *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDBusServiceWatcher(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDBusServiceWatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusServiceWatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDBusServiceWatcher *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQDBusServiceWatcher(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnection* a1;
         ::QDBusServiceWatcher::WatchMode a2def = QDBusServiceWatcher::WatchForOwnerChange;
         ::QDBusServiceWatcher::WatchMode* a2 = &a2def;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_watchMode,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9|J1JH", sipType_QString,&a0, &a0State, sipType_QDBusConnection, &a1, sipType_QDBusServiceWatcher_WatchMode, &a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQDBusServiceWatcher(*a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QDBusServiceWatcher_WatchMode,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusServiceWatcher[] = {{5, 0, 1}};


static PyMethodDef methods_QDBusServiceWatcher[] = {
    {sipName_addWatchedService, meth_QDBusServiceWatcher_addWatchedService, METH_VARARGS, doc_QDBusServiceWatcher_addWatchedService},
    {sipName_connection, meth_QDBusServiceWatcher_connection, METH_VARARGS, doc_QDBusServiceWatcher_connection},
    {sipName_removeWatchedService, meth_QDBusServiceWatcher_removeWatchedService, METH_VARARGS, doc_QDBusServiceWatcher_removeWatchedService},
    {sipName_setConnection, meth_QDBusServiceWatcher_setConnection, METH_VARARGS, doc_QDBusServiceWatcher_setConnection},
    {sipName_setWatchMode, meth_QDBusServiceWatcher_setWatchMode, METH_VARARGS, doc_QDBusServiceWatcher_setWatchMode},
    {sipName_setWatchedServices, meth_QDBusServiceWatcher_setWatchedServices, METH_VARARGS, doc_QDBusServiceWatcher_setWatchedServices},
    {sipName_watchMode, meth_QDBusServiceWatcher_watchMode, METH_VARARGS, doc_QDBusServiceWatcher_watchMode},
    {sipName_watchedServices, meth_QDBusServiceWatcher_watchedServices, METH_VARARGS, doc_QDBusServiceWatcher_watchedServices}
};

static sipEnumMemberDef enummembers_QDBusServiceWatcher[] = {
    {sipName_WatchForOwnerChange, static_cast<int>( ::QDBusServiceWatcher::WatchForOwnerChange), 32},
    {sipName_WatchForRegistration, static_cast<int>( ::QDBusServiceWatcher::WatchForRegistration), 32},
    {sipName_WatchForUnregistration, static_cast<int>( ::QDBusServiceWatcher::WatchForUnregistration), 32},
};

PyDoc_STRVAR(doc_QDBusServiceWatcher, "\1QDBusServiceWatcher(parent: QObject = None)\n"
"QDBusServiceWatcher(str, QDBusConnection, watchMode: Union[QDBusServiceWatcher.WatchMode, QDBusServiceWatcher.WatchModeFlag] = QDBusServiceWatcher.WatchForOwnerChange, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDBusServiceWatcher[] = {
    {"serviceOwnerChanged(QString,QString,QString)", "\1serviceOwnerChanged(self, str, str, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceUnregistered(QString)", "\1serviceUnregistered(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceRegistered(QString)", "\1serviceRegistered(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDBusServiceWatcher = {
    & ::QDBusServiceWatcher::staticMetaObject,
    0,
    signals_QDBusServiceWatcher,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtDBus_QDBusServiceWatcher = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDBusServiceWatcher,
        SIP_NULLPTR,
        &plugin_QDBusServiceWatcher
    },
    {
        sipNameNr_QDBusServiceWatcher,
        {0, 0, 1},
        8, methods_QDBusServiceWatcher,
        3, enummembers_QDBusServiceWatcher,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDBusServiceWatcher,
    -1,
    -1,
    supers_QDBusServiceWatcher,
    SIP_NULLPTR,
    init_type_QDBusServiceWatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDBusServiceWatcher,
    SIP_NULLPTR,
    array_QDBusServiceWatcher,
    SIP_NULLPTR,
    release_QDBusServiceWatcher,
    cast_QDBusServiceWatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
