/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusconnectioninterface.sip"
#include <qdbusconnectioninterface.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"

#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusmessage.sip"
#include <qdbusmessage.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 91 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 203 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 121 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 64 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbuspendingcall.sip"
#include <qdbuspendingcall.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"


PyDoc_STRVAR(doc_QDBusConnectionInterface_registeredServiceNames, "registeredServiceNames(self) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp))
        {
            QDBusReply< ::QStringList>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply< ::QStringList>(sipCpp->registeredServiceNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registeredServiceNames, doc_QDBusConnectionInterface_registeredServiceNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_isServiceRegistered, "isServiceRegistered(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<bool>(sipCpp->isServiceRegistered(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_isServiceRegistered, doc_QDBusConnectionInterface_isServiceRegistered);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceOwner, "serviceOwner(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply< ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply< ::QString>(sipCpp->serviceOwner(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceOwner, doc_QDBusConnectionInterface_serviceOwner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_unregisterService, "unregisterService(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<bool>(sipCpp->unregisterService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_unregisterService, doc_QDBusConnectionInterface_unregisterService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_registerService, "registerService(self, str, qoption: QDBusConnectionInterface.ServiceQueueOptions = QDBusConnectionInterface.DontQueueService, roption: QDBusConnectionInterface.ServiceReplacementOptions = QDBusConnectionInterface.DontAllowReplacement) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface::ServiceQueueOptions a1 = QDBusConnectionInterface::DontQueueService;
         ::QDBusConnectionInterface::ServiceReplacementOptions a2 = QDBusConnectionInterface::DontAllowReplacement;
         ::QDBusConnectionInterface *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_qoption,
            sipName_roption,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|EE", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDBusConnectionInterface_ServiceQueueOptions, &a1, sipType_QDBusConnectionInterface_ServiceReplacementOptions, &a2))
        {
             ::QDBusReply< ::QDBusConnectionInterface::RegisterServiceReply>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply< ::QDBusConnectionInterface::RegisterServiceReply>(sipCpp->registerService(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QDBusConnectionInterface_RegisterServiceReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registerService, doc_QDBusConnectionInterface_registerService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_servicePid, "servicePid(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<uint>(sipCpp->servicePid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_servicePid, doc_QDBusConnectionInterface_servicePid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceUid, "serviceUid(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<uint>(sipCpp->serviceUid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceUid, doc_QDBusConnectionInterface_serviceUid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_startService, "startService(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_startService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_startService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<void>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<void>(sipCpp->startService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0400,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_startService, doc_QDBusConnectionInterface_startService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDBusConnectionInterface::connectNotify(*a0) : sipCpp->connectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_connectNotify, doc_QDBusConnectionInterface_connectNotify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDBusConnectionInterface::disconnectNotify(*a0) : sipCpp->disconnectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_disconnectNotify, doc_QDBusConnectionInterface_disconnectNotify);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDBusConnectionInterface(void *, const sipTypeDef *);}
static void *cast_QDBusConnectionInterface(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDBusConnectionInterface *sipCpp = reinterpret_cast< ::QDBusConnectionInterface *>(sipCppV);

    if (targetType == sipType_QDBusAbstractInterface)
        return static_cast< ::QDBusAbstractInterface *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusConnectionInterface(void *, int);}
static void release_QDBusConnectionInterface(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusConnectionInterface[] = {{3, 255, 1}};


static PyMethodDef methods_QDBusConnectionInterface[] = {
    {sipName_connectNotify, meth_QDBusConnectionInterface_connectNotify, METH_VARARGS, doc_QDBusConnectionInterface_connectNotify},
    {sipName_disconnectNotify, meth_QDBusConnectionInterface_disconnectNotify, METH_VARARGS, doc_QDBusConnectionInterface_disconnectNotify},
    {sipName_isServiceRegistered, meth_QDBusConnectionInterface_isServiceRegistered, METH_VARARGS, doc_QDBusConnectionInterface_isServiceRegistered},
    {sipName_registerService, SIP_MLMETH_CAST(meth_QDBusConnectionInterface_registerService), METH_VARARGS|METH_KEYWORDS, doc_QDBusConnectionInterface_registerService},
    {sipName_registeredServiceNames, meth_QDBusConnectionInterface_registeredServiceNames, METH_VARARGS, doc_QDBusConnectionInterface_registeredServiceNames},
    {sipName_serviceOwner, meth_QDBusConnectionInterface_serviceOwner, METH_VARARGS, doc_QDBusConnectionInterface_serviceOwner},
    {sipName_servicePid, meth_QDBusConnectionInterface_servicePid, METH_VARARGS, doc_QDBusConnectionInterface_servicePid},
    {sipName_serviceUid, meth_QDBusConnectionInterface_serviceUid, METH_VARARGS, doc_QDBusConnectionInterface_serviceUid},
    {sipName_startService, meth_QDBusConnectionInterface_startService, METH_VARARGS, doc_QDBusConnectionInterface_startService},
    {sipName_unregisterService, meth_QDBusConnectionInterface_unregisterService, METH_VARARGS, doc_QDBusConnectionInterface_unregisterService}
};

static sipEnumMemberDef enummembers_QDBusConnectionInterface[] = {
    {sipName_AllowReplacement, static_cast<int>( ::QDBusConnectionInterface::AllowReplacement), 15},
    {sipName_DontAllowReplacement, static_cast<int>( ::QDBusConnectionInterface::DontAllowReplacement), 15},
    {sipName_DontQueueService, static_cast<int>( ::QDBusConnectionInterface::DontQueueService), 14},
    {sipName_QueueService, static_cast<int>( ::QDBusConnectionInterface::QueueService), 14},
    {sipName_ReplaceExistingService, static_cast<int>( ::QDBusConnectionInterface::ReplaceExistingService), 14},
    {sipName_ServiceNotRegistered, static_cast<int>( ::QDBusConnectionInterface::ServiceNotRegistered), 13},
    {sipName_ServiceQueued, static_cast<int>( ::QDBusConnectionInterface::ServiceQueued), 13},
    {sipName_ServiceRegistered, static_cast<int>( ::QDBusConnectionInterface::ServiceRegistered), 13},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDBusConnectionInterface[] = {
    {"callWithCallbackFailed(QDBusError,QDBusMessage)", "\1callWithCallbackFailed(self, QDBusError, QDBusMessage)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceOwnerChanged(QString,QString,QString)", "\1serviceOwnerChanged(self, str, str, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceUnregistered(QString)", "\1serviceUnregistered(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceRegistered(QString)", "\1serviceRegistered(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDBusConnectionInterface = {
    & ::QDBusConnectionInterface::staticMetaObject,
    0,
    signals_QDBusConnectionInterface,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtDBus_QDBusConnectionInterface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDBusConnectionInterface,
        SIP_NULLPTR,
        &plugin_QDBusConnectionInterface
    },
    {
        sipNameNr_QDBusConnectionInterface,
        {0, 0, 1},
        10, methods_QDBusConnectionInterface,
        8, enummembers_QDBusConnectionInterface,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QDBusConnectionInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDBusConnectionInterface,
    cast_QDBusConnectionInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
