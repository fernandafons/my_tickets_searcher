/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtDBus/qdbusunixfiledescriptor.sip"
#include <qdbusunixfiledescriptor.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtDBus/sipQtDBusQDBusUnixFileDescriptor.cpp"



PyDoc_STRVAR(doc_QDBusUnixFileDescriptor_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QDBusUnixFileDescriptor_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDBusUnixFileDescriptor_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusUnixFileDescriptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusUnixFileDescriptor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusUnixFileDescriptor, sipName_isValid, doc_QDBusUnixFileDescriptor_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusUnixFileDescriptor_fileDescriptor, "fileDescriptor(self) -> int");

extern "C" {static PyObject *meth_QDBusUnixFileDescriptor_fileDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QDBusUnixFileDescriptor_fileDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDBusUnixFileDescriptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusUnixFileDescriptor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fileDescriptor();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusUnixFileDescriptor, sipName_fileDescriptor, doc_QDBusUnixFileDescriptor_fileDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusUnixFileDescriptor_setFileDescriptor, "setFileDescriptor(self, int)");

extern "C" {static PyObject *meth_QDBusUnixFileDescriptor_setFileDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QDBusUnixFileDescriptor_setFileDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDBusUnixFileDescriptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDBusUnixFileDescriptor, &sipCpp, &a0))
        {
            sipCpp->setFileDescriptor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusUnixFileDescriptor, sipName_setFileDescriptor, doc_QDBusUnixFileDescriptor_setFileDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusUnixFileDescriptor_isSupported, "isSupported() -> bool");

extern "C" {static PyObject *meth_QDBusUnixFileDescriptor_isSupported(PyObject *, PyObject *);}
static PyObject *meth_QDBusUnixFileDescriptor_isSupported(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QDBusUnixFileDescriptor::isSupported();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusUnixFileDescriptor, sipName_isSupported, doc_QDBusUnixFileDescriptor_isSupported);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDBusUnixFileDescriptor_swap, "swap(self, QDBusUnixFileDescriptor)");

extern "C" {static PyObject *meth_QDBusUnixFileDescriptor_swap(PyObject *, PyObject *);}
static PyObject *meth_QDBusUnixFileDescriptor_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDBusUnixFileDescriptor* a0;
         ::QDBusUnixFileDescriptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDBusUnixFileDescriptor, &sipCpp, sipType_QDBusUnixFileDescriptor, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDBusUnixFileDescriptor, sipName_swap, doc_QDBusUnixFileDescriptor_swap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusUnixFileDescriptor(void *, int);}
static void release_QDBusUnixFileDescriptor(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDBusUnixFileDescriptor *>(sipCppV);
}


extern "C" {static void *array_QDBusUnixFileDescriptor(Py_ssize_t);}
static void *array_QDBusUnixFileDescriptor(Py_ssize_t sipNrElem)
{
    return new  ::QDBusUnixFileDescriptor[sipNrElem];
}


extern "C" {static void assign_QDBusUnixFileDescriptor(void *, Py_ssize_t, void *);}
static void assign_QDBusUnixFileDescriptor(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDBusUnixFileDescriptor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDBusUnixFileDescriptor *>(sipSrc);
}


extern "C" {static void *copy_QDBusUnixFileDescriptor(const void *, Py_ssize_t);}
static void *copy_QDBusUnixFileDescriptor(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDBusUnixFileDescriptor(reinterpret_cast<const  ::QDBusUnixFileDescriptor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDBusUnixFileDescriptor(sipSimpleWrapper *);}
static void dealloc_QDBusUnixFileDescriptor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDBusUnixFileDescriptor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDBusUnixFileDescriptor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusUnixFileDescriptor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDBusUnixFileDescriptor *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDBusUnixFileDescriptor();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QDBusUnixFileDescriptor(a0);

            return sipCpp;
        }
    }

    {
        const  ::QDBusUnixFileDescriptor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDBusUnixFileDescriptor, &a0))
        {
            sipCpp = new  ::QDBusUnixFileDescriptor(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDBusUnixFileDescriptor[] = {
    {sipName_fileDescriptor, meth_QDBusUnixFileDescriptor_fileDescriptor, METH_VARARGS, doc_QDBusUnixFileDescriptor_fileDescriptor},
    {sipName_isSupported, meth_QDBusUnixFileDescriptor_isSupported, METH_VARARGS, doc_QDBusUnixFileDescriptor_isSupported},
    {sipName_isValid, meth_QDBusUnixFileDescriptor_isValid, METH_VARARGS, doc_QDBusUnixFileDescriptor_isValid},
    {sipName_setFileDescriptor, meth_QDBusUnixFileDescriptor_setFileDescriptor, METH_VARARGS, doc_QDBusUnixFileDescriptor_setFileDescriptor},
    {sipName_swap, meth_QDBusUnixFileDescriptor_swap, METH_VARARGS, doc_QDBusUnixFileDescriptor_swap}
};

PyDoc_STRVAR(doc_QDBusUnixFileDescriptor, "\1QDBusUnixFileDescriptor()\n"
"QDBusUnixFileDescriptor(int)\n"
"QDBusUnixFileDescriptor(QDBusUnixFileDescriptor)");


static pyqt5ClassPluginDef plugin_QDBusUnixFileDescriptor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtDBus_QDBusUnixFileDescriptor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDBusUnixFileDescriptor,
        SIP_NULLPTR,
        &plugin_QDBusUnixFileDescriptor
    },
    {
        sipNameNr_QDBusUnixFileDescriptor,
        {0, 0, 1},
        5, methods_QDBusUnixFileDescriptor,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDBusUnixFileDescriptor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDBusUnixFileDescriptor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDBusUnixFileDescriptor,
    assign_QDBusUnixFileDescriptor,
    array_QDBusUnixFileDescriptor,
    copy_QDBusUnixFileDescriptor,
    release_QDBusUnixFileDescriptor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
