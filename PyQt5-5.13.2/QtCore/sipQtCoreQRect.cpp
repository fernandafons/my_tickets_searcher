/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"


PyDoc_STRVAR(doc_QRect_normalized, "normalized(self) -> QRect");

extern "C" {static PyObject *meth_QRect_normalized(PyObject *, PyObject *);}
static PyObject *meth_QRect_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_normalized, doc_QRect_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveCenter, "moveCenter(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveCenter(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveCenter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveCenter, doc_QRect_moveCenter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_contains, "contains(self, QPoint, proper: bool = False) -> bool\n"
"contains(self, QRect, proper: bool = False) -> bool\n"
"contains(self, int, int, bool) -> bool\n"
"contains(self, int, int) -> bool");

extern "C" {static PyObject *meth_QRect_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRect_contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        bool a1 = 0;
        const  ::QRect *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_proper,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRect* a0;
        bool a1 = 0;
        const  ::QRect *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_proper,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        bool a2;
        const  ::QRect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Biib", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QRect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_contains, doc_QRect_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_intersects, "intersects(self, QRect) -> bool");

extern "C" {static PyObject *meth_QRect_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_intersects, doc_QRect_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QRect_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRect_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_isNull, doc_QRect_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRect_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRect_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_isEmpty, doc_QRect_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRect_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRect_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_isValid, doc_QRect_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_left, "left(self) -> int");

extern "C" {static PyObject *meth_QRect_left(PyObject *, PyObject *);}
static PyObject *meth_QRect_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->left();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_left, doc_QRect_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_top, "top(self) -> int");

extern "C" {static PyObject *meth_QRect_top(PyObject *, PyObject *);}
static PyObject *meth_QRect_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->top();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_top, doc_QRect_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_right, "right(self) -> int");

extern "C" {static PyObject *meth_QRect_right(PyObject *, PyObject *);}
static PyObject *meth_QRect_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->right();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_right, doc_QRect_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottom, "bottom(self) -> int");

extern "C" {static PyObject *meth_QRect_bottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottom();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottom, doc_QRect_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_x, "x(self) -> int");

extern "C" {static PyObject *meth_QRect_x(PyObject *, PyObject *);}
static PyObject *meth_QRect_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_x, doc_QRect_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_y, "y(self) -> int");

extern "C" {static PyObject *meth_QRect_y(PyObject *, PyObject *);}
static PyObject *meth_QRect_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_y, doc_QRect_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setLeft, "setLeft(self, int)");

extern "C" {static PyObject *meth_QRect_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setLeft, doc_QRect_setLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTop, "setTop(self, int)");

extern "C" {static PyObject *meth_QRect_setTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTop, doc_QRect_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setRight, "setRight(self, int)");

extern "C" {static PyObject *meth_QRect_setRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setRight, doc_QRect_setRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottom, "setBottom(self, int)");

extern "C" {static PyObject *meth_QRect_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottom, doc_QRect_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTopLeft, "setTopLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setTopLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTopLeft, doc_QRect_setTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottomRight, "setBottomRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBottomRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottomRight, doc_QRect_setBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTopRight, "setTopRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setTopRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTopRight, doc_QRect_setTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottomLeft, "setBottomLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBottomLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottomLeft, doc_QRect_setBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setX, "setX(self, int)");

extern "C" {static PyObject *meth_QRect_setX(PyObject *, PyObject *);}
static PyObject *meth_QRect_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setX, doc_QRect_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setY, "setY(self, int)");

extern "C" {static PyObject *meth_QRect_setY(PyObject *, PyObject *);}
static PyObject *meth_QRect_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setY, doc_QRect_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_topLeft, "topLeft(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->topLeft());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_topLeft, doc_QRect_topLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottomRight, "bottomRight(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->bottomRight());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottomRight, doc_QRect_bottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_topRight, "topRight(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_topRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_topRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->topRight());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_topRight, doc_QRect_topRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottomLeft, "bottomLeft(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_bottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->bottomLeft());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottomLeft, doc_QRect_bottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_center, "center(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_center(PyObject *, PyObject *);}
static PyObject *meth_QRect_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_center, doc_QRect_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_width, "width(self) -> int");

extern "C" {static PyObject *meth_QRect_width(PyObject *, PyObject *);}
static PyObject *meth_QRect_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_width, doc_QRect_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_height, "height(self) -> int");

extern "C" {static PyObject *meth_QRect_height(PyObject *, PyObject *);}
static PyObject *meth_QRect_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_height, doc_QRect_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QRect_size(PyObject *, PyObject *);}
static PyObject *meth_QRect_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_size, doc_QRect_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_translate, "translate(self, int, int)\n"
"translate(self, QPoint)");

extern "C" {static PyObject *meth_QRect_translate(PyObject *, PyObject *);}
static PyObject *meth_QRect_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_translate, doc_QRect_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_translated, "translated(self, int, int) -> QRect\n"
"translated(self, QPoint) -> QRect");

extern "C" {static PyObject *meth_QRect_translated(PyObject *, PyObject *);}
static PyObject *meth_QRect_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->translated(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_translated, doc_QRect_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTo, "moveTo(self, int, int)\n"
"moveTo(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTo(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTo, doc_QRect_moveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveLeft, "moveLeft(self, int)");

extern "C" {static PyObject *meth_QRect_moveLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveLeft, doc_QRect_moveLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTop, "moveTop(self, int)");

extern "C" {static PyObject *meth_QRect_moveTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTop, doc_QRect_moveTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveRight, "moveRight(self, int)");

extern "C" {static PyObject *meth_QRect_moveRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveRight, doc_QRect_moveRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottom, "moveBottom(self, int)");

extern "C" {static PyObject *meth_QRect_moveBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottom, doc_QRect_moveBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTopLeft, "moveTopLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTopLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTopLeft, doc_QRect_moveTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottomRight, "moveBottomRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveBottomRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottomRight, doc_QRect_moveBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTopRight, "moveTopRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTopRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTopRight, doc_QRect_moveTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottomLeft, "moveBottomLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveBottomLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottomLeft, doc_QRect_moveBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_getRect, "getRect(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QRect_getRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            sipCpp->getRect(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_getRect, doc_QRect_getRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setRect, "setRect(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_setRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setRect, doc_QRect_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_getCoords, "getCoords(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QRect_getCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_getCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            sipCpp->getCoords(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_getCoords, doc_QRect_getCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setCoords, "setCoords(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_setCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_setCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setCoords(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setCoords, doc_QRect_setCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_adjusted, "adjusted(self, int, int, int, int) -> QRect");

extern "C" {static PyObject *meth_QRect_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->adjusted(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_adjusted, doc_QRect_adjusted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_adjust, "adjust(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_adjust(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjust(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->adjust(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_adjust, doc_QRect_adjust);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QRect_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QRect_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setWidth, doc_QRect_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QRect_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setHeight, doc_QRect_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setSize, "setSize(self, QSize)");

extern "C" {static PyObject *meth_QRect_setSize(PyObject *, PyObject *);}
static PyObject *meth_QRect_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_setSize, doc_QRect_setSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_intersected, "intersected(self, QRect) -> QRect");

extern "C" {static PyObject *meth_QRect_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_intersected, doc_QRect_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_united, "united(self, QRect) -> QRect");

extern "C" {static PyObject *meth_QRect_united(PyObject *, PyObject *);}
static PyObject *meth_QRect_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_united, doc_QRect_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_marginsAdded, "marginsAdded(self, QMargins) -> QRect");

extern "C" {static PyObject *meth_QRect_marginsAdded(PyObject *, PyObject *);}
static PyObject *meth_QRect_marginsAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QMargins, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->marginsAdded(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_marginsAdded, doc_QRect_marginsAdded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_marginsRemoved, "marginsRemoved(self, QMargins) -> QRect");

extern "C" {static PyObject *meth_QRect_marginsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QRect_marginsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QMargins, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->marginsRemoved(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_marginsRemoved, doc_QRect_marginsRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_transposed, "transposed(self) -> QRect");

extern "C" {static PyObject *meth_QRect_transposed(PyObject *, PyObject *);}
static PyObject *meth_QRect_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName_transposed, doc_QRect_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRect___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRect___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRect, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRect___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRect___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRect, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRect___add__(PyObject *,PyObject *);}
static PyObject *slot_QRect___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QMargins, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___sub__(PyObject *,PyObject *);}
static PyObject *slot_QRect___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QMargins, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___isub__(PyObject *,PyObject *);}
static PyObject *slot_QRect___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QRect::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QRect___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QRect::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRect___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRect::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRect___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRect::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QRect___bool__(PyObject *);}
static int slot_QRect___bool__(PyObject *sipSelf)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
        sipRes = sipCpp->isValid();
#line 1985 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRect___repr__(PyObject *);}
static PyObject *slot_QRect___repr__(PyObject *sipSelf)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QRect()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRect()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QRect(%i, %i, %i, %i)", sipCpp->left(),
                    sipCpp->top(), sipCpp->width(), sipCpp->height());
        }
#line 2028 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRect___contains__(PyObject *,PyObject *);}
static int slot_QRect___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            int sipRes = 0;

#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 2057 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            int sipRes = 0;

#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 2072 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRect, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QRect___and__(PyObject *,PyObject *);}
static PyObject *slot_QRect___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRect* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QRect, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___or__(PyObject *,PyObject *);}
static PyObject *slot_QRect___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRect* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QRect, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QRect(void *, int);}
static void release_QRect(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRect *>(sipCppV);
}


extern "C" {static PyObject *pickle_QRect(void *);}
static PyObject *pickle_QRect(void *sipCppV)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipCppV);
    PyObject *sipRes;

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qrect.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->x(), sipCpp->y(), sipCpp->width(), sipCpp->height());
#line 2156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRect.cpp"

    return sipRes;
}


extern "C" {static void *array_QRect(Py_ssize_t);}
static void *array_QRect(Py_ssize_t sipNrElem)
{
    return new  ::QRect[sipNrElem];
}


extern "C" {static void assign_QRect(void *, Py_ssize_t, void *);}
static void assign_QRect(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRect *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRect *>(sipSrc);
}


extern "C" {static void *copy_QRect(const void *, Py_ssize_t);}
static void *copy_QRect(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QRect(reinterpret_cast<const  ::QRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRect(sipSimpleWrapper *);}
static void dealloc_QRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRect(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRect(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRect *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRect();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QRect(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new  ::QRect(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QSize* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QSize, &a1))
        {
            sipCpp = new  ::QRect(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRect, &a0))
        {
            sipCpp = new  ::QRect(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRect[] = {
    {(void *)slot_QRect___eq__, eq_slot},
    {(void *)slot_QRect___ne__, ne_slot},
    {(void *)slot_QRect___add__, add_slot},
    {(void *)slot_QRect___sub__, sub_slot},
    {(void *)slot_QRect___isub__, isub_slot},
    {(void *)slot_QRect___iadd__, iadd_slot},
    {(void *)slot_QRect___iand__, iand_slot},
    {(void *)slot_QRect___ior__, ior_slot},
    {(void *)slot_QRect___bool__, bool_slot},
    {(void *)slot_QRect___repr__, repr_slot},
    {(void *)slot_QRect___contains__, contains_slot},
    {(void *)slot_QRect___and__, and_slot},
    {(void *)slot_QRect___or__, or_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRect[] = {
    {sipName_adjust, meth_QRect_adjust, METH_VARARGS, doc_QRect_adjust},
    {sipName_adjusted, meth_QRect_adjusted, METH_VARARGS, doc_QRect_adjusted},
    {sipName_bottom, meth_QRect_bottom, METH_VARARGS, doc_QRect_bottom},
    {sipName_bottomLeft, meth_QRect_bottomLeft, METH_VARARGS, doc_QRect_bottomLeft},
    {sipName_bottomRight, meth_QRect_bottomRight, METH_VARARGS, doc_QRect_bottomRight},
    {sipName_center, meth_QRect_center, METH_VARARGS, doc_QRect_center},
    {sipName_contains, SIP_MLMETH_CAST(meth_QRect_contains), METH_VARARGS|METH_KEYWORDS, doc_QRect_contains},
    {sipName_getCoords, meth_QRect_getCoords, METH_VARARGS, doc_QRect_getCoords},
    {sipName_getRect, meth_QRect_getRect, METH_VARARGS, doc_QRect_getRect},
    {sipName_height, meth_QRect_height, METH_VARARGS, doc_QRect_height},
    {sipName_intersected, meth_QRect_intersected, METH_VARARGS, doc_QRect_intersected},
    {sipName_intersects, meth_QRect_intersects, METH_VARARGS, doc_QRect_intersects},
    {sipName_isEmpty, meth_QRect_isEmpty, METH_VARARGS, doc_QRect_isEmpty},
    {sipName_isNull, meth_QRect_isNull, METH_VARARGS, doc_QRect_isNull},
    {sipName_isValid, meth_QRect_isValid, METH_VARARGS, doc_QRect_isValid},
    {sipName_left, meth_QRect_left, METH_VARARGS, doc_QRect_left},
    {sipName_marginsAdded, meth_QRect_marginsAdded, METH_VARARGS, doc_QRect_marginsAdded},
    {sipName_marginsRemoved, meth_QRect_marginsRemoved, METH_VARARGS, doc_QRect_marginsRemoved},
    {sipName_moveBottom, meth_QRect_moveBottom, METH_VARARGS, doc_QRect_moveBottom},
    {sipName_moveBottomLeft, meth_QRect_moveBottomLeft, METH_VARARGS, doc_QRect_moveBottomLeft},
    {sipName_moveBottomRight, meth_QRect_moveBottomRight, METH_VARARGS, doc_QRect_moveBottomRight},
    {sipName_moveCenter, meth_QRect_moveCenter, METH_VARARGS, doc_QRect_moveCenter},
    {sipName_moveLeft, meth_QRect_moveLeft, METH_VARARGS, doc_QRect_moveLeft},
    {sipName_moveRight, meth_QRect_moveRight, METH_VARARGS, doc_QRect_moveRight},
    {sipName_moveTo, meth_QRect_moveTo, METH_VARARGS, doc_QRect_moveTo},
    {sipName_moveTop, meth_QRect_moveTop, METH_VARARGS, doc_QRect_moveTop},
    {sipName_moveTopLeft, meth_QRect_moveTopLeft, METH_VARARGS, doc_QRect_moveTopLeft},
    {sipName_moveTopRight, meth_QRect_moveTopRight, METH_VARARGS, doc_QRect_moveTopRight},
    {sipName_normalized, meth_QRect_normalized, METH_VARARGS, doc_QRect_normalized},
    {sipName_right, meth_QRect_right, METH_VARARGS, doc_QRect_right},
    {sipName_setBottom, meth_QRect_setBottom, METH_VARARGS, doc_QRect_setBottom},
    {sipName_setBottomLeft, meth_QRect_setBottomLeft, METH_VARARGS, doc_QRect_setBottomLeft},
    {sipName_setBottomRight, meth_QRect_setBottomRight, METH_VARARGS, doc_QRect_setBottomRight},
    {sipName_setCoords, meth_QRect_setCoords, METH_VARARGS, doc_QRect_setCoords},
    {sipName_setHeight, meth_QRect_setHeight, METH_VARARGS, doc_QRect_setHeight},
    {sipName_setLeft, meth_QRect_setLeft, METH_VARARGS, doc_QRect_setLeft},
    {sipName_setRect, meth_QRect_setRect, METH_VARARGS, doc_QRect_setRect},
    {sipName_setRight, meth_QRect_setRight, METH_VARARGS, doc_QRect_setRight},
    {sipName_setSize, meth_QRect_setSize, METH_VARARGS, doc_QRect_setSize},
    {sipName_setTop, meth_QRect_setTop, METH_VARARGS, doc_QRect_setTop},
    {sipName_setTopLeft, meth_QRect_setTopLeft, METH_VARARGS, doc_QRect_setTopLeft},
    {sipName_setTopRight, meth_QRect_setTopRight, METH_VARARGS, doc_QRect_setTopRight},
    {sipName_setWidth, meth_QRect_setWidth, METH_VARARGS, doc_QRect_setWidth},
    {sipName_setX, meth_QRect_setX, METH_VARARGS, doc_QRect_setX},
    {sipName_setY, meth_QRect_setY, METH_VARARGS, doc_QRect_setY},
    {sipName_size, meth_QRect_size, METH_VARARGS, doc_QRect_size},
    {sipName_top, meth_QRect_top, METH_VARARGS, doc_QRect_top},
    {sipName_topLeft, meth_QRect_topLeft, METH_VARARGS, doc_QRect_topLeft},
    {sipName_topRight, meth_QRect_topRight, METH_VARARGS, doc_QRect_topRight},
    {sipName_translate, meth_QRect_translate, METH_VARARGS, doc_QRect_translate},
    {sipName_translated, meth_QRect_translated, METH_VARARGS, doc_QRect_translated},
    {sipName_transposed, meth_QRect_transposed, METH_VARARGS, doc_QRect_transposed},
    {sipName_united, meth_QRect_united, METH_VARARGS, doc_QRect_united},
    {sipName_width, meth_QRect_width, METH_VARARGS, doc_QRect_width},
    {sipName_x, meth_QRect_x, METH_VARARGS, doc_QRect_x},
    {sipName_y, meth_QRect_y, METH_VARARGS, doc_QRect_y}
};

PyDoc_STRVAR(doc_QRect, "\1QRect()\n"
"QRect(int, int, int, int)\n"
"QRect(QPoint, QPoint)\n"
"QRect(QPoint, QSize)\n"
"QRect(QRect)");


static pyqt5ClassPluginDef plugin_QRect = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRect = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRect,
        SIP_NULLPTR,
        &plugin_QRect
    },
    {
        sipNameNr_QRect,
        {0, 0, 1},
        56, methods_QRect,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRect,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRect,
    init_type_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QRect,
    assign_QRect,
    array_QRect,
    copy_QRect,
    release_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR
};
