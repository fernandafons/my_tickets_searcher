/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 262 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQXmlStreamEntityDeclaration.cpp"

#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQXmlStreamEntityDeclaration.cpp"


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_name, "name(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_name, doc_QXmlStreamEntityDeclaration_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_notationName, "notationName(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_notationName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_notationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->notationName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_notationName, doc_QXmlStreamEntityDeclaration_notationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_systemId, "systemId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_systemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_systemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->systemId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_systemId, doc_QXmlStreamEntityDeclaration_systemId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_publicId, "publicId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_publicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_publicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->publicId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_publicId, doc_QXmlStreamEntityDeclaration_publicId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_value, "value(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_value(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_value, doc_QXmlStreamEntityDeclaration_value);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamEntityDeclaration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamEntityDeclaration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamEntityDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamEntityDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamEntityDeclaration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamEntityDeclaration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamEntityDeclaration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamEntityDeclaration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamEntityDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamEntityDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamEntityDeclaration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamEntityDeclaration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamEntityDeclaration(void *, int);}
static void release_QXmlStreamEntityDeclaration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipCppV);
}


extern "C" {static void *array_QXmlStreamEntityDeclaration(Py_ssize_t);}
static void *array_QXmlStreamEntityDeclaration(Py_ssize_t sipNrElem)
{
    return new  ::QXmlStreamEntityDeclaration[sipNrElem];
}


extern "C" {static void assign_QXmlStreamEntityDeclaration(void *, Py_ssize_t, void *);}
static void assign_QXmlStreamEntityDeclaration(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipSrc);
}


extern "C" {static void *copy_QXmlStreamEntityDeclaration(const void *, Py_ssize_t);}
static void *copy_QXmlStreamEntityDeclaration(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QXmlStreamEntityDeclaration(reinterpret_cast<const  ::QXmlStreamEntityDeclaration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamEntityDeclaration(sipSimpleWrapper *);}
static void dealloc_QXmlStreamEntityDeclaration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamEntityDeclaration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamEntityDeclaration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamEntityDeclaration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamEntityDeclaration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamEntityDeclaration();

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            sipCpp = new  ::QXmlStreamEntityDeclaration(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamEntityDeclaration[] = {
    {(void *)slot_QXmlStreamEntityDeclaration___ne__, ne_slot},
    {(void *)slot_QXmlStreamEntityDeclaration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamEntityDeclaration[] = {
    {sipName_name, meth_QXmlStreamEntityDeclaration_name, METH_VARARGS, doc_QXmlStreamEntityDeclaration_name},
    {sipName_notationName, meth_QXmlStreamEntityDeclaration_notationName, METH_VARARGS, doc_QXmlStreamEntityDeclaration_notationName},
    {sipName_publicId, meth_QXmlStreamEntityDeclaration_publicId, METH_VARARGS, doc_QXmlStreamEntityDeclaration_publicId},
    {sipName_systemId, meth_QXmlStreamEntityDeclaration_systemId, METH_VARARGS, doc_QXmlStreamEntityDeclaration_systemId},
    {sipName_value, meth_QXmlStreamEntityDeclaration_value, METH_VARARGS, doc_QXmlStreamEntityDeclaration_value}
};

PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration, "\1QXmlStreamEntityDeclaration()\n"
"QXmlStreamEntityDeclaration(QXmlStreamEntityDeclaration)");


static pyqt5ClassPluginDef plugin_QXmlStreamEntityDeclaration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamEntityDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamEntityDeclaration,
        SIP_NULLPTR,
        &plugin_QXmlStreamEntityDeclaration
    },
    {
        sipNameNr_QXmlStreamEntityDeclaration,
        {0, 0, 1},
        5, methods_QXmlStreamEntityDeclaration,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamEntityDeclaration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamEntityDeclaration,
    init_type_QXmlStreamEntityDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QXmlStreamEntityDeclaration,
    assign_QXmlStreamEntityDeclaration,
    array_QXmlStreamEntityDeclaration,
    copy_QXmlStreamEntityDeclaration,
    release_QXmlStreamEntityDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
