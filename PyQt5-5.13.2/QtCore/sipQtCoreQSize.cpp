/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSize.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSize.cpp"


PyDoc_STRVAR(doc_QSize_transpose, "transpose(self)");

extern "C" {static PyObject *meth_QSize_transpose(PyObject *, PyObject *);}
static PyObject *meth_QSize_transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            sipCpp->transpose();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_transpose, doc_QSize_transpose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_scale, "scale(self, QSize, Qt.AspectRatioMode)\n"
"scale(self, int, int, Qt.AspectRatioMode)");

extern "C" {static PyObject *meth_QSize_scale(PyObject *, PyObject *);}
static PyObject *meth_QSize_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            sipCpp->scale(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiE", &sipSelf, sipType_QSize, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
            sipCpp->scale(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_scale, doc_QSize_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSize_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSize_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_isNull, doc_QSize_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QSize_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QSize_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_isEmpty, doc_QSize_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSize_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSize_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_isValid, doc_QSize_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_width, "width(self) -> int");

extern "C" {static PyObject *meth_QSize_width(PyObject *, PyObject *);}
static PyObject *meth_QSize_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_width, doc_QSize_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_height, "height(self) -> int");

extern "C" {static PyObject *meth_QSize_height(PyObject *, PyObject *);}
static PyObject *meth_QSize_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_height, doc_QSize_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QSize_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QSize_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSize, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_setWidth, doc_QSize_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QSize_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QSize_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSize, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_setHeight, doc_QSize_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_expandedTo, "expandedTo(self, QSize) -> QSize");

extern "C" {static PyObject *meth_QSize_expandedTo(PyObject *, PyObject *);}
static PyObject *meth_QSize_expandedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->expandedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_expandedTo, doc_QSize_expandedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_boundedTo, "boundedTo(self, QSize) -> QSize");

extern "C" {static PyObject *meth_QSize_boundedTo(PyObject *, PyObject *);}
static PyObject *meth_QSize_boundedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->boundedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_boundedTo, doc_QSize_boundedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_scaled, "scaled(self, QSize, Qt.AspectRatioMode) -> QSize\n"
"scaled(self, int, int, Qt.AspectRatioMode) -> QSize");

extern "C" {static PyObject *meth_QSize_scaled(PyObject *, PyObject *);}
static PyObject *meth_QSize_scaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaled(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiE", &sipSelf, sipType_QSize, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaled(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_scaled, doc_QSize_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_transposed, "transposed(self) -> QSize");

extern "C" {static PyObject *meth_QSize_transposed(PyObject *, PyObject *);}
static PyObject *meth_QSize_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSize, sipName_transposed, doc_QSize_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSize___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSize___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QSize, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSize___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSize___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QSize, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSize___add__(PyObject *,PyObject *);}
static PyObject *slot_QSize___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___sub__(PyObject *,PyObject *);}
static PyObject *slot_QSize___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___mul__(PyObject *,PyObject *);}
static PyObject *slot_QSize___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSize, &a0, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___truediv__(PyObject *,PyObject *);}
static PyObject *slot_QSize___truediv__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSize, &a0, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, truediv_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___itruediv__(PyObject *,PyObject *);}
static PyObject *slot_QSize___itruediv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSize::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___imul__(PyObject *,PyObject *);}
static PyObject *slot_QSize___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSize::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___isub__(PyObject *,PyObject *);}
static PyObject *slot_QSize___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            sipCpp-> ::QSize::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QSize___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            sipCpp-> ::QSize::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QSize___bool__(PyObject *);}
static int slot_QSize___bool__(PyObject *sipSelf)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
        sipRes = sipCpp->isValid();
#line 791 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSize.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSize___repr__(PyObject *);}
static PyObject *slot_QSize___repr__(PyObject *sipSelf)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 40 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QSize()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QSize()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QSize(%i, %i)", sipCpp->width(), sipCpp->height());
        }
#line 833 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSize.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSize(void *, int);}
static void release_QSize(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSize *>(sipCppV);
}


extern "C" {static PyObject *pickle_QSize(void *);}
static PyObject *pickle_QSize(void *sipCppV)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipCppV);
    PyObject *sipRes;

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
    sipRes = Py_BuildValue((char *)"ii", sipCpp->width(), sipCpp->height());
#line 859 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSize.cpp"

    return sipRes;
}


extern "C" {static void *array_QSize(Py_ssize_t);}
static void *array_QSize(Py_ssize_t sipNrElem)
{
    return new  ::QSize[sipNrElem];
}


extern "C" {static void assign_QSize(void *, Py_ssize_t, void *);}
static void assign_QSize(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSize *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSize *>(sipSrc);
}


extern "C" {static void *copy_QSize(const void *, Py_ssize_t);}
static void *copy_QSize(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QSize(reinterpret_cast<const  ::QSize *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSize(sipSimpleWrapper *);}
static void dealloc_QSize(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSize(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSize(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSize(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSize *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSize();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new  ::QSize(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new  ::QSize(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSize[] = {
    {(void *)slot_QSize___eq__, eq_slot},
    {(void *)slot_QSize___ne__, ne_slot},
    {(void *)slot_QSize___add__, add_slot},
    {(void *)slot_QSize___sub__, sub_slot},
    {(void *)slot_QSize___mul__, mul_slot},
    {(void *)slot_QSize___truediv__, truediv_slot},
    {(void *)slot_QSize___itruediv__, itruediv_slot},
    {(void *)slot_QSize___imul__, imul_slot},
    {(void *)slot_QSize___isub__, isub_slot},
    {(void *)slot_QSize___iadd__, iadd_slot},
    {(void *)slot_QSize___bool__, bool_slot},
    {(void *)slot_QSize___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSize[] = {
    {sipName_boundedTo, meth_QSize_boundedTo, METH_VARARGS, doc_QSize_boundedTo},
    {sipName_expandedTo, meth_QSize_expandedTo, METH_VARARGS, doc_QSize_expandedTo},
    {sipName_height, meth_QSize_height, METH_VARARGS, doc_QSize_height},
    {sipName_isEmpty, meth_QSize_isEmpty, METH_VARARGS, doc_QSize_isEmpty},
    {sipName_isNull, meth_QSize_isNull, METH_VARARGS, doc_QSize_isNull},
    {sipName_isValid, meth_QSize_isValid, METH_VARARGS, doc_QSize_isValid},
    {sipName_scale, meth_QSize_scale, METH_VARARGS, doc_QSize_scale},
    {sipName_scaled, meth_QSize_scaled, METH_VARARGS, doc_QSize_scaled},
    {sipName_setHeight, meth_QSize_setHeight, METH_VARARGS, doc_QSize_setHeight},
    {sipName_setWidth, meth_QSize_setWidth, METH_VARARGS, doc_QSize_setWidth},
    {sipName_transpose, meth_QSize_transpose, METH_VARARGS, doc_QSize_transpose},
    {sipName_transposed, meth_QSize_transposed, METH_VARARGS, doc_QSize_transposed},
    {sipName_width, meth_QSize_width, METH_VARARGS, doc_QSize_width}
};

PyDoc_STRVAR(doc_QSize, "\1QSize()\n"
"QSize(int, int)\n"
"QSize(QSize)");


static pyqt5ClassPluginDef plugin_QSize = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSize = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSize,
        SIP_NULLPTR,
        &plugin_QSize
    },
    {
        sipNameNr_QSize,
        {0, 0, 1},
        13, methods_QSize,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSize,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSize,
    init_type_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSize,
    assign_QSize,
    array_QSize,
    copy_QSize,
    release_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR
};
