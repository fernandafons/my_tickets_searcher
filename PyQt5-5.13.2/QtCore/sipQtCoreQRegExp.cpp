/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"


PyDoc_STRVAR(doc_QRegExp_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isEmpty, doc_QRegExp_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isValid, doc_QRegExp_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_pattern, "pattern(self) -> str");

extern "C" {static PyObject *meth_QRegExp_pattern(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_pattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->pattern());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_pattern, doc_QRegExp_pattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setPattern, "setPattern(self, str)");

extern "C" {static PyObject *meth_QRegExp_setPattern(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPattern(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setPattern, doc_QRegExp_setPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_caseSensitivity, "caseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QRegExp_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->caseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_caseSensitivity, doc_QRegExp_caseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setCaseSensitivity, "setCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QRegExp_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setCaseSensitivity, doc_QRegExp_setCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_patternSyntax, "patternSyntax(self) -> QRegExp.PatternSyntax");

extern "C" {static PyObject *meth_QRegExp_patternSyntax(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_patternSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QRegExp::PatternSyntax sipRes;

            sipRes = sipCpp->patternSyntax();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QRegExp_PatternSyntax);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_patternSyntax, doc_QRegExp_patternSyntax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setPatternSyntax, "setPatternSyntax(self, QRegExp.PatternSyntax)");

extern "C" {static PyObject *meth_QRegExp_setPatternSyntax(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setPatternSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp::PatternSyntax a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QRegExp_PatternSyntax, &a0))
        {
            sipCpp->setPatternSyntax(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setPatternSyntax, doc_QRegExp_setPatternSyntax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_isMinimal, "isMinimal(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isMinimal(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isMinimal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMinimal();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isMinimal, doc_QRegExp_isMinimal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setMinimal, "setMinimal(self, bool)");

extern "C" {static PyObject *meth_QRegExp_setMinimal(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setMinimal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
            sipCpp->setMinimal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setMinimal, doc_QRegExp_setMinimal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_exactMatch, "exactMatch(self, str) -> bool");

extern "C" {static PyObject *meth_QRegExp_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->exactMatch(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_exactMatch, doc_QRegExp_exactMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_indexIn, "indexIn(self, str, offset: int = 0, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int");

extern "C" {static PyObject *meth_QRegExp_indexIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_indexIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QRegExp::CaretMode a2 = QRegExp::CaretAtZero;
        const  ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_caretMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegExp_CaretMode, &a2))
        {
            int sipRes;

            sipRes = sipCpp->indexIn(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_indexIn, doc_QRegExp_indexIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_lastIndexIn, "lastIndexIn(self, str, offset: int = -1, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int");

extern "C" {static PyObject *meth_QRegExp_lastIndexIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_lastIndexIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::QRegExp::CaretMode a2 = QRegExp::CaretAtZero;
        const  ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_caretMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegExp_CaretMode, &a2))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexIn(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_lastIndexIn, doc_QRegExp_lastIndexIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_matchedLength, "matchedLength(self) -> int");

extern "C" {static PyObject *meth_QRegExp_matchedLength(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_matchedLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->matchedLength();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_matchedLength, doc_QRegExp_matchedLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_capturedTexts, "capturedTexts(self) -> List[str]");

extern "C" {static PyObject *meth_QRegExp_capturedTexts(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_capturedTexts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->capturedTexts());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_capturedTexts, doc_QRegExp_capturedTexts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_cap, "cap(self, nth: int = 0) -> str");

extern "C" {static PyObject *meth_QRegExp_cap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_cap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->cap(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_cap, doc_QRegExp_cap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_pos, "pos(self, nth: int = 0) -> int");

extern "C" {static PyObject *meth_QRegExp_pos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_pos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->pos(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_pos, doc_QRegExp_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QRegExp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_errorString, doc_QRegExp_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_escape, "escape(str) -> str");

extern "C" {static PyObject *meth_QRegExp_escape(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_escape(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QRegExp::escape(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_escape, doc_QRegExp_escape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_captureCount, "captureCount(self) -> int");

extern "C" {static PyObject *meth_QRegExp_captureCount(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_captureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->captureCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_captureCount, doc_QRegExp_captureCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_swap, "swap(self, QRegExp)");

extern "C" {static PyObject *meth_QRegExp_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp* a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QRegExp, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_swap, doc_QRegExp_swap);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QRegExp___hash__(PyObject *);}
static long slot_QRegExp___hash__(PyObject *sipSelf)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 130 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
        sipRes = qHash(*sipCpp);
#line 663 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegExp___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegExp___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegExp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegExp::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRegExp, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegExp___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegExp___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegExp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegExp::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRegExp, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegExp___repr__(PyObject *);}
static PyObject *slot_QRegExp___repr__(PyObject *sipSelf)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->pattern());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QRegExp(%R", uni);
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(", PyQt5.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    qpycore_Unicode_ConcatAndDel(&sipRes,
                            PyUnicode_FromFormat(
                                    ", PyQt5.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRegExp(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(", PyQt5.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    PyString_ConcatAndDel(&sipRes,
                            PyString_FromFormat(
                                    ", PyQt5.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
        else
        {
            sipRes = 0;
        }
#line 800 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQRegExp.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegExp(void *, int);}
static void release_QRegExp(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegExp *>(sipCppV);
}


extern "C" {static void *array_QRegExp(Py_ssize_t);}
static void *array_QRegExp(Py_ssize_t sipNrElem)
{
    return new  ::QRegExp[sipNrElem];
}


extern "C" {static void assign_QRegExp(void *, Py_ssize_t, void *);}
static void assign_QRegExp(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegExp *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegExp *>(sipSrc);
}


extern "C" {static void *copy_QRegExp(const void *, Py_ssize_t);}
static void *copy_QRegExp(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QRegExp(reinterpret_cast<const  ::QRegExp *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegExp(sipSimpleWrapper *);}
static void dealloc_QRegExp(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegExp(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegExp(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegExp(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegExp *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegExp();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
         ::QRegExp::PatternSyntax a2 = QRegExp::RegExp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
            sipName_syntax,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|EE", sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            sipCpp = new  ::QRegExp(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRegExp* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegExp, &a0))
        {
            sipCpp = new  ::QRegExp(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegExp[] = {
    {(void *)slot_QRegExp___hash__, hash_slot},
    {(void *)slot_QRegExp___ne__, ne_slot},
    {(void *)slot_QRegExp___eq__, eq_slot},
    {(void *)slot_QRegExp___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRegExp[] = {
    {sipName_cap, SIP_MLMETH_CAST(meth_QRegExp_cap), METH_VARARGS|METH_KEYWORDS, doc_QRegExp_cap},
    {sipName_captureCount, meth_QRegExp_captureCount, METH_VARARGS, doc_QRegExp_captureCount},
    {sipName_capturedTexts, meth_QRegExp_capturedTexts, METH_VARARGS, doc_QRegExp_capturedTexts},
    {sipName_caseSensitivity, meth_QRegExp_caseSensitivity, METH_VARARGS, doc_QRegExp_caseSensitivity},
    {sipName_errorString, meth_QRegExp_errorString, METH_VARARGS, doc_QRegExp_errorString},
    {sipName_escape, meth_QRegExp_escape, METH_VARARGS, doc_QRegExp_escape},
    {sipName_exactMatch, meth_QRegExp_exactMatch, METH_VARARGS, doc_QRegExp_exactMatch},
    {sipName_indexIn, SIP_MLMETH_CAST(meth_QRegExp_indexIn), METH_VARARGS|METH_KEYWORDS, doc_QRegExp_indexIn},
    {sipName_isEmpty, meth_QRegExp_isEmpty, METH_VARARGS, doc_QRegExp_isEmpty},
    {sipName_isMinimal, meth_QRegExp_isMinimal, METH_VARARGS, doc_QRegExp_isMinimal},
    {sipName_isValid, meth_QRegExp_isValid, METH_VARARGS, doc_QRegExp_isValid},
    {sipName_lastIndexIn, SIP_MLMETH_CAST(meth_QRegExp_lastIndexIn), METH_VARARGS|METH_KEYWORDS, doc_QRegExp_lastIndexIn},
    {sipName_matchedLength, meth_QRegExp_matchedLength, METH_VARARGS, doc_QRegExp_matchedLength},
    {sipName_pattern, meth_QRegExp_pattern, METH_VARARGS, doc_QRegExp_pattern},
    {sipName_patternSyntax, meth_QRegExp_patternSyntax, METH_VARARGS, doc_QRegExp_patternSyntax},
    {sipName_pos, SIP_MLMETH_CAST(meth_QRegExp_pos), METH_VARARGS|METH_KEYWORDS, doc_QRegExp_pos},
    {sipName_setCaseSensitivity, meth_QRegExp_setCaseSensitivity, METH_VARARGS, doc_QRegExp_setCaseSensitivity},
    {sipName_setMinimal, meth_QRegExp_setMinimal, METH_VARARGS, doc_QRegExp_setMinimal},
    {sipName_setPattern, meth_QRegExp_setPattern, METH_VARARGS, doc_QRegExp_setPattern},
    {sipName_setPatternSyntax, meth_QRegExp_setPatternSyntax, METH_VARARGS, doc_QRegExp_setPatternSyntax},
    {sipName_swap, meth_QRegExp_swap, METH_VARARGS, doc_QRegExp_swap}
};

static sipEnumMemberDef enummembers_QRegExp[] = {
    {sipName_CaretAtOffset, static_cast<int>( ::QRegExp::CaretAtOffset), 210},
    {sipName_CaretAtZero, static_cast<int>( ::QRegExp::CaretAtZero), 210},
    {sipName_CaretWontMatch, static_cast<int>( ::QRegExp::CaretWontMatch), 210},
    {sipName_FixedString, static_cast<int>( ::QRegExp::FixedString), 211},
    {sipName_RegExp, static_cast<int>( ::QRegExp::RegExp), 211},
    {sipName_RegExp2, static_cast<int>( ::QRegExp::RegExp2), 211},
    {sipName_W3CXmlSchema11, static_cast<int>( ::QRegExp::W3CXmlSchema11), 211},
    {sipName_Wildcard, static_cast<int>( ::QRegExp::Wildcard), 211},
    {sipName_WildcardUnix, static_cast<int>( ::QRegExp::WildcardUnix), 211},
};

PyDoc_STRVAR(doc_QRegExp, "\1QRegExp()\n"
"QRegExp(str, cs: Qt.CaseSensitivity = Qt.CaseSensitive, syntax: QRegExp.PatternSyntax = QRegExp.RegExp)\n"
"QRegExp(QRegExp)");


static pyqt5ClassPluginDef plugin_QRegExp = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegExp = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegExp,
        SIP_NULLPTR,
        &plugin_QRegExp
    },
    {
        sipNameNr_QRegExp,
        {0, 0, 1},
        21, methods_QRegExp,
        9, enummembers_QRegExp,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegExp,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegExp,
    init_type_QRegExp,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QRegExp,
    assign_QRegExp,
    array_QRegExp,
    copy_QRegExp,
    release_QRegExp,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
