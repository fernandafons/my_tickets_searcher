/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"


PyDoc_STRVAR(doc_QVariant_value, "value(self) -> object");

extern "C" {static PyObject *meth_QVariant_value(PyObject *, PyObject *);}
static PyObject *meth_QVariant_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
        sipRes = qpycore_PyObject_FromQVariant(*sipCpp);
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_value, doc_QVariant_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_type, "type(self) -> QVariant.Type");

extern "C" {static PyObject *meth_QVariant_type(PyObject *, PyObject *);}
static PyObject *meth_QVariant_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QVariant::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_type, doc_QVariant_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_userType, "userType(self) -> int");

extern "C" {static PyObject *meth_QVariant_userType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_userType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->userType();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_userType, doc_QVariant_userType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_typeName, "typeName(self) -> str");

extern "C" {static PyObject *meth_QVariant_typeName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->typeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeName, doc_QVariant_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_canConvert, "canConvert(self, int) -> bool");

extern "C" {static PyObject *meth_QVariant_canConvert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_canConvert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->canConvert(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_canConvert, doc_QVariant_canConvert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_convert, "convert(self, int) -> bool");

extern "C" {static PyObject *meth_QVariant_convert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_convert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->convert(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_convert, doc_QVariant_convert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QVariant_isValid(PyObject *, PyObject *);}
static PyObject *meth_QVariant_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isValid, doc_QVariant_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVariant_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVariant_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isNull, doc_QVariant_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_clear, "clear(self)");

extern "C" {static PyObject *meth_QVariant_clear(PyObject *, PyObject *);}
static PyObject *meth_QVariant_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_clear, doc_QVariant_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_load, "load(self, QDataStream)");

extern "C" {static PyObject *meth_QVariant_load(PyObject *, PyObject *);}
static PyObject *meth_QVariant_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_load, doc_QVariant_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_save, "save(self, QDataStream)");

extern "C" {static PyObject *meth_QVariant_save(PyObject *, PyObject *);}
static PyObject *meth_QVariant_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_save, doc_QVariant_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_typeToName, "typeToName(int) -> str");

extern "C" {static PyObject *meth_QVariant_typeToName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_typeToName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            sipRes =  ::QVariant::typeToName(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeToName, doc_QVariant_typeToName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_nameToType, "nameToType(str) -> QVariant.Type");

extern "C" {static PyObject *meth_QVariant_nameToType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_nameToType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QVariant::Type sipRes;

            sipRes =  ::QVariant::nameToType(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_nameToType, doc_QVariant_nameToType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_swap, "swap(self, QVariant)");

extern "C" {static PyObject *meth_QVariant_swap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant* a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QVariant, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariant, sipName_swap, doc_QVariant_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVariant___ge__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator>=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___gt__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator>(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___le__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator<=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___lt__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator<(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator!=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator==(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QVariant, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariant(void *, int);}
static void release_QVariant(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVariant *>(sipCppV);
}


extern "C" {static void *array_QVariant(Py_ssize_t);}
static void *array_QVariant(Py_ssize_t sipNrElem)
{
    return new  ::QVariant[sipNrElem];
}


extern "C" {static void assign_QVariant(void *, Py_ssize_t, void *);}
static void assign_QVariant(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVariant *>(sipSrc);
}


extern "C" {static void *copy_QVariant(const void *, Py_ssize_t);}
static void *copy_QVariant(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QVariant(reinterpret_cast<const  ::QVariant *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVariant(sipSimpleWrapper *);}
static void dealloc_QVariant(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariant(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVariant(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariant(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVariant *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVariant();

            return sipCpp;
        }
    }

    {
         ::QVariant::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_QVariant_Type, &a0))
        {
            sipCpp = new  ::QVariant(a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
        int is_err = 0;
        QVariant var = qpycore_PyObject_AsQVariant(a0, &is_err);
        
        if (is_err)
            sipCpp = 0;
        else
            sipCpp = new QVariant(var);
#line 716 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
            sipCpp = new  ::QVariant(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVariant **sipCppPtr = reinterpret_cast< ::QVariant **>(sipCppPtrV);

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
if (sipIsErr == NULL)
    // We can convert everything to a QVariant.
    return 1;

// If it is already a QVariant then just return it.
if (Py_TYPE(sipPy) == sipTypeAsPyTypeObject(sipType_QVariant))
{
    *sipCppPtr = reinterpret_cast<QVariant *>(sipConvertToType(sipPy,
            sipType_QVariant, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

// Convert it to a QVariant.
QVariant var = qpycore_PyObject_AsQVariant(sipPy, sipIsErr);

if (*sipIsErr)
    return 0;

*sipCppPtr = new QVariant(var);

return sipGetState(sipTransferObj);
#line 767 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"
}


extern "C" {static PyObject *convertFrom_QVariant(void *, PyObject *);}
static PyObject *convertFrom_QVariant(void *sipCppV, PyObject *)
{
    ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipCppV);

#line 55 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
return qpycore_PyObject_FromQVariant(*sipCpp);
#line 778 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariant.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVariant[] = {
    {(void *)slot_QVariant___ge__, ge_slot},
    {(void *)slot_QVariant___gt__, gt_slot},
    {(void *)slot_QVariant___le__, le_slot},
    {(void *)slot_QVariant___lt__, lt_slot},
    {(void *)slot_QVariant___ne__, ne_slot},
    {(void *)slot_QVariant___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVariant[] = {
    {sipName_canConvert, meth_QVariant_canConvert, METH_VARARGS, doc_QVariant_canConvert},
    {sipName_clear, meth_QVariant_clear, METH_VARARGS, doc_QVariant_clear},
    {sipName_convert, meth_QVariant_convert, METH_VARARGS, doc_QVariant_convert},
    {sipName_isNull, meth_QVariant_isNull, METH_VARARGS, doc_QVariant_isNull},
    {sipName_isValid, meth_QVariant_isValid, METH_VARARGS, doc_QVariant_isValid},
    {sipName_load, meth_QVariant_load, METH_VARARGS, doc_QVariant_load},
    {sipName_nameToType, meth_QVariant_nameToType, METH_VARARGS, doc_QVariant_nameToType},
    {sipName_save, meth_QVariant_save, METH_VARARGS, doc_QVariant_save},
    {sipName_swap, meth_QVariant_swap, METH_VARARGS, doc_QVariant_swap},
    {sipName_type, meth_QVariant_type, METH_VARARGS, doc_QVariant_type},
    {sipName_typeName, meth_QVariant_typeName, METH_VARARGS, doc_QVariant_typeName},
    {sipName_typeToName, meth_QVariant_typeToName, METH_VARARGS, doc_QVariant_typeToName},
    {sipName_userType, meth_QVariant_userType, METH_VARARGS, doc_QVariant_userType},
    {sipName_value, meth_QVariant_value, METH_VARARGS, doc_QVariant_value}
};

static sipEnumMemberDef enummembers_QVariant[] = {
    {sipName_BitArray, static_cast<int>( ::QVariant::BitArray), 313},
    {sipName_Bitmap, static_cast<int>( ::QVariant::Bitmap), 313},
    {sipName_Bool, static_cast<int>( ::QVariant::Bool), 313},
    {sipName_Brush, static_cast<int>( ::QVariant::Brush), 313},
    {sipName_ByteArray, static_cast<int>( ::QVariant::ByteArray), 313},
    {sipName_Char, static_cast<int>( ::QVariant::Char), 313},
    {sipName_Color, static_cast<int>( ::QVariant::Color), 313},
    {sipName_Cursor, static_cast<int>( ::QVariant::Cursor), 313},
    {sipName_Date, static_cast<int>( ::QVariant::Date), 313},
    {sipName_DateTime, static_cast<int>( ::QVariant::DateTime), 313},
    {sipName_Double, static_cast<int>( ::QVariant::Double), 313},
    {sipName_EasingCurve, static_cast<int>( ::QVariant::EasingCurve), 313},
    {sipName_Font, static_cast<int>( ::QVariant::Font), 313},
    {sipName_Hash, static_cast<int>( ::QVariant::Hash), 313},
    {sipName_Icon, static_cast<int>( ::QVariant::Icon), 313},
    {sipName_Image, static_cast<int>( ::QVariant::Image), 313},
    {sipName_Int, static_cast<int>( ::QVariant::Int), 313},
    {sipName_Invalid, static_cast<int>( ::QVariant::Invalid), 313},
    {sipName_KeySequence, static_cast<int>( ::QVariant::KeySequence), 313},
    {sipName_Line, static_cast<int>( ::QVariant::Line), 313},
    {sipName_LineF, static_cast<int>( ::QVariant::LineF), 313},
    {sipName_List, static_cast<int>( ::QVariant::List), 313},
    {sipName_Locale, static_cast<int>( ::QVariant::Locale), 313},
    {sipName_LongLong, static_cast<int>( ::QVariant::LongLong), 313},
    {sipName_Map, static_cast<int>( ::QVariant::Map), 313},
    {sipName_Matrix, static_cast<int>( ::QVariant::Matrix), 313},
    {sipName_Matrix4x4, static_cast<int>( ::QVariant::Matrix4x4), 313},
    {sipName_ModelIndex, static_cast<int>( ::QVariant::ModelIndex), 313},
    {sipName_Palette, static_cast<int>( ::QVariant::Palette), 313},
    {sipName_Pen, static_cast<int>( ::QVariant::Pen), 313},
    {sipName_PersistentModelIndex, static_cast<int>( ::QVariant::PersistentModelIndex), 313},
    {sipName_Pixmap, static_cast<int>( ::QVariant::Pixmap), 313},
    {sipName_Point, static_cast<int>( ::QVariant::Point), 313},
    {sipName_PointF, static_cast<int>( ::QVariant::PointF), 313},
    {sipName_Polygon, static_cast<int>( ::QVariant::Polygon), 313},
    {sipName_PolygonF, static_cast<int>( ::QVariant::PolygonF), 313},
    {sipName_Quaternion, static_cast<int>( ::QVariant::Quaternion), 313},
    {sipName_Rect, static_cast<int>( ::QVariant::Rect), 313},
    {sipName_RectF, static_cast<int>( ::QVariant::RectF), 313},
    {sipName_RegExp, static_cast<int>( ::QVariant::RegExp), 313},
    {sipName_Region, static_cast<int>( ::QVariant::Region), 313},
    {sipName_RegularExpression, static_cast<int>( ::QVariant::RegularExpression), 313},
    {sipName_Size, static_cast<int>( ::QVariant::Size), 313},
    {sipName_SizeF, static_cast<int>( ::QVariant::SizeF), 313},
    {sipName_SizePolicy, static_cast<int>( ::QVariant::SizePolicy), 313},
    {sipName_String, static_cast<int>( ::QVariant::String), 313},
    {sipName_StringList, static_cast<int>( ::QVariant::StringList), 313},
    {sipName_TextFormat, static_cast<int>( ::QVariant::TextFormat), 313},
    {sipName_TextLength, static_cast<int>( ::QVariant::TextLength), 313},
    {sipName_Time, static_cast<int>( ::QVariant::Time), 313},
    {sipName_Transform, static_cast<int>( ::QVariant::Transform), 313},
    {sipName_UInt, static_cast<int>( ::QVariant::UInt), 313},
    {sipName_ULongLong, static_cast<int>( ::QVariant::ULongLong), 313},
    {sipName_Url, static_cast<int>( ::QVariant::Url), 313},
    {sipName_UserType, static_cast<int>( ::QVariant::UserType), 313},
    {sipName_Uuid, static_cast<int>( ::QVariant::Uuid), 313},
    {sipName_Vector2D, static_cast<int>( ::QVariant::Vector2D), 313},
    {sipName_Vector3D, static_cast<int>( ::QVariant::Vector3D), 313},
    {sipName_Vector4D, static_cast<int>( ::QVariant::Vector4D), 313},
};

PyDoc_STRVAR(doc_QVariant, "\1QVariant()\n"
"QVariant(QVariant.Type)\n"
"QVariant(object)\n"
"QVariant(QVariant)");


static pyqt5ClassPluginDef plugin_QVariant = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVariant = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVariant,
        SIP_NULLPTR,
        &plugin_QVariant
    },
    {
        sipNameNr_QVariant,
        {0, 0, 1},
        14, methods_QVariant,
        59, enummembers_QVariant,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVariant,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVariant,
    init_type_QVariant,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QVariant,
    assign_QVariant,
    array_QVariant,
    copy_QVariant,
    release_QVariant,
    SIP_NULLPTR,
    convertTo_QVariant,
    convertFrom_QVariant,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
