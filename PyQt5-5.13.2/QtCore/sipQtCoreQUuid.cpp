/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQUuid.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQUuid.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQUuid.cpp"


PyDoc_STRVAR(doc_QUuid_toString, "toString(self) -> str\n"
"toString(self, QUuid.StringFormat) -> str");

extern "C" {static PyObject *meth_QUuid_toString(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QUuid::StringFormat a0;
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QUuid, &sipCpp, sipType_QUuid_StringFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toString, doc_QUuid_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QUuid_isNull(PyObject *, PyObject *);}
static PyObject *meth_QUuid_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_isNull, doc_QUuid_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuid, "createUuid() -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuid(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuid());

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuid, doc_QUuid_createUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuidV3, "createUuidV3(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid\n"
"createUuidV3(QUuid, str) -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuidV3(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuidV3(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV3(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    {
        const  ::QUuid* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QString,&a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV3(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuidV3, doc_QUuid_createUuidV3);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuidV5, "createUuidV5(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid\n"
"createUuidV5(QUuid, str) -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuidV5(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuidV5(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV5(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    {
        const  ::QUuid* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QString,&a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV5(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuidV5, doc_QUuid_createUuidV5);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_variant, "variant(self) -> QUuid.Variant");

extern "C" {static PyObject *meth_QUuid_variant(PyObject *, PyObject *);}
static PyObject *meth_QUuid_variant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QUuid::Variant sipRes;

            sipRes = sipCpp->variant();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QUuid_Variant);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_variant, doc_QUuid_variant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_version, "version(self) -> QUuid.Version");

extern "C" {static PyObject *meth_QUuid_version(PyObject *, PyObject *);}
static PyObject *meth_QUuid_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QUuid::Version sipRes;

            sipRes = sipCpp->version();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QUuid_Version);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_version, doc_QUuid_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_toByteArray, "toByteArray(self) -> QByteArray\n"
"toByteArray(self, QUuid.StringFormat) -> QByteArray");

extern "C" {static PyObject *meth_QUuid_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toByteArray());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QUuid::StringFormat a0;
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QUuid, &sipCpp, sipType_QUuid_StringFormat, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toByteArray(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toByteArray, doc_QUuid_toByteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_toRfc4122, "toRfc4122(self) -> QByteArray");

extern "C" {static PyObject *meth_QUuid_toRfc4122(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toRfc4122(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toRfc4122());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toRfc4122, doc_QUuid_toRfc4122);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_fromRfc4122, "fromRfc4122(Union[QByteArray, bytes, bytearray]) -> QUuid");

extern "C" {static PyObject *meth_QUuid_fromRfc4122(PyObject *, PyObject *);}
static PyObject *meth_QUuid_fromRfc4122(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::fromRfc4122(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUuid, sipName_fromRfc4122, doc_QUuid_fromRfc4122);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QUuid___le__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___gt__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___repr__(PyObject *);}
static PyObject *slot_QUuid___repr__(PyObject *sipSelf)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/quuid.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QUuid(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt5.QtCore.QUuid(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 603 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQUuid.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QUuid___hash__(PyObject *);}
static long slot_QUuid___hash__(PyObject *sipSelf)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/quuid.sip"
        sipRes = qHash(*sipCpp);
#line 628 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQUuid.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUuid(void *, int);}
static void release_QUuid(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUuid *>(sipCppV);
}


extern "C" {static void *array_QUuid(Py_ssize_t);}
static void *array_QUuid(Py_ssize_t sipNrElem)
{
    return new  ::QUuid[sipNrElem];
}


extern "C" {static void assign_QUuid(void *, Py_ssize_t, void *);}
static void assign_QUuid(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUuid *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUuid *>(sipSrc);
}


extern "C" {static void *copy_QUuid(const void *, Py_ssize_t);}
static void *copy_QUuid(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QUuid(reinterpret_cast<const  ::QUuid *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUuid(sipSimpleWrapper *);}
static void dealloc_QUuid(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUuid(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUuid(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUuid(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUuid *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUuid();

            return sipCpp;
        }
    }

    {
         ::uint a0;
         ::ushort a1;
         ::ushort a2;
         ::uchar a3;
         ::uchar a4;
         ::uchar a5;
         ::uchar a6;
         ::uchar a7;
         ::uchar a8;
         ::uchar a9;
         ::uchar a10;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "uttMMMMMMMM", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
        {
            sipCpp = new  ::QUuid(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QUuid(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QUuid(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUuid* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUuid, &a0))
        {
            sipCpp = new  ::QUuid(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUuid[] = {
    {(void *)slot_QUuid___le__, le_slot},
    {(void *)slot_QUuid___ge__, ge_slot},
    {(void *)slot_QUuid___gt__, gt_slot},
    {(void *)slot_QUuid___lt__, lt_slot},
    {(void *)slot_QUuid___ne__, ne_slot},
    {(void *)slot_QUuid___eq__, eq_slot},
    {(void *)slot_QUuid___repr__, repr_slot},
    {(void *)slot_QUuid___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUuid[] = {
    {sipName_createUuid, meth_QUuid_createUuid, METH_VARARGS, doc_QUuid_createUuid},
    {sipName_createUuidV3, meth_QUuid_createUuidV3, METH_VARARGS, doc_QUuid_createUuidV3},
    {sipName_createUuidV5, meth_QUuid_createUuidV5, METH_VARARGS, doc_QUuid_createUuidV5},
    {sipName_fromRfc4122, meth_QUuid_fromRfc4122, METH_VARARGS, doc_QUuid_fromRfc4122},
    {sipName_isNull, meth_QUuid_isNull, METH_VARARGS, doc_QUuid_isNull},
    {sipName_toByteArray, meth_QUuid_toByteArray, METH_VARARGS, doc_QUuid_toByteArray},
    {sipName_toRfc4122, meth_QUuid_toRfc4122, METH_VARARGS, doc_QUuid_toRfc4122},
    {sipName_toString, meth_QUuid_toString, METH_VARARGS, doc_QUuid_toString},
    {sipName_variant, meth_QUuid_variant, METH_VARARGS, doc_QUuid_variant},
    {sipName_version, meth_QUuid_version, METH_VARARGS, doc_QUuid_version}
};

static sipEnumMemberDef enummembers_QUuid[] = {
    {sipName_DCE, static_cast<int>( ::QUuid::DCE), 310},
    {sipName_EmbeddedPOSIX, static_cast<int>( ::QUuid::EmbeddedPOSIX), 311},
    {sipName_Id128, static_cast<int>( ::QUuid::Id128), 309},
    {sipName_Md5, static_cast<int>( ::QUuid::Md5), 311},
    {sipName_Microsoft, static_cast<int>( ::QUuid::Microsoft), 310},
    {sipName_NCS, static_cast<int>( ::QUuid::NCS), 310},
    {sipName_Name, static_cast<int>( ::QUuid::Name), 311},
    {sipName_Random, static_cast<int>( ::QUuid::Random), 311},
    {sipName_Reserved, static_cast<int>( ::QUuid::Reserved), 310},
    {sipName_Sha1, static_cast<int>( ::QUuid::Sha1), 311},
    {sipName_Time, static_cast<int>( ::QUuid::Time), 311},
    {sipName_VarUnknown, static_cast<int>( ::QUuid::VarUnknown), 310},
    {sipName_VerUnknown, static_cast<int>( ::QUuid::VerUnknown), 311},
    {sipName_WithBraces, static_cast<int>( ::QUuid::WithBraces), 309},
    {sipName_WithoutBraces, static_cast<int>( ::QUuid::WithoutBraces), 309},
};

PyDoc_STRVAR(doc_QUuid, "\1QUuid()\n"
"QUuid(int, int, int, int, int, int, int, int, int, int, int)\n"
"QUuid(str)\n"
"QUuid(Union[QByteArray, bytes, bytearray])\n"
"QUuid(QUuid)");


static pyqt5ClassPluginDef plugin_QUuid = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUuid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUuid,
        SIP_NULLPTR,
        &plugin_QUuid
    },
    {
        sipNameNr_QUuid,
        {0, 0, 1},
        10, methods_QUuid,
        15, enummembers_QUuid,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUuid,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUuid,
    init_type_QUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QUuid,
    assign_QUuid,
    array_QUuid,
    copy_QUuid,
    release_QUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
