/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"


class sipQTextStream : public  ::QTextStream
{
public:
    sipQTextStream();
    sipQTextStream( ::QIODevice*);
    sipQTextStream( ::QByteArray*, ::QIODevice::OpenMode);
    ~sipQTextStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextStream(const sipQTextStream &);
    sipQTextStream &operator = (const sipQTextStream &);
};

sipQTextStream::sipQTextStream():  ::QTextStream(), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::sipQTextStream( ::QIODevice*a0):  ::QTextStream(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::sipQTextStream( ::QByteArray*a0, ::QIODevice::OpenMode a1):  ::QTextStream(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::~sipQTextStream()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QTextStream_setCodec, "setCodec(self, QTextCodec)\n"
"setCodec(self, str)");

extern "C" {static PyObject *meth_QTextStream_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextStream, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setCodec(a0);

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QTextStream, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setCodec(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setCodec, doc_QTextStream_setCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_codec, "codec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QTextStream_codec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->codec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_codec, doc_QTextStream_codec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setAutoDetectUnicode, "setAutoDetectUnicode(self, bool)");

extern "C" {static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setAutoDetectUnicode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setAutoDetectUnicode, doc_QTextStream_setAutoDetectUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_autoDetectUnicode, "autoDetectUnicode(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoDetectUnicode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_autoDetectUnicode, doc_QTextStream_autoDetectUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setGenerateByteOrderMark, "setGenerateByteOrderMark(self, bool)");

extern "C" {static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setGenerateByteOrderMark(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setGenerateByteOrderMark, doc_QTextStream_setGenerateByteOrderMark);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_generateByteOrderMark, "generateByteOrderMark(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->generateByteOrderMark();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_generateByteOrderMark, doc_QTextStream_generateByteOrderMark);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QTextStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setDevice, doc_QTextStream_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QTextStream_device(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_device, doc_QTextStream_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_atEnd, doc_QTextStream_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_reset, "reset(self)");

extern "C" {static PyObject *meth_QTextStream_reset(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_reset, doc_QTextStream_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_flush, "flush(self)");

extern "C" {static PyObject *meth_QTextStream_flush(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_flush, doc_QTextStream_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QTextStream_seek(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->seek(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_seek, doc_QTextStream_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_skipWhiteSpace, "skipWhiteSpace(self)");

extern "C" {static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->skipWhiteSpace();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_skipWhiteSpace, doc_QTextStream_skipWhiteSpace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_read, "read(self, int) -> str");

extern "C" {static PyObject *meth_QTextStream_read(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->read(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_read, doc_QTextStream_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_readLine, "readLine(self, maxLength: int = 0) -> str");

extern "C" {static PyObject *meth_QTextStream_readLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0 = 0;
         ::QTextStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxLength,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|n", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->readLine(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readLine, doc_QTextStream_readLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_readAll, "readAll(self) -> str");

extern "C" {static PyObject *meth_QTextStream_readAll(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readAll, doc_QTextStream_readAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setFieldAlignment, "setFieldAlignment(self, QTextStream.FieldAlignment)");

extern "C" {static PyObject *meth_QTextStream_setFieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::FieldAlignment a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_FieldAlignment, &a0))
        {
            sipCpp->setFieldAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldAlignment, doc_QTextStream_setFieldAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_fieldAlignment, "fieldAlignment(self) -> QTextStream.FieldAlignment");

extern "C" {static PyObject *meth_QTextStream_fieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::FieldAlignment sipRes;

            sipRes = sipCpp->fieldAlignment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_FieldAlignment);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldAlignment, doc_QTextStream_fieldAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setPadChar, "setPadChar(self, str)");

extern "C" {static PyObject *meth_QTextStream_setPadChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setPadChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            sipCpp->setPadChar(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setPadChar, doc_QTextStream_setPadChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_padChar, "padChar(self) -> str");

extern "C" {static PyObject *meth_QTextStream_padChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_padChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->padChar());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_padChar, doc_QTextStream_padChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setFieldWidth, "setFieldWidth(self, int)");

extern "C" {static PyObject *meth_QTextStream_setFieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setFieldWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldWidth, doc_QTextStream_setFieldWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_fieldWidth, "fieldWidth(self) -> int");

extern "C" {static PyObject *meth_QTextStream_fieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fieldWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldWidth, doc_QTextStream_fieldWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setNumberFlags, "setNumberFlags(self, Union[QTextStream.NumberFlags, QTextStream.NumberFlag])");

extern "C" {static PyObject *meth_QTextStream_setNumberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setNumberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlags* a0;
        int a0State = 0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            sipCpp->setNumberFlags(*a0);
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setNumberFlags, doc_QTextStream_setNumberFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_numberFlags, "numberFlags(self) -> QTextStream.NumberFlags");

extern "C" {static PyObject *meth_QTextStream_numberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_numberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags(sipCpp->numberFlags());

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_numberFlags, doc_QTextStream_numberFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setIntegerBase, "setIntegerBase(self, int)");

extern "C" {static PyObject *meth_QTextStream_setIntegerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setIntegerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setIntegerBase(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setIntegerBase, doc_QTextStream_setIntegerBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_integerBase, "integerBase(self) -> int");

extern "C" {static PyObject *meth_QTextStream_integerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_integerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->integerBase();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_integerBase, doc_QTextStream_integerBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setRealNumberNotation, "setRealNumberNotation(self, QTextStream.RealNumberNotation)");

extern "C" {static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::RealNumberNotation a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_RealNumberNotation, &a0))
        {
            sipCpp->setRealNumberNotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberNotation, doc_QTextStream_setRealNumberNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_realNumberNotation, "realNumberNotation(self) -> QTextStream.RealNumberNotation");

extern "C" {static PyObject *meth_QTextStream_realNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::RealNumberNotation sipRes;

            sipRes = sipCpp->realNumberNotation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_RealNumberNotation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberNotation, doc_QTextStream_realNumberNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setRealNumberPrecision, "setRealNumberPrecision(self, int)");

extern "C" {static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setRealNumberPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberPrecision, doc_QTextStream_setRealNumberPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_realNumberPrecision, "realNumberPrecision(self) -> int");

extern "C" {static PyObject *meth_QTextStream_realNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->realNumberPrecision();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberPrecision, doc_QTextStream_realNumberPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_status, "status(self) -> QTextStream.Status");

extern "C" {static PyObject *meth_QTextStream_status(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_Status);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_status, doc_QTextStream_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setStatus, "setStatus(self, QTextStream.Status)");

extern "C" {static PyObject *meth_QTextStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::Status a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_Status, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setStatus, doc_QTextStream_setStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_resetStatus, "resetStatus(self)");

extern "C" {static PyObject *meth_QTextStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->resetStatus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_resetStatus, doc_QTextStream_resetStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QTextStream_pos(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->pos();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_pos, doc_QTextStream_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QTextStream_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setLocale, doc_QTextStream_setLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QTextStream_locale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_locale, doc_QTextStream_locale);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QString,&a1, &a1State))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xd", sipType_QTextStream, &a0, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        PyObject * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9P0", sipType_QTextStream, &a0, &a1))
        {
             ::QTextStream*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 112 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qtextstream.sip"
        #if PY_MAJOR_VERSION < 3
        if (PyInt_Check(a1))
        {
            qlonglong val = PyInt_AsLong(a1);
        
            sipRes = &(*a0 << val);
        }
        else
        #endif
        {
            qlonglong val = sipLong_AsLongLong(a1);
        
            if (!PyErr_Occurred())
            {
                sipRes = &(*a0 << val);
            }
            else
            {
                // If it is positive then it might fit an unsigned long long.
        
                qulonglong uval = sipLong_AsUnsignedLongLong(a1);
        
                if (!PyErr_Occurred())
                {
                    sipRes = &(*a0 << uval);
                }
                else
                {
                    sipError = (PyErr_ExceptionMatches(PyExc_OverflowError)
                            ? sipErrorFail : sipErrorContinue);
                }
            }
        }
#line 1192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQTextStream.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
         ::QTextStream* a0;
         ::QTextStreamManipulator* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QTextStreamManipulator, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;
         ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QByteArray, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, rshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextStream(void *, int);}
static void release_QTextStream(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextStream *>(sipCppV);
    else
        delete reinterpret_cast< ::QTextStream *>(sipCppV);
}


extern "C" {static void *array_QTextStream(Py_ssize_t);}
static void *array_QTextStream(Py_ssize_t sipNrElem)
{
    return new  ::QTextStream[sipNrElem];
}


extern "C" {static void dealloc_QTextStream(sipSimpleWrapper *);}
static void dealloc_QTextStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextStream *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextStream(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextStream *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQTextStream();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new sipQTextStream(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp = new sipQTextStream(a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextStream[] = {
    {(void *)slot_QTextStream___lshift__, lshift_slot},
    {(void *)slot_QTextStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextStream[] = {
    {sipName_atEnd, meth_QTextStream_atEnd, METH_VARARGS, doc_QTextStream_atEnd},
    {sipName_autoDetectUnicode, meth_QTextStream_autoDetectUnicode, METH_VARARGS, doc_QTextStream_autoDetectUnicode},
    {sipName_codec, meth_QTextStream_codec, METH_VARARGS, doc_QTextStream_codec},
    {sipName_device, meth_QTextStream_device, METH_VARARGS, doc_QTextStream_device},
    {sipName_fieldAlignment, meth_QTextStream_fieldAlignment, METH_VARARGS, doc_QTextStream_fieldAlignment},
    {sipName_fieldWidth, meth_QTextStream_fieldWidth, METH_VARARGS, doc_QTextStream_fieldWidth},
    {sipName_flush, meth_QTextStream_flush, METH_VARARGS, doc_QTextStream_flush},
    {sipName_generateByteOrderMark, meth_QTextStream_generateByteOrderMark, METH_VARARGS, doc_QTextStream_generateByteOrderMark},
    {sipName_integerBase, meth_QTextStream_integerBase, METH_VARARGS, doc_QTextStream_integerBase},
    {sipName_locale, meth_QTextStream_locale, METH_VARARGS, doc_QTextStream_locale},
    {sipName_numberFlags, meth_QTextStream_numberFlags, METH_VARARGS, doc_QTextStream_numberFlags},
    {sipName_padChar, meth_QTextStream_padChar, METH_VARARGS, doc_QTextStream_padChar},
    {sipName_pos, meth_QTextStream_pos, METH_VARARGS, doc_QTextStream_pos},
    {sipName_read, meth_QTextStream_read, METH_VARARGS, doc_QTextStream_read},
    {sipName_readAll, meth_QTextStream_readAll, METH_VARARGS, doc_QTextStream_readAll},
    {sipName_readLine, SIP_MLMETH_CAST(meth_QTextStream_readLine), METH_VARARGS|METH_KEYWORDS, doc_QTextStream_readLine},
    {sipName_realNumberNotation, meth_QTextStream_realNumberNotation, METH_VARARGS, doc_QTextStream_realNumberNotation},
    {sipName_realNumberPrecision, meth_QTextStream_realNumberPrecision, METH_VARARGS, doc_QTextStream_realNumberPrecision},
    {sipName_reset, meth_QTextStream_reset, METH_VARARGS, doc_QTextStream_reset},
    {sipName_resetStatus, meth_QTextStream_resetStatus, METH_VARARGS, doc_QTextStream_resetStatus},
    {sipName_seek, meth_QTextStream_seek, METH_VARARGS, doc_QTextStream_seek},
    {sipName_setAutoDetectUnicode, meth_QTextStream_setAutoDetectUnicode, METH_VARARGS, doc_QTextStream_setAutoDetectUnicode},
    {sipName_setCodec, meth_QTextStream_setCodec, METH_VARARGS, doc_QTextStream_setCodec},
    {sipName_setDevice, meth_QTextStream_setDevice, METH_VARARGS, doc_QTextStream_setDevice},
    {sipName_setFieldAlignment, meth_QTextStream_setFieldAlignment, METH_VARARGS, doc_QTextStream_setFieldAlignment},
    {sipName_setFieldWidth, meth_QTextStream_setFieldWidth, METH_VARARGS, doc_QTextStream_setFieldWidth},
    {sipName_setGenerateByteOrderMark, meth_QTextStream_setGenerateByteOrderMark, METH_VARARGS, doc_QTextStream_setGenerateByteOrderMark},
    {sipName_setIntegerBase, meth_QTextStream_setIntegerBase, METH_VARARGS, doc_QTextStream_setIntegerBase},
    {sipName_setLocale, meth_QTextStream_setLocale, METH_VARARGS, doc_QTextStream_setLocale},
    {sipName_setNumberFlags, meth_QTextStream_setNumberFlags, METH_VARARGS, doc_QTextStream_setNumberFlags},
    {sipName_setPadChar, meth_QTextStream_setPadChar, METH_VARARGS, doc_QTextStream_setPadChar},
    {sipName_setRealNumberNotation, meth_QTextStream_setRealNumberNotation, METH_VARARGS, doc_QTextStream_setRealNumberNotation},
    {sipName_setRealNumberPrecision, meth_QTextStream_setRealNumberPrecision, METH_VARARGS, doc_QTextStream_setRealNumberPrecision},
    {sipName_setStatus, meth_QTextStream_setStatus, METH_VARARGS, doc_QTextStream_setStatus},
    {sipName_skipWhiteSpace, meth_QTextStream_skipWhiteSpace, METH_VARARGS, doc_QTextStream_skipWhiteSpace},
    {sipName_status, meth_QTextStream_status, METH_VARARGS, doc_QTextStream_status}
};

static sipEnumMemberDef enummembers_QTextStream[] = {
    {sipName_AlignAccountingStyle, static_cast<int>( ::QTextStream::AlignAccountingStyle), 278},
    {sipName_AlignCenter, static_cast<int>( ::QTextStream::AlignCenter), 278},
    {sipName_AlignLeft, static_cast<int>( ::QTextStream::AlignLeft), 278},
    {sipName_AlignRight, static_cast<int>( ::QTextStream::AlignRight), 278},
    {sipName_FixedNotation, static_cast<int>( ::QTextStream::FixedNotation), 281},
    {sipName_ForcePoint, static_cast<int>( ::QTextStream::ForcePoint), 279},
    {sipName_ForceSign, static_cast<int>( ::QTextStream::ForceSign), 279},
    {sipName_Ok, static_cast<int>( ::QTextStream::Ok), 282},
    {sipName_ReadCorruptData, static_cast<int>( ::QTextStream::ReadCorruptData), 282},
    {sipName_ReadPastEnd, static_cast<int>( ::QTextStream::ReadPastEnd), 282},
    {sipName_ScientificNotation, static_cast<int>( ::QTextStream::ScientificNotation), 281},
    {sipName_ShowBase, static_cast<int>( ::QTextStream::ShowBase), 279},
    {sipName_SmartNotation, static_cast<int>( ::QTextStream::SmartNotation), 281},
    {sipName_UppercaseBase, static_cast<int>( ::QTextStream::UppercaseBase), 279},
    {sipName_UppercaseDigits, static_cast<int>( ::QTextStream::UppercaseDigits), 279},
    {sipName_WriteFailed, static_cast<int>( ::QTextStream::WriteFailed), 282},
};

PyDoc_STRVAR(doc_QTextStream, "\1QTextStream()\n"
"QTextStream(QIODevice)\n"
"QTextStream(QByteArray, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");


static pyqt5ClassPluginDef plugin_QTextStream = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextStream = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextStream,
        SIP_NULLPTR,
        &plugin_QTextStream
    },
    {
        sipNameNr_QTextStream,
        {0, 0, 1},
        36, methods_QTextStream,
        16, enummembers_QTextStream,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextStream,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextStream,
    init_type_QTextStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextStream,
    SIP_NULLPTR,
    array_QTextStream,
    SIP_NULLPTR,
    release_QTextStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
