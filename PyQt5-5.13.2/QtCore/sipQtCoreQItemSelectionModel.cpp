/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 67 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"

#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 67 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQItemSelectionModel.cpp"


class sipQItemSelectionModel : public  ::QItemSelectionModel
{
public:
    sipQItemSelectionModel( ::QAbstractItemModel*);
    sipQItemSelectionModel( ::QAbstractItemModel*, ::QObject*);
    virtual ~sipQItemSelectionModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void clearCurrentIndex() SIP_OVERRIDE;
    void setCurrentIndex(const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void select(const  ::QItemSelection&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void select(const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void reset() SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemSelectionModel(const sipQItemSelectionModel &);
    sipQItemSelectionModel &operator = (const sipQItemSelectionModel &);

    char sipPyMethods[13];
};

sipQItemSelectionModel::sipQItemSelectionModel( ::QAbstractItemModel*a0):  ::QItemSelectionModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::sipQItemSelectionModel( ::QAbstractItemModel*a0, ::QObject*a1):  ::QItemSelectionModel(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::~sipQItemSelectionModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQItemSelectionModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QItemSelectionModel);

    return  ::QItemSelectionModel::metaObject();
}

int sipQItemSelectionModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QItemSelectionModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QItemSelectionModel,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQItemSelectionModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QItemSelectionModel, _clname, &sipCpp) ? sipCpp :  ::QItemSelectionModel::qt_metacast(_clname));
}

void sipQItemSelectionModel::clearCurrentIndex()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_clearCurrentIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_clearCurrentIndex);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::clearCurrentIndex();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::setCurrentIndex(const  ::QModelIndex& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_setCurrentIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_setCurrentIndex);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::setCurrentIndex(a0,a1);
        return;
    }

    extern void sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const  ::QItemSelection& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_select);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_select);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_54(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const  ::QModelIndex& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_select);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_select);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_reset);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::reset();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_clear);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_clear);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::clear();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQItemSelectionModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QItemSelectionModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQItemSelectionModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QItemSelectionModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QItemSelectionModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QItemSelectionModel_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_currentIndex, doc_QItemSelectionModel_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isSelected, "isSelected(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isSelected, doc_QItemSelectionModel_isSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isRowSelected, "isRowSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isRowSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isRowSelected, doc_QItemSelectionModel_isRowSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isColumnSelected, "isColumnSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isColumnSelected, doc_QItemSelectionModel_isColumnSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_rowIntersectsSelection, "rowIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->rowIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_rowIntersectsSelection, doc_QItemSelectionModel_rowIntersectsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_columnIntersectsSelection, "columnIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->columnIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_columnIntersectsSelection, doc_QItemSelectionModel_columnIntersectsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedIndexes, "selectedIndexes(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedIndexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedIndexes, doc_QItemSelectionModel_selectedIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selection, "selection(self) -> QItemSelection");

extern "C" {static PyObject *meth_QItemSelectionModel_selection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection(sipCpp->selection());

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selection, doc_QItemSelectionModel_selection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QItemSelectionModel_model(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_model, doc_QItemSelectionModel_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clear, doc_QItemSelectionModel_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearSelection, doc_QItemSelectionModel_clearSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_reset, "reset(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_reset(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_reset, doc_QItemSelectionModel_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_select, "select(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])\n"
"select(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QItemSelection* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_select, doc_QItemSelectionModel_select);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setCurrentIndex, "setCurrentIndex(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::setCurrentIndex(*a0,*a1) : sipCpp->setCurrentIndex(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setCurrentIndex, doc_QItemSelectionModel_setCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearCurrentIndex, "clearCurrentIndex(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::clearCurrentIndex() : sipCpp->clearCurrentIndex());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearCurrentIndex, doc_QItemSelectionModel_clearCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_emitSelectionChanged, "emitSelectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->emitSelectionChanged(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_emitSelectionChanged, doc_QItemSelectionModel_emitSelectionChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_hasSelection, doc_QItemSelectionModel_hasSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedRows, "selectedRows(self, column: int = 0) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedRows(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedRows, doc_QItemSelectionModel_selectedRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedColumns, "selectedColumns(self, row: int = 0) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedColumns(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedColumns, doc_QItemSelectionModel_selectedColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QItemSelectionModel_setModel(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setModel, doc_QItemSelectionModel_setModel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QItemSelectionModel(void *, const sipTypeDef *);}
static void *cast_QItemSelectionModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QItemSelectionModel *sipCpp = reinterpret_cast< ::QItemSelectionModel *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionModel(void *, int);}
static void release_QItemSelectionModel(void *sipCppV, int)
{
     ::QItemSelectionModel *sipCpp = reinterpret_cast< ::QItemSelectionModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QItemSelectionModel(Py_ssize_t);}
static void *array_QItemSelectionModel(Py_ssize_t sipNrElem)
{
    return new  ::QItemSelectionModel[sipNrElem];
}


extern "C" {static void dealloc_QItemSelectionModel(sipSimpleWrapper *);}
static void dealloc_QItemSelectionModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQItemSelectionModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QItemSelectionModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QItemSelectionModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelectionModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQItemSelectionModel *sipCpp = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_model,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QAbstractItemModel, &a0, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QAbstractItemModel* a0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemSelectionModel[] = {{183, 255, 1}};


static PyMethodDef methods_QItemSelectionModel[] = {
    {sipName_clear, meth_QItemSelectionModel_clear, METH_VARARGS, doc_QItemSelectionModel_clear},
    {sipName_clearCurrentIndex, meth_QItemSelectionModel_clearCurrentIndex, METH_VARARGS, doc_QItemSelectionModel_clearCurrentIndex},
    {sipName_clearSelection, meth_QItemSelectionModel_clearSelection, METH_VARARGS, doc_QItemSelectionModel_clearSelection},
    {sipName_columnIntersectsSelection, meth_QItemSelectionModel_columnIntersectsSelection, METH_VARARGS, doc_QItemSelectionModel_columnIntersectsSelection},
    {sipName_currentIndex, meth_QItemSelectionModel_currentIndex, METH_VARARGS, doc_QItemSelectionModel_currentIndex},
    {sipName_emitSelectionChanged, meth_QItemSelectionModel_emitSelectionChanged, METH_VARARGS, doc_QItemSelectionModel_emitSelectionChanged},
    {sipName_hasSelection, meth_QItemSelectionModel_hasSelection, METH_VARARGS, doc_QItemSelectionModel_hasSelection},
    {sipName_isColumnSelected, meth_QItemSelectionModel_isColumnSelected, METH_VARARGS, doc_QItemSelectionModel_isColumnSelected},
    {sipName_isRowSelected, meth_QItemSelectionModel_isRowSelected, METH_VARARGS, doc_QItemSelectionModel_isRowSelected},
    {sipName_isSelected, meth_QItemSelectionModel_isSelected, METH_VARARGS, doc_QItemSelectionModel_isSelected},
    {sipName_model, meth_QItemSelectionModel_model, METH_VARARGS, doc_QItemSelectionModel_model},
    {sipName_reset, meth_QItemSelectionModel_reset, METH_VARARGS, doc_QItemSelectionModel_reset},
    {sipName_rowIntersectsSelection, meth_QItemSelectionModel_rowIntersectsSelection, METH_VARARGS, doc_QItemSelectionModel_rowIntersectsSelection},
    {sipName_select, meth_QItemSelectionModel_select, METH_VARARGS, doc_QItemSelectionModel_select},
    {sipName_selectedColumns, SIP_MLMETH_CAST(meth_QItemSelectionModel_selectedColumns), METH_VARARGS|METH_KEYWORDS, doc_QItemSelectionModel_selectedColumns},
    {sipName_selectedIndexes, meth_QItemSelectionModel_selectedIndexes, METH_VARARGS, doc_QItemSelectionModel_selectedIndexes},
    {sipName_selectedRows, SIP_MLMETH_CAST(meth_QItemSelectionModel_selectedRows), METH_VARARGS|METH_KEYWORDS, doc_QItemSelectionModel_selectedRows},
    {sipName_selection, meth_QItemSelectionModel_selection, METH_VARARGS, doc_QItemSelectionModel_selection},
    {sipName_setCurrentIndex, meth_QItemSelectionModel_setCurrentIndex, METH_VARARGS, doc_QItemSelectionModel_setCurrentIndex},
    {sipName_setModel, meth_QItemSelectionModel_setModel, METH_VARARGS, doc_QItemSelectionModel_setModel}
};

static sipEnumMemberDef enummembers_QItemSelectionModel[] = {
    {sipName_Clear, static_cast<int>( ::QItemSelectionModel::Clear), 101},
    {sipName_ClearAndSelect, static_cast<int>( ::QItemSelectionModel::ClearAndSelect), 101},
    {sipName_Columns, static_cast<int>( ::QItemSelectionModel::Columns), 101},
    {sipName_Current, static_cast<int>( ::QItemSelectionModel::Current), 101},
    {sipName_Deselect, static_cast<int>( ::QItemSelectionModel::Deselect), 101},
    {sipName_NoUpdate, static_cast<int>( ::QItemSelectionModel::NoUpdate), 101},
    {sipName_Rows, static_cast<int>( ::QItemSelectionModel::Rows), 101},
    {sipName_Select, static_cast<int>( ::QItemSelectionModel::Select), 101},
    {sipName_SelectCurrent, static_cast<int>( ::QItemSelectionModel::SelectCurrent), 101},
    {sipName_Toggle, static_cast<int>( ::QItemSelectionModel::Toggle), 101},
    {sipName_ToggleCurrent, static_cast<int>( ::QItemSelectionModel::ToggleCurrent), 101},
};

PyDoc_STRVAR(doc_QItemSelectionModel, "\1QItemSelectionModel(model: QAbstractItemModel = None)\n"
"QItemSelectionModel(QAbstractItemModel, QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QItemSelectionModel[] = {
    {"modelChanged(QAbstractItemModel*)", "\1modelChanged(self, QAbstractItemModel)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentColumnChanged(QModelIndex,QModelIndex)", "\1currentColumnChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentRowChanged(QModelIndex,QModelIndex)", "\1currentRowChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentChanged(QModelIndex,QModelIndex)", "\1currentChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"selectionChanged(QItemSelection,QItemSelection)", "\1selectionChanged(self, QItemSelection, QItemSelection)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QItemSelectionModel = {
    & ::QItemSelectionModel::staticMetaObject,
    0,
    signals_QItemSelectionModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QItemSelectionModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionModel,
        SIP_NULLPTR,
        &plugin_QItemSelectionModel
    },
    {
        sipNameNr_QItemSelectionModel,
        {0, 0, 1},
        20, methods_QItemSelectionModel,
        11, enummembers_QItemSelectionModel,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QItemSelectionModel,
    -1,
    -1,
    supers_QItemSelectionModel,
    SIP_NULLPTR,
    init_type_QItemSelectionModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QItemSelectionModel,
    SIP_NULLPTR,
    array_QItemSelectionModel,
    SIP_NULLPTR,
    release_QItemSelectionModel,
    cast_QItemSelectionModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
