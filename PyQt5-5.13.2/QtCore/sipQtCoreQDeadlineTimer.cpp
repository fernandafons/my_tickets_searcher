/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdeadlinetimer.sip"
#include <qdeadlinetimer.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQDeadlineTimer.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQDeadlineTimer.cpp"


PyDoc_STRVAR(doc_QDeadlineTimer_swap, "swap(self, QDeadlineTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_swap(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeadlineTimer, &sipCpp, sipType_QDeadlineTimer, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_swap, doc_QDeadlineTimer_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_isForever, "isForever(self) -> bool");

extern "C" {static PyObject *meth_QDeadlineTimer_isForever(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_isForever(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForever();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_isForever, doc_QDeadlineTimer_isForever);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_hasExpired, "hasExpired(self) -> bool");

extern "C" {static PyObject *meth_QDeadlineTimer_hasExpired(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_hasExpired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasExpired();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_hasExpired, doc_QDeadlineTimer_hasExpired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_timerType, "timerType(self) -> Qt.TimerType");

extern "C" {static PyObject *meth_QDeadlineTimer_timerType(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_timerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::Qt::TimerType sipRes;

            sipRes = sipCpp->timerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TimerType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_timerType, doc_QDeadlineTimer_timerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setTimerType, "setTimerType(self, Qt.TimerType)");

extern "C" {static PyObject *meth_QDeadlineTimer_setTimerType(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setTimerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimerType a0;
         ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, sipType_Qt_TimerType, &a0))
        {
            sipCpp->setTimerType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setTimerType, doc_QDeadlineTimer_setTimerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_remainingTime, "remainingTime(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->remainingTime();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_remainingTime, doc_QDeadlineTimer_remainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_remainingTimeNSecs, "remainingTimeNSecs(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_remainingTimeNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_remainingTimeNSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->remainingTimeNSecs();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_remainingTimeNSecs, doc_QDeadlineTimer_remainingTimeNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setRemainingTime, "setRemainingTime(self, int, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setRemainingTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setRemainingTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|E", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp->setRemainingTime(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setRemainingTime, doc_QDeadlineTimer_setRemainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setPreciseRemainingTime, "setPreciseRemainingTime(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setPreciseRemainingTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setPreciseRemainingTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1 = 0;
         ::Qt::TimerType a2 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nsecs,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|nE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2))
        {
            sipCpp->setPreciseRemainingTime(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setPreciseRemainingTime, doc_QDeadlineTimer_setPreciseRemainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_deadline, "deadline(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_deadline(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_deadline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->deadline();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_deadline, doc_QDeadlineTimer_deadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_deadlineNSecs, "deadlineNSecs(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_deadlineNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_deadlineNSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->deadlineNSecs();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_deadlineNSecs, doc_QDeadlineTimer_deadlineNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setDeadline, "setDeadline(self, int, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setDeadline(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setDeadline(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|E", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp->setDeadline(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setDeadline, doc_QDeadlineTimer_setDeadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setPreciseDeadline, "setPreciseDeadline(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setPreciseDeadline(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setPreciseDeadline(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1 = 0;
         ::Qt::TimerType a2 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nsecs,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|nE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2))
        {
            sipCpp->setPreciseDeadline(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setPreciseDeadline, doc_QDeadlineTimer_setPreciseDeadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_addNSecs, "addNSecs(QDeadlineTimer, int) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QDeadlineTimer_addNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_addNSecs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer( ::QDeadlineTimer::addNSecs(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_addNSecs, doc_QDeadlineTimer_addNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_current, "current(type: Qt.TimerType = Qt.CoarseTimer) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QDeadlineTimer_current(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_current(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimerType a0 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_Qt_TimerType, &a0))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer( ::QDeadlineTimer::current(a0));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_current, doc_QDeadlineTimer_current);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDeadlineTimer___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___lt__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___le__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___gt__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator>((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___ge__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___add__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    {
         ::qint64 a0;
         ::QDeadlineTimer* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "nJ9", &a0, sipType_QDeadlineTimer, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDeadlineTimer___sub__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    {
         ::QDeadlineTimer* a0;
         ::QDeadlineTimer* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDeadlineTimer, &a0, sipType_QDeadlineTimer, &a1))
        {
             ::qint64 sipRes;

            sipRes = (*a0 - *a1);

            return PyLong_FromLongLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDeadlineTimer___isub__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDeadlineTimer)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1n", &a0))
        {
            sipCpp-> ::QDeadlineTimer::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDeadlineTimer___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDeadlineTimer)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1n", &a0))
        {
            sipCpp-> ::QDeadlineTimer::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeadlineTimer(void *, int);}
static void release_QDeadlineTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDeadlineTimer *>(sipCppV);
}


extern "C" {static void *array_QDeadlineTimer(Py_ssize_t);}
static void *array_QDeadlineTimer(Py_ssize_t sipNrElem)
{
    return new  ::QDeadlineTimer[sipNrElem];
}


extern "C" {static void assign_QDeadlineTimer(void *, Py_ssize_t, void *);}
static void assign_QDeadlineTimer(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDeadlineTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDeadlineTimer *>(sipSrc);
}


extern "C" {static void *copy_QDeadlineTimer(const void *, Py_ssize_t);}
static void *copy_QDeadlineTimer(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDeadlineTimer(reinterpret_cast<const  ::QDeadlineTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDeadlineTimer(sipSimpleWrapper *);}
static void dealloc_QDeadlineTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeadlineTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDeadlineTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeadlineTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDeadlineTimer *sipCpp = SIP_NULLPTR;

    {
         ::Qt::TimerType a0 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_Qt_TimerType, &a0))
        {
            sipCpp = new  ::QDeadlineTimer(a0);

            return sipCpp;
        }
    }

    {
         ::QDeadlineTimer::ForeverConstant a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QDeadlineTimer_ForeverConstant, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp = new  ::QDeadlineTimer(a0,a1);

            return sipCpp;
        }
    }

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "n|E", &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp = new  ::QDeadlineTimer(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QDeadlineTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDeadlineTimer, &a0))
        {
            sipCpp = new  ::QDeadlineTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDeadlineTimer[] = {
    {(void *)slot_QDeadlineTimer___eq__, eq_slot},
    {(void *)slot_QDeadlineTimer___ne__, ne_slot},
    {(void *)slot_QDeadlineTimer___lt__, lt_slot},
    {(void *)slot_QDeadlineTimer___le__, le_slot},
    {(void *)slot_QDeadlineTimer___gt__, gt_slot},
    {(void *)slot_QDeadlineTimer___ge__, ge_slot},
    {(void *)slot_QDeadlineTimer___add__, add_slot},
    {(void *)slot_QDeadlineTimer___sub__, sub_slot},
    {(void *)slot_QDeadlineTimer___isub__, isub_slot},
    {(void *)slot_QDeadlineTimer___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDeadlineTimer[] = {
    {sipName_addNSecs, meth_QDeadlineTimer_addNSecs, METH_VARARGS, doc_QDeadlineTimer_addNSecs},
    {sipName_current, SIP_MLMETH_CAST(meth_QDeadlineTimer_current), METH_VARARGS|METH_KEYWORDS, doc_QDeadlineTimer_current},
    {sipName_deadline, meth_QDeadlineTimer_deadline, METH_VARARGS, doc_QDeadlineTimer_deadline},
    {sipName_deadlineNSecs, meth_QDeadlineTimer_deadlineNSecs, METH_VARARGS, doc_QDeadlineTimer_deadlineNSecs},
    {sipName_hasExpired, meth_QDeadlineTimer_hasExpired, METH_VARARGS, doc_QDeadlineTimer_hasExpired},
    {sipName_isForever, meth_QDeadlineTimer_isForever, METH_VARARGS, doc_QDeadlineTimer_isForever},
    {sipName_remainingTime, meth_QDeadlineTimer_remainingTime, METH_VARARGS, doc_QDeadlineTimer_remainingTime},
    {sipName_remainingTimeNSecs, meth_QDeadlineTimer_remainingTimeNSecs, METH_VARARGS, doc_QDeadlineTimer_remainingTimeNSecs},
    {sipName_setDeadline, SIP_MLMETH_CAST(meth_QDeadlineTimer_setDeadline), METH_VARARGS|METH_KEYWORDS, doc_QDeadlineTimer_setDeadline},
    {sipName_setPreciseDeadline, SIP_MLMETH_CAST(meth_QDeadlineTimer_setPreciseDeadline), METH_VARARGS|METH_KEYWORDS, doc_QDeadlineTimer_setPreciseDeadline},
    {sipName_setPreciseRemainingTime, SIP_MLMETH_CAST(meth_QDeadlineTimer_setPreciseRemainingTime), METH_VARARGS|METH_KEYWORDS, doc_QDeadlineTimer_setPreciseRemainingTime},
    {sipName_setRemainingTime, SIP_MLMETH_CAST(meth_QDeadlineTimer_setRemainingTime), METH_VARARGS|METH_KEYWORDS, doc_QDeadlineTimer_setRemainingTime},
    {sipName_setTimerType, meth_QDeadlineTimer_setTimerType, METH_VARARGS, doc_QDeadlineTimer_setTimerType},
    {sipName_swap, meth_QDeadlineTimer_swap, METH_VARARGS, doc_QDeadlineTimer_swap},
    {sipName_timerType, meth_QDeadlineTimer_timerType, METH_VARARGS, doc_QDeadlineTimer_timerType}
};

static sipEnumMemberDef enummembers_QDeadlineTimer[] = {
    {sipName_Forever, static_cast<int>( ::QDeadlineTimer::Forever), 55},
};

PyDoc_STRVAR(doc_QDeadlineTimer, "\1QDeadlineTimer(type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(QDeadlineTimer.ForeverConstant, type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(int, type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(QDeadlineTimer)");


static pyqt5ClassPluginDef plugin_QDeadlineTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDeadlineTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDeadlineTimer,
        SIP_NULLPTR,
        &plugin_QDeadlineTimer
    },
    {
        sipNameNr_QDeadlineTimer,
        {0, 0, 1},
        15, methods_QDeadlineTimer,
        1, enummembers_QDeadlineTimer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDeadlineTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDeadlineTimer,
    init_type_QDeadlineTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDeadlineTimer,
    assign_QDeadlineTimer,
    array_QDeadlineTimer,
    copy_QDeadlineTimer,
    release_QDeadlineTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
