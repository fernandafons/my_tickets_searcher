/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsortfilterproxymodel.sip"
#include <qsortfilterproxymodel.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 275 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 76 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 328 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQSortFilterProxyModel.cpp"


class sipQSortFilterProxyModel : public  ::QSortFilterProxyModel
{
public:
    sipQSortFilterProxyModel( ::QObject*);
    virtual ~sipQSortFilterProxyModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool lessThan(const  ::QModelIndex&,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool filterAcceptsColumn(int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool filterAcceptsRow(int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void setSourceModel( ::QAbstractItemModel*) SIP_OVERRIDE;
     ::QModelIndex mapToSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex mapFromSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionToSource(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionFromSource(const  ::QItemSelection&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSortFilterProxyModel(const sipQSortFilterProxyModel &);
    sipQSortFilterProxyModel &operator = (const sipQSortFilterProxyModel &);

    char sipPyMethods[49];
};

sipQSortFilterProxyModel::sipQSortFilterProxyModel( ::QObject*a0):  ::QSortFilterProxyModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSortFilterProxyModel::~sipQSortFilterProxyModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSortFilterProxyModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSortFilterProxyModel);

    return  ::QSortFilterProxyModel::metaObject();
}

int sipQSortFilterProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSortFilterProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSortFilterProxyModel,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQSortFilterProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSortFilterProxyModel, _clname, &sipCpp) ? sipCpp :  ::QSortFilterProxyModel::qt_metacast(_clname));
}

bool sipQSortFilterProxyModel::lessThan(const  ::QModelIndex& a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_lessThan);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_lessThan);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::lessThan(a0,a1);

    extern bool sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    return sipVH_QtCore_60(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::filterAcceptsColumn(int a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_filterAcceptsColumn);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_filterAcceptsColumn);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::filterAcceptsColumn(a0,a1);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QModelIndex&);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::filterAcceptsRow(int a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_filterAcceptsRow);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_filterAcceptsRow);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::filterAcceptsRow(a0,a1);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QModelIndex&);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_moveColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_moveColumns);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSortFilterProxyModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_moveRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_moveRows);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSortFilterProxyModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canDropMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_canDropMimeData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQSortFilterProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_roleNames);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), sipPySelf, SIP_NULLPTR, sipName_roleNames);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQSortFilterProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_supportedDragActions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_supportedDragActions);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQSortFilterProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_revert);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_revert);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_submit);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_submit);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQSortFilterProxyModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_span);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_span);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQSortFilterProxyModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_match);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_match);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQSortFilterProxyModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_buddy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_buddy);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_sort);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_sort);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQSortFilterProxyModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_flags);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_flags);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canFetchMore);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_canFetchMore);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_fetchMore);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_fetchMore);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_removeColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_removeColumns);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_removeRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_removeRows);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_insertColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_insertColumns);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_insertRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_insertRows);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQSortFilterProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_supportedDropActions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_supportedDropActions);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_dropMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_dropMimeData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQSortFilterProxyModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_mimeData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQSortFilterProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[24]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mimeTypes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[24]), sipPySelf, SIP_NULLPTR, sipName_mimeTypes);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_setItemData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_setItemData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQSortFilterProxyModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), sipPySelf, SIP_NULLPTR, sipName_itemData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_setHeaderData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_setHeaderData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQSortFilterProxyModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[28]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_headerData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[28]), sipPySelf, SIP_NULLPTR, sipName_headerData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_setData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_setData);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQSortFilterProxyModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[30]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[30]), sipPySelf, SIP_NULLPTR, sipName_data);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::data(a0,a1);

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[31]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasChildren);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[31]), sipPySelf, SIP_NULLPTR, sipName_hasChildren);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQSortFilterProxyModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_columnCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), sipPySelf, SIP_NULLPTR, sipName_columnCount);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::columnCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQSortFilterProxyModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_rowCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), sipPySelf, SIP_NULLPTR, sipName_rowCount);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::rowCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sibling);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), sipPySelf, SIP_NULLPTR, sipName_sibling);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQSortFilterProxyModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[35]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_parent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[35]), sipPySelf, SIP_NULLPTR, sipName_parent);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::parent(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_index);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), sipPySelf, SIP_NULLPTR, sipName_index);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSortFilterProxyModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::setSourceModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_setSourceModel);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_setSourceModel);
#endif

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::mapToSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mapToSource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), sipPySelf, SIP_NULLPTR, sipName_mapToSource);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapToSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::mapFromSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mapFromSource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_mapFromSource);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapFromSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQSortFilterProxyModel::mapSelectionToSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[47]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mapSelectionToSource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[47]), sipPySelf, SIP_NULLPTR, sipName_mapSelectionToSource);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapSelectionToSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQSortFilterProxyModel::mapSelectionFromSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[48]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mapSelectionFromSource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[48]), sipPySelf, SIP_NULLPTR, sipName_mapSelectionFromSource);
#endif

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapSelectionFromSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSourceModel, "setSourceModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSourceModel, doc_QSortFilterProxyModel_setSourceModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapToSource, "mapToSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapToSource(*a0) : sipCpp->mapToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapToSource, doc_QSortFilterProxyModel_mapToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapFromSource, "mapFromSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapFromSource(*a0) : sipCpp->mapFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapFromSource, doc_QSortFilterProxyModel_mapFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapSelectionToSource, "mapSelectionToSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapSelectionToSource, doc_QSortFilterProxyModel_mapSelectionToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapSelectionFromSource, "mapSelectionFromSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapSelectionFromSource, doc_QSortFilterProxyModel_mapSelectionFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRegExp, "filterRegExp(self) -> QRegExp");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRegExp(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QRegExp*sipRes;

            sipRes = new  ::QRegExp(sipCpp->filterRegExp());

            return sipConvertFromNewType(sipRes,sipType_QRegExp,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRegExp, doc_QSortFilterProxyModel_filterRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRegularExpression, "filterRegularExpression(self) -> QRegularExpression");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRegularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QRegularExpression*sipRes;

            sipRes = new  ::QRegularExpression(sipCpp->filterRegularExpression());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRegularExpression, doc_QSortFilterProxyModel_filterRegularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterKeyColumn, "filterKeyColumn(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterKeyColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterKeyColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->filterKeyColumn();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterKeyColumn, doc_QSortFilterProxyModel_filterKeyColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterKeyColumn, "setFilterKeyColumn(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterKeyColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterKeyColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setFilterKeyColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterKeyColumn, doc_QSortFilterProxyModel_setFilterKeyColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterCaseSensitivity, "filterCaseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->filterCaseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterCaseSensitivity, doc_QSortFilterProxyModel_filterCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterCaseSensitivity, "setFilterCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setFilterCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterCaseSensitivity, doc_QSortFilterProxyModel_setFilterCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_invalidate, doc_QSortFilterProxyModel_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterFixedString, "setFilterFixedString(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterFixedString(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterFixedString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterFixedString(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterFixedString, doc_QSortFilterProxyModel_setFilterFixedString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRegExp, "setFilterRegExp(self, QRegExp)\n"
"setFilterRegExp(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRegExp(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QRegExp, &a0))
        {
            sipCpp->setFilterRegExp(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterRegExp(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRegExp, doc_QSortFilterProxyModel_setFilterRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRegularExpression, "setFilterRegularExpression(self, QRegularExpression)\n"
"setFilterRegularExpression(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRegularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QRegularExpression, &a0))
        {
            sipCpp->setFilterRegularExpression(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterRegularExpression(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRegularExpression, doc_QSortFilterProxyModel_setFilterRegularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterWildcard, "setFilterWildcard(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterWildcard(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterWildcard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterWildcard(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterWildcard, doc_QSortFilterProxyModel_setFilterWildcard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterAcceptsRow, "filterAcceptsRow(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterAcceptsRow(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterAcceptsRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::filterAcceptsRow(a0,*a1) : sipCpp->filterAcceptsRow(a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterAcceptsRow, doc_QSortFilterProxyModel_filterAcceptsRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterAcceptsColumn, "filterAcceptsColumn(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterAcceptsColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterAcceptsColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::filterAcceptsColumn(a0,*a1) : sipCpp->filterAcceptsColumn(a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterAcceptsColumn, doc_QSortFilterProxyModel_filterAcceptsColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_lessThan, "lessThan(self, QModelIndex, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_lessThan(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_lessThan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::lessThan(*a0,*a1) : sipCpp->lessThan(*a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_lessThan, doc_QSortFilterProxyModel_lessThan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_index, doc_QSortFilterProxyModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
"parent(self) -> QObject");

extern "C" {static PyObject *meth_QSortFilterProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_parent, doc_QSortFilterProxyModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_rowCount, doc_QSortFilterProxyModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_columnCount, doc_QSortFilterProxyModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_hasChildren, doc_QSortFilterProxyModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSortFilterProxyModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_data, doc_QSortFilterProxyModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setData, doc_QSortFilterProxyModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSortFilterProxyModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_headerData, doc_QSortFilterProxyModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setHeaderData, doc_QSortFilterProxyModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mimeData, doc_QSortFilterProxyModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_dropMimeData, doc_QSortFilterProxyModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_insertRows, doc_QSortFilterProxyModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_insertColumns, doc_QSortFilterProxyModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_removeRows, doc_QSortFilterProxyModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_removeColumns, doc_QSortFilterProxyModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_fetchMore, doc_QSortFilterProxyModel_fetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_canFetchMore, doc_QSortFilterProxyModel_canFetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QSortFilterProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_flags, doc_QSortFilterProxyModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_buddy, doc_QSortFilterProxyModel_buddy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QSortFilterProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_span, doc_QSortFilterProxyModel_span);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QSortFilterProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_match, doc_QSortFilterProxyModel_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sort, doc_QSortFilterProxyModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortCaseSensitivity, "sortCaseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->sortCaseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortCaseSensitivity, doc_QSortFilterProxyModel_sortCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortCaseSensitivity, "setSortCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setSortCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortCaseSensitivity, doc_QSortFilterProxyModel_setSortCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_dynamicSortFilter, "dynamicSortFilter(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_dynamicSortFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_dynamicSortFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dynamicSortFilter();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_dynamicSortFilter, doc_QSortFilterProxyModel_dynamicSortFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setDynamicSortFilter, "setDynamicSortFilter(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setDynamicSortFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setDynamicSortFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setDynamicSortFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setDynamicSortFilter, doc_QSortFilterProxyModel_setDynamicSortFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortRole, "sortRole(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortRole();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortRole, doc_QSortFilterProxyModel_sortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortRole, "setSortRole(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setSortRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortRole, doc_QSortFilterProxyModel_setSortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortColumn, "sortColumn(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortColumn();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortColumn, doc_QSortFilterProxyModel_sortColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortOrder, "sortOrder(self) -> Qt.SortOrder");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortOrder(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::SortOrder sipRes;

            sipRes = sipCpp->sortOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_SortOrder);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortOrder, doc_QSortFilterProxyModel_sortOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRole, "filterRole(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->filterRole();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRole, doc_QSortFilterProxyModel_filterRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRole, "setFilterRole(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setFilterRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRole, doc_QSortFilterProxyModel_setFilterRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mimeTypes, doc_QSortFilterProxyModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QSortFilterProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_supportedDropActions, doc_QSortFilterProxyModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_isSortLocaleAware, "isSortLocaleAware(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_isSortLocaleAware(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_isSortLocaleAware(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortLocaleAware();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_isSortLocaleAware, doc_QSortFilterProxyModel_isSortLocaleAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortLocaleAware, "setSortLocaleAware(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortLocaleAware(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortLocaleAware(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setSortLocaleAware(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortLocaleAware, doc_QSortFilterProxyModel_setSortLocaleAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sibling, doc_QSortFilterProxyModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_isRecursiveFilteringEnabled, "isRecursiveFilteringEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_isRecursiveFilteringEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_isRecursiveFilteringEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRecursiveFilteringEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_isRecursiveFilteringEnabled, doc_QSortFilterProxyModel_isRecursiveFilteringEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setRecursiveFilteringEnabled, "setRecursiveFilteringEnabled(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setRecursiveFilteringEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setRecursiveFilteringEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setRecursiveFilteringEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setRecursiveFilteringEnabled, doc_QSortFilterProxyModel_setRecursiveFilteringEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_invalidateFilter, "invalidateFilter(self)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_invalidateFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_invalidateFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            sipCpp->invalidateFilter();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_invalidateFilter, doc_QSortFilterProxyModel_invalidateFilter);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSortFilterProxyModel(void *, const sipTypeDef *);}
static void *cast_QSortFilterProxyModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSortFilterProxyModel *sipCpp = reinterpret_cast< ::QSortFilterProxyModel *>(sipCppV);

    if (targetType == sipType_QAbstractProxyModel)
        return static_cast< ::QAbstractProxyModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSortFilterProxyModel(void *, int);}
static void release_QSortFilterProxyModel(void *sipCppV, int)
{
     ::QSortFilterProxyModel *sipCpp = reinterpret_cast< ::QSortFilterProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QSortFilterProxyModel(Py_ssize_t);}
static void *array_QSortFilterProxyModel(Py_ssize_t sipNrElem)
{
    return new  ::QSortFilterProxyModel[sipNrElem];
}


extern "C" {static void dealloc_QSortFilterProxyModel(sipSimpleWrapper *);}
static void dealloc_QSortFilterProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSortFilterProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSortFilterProxyModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSortFilterProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSortFilterProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSortFilterProxyModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSortFilterProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSortFilterProxyModel[] = {{12, 255, 1}};


static PyMethodDef methods_QSortFilterProxyModel[] = {
    {sipName_buddy, meth_QSortFilterProxyModel_buddy, METH_VARARGS, doc_QSortFilterProxyModel_buddy},
    {sipName_canFetchMore, meth_QSortFilterProxyModel_canFetchMore, METH_VARARGS, doc_QSortFilterProxyModel_canFetchMore},
    {sipName_columnCount, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_columnCount), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_columnCount},
    {sipName_data, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_data), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_data},
    {sipName_dropMimeData, meth_QSortFilterProxyModel_dropMimeData, METH_VARARGS, doc_QSortFilterProxyModel_dropMimeData},
    {sipName_dynamicSortFilter, meth_QSortFilterProxyModel_dynamicSortFilter, METH_VARARGS, doc_QSortFilterProxyModel_dynamicSortFilter},
    {sipName_fetchMore, meth_QSortFilterProxyModel_fetchMore, METH_VARARGS, doc_QSortFilterProxyModel_fetchMore},
    {sipName_filterAcceptsColumn, meth_QSortFilterProxyModel_filterAcceptsColumn, METH_VARARGS, doc_QSortFilterProxyModel_filterAcceptsColumn},
    {sipName_filterAcceptsRow, meth_QSortFilterProxyModel_filterAcceptsRow, METH_VARARGS, doc_QSortFilterProxyModel_filterAcceptsRow},
    {sipName_filterCaseSensitivity, meth_QSortFilterProxyModel_filterCaseSensitivity, METH_VARARGS, doc_QSortFilterProxyModel_filterCaseSensitivity},
    {sipName_filterKeyColumn, meth_QSortFilterProxyModel_filterKeyColumn, METH_VARARGS, doc_QSortFilterProxyModel_filterKeyColumn},
    {sipName_filterRegExp, meth_QSortFilterProxyModel_filterRegExp, METH_VARARGS, doc_QSortFilterProxyModel_filterRegExp},
    {sipName_filterRegularExpression, meth_QSortFilterProxyModel_filterRegularExpression, METH_VARARGS, doc_QSortFilterProxyModel_filterRegularExpression},
    {sipName_filterRole, meth_QSortFilterProxyModel_filterRole, METH_VARARGS, doc_QSortFilterProxyModel_filterRole},
    {sipName_flags, meth_QSortFilterProxyModel_flags, METH_VARARGS, doc_QSortFilterProxyModel_flags},
    {sipName_hasChildren, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_hasChildren), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_hasChildren},
    {sipName_headerData, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_headerData), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_headerData},
    {sipName_index, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_index), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_index},
    {sipName_insertColumns, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_insertColumns), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_insertColumns},
    {sipName_insertRows, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_insertRows), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_insertRows},
    {sipName_invalidate, meth_QSortFilterProxyModel_invalidate, METH_VARARGS, doc_QSortFilterProxyModel_invalidate},
    {sipName_invalidateFilter, meth_QSortFilterProxyModel_invalidateFilter, METH_VARARGS, doc_QSortFilterProxyModel_invalidateFilter},
    {sipName_isRecursiveFilteringEnabled, meth_QSortFilterProxyModel_isRecursiveFilteringEnabled, METH_VARARGS, doc_QSortFilterProxyModel_isRecursiveFilteringEnabled},
    {sipName_isSortLocaleAware, meth_QSortFilterProxyModel_isSortLocaleAware, METH_VARARGS, doc_QSortFilterProxyModel_isSortLocaleAware},
    {sipName_lessThan, meth_QSortFilterProxyModel_lessThan, METH_VARARGS, doc_QSortFilterProxyModel_lessThan},
    {sipName_mapFromSource, meth_QSortFilterProxyModel_mapFromSource, METH_VARARGS, doc_QSortFilterProxyModel_mapFromSource},
    {sipName_mapSelectionFromSource, meth_QSortFilterProxyModel_mapSelectionFromSource, METH_VARARGS, doc_QSortFilterProxyModel_mapSelectionFromSource},
    {sipName_mapSelectionToSource, meth_QSortFilterProxyModel_mapSelectionToSource, METH_VARARGS, doc_QSortFilterProxyModel_mapSelectionToSource},
    {sipName_mapToSource, meth_QSortFilterProxyModel_mapToSource, METH_VARARGS, doc_QSortFilterProxyModel_mapToSource},
    {sipName_match, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_match), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_match},
    {sipName_mimeData, meth_QSortFilterProxyModel_mimeData, METH_VARARGS, doc_QSortFilterProxyModel_mimeData},
    {sipName_mimeTypes, meth_QSortFilterProxyModel_mimeTypes, METH_VARARGS, doc_QSortFilterProxyModel_mimeTypes},
    {sipName_parent, meth_QSortFilterProxyModel_parent, METH_VARARGS, doc_QSortFilterProxyModel_parent},
    {sipName_removeColumns, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_removeColumns), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_removeColumns},
    {sipName_removeRows, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_removeRows), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_removeRows},
    {sipName_rowCount, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_rowCount), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_rowCount},
    {sipName_setData, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_setData), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_setData},
    {sipName_setDynamicSortFilter, meth_QSortFilterProxyModel_setDynamicSortFilter, METH_VARARGS, doc_QSortFilterProxyModel_setDynamicSortFilter},
    {sipName_setFilterCaseSensitivity, meth_QSortFilterProxyModel_setFilterCaseSensitivity, METH_VARARGS, doc_QSortFilterProxyModel_setFilterCaseSensitivity},
    {sipName_setFilterFixedString, meth_QSortFilterProxyModel_setFilterFixedString, METH_VARARGS, doc_QSortFilterProxyModel_setFilterFixedString},
    {sipName_setFilterKeyColumn, meth_QSortFilterProxyModel_setFilterKeyColumn, METH_VARARGS, doc_QSortFilterProxyModel_setFilterKeyColumn},
    {sipName_setFilterRegExp, meth_QSortFilterProxyModel_setFilterRegExp, METH_VARARGS, doc_QSortFilterProxyModel_setFilterRegExp},
    {sipName_setFilterRegularExpression, meth_QSortFilterProxyModel_setFilterRegularExpression, METH_VARARGS, doc_QSortFilterProxyModel_setFilterRegularExpression},
    {sipName_setFilterRole, meth_QSortFilterProxyModel_setFilterRole, METH_VARARGS, doc_QSortFilterProxyModel_setFilterRole},
    {sipName_setFilterWildcard, meth_QSortFilterProxyModel_setFilterWildcard, METH_VARARGS, doc_QSortFilterProxyModel_setFilterWildcard},
    {sipName_setHeaderData, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_setHeaderData},
    {sipName_setRecursiveFilteringEnabled, meth_QSortFilterProxyModel_setRecursiveFilteringEnabled, METH_VARARGS, doc_QSortFilterProxyModel_setRecursiveFilteringEnabled},
    {sipName_setSortCaseSensitivity, meth_QSortFilterProxyModel_setSortCaseSensitivity, METH_VARARGS, doc_QSortFilterProxyModel_setSortCaseSensitivity},
    {sipName_setSortLocaleAware, meth_QSortFilterProxyModel_setSortLocaleAware, METH_VARARGS, doc_QSortFilterProxyModel_setSortLocaleAware},
    {sipName_setSortRole, meth_QSortFilterProxyModel_setSortRole, METH_VARARGS, doc_QSortFilterProxyModel_setSortRole},
    {sipName_setSourceModel, meth_QSortFilterProxyModel_setSourceModel, METH_VARARGS, doc_QSortFilterProxyModel_setSourceModel},
    {sipName_sibling, meth_QSortFilterProxyModel_sibling, METH_VARARGS, doc_QSortFilterProxyModel_sibling},
    {sipName_sort, SIP_MLMETH_CAST(meth_QSortFilterProxyModel_sort), METH_VARARGS|METH_KEYWORDS, doc_QSortFilterProxyModel_sort},
    {sipName_sortCaseSensitivity, meth_QSortFilterProxyModel_sortCaseSensitivity, METH_VARARGS, doc_QSortFilterProxyModel_sortCaseSensitivity},
    {sipName_sortColumn, meth_QSortFilterProxyModel_sortColumn, METH_VARARGS, doc_QSortFilterProxyModel_sortColumn},
    {sipName_sortOrder, meth_QSortFilterProxyModel_sortOrder, METH_VARARGS, doc_QSortFilterProxyModel_sortOrder},
    {sipName_sortRole, meth_QSortFilterProxyModel_sortRole, METH_VARARGS, doc_QSortFilterProxyModel_sortRole},
    {sipName_span, meth_QSortFilterProxyModel_span, METH_VARARGS, doc_QSortFilterProxyModel_span},
    {sipName_supportedDropActions, meth_QSortFilterProxyModel_supportedDropActions, METH_VARARGS, doc_QSortFilterProxyModel_supportedDropActions}
};

PyDoc_STRVAR(doc_QSortFilterProxyModel, "\1QSortFilterProxyModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSortFilterProxyModel = {
    & ::QSortFilterProxyModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSortFilterProxyModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSortFilterProxyModel,
        SIP_NULLPTR,
        &plugin_QSortFilterProxyModel
    },
    {
        sipNameNr_QSortFilterProxyModel,
        {0, 0, 1},
        59, methods_QSortFilterProxyModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSortFilterProxyModel,
    -1,
    -1,
    supers_QSortFilterProxyModel,
    SIP_NULLPTR,
    init_type_QSortFilterProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSortFilterProxyModel,
    SIP_NULLPTR,
    array_QSortFilterProxyModel,
    SIP_NULLPTR,
    release_QSortFilterProxyModel,
    cast_QSortFilterProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
