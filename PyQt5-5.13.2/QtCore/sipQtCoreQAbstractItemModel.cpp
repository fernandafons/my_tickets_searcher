/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 275 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 76 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 328 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"


class sipQAbstractItemModel : public  ::QAbstractItemModel
{
public:
    sipQAbstractItemModel( ::QObject*);
    virtual ~sipQAbstractItemModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemModel(const sipQAbstractItemModel &);
    sipQAbstractItemModel &operator = (const sipQAbstractItemModel &);

    char sipPyMethods[41];
};

sipQAbstractItemModel::sipQAbstractItemModel( ::QObject*a0):  ::QAbstractItemModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemModel::~sipQAbstractItemModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractItemModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractItemModel);

    return  ::QAbstractItemModel::metaObject();
}

int sipQAbstractItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractItemModel,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAbstractItemModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractItemModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractItemModel::qt_metacast(_clname));
}

bool sipQAbstractItemModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_moveColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_moveColumns);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractItemModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_moveRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_moveRows);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractItemModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canDropMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_canDropMimeData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQAbstractItemModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_roleNames);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_roleNames);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractItemModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_supportedDragActions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, SIP_NULLPTR, sipName_supportedDragActions);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_revert);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_revert);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_submit);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_submit);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQAbstractItemModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_span);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_span);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractItemModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_match);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_match);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQAbstractItemModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_buddy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_buddy);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_sort);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_sort);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQAbstractItemModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_flags);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_flags);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canFetchMore);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_canFetchMore);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_fetchMore);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_fetchMore);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_removeColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_removeColumns);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_removeRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_removeRows);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_insertColumns);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_insertColumns);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_insertRows);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_insertRows);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQAbstractItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_supportedDropActions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_supportedDropActions);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_dropMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_dropMimeData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQAbstractItemModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[20]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[20]), sipPySelf, SIP_NULLPTR, sipName_mimeData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQAbstractItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_mimeTypes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_mimeTypes);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_setItemData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_setItemData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQAbstractItemModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_itemData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_setHeaderData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_setHeaderData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQAbstractItemModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[25]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_headerData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[25]), sipPySelf, SIP_NULLPTR, sipName_headerData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_setData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_setData);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractItemModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[27]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractItemModel, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[27]), sipPySelf, sipName_QAbstractItemModel, sipName_data);
#endif

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[28]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasChildren);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[28]), sipPySelf, SIP_NULLPTR, sipName_hasChildren);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[29]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractItemModel, sipName_columnCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[29]), sipPySelf, sipName_QAbstractItemModel, sipName_columnCount);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[30]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractItemModel, sipName_rowCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[30]), sipPySelf, sipName_QAbstractItemModel, sipName_rowCount);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractItemModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[31]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sibling);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[31]), sipPySelf, SIP_NULLPTR, sipName_sibling);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractItemModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractItemModel, sipName_parent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), sipPySelf, sipName_QAbstractItemModel, sipName_parent);
#endif

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractItemModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractItemModel, sipName_index);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), sipPySelf, sipName_QAbstractItemModel, sipName_index);
#endif

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QAbstractItemModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractItemModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractItemModel_hasIndex, "hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->hasIndex(a0,a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_hasIndex, doc_QAbstractItemModel_hasIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_index);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->index(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_index, doc_QAbstractItemModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
"parent(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_parent);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->parent(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_parent, doc_QAbstractItemModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_sibling, doc_QAbstractItemModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QAbstractItemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_rowCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->rowCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_rowCount, doc_QAbstractItemModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QAbstractItemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_columnCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->columnCount(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_columnCount, doc_QAbstractItemModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_hasChildren, doc_QAbstractItemModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractItemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_data);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QVariant(sipCpp->data(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_data, doc_QAbstractItemModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setData, doc_QAbstractItemModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractItemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_headerData, doc_QAbstractItemModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setHeaderData, doc_QAbstractItemModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_itemData, "itemData(self, QModelIndex) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QAbstractItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::itemData(*a0) : sipCpp->itemData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_itemData, doc_QAbstractItemModel_itemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setItemData, "setItemData(self, QModelIndex, Dict[int, Any]) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const QMap<int, ::QVariant>* a1;
        int a1State = 0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            sipReleaseType(const_cast<QMap<int, ::QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setItemData, doc_QAbstractItemModel_setItemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_mimeTypes, doc_QAbstractItemModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QAbstractItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_mimeData, doc_QAbstractItemModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_dropMimeData, doc_QAbstractItemModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_supportedDropActions, doc_QAbstractItemModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertRows, doc_QAbstractItemModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertColumns, doc_QAbstractItemModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeRows, doc_QAbstractItemModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeColumns, doc_QAbstractItemModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_fetchMore, doc_QAbstractItemModel_fetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_canFetchMore, doc_QAbstractItemModel_canFetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_flags, doc_QAbstractItemModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QAbstractItemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_sort, doc_QAbstractItemModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_buddy, doc_QAbstractItemModel_buddy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QAbstractItemModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iJ1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_match, doc_QAbstractItemModel_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemModel_span(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_span, doc_QAbstractItemModel_span);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::submit() : sipCpp->submit());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_submit, doc_QAbstractItemModel_submit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_revert, "revert(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::revert() : sipCpp->revert());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_revert, doc_QAbstractItemModel_revert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_encodeData, "encodeData(self, Iterable[QModelIndex], QDataStream)");

extern "C" {static PyObject *meth_QAbstractItemModel_encodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_encodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
         ::QDataStream* a1;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QDataStream, &a1))
        {
            sipCpp->encodeData(*a0,*a1);
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_encodeData, doc_QAbstractItemModel_encodeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_decodeData, "decodeData(self, int, int, QModelIndex, QDataStream) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_decodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_decodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
         ::QDataStream* a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2, sipType_QDataStream, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->decodeData(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_decodeData, doc_QAbstractItemModel_decodeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginInsertRows, "beginInsertRows(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginInsertRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginInsertRows, doc_QAbstractItemModel_beginInsertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endInsertRows, "endInsertRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endInsertRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endInsertRows, doc_QAbstractItemModel_endInsertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginRemoveRows, "beginRemoveRows(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginRemoveRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginRemoveRows, doc_QAbstractItemModel_beginRemoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endRemoveRows, "endRemoveRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endRemoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endRemoveRows, doc_QAbstractItemModel_endRemoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginInsertColumns, "beginInsertColumns(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginInsertColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginInsertColumns, doc_QAbstractItemModel_beginInsertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endInsertColumns, "endInsertColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endInsertColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endInsertColumns, doc_QAbstractItemModel_endInsertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginRemoveColumns, "beginRemoveColumns(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginRemoveColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginRemoveColumns, doc_QAbstractItemModel_beginRemoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endRemoveColumns, "endRemoveColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endRemoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endRemoveColumns, doc_QAbstractItemModel_endRemoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_persistentIndexList, "persistentIndexList(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->persistentIndexList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_persistentIndexList, doc_QAbstractItemModel_persistentIndexList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_changePersistentIndex, "changePersistentIndex(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->changePersistentIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_changePersistentIndex, doc_QAbstractItemModel_changePersistentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_changePersistentIndexList, "changePersistentIndexList(self, Iterable[QModelIndex], Iterable[QModelIndex])");

extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QModelIndexList* a1;
        int a1State = 0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QList_0100QModelIndex,&a1, &a1State))
        {
            sipCpp->changePersistentIndexList(*a0,*a1);
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast< ::QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_changePersistentIndexList, doc_QAbstractItemModel_changePersistentIndexList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertRow, "insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertRow(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertRow, doc_QAbstractItemModel_insertRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertColumn, "insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertColumn(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertColumn, doc_QAbstractItemModel_insertColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeRow, "removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->removeRow(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeRow, doc_QAbstractItemModel_removeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeColumn, "removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->removeColumn(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeColumn, doc_QAbstractItemModel_removeColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_supportedDragActions, "supportedDragActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::supportedDragActions() : sipCpp->supportedDragActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_supportedDragActions, doc_QAbstractItemModel_supportedDragActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_roleNames, "roleNames(self) -> Dict[int, QByteArray]");

extern "C" {static PyObject *meth_QAbstractItemModel_roleNames(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_roleNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            QHash<int, ::QByteArray>*sipRes;

            sipRes = new QHash<int, ::QByteArray>((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::roleNames() : sipCpp->roleNames()));

            return sipConvertFromNewType(sipRes,sipType_QHash_1800_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_roleNames, doc_QAbstractItemModel_roleNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_createIndex, "createIndex(self, int, int, object: object = 0) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_createIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_createIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "pii|P0", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, &a2))
        {
             ::QModelIndex*sipRes = 0;

#line 200 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = new QModelIndex(sipCpp->createIndex(a0, a1, ptr));
        #else
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
        #endif
#line 2748 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractItemModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_createIndex, doc_QAbstractItemModel_createIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginMoveRows, "beginMoveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_beginMoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginMoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->beginMoveRows(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginMoveRows, doc_QAbstractItemModel_beginMoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endMoveRows, "endMoveRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endMoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endMoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endMoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endMoveRows, doc_QAbstractItemModel_endMoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginMoveColumns, "beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_beginMoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginMoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->beginMoveColumns(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginMoveColumns, doc_QAbstractItemModel_beginMoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endMoveColumns, "endMoveColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endMoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endMoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endMoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endMoveColumns, doc_QAbstractItemModel_endMoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginResetModel, "beginResetModel(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginResetModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginResetModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginResetModel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginResetModel, doc_QAbstractItemModel_beginResetModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endResetModel, "endResetModel(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endResetModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endResetModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endResetModel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endResetModel, doc_QAbstractItemModel_endResetModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_resetInternalData, "resetInternalData(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_resetInternalData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_resetInternalData, doc_QAbstractItemModel_resetInternalData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_canDropMimeData, "canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_canDropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_canDropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::canDropMimeData(a0,a1,a2,a3,*a4) : sipCpp->canDropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_canDropMimeData, doc_QAbstractItemModel_canDropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveRows, "moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::moveRows(*a0,a1,a2,*a3,a4) : sipCpp->moveRows(*a0,a1,a2,*a3,a4));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveRows, doc_QAbstractItemModel_moveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveColumns, "moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::moveColumns(*a0,a1,a2,*a3,a4) : sipCpp->moveColumns(*a0,a1,a2,*a3,a4));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveColumns, doc_QAbstractItemModel_moveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveRow, "moveRow(self, QModelIndex, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QModelIndex* a2;
        int a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QModelIndex, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->moveRow(*a0,a1,*a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveRow, doc_QAbstractItemModel_moveRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveColumn, "moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QModelIndex* a2;
        int a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QModelIndex, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->moveColumn(*a0,a1,*a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveColumn, doc_QAbstractItemModel_moveColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_checkIndex, "checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_checkIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_checkIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemModel::CheckIndexOptions a1def = QAbstractItemModel::CheckIndexOption::NoOption;
         ::QAbstractItemModel::CheckIndexOptions* a1 = &a1def;
        int a1State = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemModel_CheckIndexOptions, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->checkIndex(*a0,*a1);
            sipReleaseType(a1,sipType_QAbstractItemModel_CheckIndexOptions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_checkIndex, doc_QAbstractItemModel_checkIndex);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractItemModel(void *, const sipTypeDef *);}
static void *cast_QAbstractItemModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractItemModel *sipCpp = reinterpret_cast< ::QAbstractItemModel *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemModel(void *, int);}
static void release_QAbstractItemModel(void *sipCppV, int)
{
     ::QAbstractItemModel *sipCpp = reinterpret_cast< ::QAbstractItemModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractItemModel(sipSimpleWrapper *);}
static void dealloc_QAbstractItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractItemModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractItemModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractItemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractItemModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemModel[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractItemModel[] = {
    {sipName_beginInsertColumns, meth_QAbstractItemModel_beginInsertColumns, METH_VARARGS, doc_QAbstractItemModel_beginInsertColumns},
    {sipName_beginInsertRows, meth_QAbstractItemModel_beginInsertRows, METH_VARARGS, doc_QAbstractItemModel_beginInsertRows},
    {sipName_beginMoveColumns, meth_QAbstractItemModel_beginMoveColumns, METH_VARARGS, doc_QAbstractItemModel_beginMoveColumns},
    {sipName_beginMoveRows, meth_QAbstractItemModel_beginMoveRows, METH_VARARGS, doc_QAbstractItemModel_beginMoveRows},
    {sipName_beginRemoveColumns, meth_QAbstractItemModel_beginRemoveColumns, METH_VARARGS, doc_QAbstractItemModel_beginRemoveColumns},
    {sipName_beginRemoveRows, meth_QAbstractItemModel_beginRemoveRows, METH_VARARGS, doc_QAbstractItemModel_beginRemoveRows},
    {sipName_beginResetModel, meth_QAbstractItemModel_beginResetModel, METH_VARARGS, doc_QAbstractItemModel_beginResetModel},
    {sipName_buddy, meth_QAbstractItemModel_buddy, METH_VARARGS, doc_QAbstractItemModel_buddy},
    {sipName_canDropMimeData, meth_QAbstractItemModel_canDropMimeData, METH_VARARGS, doc_QAbstractItemModel_canDropMimeData},
    {sipName_canFetchMore, meth_QAbstractItemModel_canFetchMore, METH_VARARGS, doc_QAbstractItemModel_canFetchMore},
    {sipName_changePersistentIndex, meth_QAbstractItemModel_changePersistentIndex, METH_VARARGS, doc_QAbstractItemModel_changePersistentIndex},
    {sipName_changePersistentIndexList, meth_QAbstractItemModel_changePersistentIndexList, METH_VARARGS, doc_QAbstractItemModel_changePersistentIndexList},
    {sipName_checkIndex, SIP_MLMETH_CAST(meth_QAbstractItemModel_checkIndex), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_checkIndex},
    {sipName_columnCount, SIP_MLMETH_CAST(meth_QAbstractItemModel_columnCount), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_columnCount},
    {sipName_createIndex, SIP_MLMETH_CAST(meth_QAbstractItemModel_createIndex), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_createIndex},
    {sipName_data, SIP_MLMETH_CAST(meth_QAbstractItemModel_data), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_data},
    {sipName_decodeData, meth_QAbstractItemModel_decodeData, METH_VARARGS, doc_QAbstractItemModel_decodeData},
    {sipName_dropMimeData, meth_QAbstractItemModel_dropMimeData, METH_VARARGS, doc_QAbstractItemModel_dropMimeData},
    {sipName_encodeData, meth_QAbstractItemModel_encodeData, METH_VARARGS, doc_QAbstractItemModel_encodeData},
    {sipName_endInsertColumns, meth_QAbstractItemModel_endInsertColumns, METH_VARARGS, doc_QAbstractItemModel_endInsertColumns},
    {sipName_endInsertRows, meth_QAbstractItemModel_endInsertRows, METH_VARARGS, doc_QAbstractItemModel_endInsertRows},
    {sipName_endMoveColumns, meth_QAbstractItemModel_endMoveColumns, METH_VARARGS, doc_QAbstractItemModel_endMoveColumns},
    {sipName_endMoveRows, meth_QAbstractItemModel_endMoveRows, METH_VARARGS, doc_QAbstractItemModel_endMoveRows},
    {sipName_endRemoveColumns, meth_QAbstractItemModel_endRemoveColumns, METH_VARARGS, doc_QAbstractItemModel_endRemoveColumns},
    {sipName_endRemoveRows, meth_QAbstractItemModel_endRemoveRows, METH_VARARGS, doc_QAbstractItemModel_endRemoveRows},
    {sipName_endResetModel, meth_QAbstractItemModel_endResetModel, METH_VARARGS, doc_QAbstractItemModel_endResetModel},
    {sipName_fetchMore, meth_QAbstractItemModel_fetchMore, METH_VARARGS, doc_QAbstractItemModel_fetchMore},
    {sipName_flags, meth_QAbstractItemModel_flags, METH_VARARGS, doc_QAbstractItemModel_flags},
    {sipName_hasChildren, SIP_MLMETH_CAST(meth_QAbstractItemModel_hasChildren), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_hasChildren},
    {sipName_hasIndex, SIP_MLMETH_CAST(meth_QAbstractItemModel_hasIndex), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_hasIndex},
    {sipName_headerData, SIP_MLMETH_CAST(meth_QAbstractItemModel_headerData), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_headerData},
    {sipName_index, SIP_MLMETH_CAST(meth_QAbstractItemModel_index), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_index},
    {sipName_insertColumn, SIP_MLMETH_CAST(meth_QAbstractItemModel_insertColumn), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_insertColumn},
    {sipName_insertColumns, SIP_MLMETH_CAST(meth_QAbstractItemModel_insertColumns), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_insertColumns},
    {sipName_insertRow, SIP_MLMETH_CAST(meth_QAbstractItemModel_insertRow), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_insertRow},
    {sipName_insertRows, SIP_MLMETH_CAST(meth_QAbstractItemModel_insertRows), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_insertRows},
    {sipName_itemData, meth_QAbstractItemModel_itemData, METH_VARARGS, doc_QAbstractItemModel_itemData},
    {sipName_match, SIP_MLMETH_CAST(meth_QAbstractItemModel_match), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_match},
    {sipName_mimeData, meth_QAbstractItemModel_mimeData, METH_VARARGS, doc_QAbstractItemModel_mimeData},
    {sipName_mimeTypes, meth_QAbstractItemModel_mimeTypes, METH_VARARGS, doc_QAbstractItemModel_mimeTypes},
    {sipName_moveColumn, meth_QAbstractItemModel_moveColumn, METH_VARARGS, doc_QAbstractItemModel_moveColumn},
    {sipName_moveColumns, meth_QAbstractItemModel_moveColumns, METH_VARARGS, doc_QAbstractItemModel_moveColumns},
    {sipName_moveRow, meth_QAbstractItemModel_moveRow, METH_VARARGS, doc_QAbstractItemModel_moveRow},
    {sipName_moveRows, meth_QAbstractItemModel_moveRows, METH_VARARGS, doc_QAbstractItemModel_moveRows},
    {sipName_parent, meth_QAbstractItemModel_parent, METH_VARARGS, doc_QAbstractItemModel_parent},
    {sipName_persistentIndexList, meth_QAbstractItemModel_persistentIndexList, METH_VARARGS, doc_QAbstractItemModel_persistentIndexList},
    {sipName_removeColumn, SIP_MLMETH_CAST(meth_QAbstractItemModel_removeColumn), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_removeColumn},
    {sipName_removeColumns, SIP_MLMETH_CAST(meth_QAbstractItemModel_removeColumns), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_removeColumns},
    {sipName_removeRow, SIP_MLMETH_CAST(meth_QAbstractItemModel_removeRow), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_removeRow},
    {sipName_removeRows, SIP_MLMETH_CAST(meth_QAbstractItemModel_removeRows), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_removeRows},
    {sipName_resetInternalData, meth_QAbstractItemModel_resetInternalData, METH_VARARGS, doc_QAbstractItemModel_resetInternalData},
    {sipName_revert, meth_QAbstractItemModel_revert, METH_VARARGS, doc_QAbstractItemModel_revert},
    {sipName_roleNames, meth_QAbstractItemModel_roleNames, METH_VARARGS, doc_QAbstractItemModel_roleNames},
    {sipName_rowCount, SIP_MLMETH_CAST(meth_QAbstractItemModel_rowCount), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_rowCount},
    {sipName_setData, SIP_MLMETH_CAST(meth_QAbstractItemModel_setData), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_setData},
    {sipName_setHeaderData, SIP_MLMETH_CAST(meth_QAbstractItemModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_setHeaderData},
    {sipName_setItemData, meth_QAbstractItemModel_setItemData, METH_VARARGS, doc_QAbstractItemModel_setItemData},
    {sipName_sibling, meth_QAbstractItemModel_sibling, METH_VARARGS, doc_QAbstractItemModel_sibling},
    {sipName_sort, SIP_MLMETH_CAST(meth_QAbstractItemModel_sort), METH_VARARGS|METH_KEYWORDS, doc_QAbstractItemModel_sort},
    {sipName_span, meth_QAbstractItemModel_span, METH_VARARGS, doc_QAbstractItemModel_span},
    {sipName_submit, meth_QAbstractItemModel_submit, METH_VARARGS, doc_QAbstractItemModel_submit},
    {sipName_supportedDragActions, meth_QAbstractItemModel_supportedDragActions, METH_VARARGS, doc_QAbstractItemModel_supportedDragActions},
    {sipName_supportedDropActions, meth_QAbstractItemModel_supportedDropActions, METH_VARARGS, doc_QAbstractItemModel_supportedDropActions}
};

static sipEnumMemberDef enummembers_QAbstractItemModel[] = {
    {sipName_DoNotUseParent, static_cast<int>(::QAbstractItemModel::CheckIndexOption::DoNotUseParent), 7},
    {sipName_HorizontalSortHint, static_cast<int>( ::QAbstractItemModel::HorizontalSortHint), 9},
    {sipName_IndexIsValid, static_cast<int>(::QAbstractItemModel::CheckIndexOption::IndexIsValid), 7},
    {sipName_NoLayoutChangeHint, static_cast<int>( ::QAbstractItemModel::NoLayoutChangeHint), 9},
    {sipName_NoOption, static_cast<int>(::QAbstractItemModel::CheckIndexOption::NoOption), 7},
    {sipName_ParentIsInvalid, static_cast<int>(::QAbstractItemModel::CheckIndexOption::ParentIsInvalid), 7},
    {sipName_VerticalSortHint, static_cast<int>( ::QAbstractItemModel::VerticalSortHint), 9},
};

PyDoc_STRVAR(doc_QAbstractItemModel, "\1QAbstractItemModel(parent: QObject = None)");


extern "C" {static int emit_QAbstractItemModel_layoutChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_layoutChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const QList< ::QPersistentModelIndex>& a0def = QList<QPersistentModelIndex>();
        const QList< ::QPersistentModelIndex>* a0 = &a0def;
        int a0State = 0;
         ::QAbstractItemModel::LayoutChangeHint a1 = QAbstractItemModel::NoLayoutChangeHint;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1E", sipType_QList_0100QPersistentModelIndex,&a0, &a0State, sipType_QAbstractItemModel_LayoutChangeHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutChanged(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList< ::QPersistentModelIndex> *>(a0),sipType_QList_0100QPersistentModelIndex,a0State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_layoutChanged, SIP_NULLPTR);

    return -1;
}


extern "C" {static int emit_QAbstractItemModel_layoutAboutToBeChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_layoutAboutToBeChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const QList< ::QPersistentModelIndex>& a0def = QList<QPersistentModelIndex>();
        const QList< ::QPersistentModelIndex>* a0 = &a0def;
        int a0State = 0;
         ::QAbstractItemModel::LayoutChangeHint a1 = QAbstractItemModel::NoLayoutChangeHint;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1E", sipType_QList_0100QPersistentModelIndex,&a0, &a0State, sipType_QAbstractItemModel_LayoutChangeHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutAboutToBeChanged(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList< ::QPersistentModelIndex> *>(a0),sipType_QList_0100QPersistentModelIndex,a0State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_layoutAboutToBeChanged, SIP_NULLPTR);

    return -1;
}


extern "C" {static int emit_QAbstractItemModel_dataChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_dataChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9|J1", sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->dataChanged(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_dataChanged, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractItemModel[] = {
    {"columnsMoved(QModelIndex,int,int,QModelIndex,int)", "\1columnsMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeMoved(QModelIndex,int,int,QModelIndex,int)", "\1columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsMoved(QModelIndex,int,int,QModelIndex,int)", "\1rowsMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeMoved(QModelIndex,int,int,QModelIndex,int)", "\1rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"modelReset()", "\1modelReset(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"modelAboutToBeReset()", "\1modelAboutToBeReset(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsRemoved(QModelIndex,int,int)", "\1columnsRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeRemoved(QModelIndex,int,int)", "\1columnsAboutToBeRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsInserted(QModelIndex,int,int)", "\1columnsInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeInserted(QModelIndex,int,int)", "\1columnsAboutToBeInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsRemoved(QModelIndex,int,int)", "\1rowsRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeRemoved(QModelIndex,int,int)", "\1rowsAboutToBeRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsInserted(QModelIndex,int,int)", "\1rowsInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeInserted(QModelIndex,int,int)", "\1rowsAboutToBeInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"layoutChanged(QList<QPersistentModelIndex>,QAbstractItemModel::LayoutChangeHint)", "\1layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint)", SIP_NULLPTR, emit_QAbstractItemModel_layoutChanged},
    {"layoutAboutToBeChanged(QList<QPersistentModelIndex>,QAbstractItemModel::LayoutChangeHint)", "\1layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint)", SIP_NULLPTR, emit_QAbstractItemModel_layoutAboutToBeChanged},
    {"headerDataChanged(Qt::Orientation,int,int)", "\1headerDataChanged(self, Qt.Orientation, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"dataChanged(QModelIndex,QModelIndex,QVector<int>)", "\1dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])", SIP_NULLPTR, emit_QAbstractItemModel_dataChanged},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractItemModel = {
    & ::QAbstractItemModel::staticMetaObject,
    0,
    signals_QAbstractItemModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractItemModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemModel,
        SIP_NULLPTR,
        &plugin_QAbstractItemModel
    },
    {
        sipNameNr_QAbstractItemModel,
        {0, 0, 1},
        63, methods_QAbstractItemModel,
        7, enummembers_QAbstractItemModel,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractItemModel,
    -1,
    -1,
    supers_QAbstractItemModel,
    SIP_NULLPTR,
    init_type_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractItemModel,
    cast_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
