/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbasictimer.sip"
#include <qbasictimer.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQBasicTimer.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQBasicTimer.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQBasicTimer.cpp"


PyDoc_STRVAR(doc_QBasicTimer_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBasicTimer_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_isActive, doc_QBasicTimer_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_timerId, "timerId(self) -> int");

extern "C" {static PyObject *meth_QBasicTimer_timerId(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_timerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->timerId();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_timerId, doc_QBasicTimer_timerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_start, "start(self, int, Qt.TimerType, QObject)\n"
"start(self, int, QObject)");

extern "C" {static PyObject *meth_QBasicTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TimerType a1;
         ::QObject* a2;
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ8", &sipSelf, sipType_QBasicTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            sipCpp->start(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QObject* a1;
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QBasicTimer, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->start(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_start, doc_QBasicTimer_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_stop, "stop(self)");

extern "C" {static PyObject *meth_QBasicTimer_stop(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_stop, doc_QBasicTimer_stop);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBasicTimer(void *, int);}
static void release_QBasicTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBasicTimer *>(sipCppV);
}


extern "C" {static void *array_QBasicTimer(Py_ssize_t);}
static void *array_QBasicTimer(Py_ssize_t sipNrElem)
{
    return new  ::QBasicTimer[sipNrElem];
}


extern "C" {static void assign_QBasicTimer(void *, Py_ssize_t, void *);}
static void assign_QBasicTimer(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBasicTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBasicTimer *>(sipSrc);
}


extern "C" {static void *copy_QBasicTimer(const void *, Py_ssize_t);}
static void *copy_QBasicTimer(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QBasicTimer(reinterpret_cast<const  ::QBasicTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBasicTimer(sipSimpleWrapper *);}
static void dealloc_QBasicTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBasicTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBasicTimer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBasicTimer();

            return sipCpp;
        }
    }

    {
        const  ::QBasicTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBasicTimer, &a0))
        {
            sipCpp = new  ::QBasicTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QBasicTimer[] = {
    {sipName_isActive, meth_QBasicTimer_isActive, METH_VARARGS, doc_QBasicTimer_isActive},
    {sipName_start, meth_QBasicTimer_start, METH_VARARGS, doc_QBasicTimer_start},
    {sipName_stop, meth_QBasicTimer_stop, METH_VARARGS, doc_QBasicTimer_stop},
    {sipName_timerId, meth_QBasicTimer_timerId, METH_VARARGS, doc_QBasicTimer_timerId}
};

PyDoc_STRVAR(doc_QBasicTimer, "\1QBasicTimer()\n"
"QBasicTimer(QBasicTimer)");


static pyqt5ClassPluginDef plugin_QBasicTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QBasicTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBasicTimer,
        SIP_NULLPTR,
        &plugin_QBasicTimer
    },
    {
        sipNameNr_QBasicTimer,
        {0, 0, 1},
        4, methods_QBasicTimer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBasicTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QBasicTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QBasicTimer,
    assign_QBasicTimer,
    array_QBasicTimer,
    copy_QBasicTimer,
    release_QBasicTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
