/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmimedatabase.sip"
#include <qmimedatabase.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"

#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMimeDatabase.cpp"


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForName, "mimeTypeForName(self, str) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForName, doc_QMimeDatabase_mimeTypeForName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFile, "mimeTypeForFile(self, str, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType\n"
"mimeTypeForFile(self, QFileInfo, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const  ::QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMimeDatabase_MatchMode, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFile(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
        const  ::QFileInfo* a0;
         ::QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const  ::QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QFileInfo, &a0, sipType_QMimeDatabase_MatchMode, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFile(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFile, doc_QMimeDatabase_mimeTypeForFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypesForFileName, "mimeTypesForFileName(self, str) -> List[QMimeType]");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList< ::QMimeType>*sipRes;

            sipRes = new QList< ::QMimeType>(sipCpp->mimeTypesForFileName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypesForFileName, doc_QMimeDatabase_mimeTypesForFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForData, "mimeTypeForData(self, Union[QByteArray, bytes, bytearray]) -> QMimeType\n"
"mimeTypeForData(self, QIODevice) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForData(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
         ::QIODevice* a0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QIODevice, &a0))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForData(a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForData, doc_QMimeDatabase_mimeTypeForData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForUrl, "mimeTypeForUrl(self, QUrl) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QUrl, &a0))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForUrl(*a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForUrl, doc_QMimeDatabase_mimeTypeForUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFileNameAndData, "mimeTypeForFileNameAndData(self, str, QIODevice) -> QMimeType\n"
"mimeTypeForFileNameAndData(self, str, Union[QByteArray, bytes, bytearray]) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice* a1;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFileNameAndData, doc_QMimeDatabase_mimeTypeForFileNameAndData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_suffixForFileName, "suffixForFileName(self, str) -> str");

extern "C" {static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->suffixForFileName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_suffixForFileName, doc_QMimeDatabase_suffixForFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_allMimeTypes, "allMimeTypes(self) -> List[QMimeType]");

extern "C" {static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeDatabase, &sipCpp))
        {
            QList< ::QMimeType>*sipRes;

            sipRes = new QList< ::QMimeType>(sipCpp->allMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_allMimeTypes, doc_QMimeDatabase_allMimeTypes);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeDatabase(void *, int);}
static void release_QMimeDatabase(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMimeDatabase *>(sipCppV);
}


extern "C" {static void *array_QMimeDatabase(Py_ssize_t);}
static void *array_QMimeDatabase(Py_ssize_t sipNrElem)
{
    return new  ::QMimeDatabase[sipNrElem];
}


extern "C" {static void dealloc_QMimeDatabase(sipSimpleWrapper *);}
static void dealloc_QMimeDatabase(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeDatabase(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMimeDatabase *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMimeDatabase();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMimeDatabase[] = {
    {sipName_allMimeTypes, meth_QMimeDatabase_allMimeTypes, METH_VARARGS, doc_QMimeDatabase_allMimeTypes},
    {sipName_mimeTypeForData, meth_QMimeDatabase_mimeTypeForData, METH_VARARGS, doc_QMimeDatabase_mimeTypeForData},
    {sipName_mimeTypeForFile, SIP_MLMETH_CAST(meth_QMimeDatabase_mimeTypeForFile), METH_VARARGS|METH_KEYWORDS, doc_QMimeDatabase_mimeTypeForFile},
    {sipName_mimeTypeForFileNameAndData, meth_QMimeDatabase_mimeTypeForFileNameAndData, METH_VARARGS, doc_QMimeDatabase_mimeTypeForFileNameAndData},
    {sipName_mimeTypeForName, meth_QMimeDatabase_mimeTypeForName, METH_VARARGS, doc_QMimeDatabase_mimeTypeForName},
    {sipName_mimeTypeForUrl, meth_QMimeDatabase_mimeTypeForUrl, METH_VARARGS, doc_QMimeDatabase_mimeTypeForUrl},
    {sipName_mimeTypesForFileName, meth_QMimeDatabase_mimeTypesForFileName, METH_VARARGS, doc_QMimeDatabase_mimeTypesForFileName},
    {sipName_suffixForFileName, meth_QMimeDatabase_suffixForFileName, METH_VARARGS, doc_QMimeDatabase_suffixForFileName}
};

static sipEnumMemberDef enummembers_QMimeDatabase[] = {
    {sipName_MatchContent, static_cast<int>( ::QMimeDatabase::MatchContent), 177},
    {sipName_MatchDefault, static_cast<int>( ::QMimeDatabase::MatchDefault), 177},
    {sipName_MatchExtension, static_cast<int>( ::QMimeDatabase::MatchExtension), 177},
};

PyDoc_STRVAR(doc_QMimeDatabase, "\1QMimeDatabase()");


static pyqt5ClassPluginDef plugin_QMimeDatabase = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMimeDatabase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMimeDatabase,
        SIP_NULLPTR,
        &plugin_QMimeDatabase
    },
    {
        sipNameNr_QMimeDatabase,
        {0, 0, 1},
        8, methods_QMimeDatabase,
        3, enummembers_QMimeDatabase,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMimeDatabase,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMimeDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMimeDatabase,
    SIP_NULLPTR,
    array_QMimeDatabase,
    SIP_NULLPTR,
    release_QMimeDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
