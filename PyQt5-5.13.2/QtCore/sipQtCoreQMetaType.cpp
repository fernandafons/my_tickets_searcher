/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMetaType.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMetaType.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQMetaType.cpp"


PyDoc_STRVAR(doc_QMetaType_type, "type(str) -> int");

extern "C" {static PyObject *meth_QMetaType_type(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_type(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            int sipRes;

            sipRes =  ::QMetaType::type(a0);
            Py_DECREF(a0Keep);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_type, doc_QMetaType_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_typeName, "typeName(int) -> str");

extern "C" {static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            sipRes =  ::QMetaType::typeName(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeName, doc_QMetaType_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_isRegistered, "isRegistered(int) -> bool\n"
"isRegistered(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isRegistered(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes =  ::QMetaType::isRegistered(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegistered();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isRegistered, doc_QMetaType_isRegistered);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_typeFlags, "typeFlags(int) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags( ::QMetaType::typeFlags(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeFlags, doc_QMetaType_typeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_flags, "flags(self) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_flags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_flags, doc_QMetaType_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isValid, doc_QMetaType_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_metaObjectForType, "metaObjectForType(int) -> QMetaObject");

extern "C" {static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const  ::QMetaObject*sipRes;

            sipRes =  ::QMetaType::metaObjectForType(a0);

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_metaObjectForType, doc_QMetaType_metaObjectForType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaType(void *, int);}
static void release_QMetaType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaType *>(sipCppV);
}


extern "C" {static void dealloc_QMetaType(sipSimpleWrapper *);}
static void dealloc_QMetaType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaType *sipCpp = SIP_NULLPTR;

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QMetaType(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaType[] = {
    {sipName_flags, meth_QMetaType_flags, METH_VARARGS, doc_QMetaType_flags},
    {sipName_isRegistered, meth_QMetaType_isRegistered, METH_VARARGS, doc_QMetaType_isRegistered},
    {sipName_isValid, meth_QMetaType_isValid, METH_VARARGS, doc_QMetaType_isValid},
    {sipName_metaObjectForType, meth_QMetaType_metaObjectForType, METH_VARARGS, doc_QMetaType_metaObjectForType},
    {sipName_type, meth_QMetaType_type, METH_VARARGS, doc_QMetaType_type},
    {sipName_typeFlags, meth_QMetaType_typeFlags, METH_VARARGS, doc_QMetaType_typeFlags},
    {sipName_typeName, meth_QMetaType_typeName, METH_VARARGS, doc_QMetaType_typeName}
};

static sipEnumMemberDef enummembers_QMetaType[] = {
    {sipName_Bool, static_cast<int>( ::QMetaType::Bool), 172},
    {sipName_Char, static_cast<int>( ::QMetaType::Char), 172},
    {sipName_Double, static_cast<int>( ::QMetaType::Double), 172},
    {sipName_FirstGuiType, static_cast<int>( ::QMetaType::FirstGuiType), 172},
    {sipName_Float, static_cast<int>( ::QMetaType::Float), 172},
    {sipName_Int, static_cast<int>( ::QMetaType::Int), 172},
    {sipName_IsEnumeration, static_cast<int>( ::QMetaType::IsEnumeration), 173},
    {sipName_LastCoreType, static_cast<int>( ::QMetaType::LastCoreType), 172},
    {sipName_Long, static_cast<int>( ::QMetaType::Long), 172},
    {sipName_LongLong, static_cast<int>( ::QMetaType::LongLong), 172},
    {sipName_MovableType, static_cast<int>( ::QMetaType::MovableType), 173},
    {sipName_NeedsConstruction, static_cast<int>( ::QMetaType::NeedsConstruction), 173},
    {sipName_NeedsDestruction, static_cast<int>( ::QMetaType::NeedsDestruction), 173},
    {sipName_PointerToQObject, static_cast<int>( ::QMetaType::PointerToQObject), 173},
    {sipName_QBitArray, static_cast<int>( ::QMetaType::QBitArray), 172},
    {sipName_QBitmap, static_cast<int>( ::QMetaType::QBitmap), 172},
    {sipName_QBrush, static_cast<int>( ::QMetaType::QBrush), 172},
    {sipName_QByteArray, static_cast<int>( ::QMetaType::QByteArray), 172},
    {sipName_QByteArrayList, static_cast<int>( ::QMetaType::QByteArrayList), 172},
    {sipName_QCborArray, static_cast<int>( ::QMetaType::QCborArray), 172},
    {sipName_QCborMap, static_cast<int>( ::QMetaType::QCborMap), 172},
    {sipName_QCborSimpleType, static_cast<int>( ::QMetaType::QCborSimpleType), 172},
    {sipName_QCborValue, static_cast<int>( ::QMetaType::QCborValue), 172},
    {sipName_QChar, static_cast<int>( ::QMetaType::QChar), 172},
    {sipName_QColor, static_cast<int>( ::QMetaType::QColor), 172},
    {sipName_QCursor, static_cast<int>( ::QMetaType::QCursor), 172},
    {sipName_QDate, static_cast<int>( ::QMetaType::QDate), 172},
    {sipName_QDateTime, static_cast<int>( ::QMetaType::QDateTime), 172},
    {sipName_QEasingCurve, static_cast<int>( ::QMetaType::QEasingCurve), 172},
    {sipName_QFont, static_cast<int>( ::QMetaType::QFont), 172},
    {sipName_QIcon, static_cast<int>( ::QMetaType::QIcon), 172},
    {sipName_QImage, static_cast<int>( ::QMetaType::QImage), 172},
    {sipName_QJsonArray, static_cast<int>( ::QMetaType::QJsonArray), 172},
    {sipName_QJsonDocument, static_cast<int>( ::QMetaType::QJsonDocument), 172},
    {sipName_QJsonObject, static_cast<int>( ::QMetaType::QJsonObject), 172},
    {sipName_QJsonValue, static_cast<int>( ::QMetaType::QJsonValue), 172},
    {sipName_QKeySequence, static_cast<int>( ::QMetaType::QKeySequence), 172},
    {sipName_QLine, static_cast<int>( ::QMetaType::QLine), 172},
    {sipName_QLineF, static_cast<int>( ::QMetaType::QLineF), 172},
    {sipName_QLocale, static_cast<int>( ::QMetaType::QLocale), 172},
    {sipName_QMatrix, static_cast<int>( ::QMetaType::QMatrix), 172},
    {sipName_QMatrix4x4, static_cast<int>( ::QMetaType::QMatrix4x4), 172},
    {sipName_QModelIndex, static_cast<int>( ::QMetaType::QModelIndex), 172},
    {sipName_QObjectStar, static_cast<int>( ::QMetaType::QObjectStar), 172},
    {sipName_QPalette, static_cast<int>( ::QMetaType::QPalette), 172},
    {sipName_QPen, static_cast<int>( ::QMetaType::QPen), 172},
    {sipName_QPersistentModelIndex, static_cast<int>( ::QMetaType::QPersistentModelIndex), 172},
    {sipName_QPixmap, static_cast<int>( ::QMetaType::QPixmap), 172},
    {sipName_QPoint, static_cast<int>( ::QMetaType::QPoint), 172},
    {sipName_QPointF, static_cast<int>( ::QMetaType::QPointF), 172},
    {sipName_QPolygon, static_cast<int>( ::QMetaType::QPolygon), 172},
    {sipName_QPolygonF, static_cast<int>( ::QMetaType::QPolygonF), 172},
    {sipName_QQuaternion, static_cast<int>( ::QMetaType::QQuaternion), 172},
    {sipName_QRect, static_cast<int>( ::QMetaType::QRect), 172},
    {sipName_QRectF, static_cast<int>( ::QMetaType::QRectF), 172},
    {sipName_QRegExp, static_cast<int>( ::QMetaType::QRegExp), 172},
    {sipName_QRegion, static_cast<int>( ::QMetaType::QRegion), 172},
    {sipName_QRegularExpression, static_cast<int>( ::QMetaType::QRegularExpression), 172},
    {sipName_QSize, static_cast<int>( ::QMetaType::QSize), 172},
    {sipName_QSizeF, static_cast<int>( ::QMetaType::QSizeF), 172},
    {sipName_QSizePolicy, static_cast<int>( ::QMetaType::QSizePolicy), 172},
    {sipName_QString, static_cast<int>( ::QMetaType::QString), 172},
    {sipName_QStringList, static_cast<int>( ::QMetaType::QStringList), 172},
    {sipName_QTextFormat, static_cast<int>( ::QMetaType::QTextFormat), 172},
    {sipName_QTextLength, static_cast<int>( ::QMetaType::QTextLength), 172},
    {sipName_QTime, static_cast<int>( ::QMetaType::QTime), 172},
    {sipName_QTransform, static_cast<int>( ::QMetaType::QTransform), 172},
    {sipName_QUrl, static_cast<int>( ::QMetaType::QUrl), 172},
    {sipName_QUuid, static_cast<int>( ::QMetaType::QUuid), 172},
    {sipName_QVariant, static_cast<int>( ::QMetaType::QVariant), 172},
    {sipName_QVariantHash, static_cast<int>( ::QMetaType::QVariantHash), 172},
    {sipName_QVariantList, static_cast<int>( ::QMetaType::QVariantList), 172},
    {sipName_QVariantMap, static_cast<int>( ::QMetaType::QVariantMap), 172},
    {sipName_QVector2D, static_cast<int>( ::QMetaType::QVector2D), 172},
    {sipName_QVector3D, static_cast<int>( ::QMetaType::QVector3D), 172},
    {sipName_QVector4D, static_cast<int>( ::QMetaType::QVector4D), 172},
    {sipName_SChar, static_cast<int>( ::QMetaType::SChar), 172},
    {sipName_Short, static_cast<int>( ::QMetaType::Short), 172},
    {sipName_UChar, static_cast<int>( ::QMetaType::UChar), 172},
    {sipName_UInt, static_cast<int>( ::QMetaType::UInt), 172},
    {sipName_ULong, static_cast<int>( ::QMetaType::ULong), 172},
    {sipName_ULongLong, static_cast<int>( ::QMetaType::ULongLong), 172},
    {sipName_UShort, static_cast<int>( ::QMetaType::UShort), 172},
    {sipName_UnknownType, static_cast<int>( ::QMetaType::UnknownType), 172},
    {sipName_User, static_cast<int>( ::QMetaType::User), 172},
    {sipName_Void, static_cast<int>( ::QMetaType::Void), 172},
    {sipName_VoidStar, static_cast<int>( ::QMetaType::VoidStar), 172},
};

PyDoc_STRVAR(doc_QMetaType, "\1QMetaType(int)");


static pyqt5ClassPluginDef plugin_QMetaType = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaType = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaType,
        SIP_NULLPTR,
        &plugin_QMetaType
    },
    {
        sipNameNr_QMetaType,
        {0, 0, 1},
        7, methods_QMetaType,
        87, enummembers_QMetaType,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaType,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
