/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"


class sipQCoreApplication : public  ::QCoreApplication
{
public:
    sipQCoreApplication(int&,char**);
    virtual ~sipQCoreApplication();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool notify( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCoreApplication(const sipQCoreApplication &);
    sipQCoreApplication &operator = (const sipQCoreApplication &);

    char sipPyMethods[8];
};

sipQCoreApplication::sipQCoreApplication(int& a0,char**a1):  ::QCoreApplication(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCoreApplication::~sipQCoreApplication()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQCoreApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QCoreApplication);

    return  ::QCoreApplication::metaObject();
}

int sipQCoreApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCoreApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QCoreApplication,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQCoreApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QCoreApplication, _clname, &sipCpp) ? sipCpp :  ::QCoreApplication::qt_metacast(_clname));
}

bool sipQCoreApplication::notify( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_notify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_notify);
#endif

    if (!sipMeth)
        return  ::QCoreApplication::notify(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQCoreApplication::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QCoreApplication::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QCoreApplication::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQCoreApplication::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QCoreApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QCoreApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QCoreApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QCoreApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QCoreApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationDomain, "setOrganizationDomain(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setOrganizationDomain(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationDomain, doc_QCoreApplication_setOrganizationDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationDomain, "organizationDomain() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::organizationDomain());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationDomain, doc_QCoreApplication_organizationDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationName, "setOrganizationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setOrganizationName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationName, doc_QCoreApplication_setOrganizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationName, "organizationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationName, doc_QCoreApplication_organizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationName, "setApplicationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setApplicationName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationName, doc_QCoreApplication_setApplicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationName, "applicationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationName, doc_QCoreApplication_applicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_arguments, "arguments() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QCoreApplication::arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_arguments, doc_QCoreApplication_arguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_instance, "instance() -> QCoreApplication");

extern "C" {static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCoreApplication*sipRes;

            sipRes =  ::QCoreApplication::instance();

            return sipConvertFromType(sipRes,sipType_QCoreApplication,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_instance, doc_QCoreApplication_instance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec_, doc_QCoreApplication_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec, doc_QCoreApplication_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_processEvents, "processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)\n"
"processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int)");

extern "C" {static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
         ::QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_processEvents, doc_QCoreApplication_processEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exit, "exit(returnCode: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|i", &a0))
        {
             ::QCoreApplication::exit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exit, doc_QCoreApplication_exit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_sendEvent, "sendEvent(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QEvent* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::sendEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendEvent, doc_QCoreApplication_sendEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_postEvent, "postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority)");

extern "C" {static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QEvent* a1;
        int a2 = Qt::NormalEventPriority;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J:|i", sipType_QObject, &a0, sipType_QEvent, &a1, &a2))
        {
             ::QCoreApplication::postEvent(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_postEvent, doc_QCoreApplication_postEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_sendPostedEvents, "sendPostedEvents(receiver: QObject = None, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            sipName_receiver,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8i", sipType_QObject, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::sendPostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendPostedEvents, doc_QCoreApplication_sendPostedEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removePostedEvents, "removePostedEvents(QObject, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QObject, &a0, &a1))
        {
             ::QCoreApplication::removePostedEvents(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removePostedEvents, doc_QCoreApplication_removePostedEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_hasPendingEvents, "hasPendingEvents() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_hasPendingEvents, doc_QCoreApplication_hasPendingEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QCoreApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_notify, doc_QCoreApplication_notify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_startingUp, "startingUp() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::startingUp();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_startingUp, doc_QCoreApplication_startingUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_closingDown, "closingDown() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::closingDown();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_closingDown, doc_QCoreApplication_closingDown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationDirPath, "applicationDirPath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationDirPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationDirPath, doc_QCoreApplication_applicationDirPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationFilePath, "applicationFilePath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationFilePath, doc_QCoreApplication_applicationFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setLibraryPaths, "setLibraryPaths(Iterable[str])");

extern "C" {static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
             ::QCoreApplication::setLibraryPaths(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setLibraryPaths, doc_QCoreApplication_setLibraryPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_libraryPaths, "libraryPaths() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QCoreApplication::libraryPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_libraryPaths, doc_QCoreApplication_libraryPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_addLibraryPath, "addLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::addLibraryPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_addLibraryPath, doc_QCoreApplication_addLibraryPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeLibraryPath, "removeLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::removeLibraryPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeLibraryPath, doc_QCoreApplication_removeLibraryPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_installTranslator, "installTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::installTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installTranslator, doc_QCoreApplication_installTranslator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeTranslator, "removeTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::removeTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeTranslator, doc_QCoreApplication_removeTranslator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_translate, "translate(str, str, disambiguation: str = None, n: int = -1) -> str");

extern "C" {static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_disambiguation,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "AAA8|AAi", &a0Keep, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::translate(a0,a1,a2,a3));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_translate, doc_QCoreApplication_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_flush, "flush()");

extern "C" {static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_flush, doc_QCoreApplication_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setAttribute, "setAttribute(Qt.ApplicationAttribute, on: bool = True)");

extern "C" {static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationAttribute a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "E|b", sipType_Qt_ApplicationAttribute, &a0, &a1))
        {
             ::QCoreApplication::setAttribute(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setAttribute, doc_QCoreApplication_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_testAttribute, "testAttribute(Qt.ApplicationAttribute) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationAttribute a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_ApplicationAttribute, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::testAttribute(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_testAttribute, doc_QCoreApplication_testAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_quit, "quit()");

extern "C" {static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCoreApplication::quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_quit, doc_QCoreApplication_quit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QCoreApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_event, doc_QCoreApplication_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationVersion, "setApplicationVersion(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setApplicationVersion(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationVersion, doc_QCoreApplication_setApplicationVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationVersion, "applicationVersion() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationVersion());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationVersion, doc_QCoreApplication_applicationVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationPid, "applicationPid() -> int");

extern "C" {static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            sipRes =  ::QCoreApplication::applicationPid();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationPid, doc_QCoreApplication_applicationPid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_eventDispatcher, "eventDispatcher() -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes =  ::QCoreApplication::eventDispatcher();

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_eventDispatcher, doc_QCoreApplication_eventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setEventDispatcher, "setEventDispatcher(QAbstractEventDispatcher)");

extern "C" {static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractEventDispatcher* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QAbstractEventDispatcher, &a0))
        {
             ::QCoreApplication::setEventDispatcher(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setEventDispatcher, doc_QCoreApplication_setEventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_isQuitLockEnabled, "isQuitLockEnabled() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::isQuitLockEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isQuitLockEnabled, doc_QCoreApplication_isQuitLockEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setQuitLockEnabled, "setQuitLockEnabled(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QCoreApplication::setQuitLockEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setQuitLockEnabled, doc_QCoreApplication_setQuitLockEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installNativeEventFilter, doc_QCoreApplication_installNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeNativeEventFilter, doc_QCoreApplication_removeNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setSetuidAllowed, "setSetuidAllowed(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QCoreApplication::setSetuidAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setSetuidAllowed, doc_QCoreApplication_setSetuidAllowed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_isSetuidAllowed, "isSetuidAllowed() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::isSetuidAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isSetuidAllowed, doc_QCoreApplication_isSetuidAllowed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QCoreApplication___enter__(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCoreApplication, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 127 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 1640 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName___enter__, doc_QCoreApplication___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QCoreApplication___exit__(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QCoreApplication, &sipCpp, &a0, &a1, &a2))
        {
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
        // Make sure the QCoreApplication is destroyed.
        delete sipCpp;
#line 1671 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName___exit__, doc_QCoreApplication___exit__);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCoreApplication(void *, const sipTypeDef *);}
static void *cast_QCoreApplication(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCoreApplication *sipCpp = reinterpret_cast< ::QCoreApplication *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCoreApplication(void *, int);}
static void release_QCoreApplication(void *sipCppV, int)
{
     ::QCoreApplication *sipCpp = reinterpret_cast< ::QCoreApplication *>(sipCppV);

#line 61 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
        pyqt5_cleanup_qobjects();
#line 1705 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCoreApplication(sipSimpleWrapper *);}
static void dealloc_QCoreApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCoreApplication *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCoreApplication(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCoreApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCoreApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCoreApplication *sipCpp = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCoreApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_update_argv_list(a0, argc, argv);
        }
#line 1765 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCoreApplication[] = {{183, 255, 1}};


static PyMethodDef methods_QCoreApplication[] = {
    {sipName___enter__, meth_QCoreApplication___enter__, METH_VARARGS, doc_QCoreApplication___enter__},
    {sipName___exit__, meth_QCoreApplication___exit__, METH_VARARGS, doc_QCoreApplication___exit__},
    {sipName_addLibraryPath, meth_QCoreApplication_addLibraryPath, METH_VARARGS, doc_QCoreApplication_addLibraryPath},
    {sipName_applicationDirPath, meth_QCoreApplication_applicationDirPath, METH_VARARGS, doc_QCoreApplication_applicationDirPath},
    {sipName_applicationFilePath, meth_QCoreApplication_applicationFilePath, METH_VARARGS, doc_QCoreApplication_applicationFilePath},
    {sipName_applicationName, meth_QCoreApplication_applicationName, METH_VARARGS, doc_QCoreApplication_applicationName},
    {sipName_applicationPid, meth_QCoreApplication_applicationPid, METH_VARARGS, doc_QCoreApplication_applicationPid},
    {sipName_applicationVersion, meth_QCoreApplication_applicationVersion, METH_VARARGS, doc_QCoreApplication_applicationVersion},
    {sipName_arguments, meth_QCoreApplication_arguments, METH_VARARGS, doc_QCoreApplication_arguments},
    {sipName_closingDown, meth_QCoreApplication_closingDown, METH_VARARGS, doc_QCoreApplication_closingDown},
    {sipName_event, meth_QCoreApplication_event, METH_VARARGS, doc_QCoreApplication_event},
    {sipName_eventDispatcher, meth_QCoreApplication_eventDispatcher, METH_VARARGS, doc_QCoreApplication_eventDispatcher},
    {sipName_exec, meth_QCoreApplication_exec, METH_VARARGS, doc_QCoreApplication_exec},
    {sipName_exec_, meth_QCoreApplication_exec_, METH_VARARGS, doc_QCoreApplication_exec_},
    {sipName_exit, SIP_MLMETH_CAST(meth_QCoreApplication_exit), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_exit},
    {sipName_flush, meth_QCoreApplication_flush, METH_VARARGS, doc_QCoreApplication_flush},
    {sipName_hasPendingEvents, meth_QCoreApplication_hasPendingEvents, METH_VARARGS, doc_QCoreApplication_hasPendingEvents},
    {sipName_installNativeEventFilter, meth_QCoreApplication_installNativeEventFilter, METH_VARARGS, doc_QCoreApplication_installNativeEventFilter},
    {sipName_installTranslator, meth_QCoreApplication_installTranslator, METH_VARARGS, doc_QCoreApplication_installTranslator},
    {sipName_instance, meth_QCoreApplication_instance, METH_VARARGS, doc_QCoreApplication_instance},
    {sipName_isQuitLockEnabled, meth_QCoreApplication_isQuitLockEnabled, METH_VARARGS, doc_QCoreApplication_isQuitLockEnabled},
    {sipName_isSetuidAllowed, meth_QCoreApplication_isSetuidAllowed, METH_VARARGS, doc_QCoreApplication_isSetuidAllowed},
    {sipName_libraryPaths, meth_QCoreApplication_libraryPaths, METH_VARARGS, doc_QCoreApplication_libraryPaths},
    {sipName_notify, meth_QCoreApplication_notify, METH_VARARGS, doc_QCoreApplication_notify},
    {sipName_organizationDomain, meth_QCoreApplication_organizationDomain, METH_VARARGS, doc_QCoreApplication_organizationDomain},
    {sipName_organizationName, meth_QCoreApplication_organizationName, METH_VARARGS, doc_QCoreApplication_organizationName},
    {sipName_postEvent, SIP_MLMETH_CAST(meth_QCoreApplication_postEvent), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_postEvent},
    {sipName_processEvents, SIP_MLMETH_CAST(meth_QCoreApplication_processEvents), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_processEvents},
    {sipName_quit, meth_QCoreApplication_quit, METH_VARARGS, doc_QCoreApplication_quit},
    {sipName_removeLibraryPath, meth_QCoreApplication_removeLibraryPath, METH_VARARGS, doc_QCoreApplication_removeLibraryPath},
    {sipName_removeNativeEventFilter, meth_QCoreApplication_removeNativeEventFilter, METH_VARARGS, doc_QCoreApplication_removeNativeEventFilter},
    {sipName_removePostedEvents, SIP_MLMETH_CAST(meth_QCoreApplication_removePostedEvents), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_removePostedEvents},
    {sipName_removeTranslator, meth_QCoreApplication_removeTranslator, METH_VARARGS, doc_QCoreApplication_removeTranslator},
    {sipName_sendEvent, meth_QCoreApplication_sendEvent, METH_VARARGS, doc_QCoreApplication_sendEvent},
    {sipName_sendPostedEvents, SIP_MLMETH_CAST(meth_QCoreApplication_sendPostedEvents), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_sendPostedEvents},
    {sipName_setApplicationName, meth_QCoreApplication_setApplicationName, METH_VARARGS, doc_QCoreApplication_setApplicationName},
    {sipName_setApplicationVersion, meth_QCoreApplication_setApplicationVersion, METH_VARARGS, doc_QCoreApplication_setApplicationVersion},
    {sipName_setAttribute, SIP_MLMETH_CAST(meth_QCoreApplication_setAttribute), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_setAttribute},
    {sipName_setEventDispatcher, meth_QCoreApplication_setEventDispatcher, METH_VARARGS, doc_QCoreApplication_setEventDispatcher},
    {sipName_setLibraryPaths, meth_QCoreApplication_setLibraryPaths, METH_VARARGS, doc_QCoreApplication_setLibraryPaths},
    {sipName_setOrganizationDomain, meth_QCoreApplication_setOrganizationDomain, METH_VARARGS, doc_QCoreApplication_setOrganizationDomain},
    {sipName_setOrganizationName, meth_QCoreApplication_setOrganizationName, METH_VARARGS, doc_QCoreApplication_setOrganizationName},
    {sipName_setQuitLockEnabled, meth_QCoreApplication_setQuitLockEnabled, METH_VARARGS, doc_QCoreApplication_setQuitLockEnabled},
    {sipName_setSetuidAllowed, meth_QCoreApplication_setSetuidAllowed, METH_VARARGS, doc_QCoreApplication_setSetuidAllowed},
    {sipName_startingUp, meth_QCoreApplication_startingUp, METH_VARARGS, doc_QCoreApplication_startingUp},
    {sipName_testAttribute, meth_QCoreApplication_testAttribute, METH_VARARGS, doc_QCoreApplication_testAttribute},
    {sipName_translate, SIP_MLMETH_CAST(meth_QCoreApplication_translate), METH_VARARGS|METH_KEYWORDS, doc_QCoreApplication_translate}
};

PyDoc_STRVAR(doc_QCoreApplication, "\1QCoreApplication(List[str])");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCoreApplication[] = {
    {"aboutToQuit()", "\1aboutToQuit(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QCoreApplication = {
    & ::QCoreApplication::staticMetaObject,
    0,
    signals_QCoreApplication,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCoreApplication = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCoreApplication,
        SIP_NULLPTR,
        &plugin_QCoreApplication
    },
    {
        sipNameNr_QCoreApplication,
        {0, 0, 1},
        47, methods_QCoreApplication,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCoreApplication,
    -1,
    -1,
    supers_QCoreApplication,
    SIP_NULLPTR,
    init_type_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCoreApplication,
    cast_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
