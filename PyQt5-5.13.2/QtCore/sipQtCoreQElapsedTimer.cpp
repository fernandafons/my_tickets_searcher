/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qelapsedtimer.sip"
#include <qelapsedtimer.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQElapsedTimer.cpp"



PyDoc_STRVAR(doc_QElapsedTimer_clockType, "clockType() -> QElapsedTimer.ClockType");

extern "C" {static PyObject *meth_QElapsedTimer_clockType(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_clockType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QElapsedTimer::ClockType sipRes;

            sipRes =  ::QElapsedTimer::clockType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QElapsedTimer_ClockType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_clockType, doc_QElapsedTimer_clockType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_isMonotonic, "isMonotonic() -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_isMonotonic(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_isMonotonic(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QElapsedTimer::isMonotonic();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_isMonotonic, doc_QElapsedTimer_isMonotonic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_start, "start(self)");

extern "C" {static PyObject *meth_QElapsedTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_start, doc_QElapsedTimer_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_restart, "restart(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_restart(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_restart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->restart();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_restart, doc_QElapsedTimer_restart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QElapsedTimer_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_invalidate, doc_QElapsedTimer_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_isValid, doc_QElapsedTimer_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_elapsed, "elapsed(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_elapsed(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_elapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->elapsed();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_elapsed, doc_QElapsedTimer_elapsed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_hasExpired, "hasExpired(self, int) -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_hasExpired(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_hasExpired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QElapsedTimer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasExpired(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_hasExpired, doc_QElapsedTimer_hasExpired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_msecsSinceReference, "msecsSinceReference(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_msecsSinceReference(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_msecsSinceReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->msecsSinceReference();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_msecsSinceReference, doc_QElapsedTimer_msecsSinceReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_msecsTo, "msecsTo(self, QElapsedTimer) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_msecsTo(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_msecsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QElapsedTimer, &sipCpp, sipType_QElapsedTimer, &a0))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->msecsTo(*a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_msecsTo, doc_QElapsedTimer_msecsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_secsTo, "secsTo(self, QElapsedTimer) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_secsTo(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_secsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QElapsedTimer, &sipCpp, sipType_QElapsedTimer, &a0))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->secsTo(*a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_secsTo, doc_QElapsedTimer_secsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_nsecsElapsed, "nsecsElapsed(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_nsecsElapsed(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_nsecsElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->nsecsElapsed();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_nsecsElapsed, doc_QElapsedTimer_nsecsElapsed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QElapsedTimer___ge__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = !operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___lt__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___ne__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QElapsedTimer::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___eq__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QElapsedTimer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QElapsedTimer(void *, int);}
static void release_QElapsedTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QElapsedTimer *>(sipCppV);
}


extern "C" {static void *array_QElapsedTimer(Py_ssize_t);}
static void *array_QElapsedTimer(Py_ssize_t sipNrElem)
{
    return new  ::QElapsedTimer[sipNrElem];
}


extern "C" {static void assign_QElapsedTimer(void *, Py_ssize_t, void *);}
static void assign_QElapsedTimer(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QElapsedTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QElapsedTimer *>(sipSrc);
}


extern "C" {static void *copy_QElapsedTimer(const void *, Py_ssize_t);}
static void *copy_QElapsedTimer(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QElapsedTimer(reinterpret_cast<const  ::QElapsedTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QElapsedTimer(sipSimpleWrapper *);}
static void dealloc_QElapsedTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QElapsedTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QElapsedTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QElapsedTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QElapsedTimer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QElapsedTimer();

            return sipCpp;
        }
    }

    {
        const  ::QElapsedTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QElapsedTimer, &a0))
        {
            sipCpp = new  ::QElapsedTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QElapsedTimer[] = {
    {(void *)slot_QElapsedTimer___ge__, ge_slot},
    {(void *)slot_QElapsedTimer___lt__, lt_slot},
    {(void *)slot_QElapsedTimer___ne__, ne_slot},
    {(void *)slot_QElapsedTimer___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QElapsedTimer[] = {
    {sipName_clockType, meth_QElapsedTimer_clockType, METH_VARARGS, doc_QElapsedTimer_clockType},
    {sipName_elapsed, meth_QElapsedTimer_elapsed, METH_VARARGS, doc_QElapsedTimer_elapsed},
    {sipName_hasExpired, meth_QElapsedTimer_hasExpired, METH_VARARGS, doc_QElapsedTimer_hasExpired},
    {sipName_invalidate, meth_QElapsedTimer_invalidate, METH_VARARGS, doc_QElapsedTimer_invalidate},
    {sipName_isMonotonic, meth_QElapsedTimer_isMonotonic, METH_VARARGS, doc_QElapsedTimer_isMonotonic},
    {sipName_isValid, meth_QElapsedTimer_isValid, METH_VARARGS, doc_QElapsedTimer_isValid},
    {sipName_msecsSinceReference, meth_QElapsedTimer_msecsSinceReference, METH_VARARGS, doc_QElapsedTimer_msecsSinceReference},
    {sipName_msecsTo, meth_QElapsedTimer_msecsTo, METH_VARARGS, doc_QElapsedTimer_msecsTo},
    {sipName_nsecsElapsed, meth_QElapsedTimer_nsecsElapsed, METH_VARARGS, doc_QElapsedTimer_nsecsElapsed},
    {sipName_restart, meth_QElapsedTimer_restart, METH_VARARGS, doc_QElapsedTimer_restart},
    {sipName_secsTo, meth_QElapsedTimer_secsTo, METH_VARARGS, doc_QElapsedTimer_secsTo},
    {sipName_start, meth_QElapsedTimer_start, METH_VARARGS, doc_QElapsedTimer_start}
};

static sipEnumMemberDef enummembers_QElapsedTimer[] = {
    {sipName_MachAbsoluteTime, static_cast<int>( ::QElapsedTimer::MachAbsoluteTime), 68},
    {sipName_MonotonicClock, static_cast<int>( ::QElapsedTimer::MonotonicClock), 68},
    {sipName_PerformanceCounter, static_cast<int>( ::QElapsedTimer::PerformanceCounter), 68},
    {sipName_SystemTime, static_cast<int>( ::QElapsedTimer::SystemTime), 68},
    {sipName_TickCounter, static_cast<int>( ::QElapsedTimer::TickCounter), 68},
};

PyDoc_STRVAR(doc_QElapsedTimer, "\1QElapsedTimer()\n"
"QElapsedTimer(QElapsedTimer)");


static pyqt5ClassPluginDef plugin_QElapsedTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QElapsedTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QElapsedTimer,
        SIP_NULLPTR,
        &plugin_QElapsedTimer
    },
    {
        sipNameNr_QElapsedTimer,
        {0, 0, 1},
        12, methods_QElapsedTimer,
        5, enummembers_QElapsedTimer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QElapsedTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QElapsedTimer,
    init_type_QElapsedTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QElapsedTimer,
    assign_QElapsedTimer,
    array_QElapsedTimer,
    copy_QElapsedTimer,
    release_QElapsedTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
