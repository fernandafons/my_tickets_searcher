/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQAbstractAnimation.cpp"


class sipQAbstractAnimation : public  ::QAbstractAnimation
{
public:
    sipQAbstractAnimation( ::QObject*);
    virtual ~sipQAbstractAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractAnimation(const sipQAbstractAnimation &);
    sipQAbstractAnimation &operator = (const sipQAbstractAnimation &);

    char sipPyMethods[11];
};

sipQAbstractAnimation::sipQAbstractAnimation( ::QObject*a0):  ::QAbstractAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractAnimation::~sipQAbstractAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractAnimation);

    return  ::QAbstractAnimation::metaObject();
}

int sipQAbstractAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractAnimation,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAbstractAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractAnimation, _clname, &sipCpp) ? sipCpp :  ::QAbstractAnimation::qt_metacast(_clname));
}

void sipQAbstractAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_updateDirection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_updateDirection);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_updateState);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_updateState);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, sipName_QAbstractAnimation, sipName_updateCurrentTime);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, sipName_QAbstractAnimation, sipName_updateCurrentTime);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractAnimation, sipName_duration);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, sipName_QAbstractAnimation, sipName_duration);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QAbstractAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QAbstractAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractAnimation_state, "state(self) -> QAbstractAnimation.State");

extern "C" {static PyObject *meth_QAbstractAnimation_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAbstractAnimation::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractAnimation_State);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_state, doc_QAbstractAnimation_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_group, "group(self) -> QAnimationGroup");

extern "C" {static PyObject *meth_QAbstractAnimation_group(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAnimationGroup*sipRes;

            sipRes = sipCpp->group();

            return sipConvertFromType(sipRes,sipType_QAnimationGroup,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_group, doc_QAbstractAnimation_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_direction, "direction(self) -> QAbstractAnimation.Direction");

extern "C" {static PyObject *meth_QAbstractAnimation_direction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAbstractAnimation::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractAnimation_Direction);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_direction, doc_QAbstractAnimation_direction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setDirection, "setDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QAbstractAnimation_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation::Direction a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setDirection, doc_QAbstractAnimation_setDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentTime, "currentTime(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentTime();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentTime, doc_QAbstractAnimation_currentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentLoopTime, "currentLoopTime(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentLoopTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentLoopTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentLoopTime();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentLoopTime, doc_QAbstractAnimation_currentLoopTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_loopCount, doc_QAbstractAnimation_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setLoopCount, "setLoopCount(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_setLoopCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setLoopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setLoopCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setLoopCount, doc_QAbstractAnimation_setLoopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentLoop, "currentLoop(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentLoop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentLoop();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentLoop, doc_QAbstractAnimation_currentLoop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractAnimation, sipName_duration);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->duration();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_duration, doc_QAbstractAnimation_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_totalDuration, "totalDuration(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_totalDuration(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_totalDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->totalDuration();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_totalDuration, doc_QAbstractAnimation_totalDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_start, "start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped)");

extern "C" {static PyObject *meth_QAbstractAnimation_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation::DeletionPolicy a0 = QAbstractAnimation::KeepWhenStopped;
         ::QAbstractAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_policy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_DeletionPolicy, &a0))
        {
            sipCpp->start(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_start, doc_QAbstractAnimation_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_pause, "pause(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_pause(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_pause, doc_QAbstractAnimation_pause);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_resume, "resume(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_resume(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->resume();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_resume, doc_QAbstractAnimation_resume);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setPaused, "setPaused(self, bool)");

extern "C" {static PyObject *meth_QAbstractAnimation_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setPaused, doc_QAbstractAnimation_setPaused);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_stop, "stop(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_stop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_stop, doc_QAbstractAnimation_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setCurrentTime, "setCurrentTime(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_setCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setCurrentTime, doc_QAbstractAnimation_setCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_event, doc_QAbstractAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractAnimation, sipName_updateCurrentTime);
                return SIP_NULLPTR;
            }

            sipCpp->updateCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateCurrentTime, doc_QAbstractAnimation_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateState, doc_QAbstractAnimation_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::updateDirection(a0) : sipCpp->updateDirection(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateDirection, doc_QAbstractAnimation_updateDirection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractAnimation(void *, const sipTypeDef *);}
static void *cast_QAbstractAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractAnimation *sipCpp = reinterpret_cast< ::QAbstractAnimation *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractAnimation(void *, int);}
static void release_QAbstractAnimation(void *sipCppV, int)
{
     ::QAbstractAnimation *sipCpp = reinterpret_cast< ::QAbstractAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractAnimation(sipSimpleWrapper *);}
static void dealloc_QAbstractAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractAnimation[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractAnimation[] = {
    {sipName_currentLoop, meth_QAbstractAnimation_currentLoop, METH_VARARGS, doc_QAbstractAnimation_currentLoop},
    {sipName_currentLoopTime, meth_QAbstractAnimation_currentLoopTime, METH_VARARGS, doc_QAbstractAnimation_currentLoopTime},
    {sipName_currentTime, meth_QAbstractAnimation_currentTime, METH_VARARGS, doc_QAbstractAnimation_currentTime},
    {sipName_direction, meth_QAbstractAnimation_direction, METH_VARARGS, doc_QAbstractAnimation_direction},
    {sipName_duration, meth_QAbstractAnimation_duration, METH_VARARGS, doc_QAbstractAnimation_duration},
    {sipName_event, meth_QAbstractAnimation_event, METH_VARARGS, doc_QAbstractAnimation_event},
    {sipName_group, meth_QAbstractAnimation_group, METH_VARARGS, doc_QAbstractAnimation_group},
    {sipName_loopCount, meth_QAbstractAnimation_loopCount, METH_VARARGS, doc_QAbstractAnimation_loopCount},
    {sipName_pause, meth_QAbstractAnimation_pause, METH_VARARGS, doc_QAbstractAnimation_pause},
    {sipName_resume, meth_QAbstractAnimation_resume, METH_VARARGS, doc_QAbstractAnimation_resume},
    {sipName_setCurrentTime, meth_QAbstractAnimation_setCurrentTime, METH_VARARGS, doc_QAbstractAnimation_setCurrentTime},
    {sipName_setDirection, meth_QAbstractAnimation_setDirection, METH_VARARGS, doc_QAbstractAnimation_setDirection},
    {sipName_setLoopCount, meth_QAbstractAnimation_setLoopCount, METH_VARARGS, doc_QAbstractAnimation_setLoopCount},
    {sipName_setPaused, meth_QAbstractAnimation_setPaused, METH_VARARGS, doc_QAbstractAnimation_setPaused},
    {sipName_start, SIP_MLMETH_CAST(meth_QAbstractAnimation_start), METH_VARARGS|METH_KEYWORDS, doc_QAbstractAnimation_start},
    {sipName_state, meth_QAbstractAnimation_state, METH_VARARGS, doc_QAbstractAnimation_state},
    {sipName_stop, meth_QAbstractAnimation_stop, METH_VARARGS, doc_QAbstractAnimation_stop},
    {sipName_totalDuration, meth_QAbstractAnimation_totalDuration, METH_VARARGS, doc_QAbstractAnimation_totalDuration},
    {sipName_updateCurrentTime, meth_QAbstractAnimation_updateCurrentTime, METH_VARARGS, doc_QAbstractAnimation_updateCurrentTime},
    {sipName_updateDirection, meth_QAbstractAnimation_updateDirection, METH_VARARGS, doc_QAbstractAnimation_updateDirection},
    {sipName_updateState, meth_QAbstractAnimation_updateState, METH_VARARGS, doc_QAbstractAnimation_updateState}
};

static sipEnumMemberDef enummembers_QAbstractAnimation[] = {
    {sipName_Backward, static_cast<int>( ::QAbstractAnimation::Backward), 2},
    {sipName_DeleteWhenStopped, static_cast<int>( ::QAbstractAnimation::DeleteWhenStopped), 1},
    {sipName_Forward, static_cast<int>( ::QAbstractAnimation::Forward), 2},
    {sipName_KeepWhenStopped, static_cast<int>( ::QAbstractAnimation::KeepWhenStopped), 1},
    {sipName_Paused, static_cast<int>( ::QAbstractAnimation::Paused), 3},
    {sipName_Running, static_cast<int>( ::QAbstractAnimation::Running), 3},
    {sipName_Stopped, static_cast<int>( ::QAbstractAnimation::Stopped), 3},
};

PyDoc_STRVAR(doc_QAbstractAnimation, "\1QAbstractAnimation(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractAnimation[] = {
    {"directionChanged(QAbstractAnimation::Direction)", "\1directionChanged(self, QAbstractAnimation.Direction)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentLoopChanged(int)", "\1currentLoopChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QAbstractAnimation::State,QAbstractAnimation::State)", "\1stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractAnimation = {
    & ::QAbstractAnimation::staticMetaObject,
    0,
    signals_QAbstractAnimation,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractAnimation,
        SIP_NULLPTR,
        &plugin_QAbstractAnimation
    },
    {
        sipNameNr_QAbstractAnimation,
        {0, 0, 1},
        21, methods_QAbstractAnimation,
        7, enummembers_QAbstractAnimation,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractAnimation,
    -1,
    -1,
    supers_QAbstractAnimation,
    SIP_NULLPTR,
    init_type_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractAnimation,
    cast_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
