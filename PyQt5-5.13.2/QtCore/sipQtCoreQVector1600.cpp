/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 435 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVector1600.cpp"



extern "C" {static void assign_QVector_1600(void *, Py_ssize_t, void *);}
static void assign_QVector_1600(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector< ::quint16> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector< ::quint16> *>(sipSrc);
}


extern "C" {static void *array_QVector_1600(Py_ssize_t);}
static void *array_QVector_1600(Py_ssize_t sipNrElem)
{
    return new  ::QVector< ::quint16>[sipNrElem];
}


extern "C" {static void *copy_QVector_1600(const void *, Py_ssize_t);}
static void *copy_QVector_1600(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QVector< ::quint16>(reinterpret_cast<const  ::QVector< ::quint16> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_1600(void *, int);}
static void release_QVector_1600(void *ptr, int)
{
    delete reinterpret_cast< ::QVector< ::quint16> *>(ptr);
}



extern "C" {static int convertTo_QVector_1600(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_1600(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector< ::quint16> **sipCppPtr = reinterpret_cast< ::QVector< ::quint16> **>(sipCppPtrV);

#line 462 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<quint16> *qv = new QVector<quint16>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        quint16 val = sipLong_AsUnsignedShort(itm);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but 'int' is expected", i,
                        sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVector1600.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_1600(void *, PyObject *);}
static PyObject *convertFrom_QVector_1600(void *sipCppV, PyObject *)
{
    ::QVector< ::quint16> *sipCpp = reinterpret_cast< ::QVector< ::quint16> *>(sipCppV);

#line 439 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = SIPLong_FromLong(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVector1600.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_1600 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_23342,     /* QVector<quint16> */
        SIP_NULLPTR,
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_1600,
    array_QVector_1600,
    copy_QVector_1600,
    release_QVector_1600,
    convertTo_QVector_1600,
    convertFrom_QVector_1600
};
