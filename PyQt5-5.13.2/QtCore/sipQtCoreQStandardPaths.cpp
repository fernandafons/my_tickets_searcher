/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQStandardPaths.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQStandardPaths.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQStandardPaths.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQStandardPaths.cpp"


PyDoc_STRVAR(doc_QStandardPaths_writableLocation, "writableLocation(QStandardPaths.StandardLocation) -> str");

extern "C" {static PyObject *meth_QStandardPaths_writableLocation(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_writableLocation(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::writableLocation(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_writableLocation, doc_QStandardPaths_writableLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_standardLocations, "standardLocations(QStandardPaths.StandardLocation) -> List[str]");

extern "C" {static PyObject *meth_QStandardPaths_standardLocations(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_standardLocations(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QStandardPaths::standardLocations(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_standardLocations, doc_QStandardPaths_standardLocations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_locate, "locate(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> str");

extern "C" {static PyObject *meth_QStandardPaths_locate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_locate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QStandardPaths::LocateOptions a2def = QStandardPaths::LocateFile;
         ::QStandardPaths::LocateOptions* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ1|J1", sipType_QStandardPaths_StandardLocation, &a0, sipType_QString,&a1, &a1State, sipType_QStandardPaths_LocateOptions, &a2, &a2State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::locate(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QStandardPaths_LocateOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_locate, doc_QStandardPaths_locate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_locateAll, "locateAll(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> List[str]");

extern "C" {static PyObject *meth_QStandardPaths_locateAll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_locateAll(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QStandardPaths::LocateOptions a2def = QStandardPaths::LocateFile;
         ::QStandardPaths::LocateOptions* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ1|J1", sipType_QStandardPaths_StandardLocation, &a0, sipType_QString,&a1, &a1State, sipType_QStandardPaths_LocateOptions, &a2, &a2State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QStandardPaths::locateAll(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QStandardPaths_LocateOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_locateAll, doc_QStandardPaths_locateAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_displayName, "displayName(QStandardPaths.StandardLocation) -> str");

extern "C" {static PyObject *meth_QStandardPaths_displayName(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_displayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::displayName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_displayName, doc_QStandardPaths_displayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_findExecutable, "findExecutable(str, paths: Iterable[str] = []) -> str");

extern "C" {static PyObject *meth_QStandardPaths_findExecutable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_findExecutable(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList& a1def = QStringList();
        const  ::QStringList* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_paths,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::findExecutable(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_findExecutable, doc_QStandardPaths_findExecutable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_enableTestMode, "enableTestMode(bool)");

extern "C" {static PyObject *meth_QStandardPaths_enableTestMode(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_enableTestMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QStandardPaths::enableTestMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_enableTestMode, doc_QStandardPaths_enableTestMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_setTestModeEnabled, "setTestModeEnabled(bool)");

extern "C" {static PyObject *meth_QStandardPaths_setTestModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_setTestModeEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QStandardPaths::setTestModeEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_setTestModeEnabled, doc_QStandardPaths_setTestModeEnabled);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardPaths(void *, int);}
static void release_QStandardPaths(void *, int)
{
}


extern "C" {static void *init_type_QStandardPaths(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardPaths(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStandardPaths *sipCpp = SIP_NULLPTR;

    {
        const  ::QStandardPaths* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStandardPaths, &a0))
        {
            sipCpp = new  ::QStandardPaths(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QStandardPaths[] = {
    {sipName_displayName, meth_QStandardPaths_displayName, METH_VARARGS, doc_QStandardPaths_displayName},
    {sipName_enableTestMode, meth_QStandardPaths_enableTestMode, METH_VARARGS, doc_QStandardPaths_enableTestMode},
    {sipName_findExecutable, SIP_MLMETH_CAST(meth_QStandardPaths_findExecutable), METH_VARARGS|METH_KEYWORDS, doc_QStandardPaths_findExecutable},
    {sipName_locate, SIP_MLMETH_CAST(meth_QStandardPaths_locate), METH_VARARGS|METH_KEYWORDS, doc_QStandardPaths_locate},
    {sipName_locateAll, SIP_MLMETH_CAST(meth_QStandardPaths_locateAll), METH_VARARGS|METH_KEYWORDS, doc_QStandardPaths_locateAll},
    {sipName_setTestModeEnabled, meth_QStandardPaths_setTestModeEnabled, METH_VARARGS, doc_QStandardPaths_setTestModeEnabled},
    {sipName_standardLocations, meth_QStandardPaths_standardLocations, METH_VARARGS, doc_QStandardPaths_standardLocations},
    {sipName_writableLocation, meth_QStandardPaths_writableLocation, METH_VARARGS, doc_QStandardPaths_writableLocation}
};

static sipEnumMemberDef enummembers_QStandardPaths[] = {
    {sipName_AppConfigLocation, static_cast<int>( ::QStandardPaths::AppConfigLocation), 245},
    {sipName_AppDataLocation, static_cast<int>( ::QStandardPaths::AppDataLocation), 245},
    {sipName_AppLocalDataLocation, static_cast<int>( ::QStandardPaths::AppLocalDataLocation), 245},
    {sipName_ApplicationsLocation, static_cast<int>( ::QStandardPaths::ApplicationsLocation), 245},
    {sipName_CacheLocation, static_cast<int>( ::QStandardPaths::CacheLocation), 245},
    {sipName_ConfigLocation, static_cast<int>( ::QStandardPaths::ConfigLocation), 245},
    {sipName_DataLocation, static_cast<int>( ::QStandardPaths::DataLocation), 245},
    {sipName_DesktopLocation, static_cast<int>( ::QStandardPaths::DesktopLocation), 245},
    {sipName_DocumentsLocation, static_cast<int>( ::QStandardPaths::DocumentsLocation), 245},
    {sipName_DownloadLocation, static_cast<int>( ::QStandardPaths::DownloadLocation), 245},
    {sipName_FontsLocation, static_cast<int>( ::QStandardPaths::FontsLocation), 245},
    {sipName_GenericCacheLocation, static_cast<int>( ::QStandardPaths::GenericCacheLocation), 245},
    {sipName_GenericConfigLocation, static_cast<int>( ::QStandardPaths::GenericConfigLocation), 245},
    {sipName_GenericDataLocation, static_cast<int>( ::QStandardPaths::GenericDataLocation), 245},
    {sipName_HomeLocation, static_cast<int>( ::QStandardPaths::HomeLocation), 245},
    {sipName_LocateDirectory, static_cast<int>( ::QStandardPaths::LocateDirectory), 243},
    {sipName_LocateFile, static_cast<int>( ::QStandardPaths::LocateFile), 243},
    {sipName_MoviesLocation, static_cast<int>( ::QStandardPaths::MoviesLocation), 245},
    {sipName_MusicLocation, static_cast<int>( ::QStandardPaths::MusicLocation), 245},
    {sipName_PicturesLocation, static_cast<int>( ::QStandardPaths::PicturesLocation), 245},
    {sipName_RuntimeLocation, static_cast<int>( ::QStandardPaths::RuntimeLocation), 245},
    {sipName_TempLocation, static_cast<int>( ::QStandardPaths::TempLocation), 245},
};

PyDoc_STRVAR(doc_QStandardPaths, "\1QStandardPaths(QStandardPaths)");


static pyqt5ClassPluginDef plugin_QStandardPaths = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStandardPaths = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStandardPaths,
        SIP_NULLPTR,
        &plugin_QStandardPaths
    },
    {
        sipNameNr_QStandardPaths,
        {0, 0, 1},
        8, methods_QStandardPaths,
        22, enummembers_QStandardPaths,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStandardPaths,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QStandardPaths,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStandardPaths,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
