/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 231 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"


class sipQProcess : public  ::QProcess
{
public:
    sipQProcess( ::QObject*);
    virtual ~sipQProcess();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setupChildProcess() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProcess(const sipQProcess &);
    sipQProcess &operator = (const sipQProcess &);

    char sipPyMethods[24];
};

sipQProcess::sipQProcess( ::QObject*a0):  ::QProcess(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProcess::~sipQProcess()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQProcess::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QProcess);

    return  ::QProcess::metaObject();
}

int sipQProcess::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QProcess::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QProcess,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQProcess::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QProcess, _clname, &sipCpp) ? sipCpp :  ::QProcess::qt_metacast(_clname));
}

void sipQProcess::setupChildProcess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_setupChildProcess);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_setupChildProcess);
#endif

    if (!sipMeth)
    {
         ::QProcess::setupChildProcess();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQProcess::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QProcess::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QProcess::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QProcess::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QProcess::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QProcess::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QProcess::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQProcess::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QProcess::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isSequential);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_isSequential);
#endif

    if (!sipMeth)
        return  ::QProcess::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_open);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_open);
#endif

    if (!sipMeth)
        return  ::QProcess::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_close);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_close);
#endif

    if (!sipMeth)
    {
         ::QProcess::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_pos);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_pos);
#endif

    if (!sipMeth)
        return  ::QProcess::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_size);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_size);
#endif

    if (!sipMeth)
        return  ::QProcess::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_seek);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_seek);
#endif

    if (!sipMeth)
        return  ::QProcess::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_atEnd);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_atEnd);
#endif

    if (!sipMeth)
        return  ::QProcess::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_reset);
#endif

    if (!sipMeth)
        return  ::QProcess::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_bytesAvailable);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_bytesAvailable);
#endif

    if (!sipMeth)
        return  ::QProcess::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_bytesToWrite);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_bytesToWrite);
#endif

    if (!sipMeth)
        return  ::QProcess::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canReadLine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_canReadLine);
#endif

    if (!sipMeth)
        return  ::QProcess::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_waitForReadyRead);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_waitForReadyRead);
#endif

    if (!sipMeth)
        return  ::QProcess::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_waitForBytesWritten);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_waitForBytesWritten);
#endif

    if (!sipMeth)
        return  ::QProcess::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQProcess::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_readData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_readData);
#endif

    if (!sipMeth)
        return  ::QProcess::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQProcess::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_readLineData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_readLineData);
#endif

    if (!sipMeth)
        return  ::QProcess::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQProcess::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_writeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_writeData);
#endif

    if (!sipMeth)
        return  ::QProcess::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QProcess_start, "start(self, str, Iterable[str], mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"start(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"start(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QProcess_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            sipCpp->start(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->start(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->start(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_start, doc_QProcess_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readChannel, "readChannel(self) -> QProcess.ProcessChannel");

extern "C" {static PyObject *meth_QProcess_readChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessChannel sipRes;

            sipRes = sipCpp->readChannel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessChannel);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readChannel, doc_QProcess_readChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setReadChannel, "setReadChannel(self, QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_setReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannel a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->setReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setReadChannel, doc_QProcess_setReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_closeReadChannel, "closeReadChannel(self, QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_closeReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannel a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->closeReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeReadChannel, doc_QProcess_closeReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_closeWriteChannel, "closeWriteChannel(self)");

extern "C" {static PyObject *meth_QProcess_closeWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->closeWriteChannel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeWriteChannel, doc_QProcess_closeWriteChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_workingDirectory, "workingDirectory(self) -> str");

extern "C" {static PyObject *meth_QProcess_workingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_workingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->workingDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_workingDirectory, doc_QProcess_workingDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setWorkingDirectory, "setWorkingDirectory(self, str)");

extern "C" {static PyObject *meth_QProcess_setWorkingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setWorkingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWorkingDirectory(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setWorkingDirectory, doc_QProcess_setWorkingDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_error, "error(self) -> QProcess.ProcessError");

extern "C" {static PyObject *meth_QProcess_error(PyObject *, PyObject *);}
static PyObject *meth_QProcess_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessError);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_error, doc_QProcess_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_state, "state(self) -> QProcess.ProcessState");

extern "C" {static PyObject *meth_QProcess_state(PyObject *, PyObject *);}
static PyObject *meth_QProcess_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_state, doc_QProcess_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_pid, "pid(self) -> int");

extern "C" {static PyObject *meth_QProcess_pid(PyObject *, PyObject *);}
static PyObject *meth_QProcess_pid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::Q_PID sipRes;

            sipRes = sipCpp->pid();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_pid, doc_QProcess_pid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForStarted, "waitForStarted(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForStarted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForStarted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForStarted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForStarted, doc_QProcess_waitForStarted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForReadyRead, doc_QProcess_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForBytesWritten, doc_QProcess_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForFinished, "waitForFinished(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForFinished(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForFinished(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForFinished(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForFinished, doc_QProcess_waitForFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardOutput, "readAllStandardOutput(self) -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardOutput(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAllStandardOutput());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardOutput, doc_QProcess_readAllStandardOutput);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardError, "readAllStandardError(self) -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardError(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAllStandardError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardError, doc_QProcess_readAllStandardError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_exitCode, "exitCode(self) -> int");

extern "C" {static PyObject *meth_QProcess_exitCode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->exitCode();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitCode, doc_QProcess_exitCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_exitStatus, "exitStatus(self) -> QProcess.ExitStatus");

extern "C" {static PyObject *meth_QProcess_exitStatus(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ExitStatus sipRes;

            sipRes = sipCpp->exitStatus();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ExitStatus);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitStatus, doc_QProcess_exitStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QProcess_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesAvailable, doc_QProcess_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QProcess_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesToWrite, doc_QProcess_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QProcess_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QProcess_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_isSequential, doc_QProcess_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QProcess_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QProcess_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_canReadLine, doc_QProcess_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_close, "close(self)");

extern "C" {static PyObject *meth_QProcess_close(PyObject *, PyObject *);}
static PyObject *meth_QProcess_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QProcess::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_close, doc_QProcess_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QProcess_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QProcess_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_atEnd, doc_QProcess_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_execute, "execute(str, Iterable[str]) -> int\n"
"execute(str) -> int");

extern "C" {static PyObject *meth_QProcess_execute(PyObject *, PyObject *);}
static PyObject *meth_QProcess_execute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QProcess::execute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QProcess::execute(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_execute, doc_QProcess_execute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_startDetached, "startDetached(str, Iterable[str], str) -> Tuple[bool, int]\n"
"startDetached(str, Iterable[str]) -> bool\n"
"startDetached(str) -> bool\n"
"startDetached(self) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_startDetached(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::qint64 a3;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0,*a1,*a2,&a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bn)",sipRes,a3);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::qint64 a0;
         ::QProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->startDetached(&a0);

            return sipBuildResult(0,"(bn)",sipRes,a0);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_startDetached, doc_QProcess_startDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_systemEnvironment, "systemEnvironment() -> List[str]");

extern "C" {static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QProcess::systemEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_systemEnvironment, doc_QProcess_systemEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processChannelMode, "processChannelMode(self) -> QProcess.ProcessChannelMode");

extern "C" {static PyObject *meth_QProcess_processChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessChannelMode sipRes;

            sipRes = sipCpp->processChannelMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessChannelMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processChannelMode, doc_QProcess_processChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessChannelMode, "setProcessChannelMode(self, QProcess.ProcessChannelMode)");

extern "C" {static PyObject *meth_QProcess_setProcessChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannelMode a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannelMode, &a0))
        {
            sipCpp->setProcessChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessChannelMode, doc_QProcess_setProcessChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardInputFile, "setStandardInputFile(self, str)");

extern "C" {static PyObject *meth_QProcess_setStandardInputFile(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardInputFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStandardInputFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardInputFile, doc_QProcess_setStandardInputFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputFile, "setStandardOutputFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::Truncate;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardOutputFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputFile, doc_QProcess_setStandardOutputFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardErrorFile, "setStandardErrorFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardErrorFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardErrorFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::Truncate;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardErrorFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardErrorFile, doc_QProcess_setStandardErrorFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputProcess, "setStandardOutputProcess(self, QProcess)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess* a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess, &a0))
        {
            sipCpp->setStandardOutputProcess(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputProcess, doc_QProcess_setStandardOutputProcess);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_terminate, "terminate(self)");

extern "C" {static PyObject *meth_QProcess_terminate(PyObject *, PyObject *);}
static PyObject *meth_QProcess_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->terminate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_terminate, doc_QProcess_terminate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_kill, "kill(self)");

extern "C" {static PyObject *meth_QProcess_kill(PyObject *, PyObject *);}
static PyObject *meth_QProcess_kill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->kill();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_kill, doc_QProcess_kill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessState, "setProcessState(self, QProcess.ProcessState)");

extern "C" {static PyObject *meth_QProcess_setProcessState(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessState a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessState, &a0))
        {
            sipCpp->setProcessState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessState, doc_QProcess_setProcessState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setupChildProcess, "setupChildProcess(self)");

extern "C" {static PyObject *meth_QProcess_setupChildProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setupChildProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QProcess, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QProcess::setupChildProcess() : sipCpp->setupChildProcess());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setupChildProcess, doc_QProcess_setupChildProcess);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QProcess_readData(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qprocess.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QProcess::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1955 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQProcess.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readData, doc_QProcess_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QProcess_writeData(PyObject *, PyObject *);}
static PyObject *meth_QProcess_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        Py_ssize_t a1;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QProcess, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_writeData, doc_QProcess_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessEnvironment, "setProcessEnvironment(self, QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcess_setProcessEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment* a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            sipCpp->setProcessEnvironment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessEnvironment, doc_QProcess_setProcessEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processEnvironment, "processEnvironment(self) -> QProcessEnvironment");

extern "C" {static PyObject *meth_QProcess_processEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcessEnvironment*sipRes;

            sipRes = new  ::QProcessEnvironment(sipCpp->processEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QProcessEnvironment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processEnvironment, doc_QProcess_processEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_program, "program(self) -> str");

extern "C" {static PyObject *meth_QProcess_program(PyObject *, PyObject *);}
static PyObject *meth_QProcess_program(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->program());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_program, doc_QProcess_program);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProgram, "setProgram(self, str)");

extern "C" {static PyObject *meth_QProcess_setProgram(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setProgram(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProgram, doc_QProcess_setProgram);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_arguments, "arguments(self) -> List[str]");

extern "C" {static PyObject *meth_QProcess_arguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_arguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_arguments, doc_QProcess_arguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setArguments, "setArguments(self, Iterable[str])");

extern "C" {static PyObject *meth_QProcess_setArguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setArguments(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setArguments, doc_QProcess_setArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_open, "open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QProcess_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_open, doc_QProcess_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_inputChannelMode, "inputChannelMode(self) -> QProcess.InputChannelMode");

extern "C" {static PyObject *meth_QProcess_inputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_inputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::InputChannelMode sipRes;

            sipRes = sipCpp->inputChannelMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_InputChannelMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_inputChannelMode, doc_QProcess_inputChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setInputChannelMode, "setInputChannelMode(self, QProcess.InputChannelMode)");

extern "C" {static PyObject *meth_QProcess_setInputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setInputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::InputChannelMode a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_InputChannelMode, &a0))
        {
            sipCpp->setInputChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setInputChannelMode, doc_QProcess_setInputChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_nullDevice, "nullDevice() -> str");

extern "C" {static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *);}
static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QProcess::nullDevice());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_nullDevice, doc_QProcess_nullDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processId, "processId(self) -> int");

extern "C" {static PyObject *meth_QProcess_processId(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->processId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processId, doc_QProcess_processId);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QProcess(void *, const sipTypeDef *);}
static void *cast_QProcess(void *sipCppV, const sipTypeDef *targetType)
{
     ::QProcess *sipCpp = reinterpret_cast< ::QProcess *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProcess(void *, int);}
static void release_QProcess(void *sipCppV, int)
{
     ::QProcess *sipCpp = reinterpret_cast< ::QProcess *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QProcess(Py_ssize_t);}
static void *array_QProcess(Py_ssize_t sipNrElem)
{
    return new  ::QProcess[sipNrElem];
}


extern "C" {static void dealloc_QProcess(sipSimpleWrapper *);}
static void dealloc_QProcess(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQProcess *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProcess(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QProcess(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProcess(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProcess *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQProcess(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProcess[] = {{95, 255, 1}};


static PyMethodDef methods_QProcess[] = {
    {sipName_arguments, meth_QProcess_arguments, METH_VARARGS, doc_QProcess_arguments},
    {sipName_atEnd, meth_QProcess_atEnd, METH_VARARGS, doc_QProcess_atEnd},
    {sipName_bytesAvailable, meth_QProcess_bytesAvailable, METH_VARARGS, doc_QProcess_bytesAvailable},
    {sipName_bytesToWrite, meth_QProcess_bytesToWrite, METH_VARARGS, doc_QProcess_bytesToWrite},
    {sipName_canReadLine, meth_QProcess_canReadLine, METH_VARARGS, doc_QProcess_canReadLine},
    {sipName_close, meth_QProcess_close, METH_VARARGS, doc_QProcess_close},
    {sipName_closeReadChannel, meth_QProcess_closeReadChannel, METH_VARARGS, doc_QProcess_closeReadChannel},
    {sipName_closeWriteChannel, meth_QProcess_closeWriteChannel, METH_VARARGS, doc_QProcess_closeWriteChannel},
    {sipName_error, meth_QProcess_error, METH_VARARGS, doc_QProcess_error},
    {sipName_execute, meth_QProcess_execute, METH_VARARGS, doc_QProcess_execute},
    {sipName_exitCode, meth_QProcess_exitCode, METH_VARARGS, doc_QProcess_exitCode},
    {sipName_exitStatus, meth_QProcess_exitStatus, METH_VARARGS, doc_QProcess_exitStatus},
    {sipName_inputChannelMode, meth_QProcess_inputChannelMode, METH_VARARGS, doc_QProcess_inputChannelMode},
    {sipName_isSequential, meth_QProcess_isSequential, METH_VARARGS, doc_QProcess_isSequential},
    {sipName_kill, meth_QProcess_kill, METH_VARARGS, doc_QProcess_kill},
    {sipName_nullDevice, meth_QProcess_nullDevice, METH_VARARGS, doc_QProcess_nullDevice},
    {sipName_open, SIP_MLMETH_CAST(meth_QProcess_open), METH_VARARGS|METH_KEYWORDS, doc_QProcess_open},
    {sipName_pid, meth_QProcess_pid, METH_VARARGS, doc_QProcess_pid},
    {sipName_processChannelMode, meth_QProcess_processChannelMode, METH_VARARGS, doc_QProcess_processChannelMode},
    {sipName_processEnvironment, meth_QProcess_processEnvironment, METH_VARARGS, doc_QProcess_processEnvironment},
    {sipName_processId, meth_QProcess_processId, METH_VARARGS, doc_QProcess_processId},
    {sipName_program, meth_QProcess_program, METH_VARARGS, doc_QProcess_program},
    {sipName_readAllStandardError, meth_QProcess_readAllStandardError, METH_VARARGS, doc_QProcess_readAllStandardError},
    {sipName_readAllStandardOutput, meth_QProcess_readAllStandardOutput, METH_VARARGS, doc_QProcess_readAllStandardOutput},
    {sipName_readChannel, meth_QProcess_readChannel, METH_VARARGS, doc_QProcess_readChannel},
    {sipName_readData, meth_QProcess_readData, METH_VARARGS, doc_QProcess_readData},
    {sipName_setArguments, meth_QProcess_setArguments, METH_VARARGS, doc_QProcess_setArguments},
    {sipName_setInputChannelMode, meth_QProcess_setInputChannelMode, METH_VARARGS, doc_QProcess_setInputChannelMode},
    {sipName_setProcessChannelMode, meth_QProcess_setProcessChannelMode, METH_VARARGS, doc_QProcess_setProcessChannelMode},
    {sipName_setProcessEnvironment, meth_QProcess_setProcessEnvironment, METH_VARARGS, doc_QProcess_setProcessEnvironment},
    {sipName_setProcessState, meth_QProcess_setProcessState, METH_VARARGS, doc_QProcess_setProcessState},
    {sipName_setProgram, meth_QProcess_setProgram, METH_VARARGS, doc_QProcess_setProgram},
    {sipName_setReadChannel, meth_QProcess_setReadChannel, METH_VARARGS, doc_QProcess_setReadChannel},
    {sipName_setStandardErrorFile, SIP_MLMETH_CAST(meth_QProcess_setStandardErrorFile), METH_VARARGS|METH_KEYWORDS, doc_QProcess_setStandardErrorFile},
    {sipName_setStandardInputFile, meth_QProcess_setStandardInputFile, METH_VARARGS, doc_QProcess_setStandardInputFile},
    {sipName_setStandardOutputFile, SIP_MLMETH_CAST(meth_QProcess_setStandardOutputFile), METH_VARARGS|METH_KEYWORDS, doc_QProcess_setStandardOutputFile},
    {sipName_setStandardOutputProcess, meth_QProcess_setStandardOutputProcess, METH_VARARGS, doc_QProcess_setStandardOutputProcess},
    {sipName_setWorkingDirectory, meth_QProcess_setWorkingDirectory, METH_VARARGS, doc_QProcess_setWorkingDirectory},
    {sipName_setupChildProcess, meth_QProcess_setupChildProcess, METH_VARARGS, doc_QProcess_setupChildProcess},
    {sipName_start, SIP_MLMETH_CAST(meth_QProcess_start), METH_VARARGS|METH_KEYWORDS, doc_QProcess_start},
    {sipName_startDetached, SIP_MLMETH_CAST(meth_QProcess_startDetached), METH_VARARGS|METH_KEYWORDS, doc_QProcess_startDetached},
    {sipName_state, meth_QProcess_state, METH_VARARGS, doc_QProcess_state},
    {sipName_systemEnvironment, meth_QProcess_systemEnvironment, METH_VARARGS, doc_QProcess_systemEnvironment},
    {sipName_terminate, meth_QProcess_terminate, METH_VARARGS, doc_QProcess_terminate},
    {sipName_waitForBytesWritten, SIP_MLMETH_CAST(meth_QProcess_waitForBytesWritten), METH_VARARGS|METH_KEYWORDS, doc_QProcess_waitForBytesWritten},
    {sipName_waitForFinished, SIP_MLMETH_CAST(meth_QProcess_waitForFinished), METH_VARARGS|METH_KEYWORDS, doc_QProcess_waitForFinished},
    {sipName_waitForReadyRead, SIP_MLMETH_CAST(meth_QProcess_waitForReadyRead), METH_VARARGS|METH_KEYWORDS, doc_QProcess_waitForReadyRead},
    {sipName_waitForStarted, SIP_MLMETH_CAST(meth_QProcess_waitForStarted), METH_VARARGS|METH_KEYWORDS, doc_QProcess_waitForStarted},
    {sipName_workingDirectory, meth_QProcess_workingDirectory, METH_VARARGS, doc_QProcess_workingDirectory},
    {sipName_writeData, meth_QProcess_writeData, METH_VARARGS, doc_QProcess_writeData}
};

static sipEnumMemberDef enummembers_QProcess[] = {
    {sipName_CrashExit, static_cast<int>( ::QProcess::CrashExit), 195},
    {sipName_Crashed, static_cast<int>( ::QProcess::Crashed), 199},
    {sipName_FailedToStart, static_cast<int>( ::QProcess::FailedToStart), 199},
    {sipName_ForwardedChannels, static_cast<int>( ::QProcess::ForwardedChannels), 198},
    {sipName_ForwardedErrorChannel, static_cast<int>( ::QProcess::ForwardedErrorChannel), 198},
    {sipName_ForwardedInputChannel, static_cast<int>( ::QProcess::ForwardedInputChannel), 196},
    {sipName_ForwardedOutputChannel, static_cast<int>( ::QProcess::ForwardedOutputChannel), 198},
    {sipName_ManagedInputChannel, static_cast<int>( ::QProcess::ManagedInputChannel), 196},
    {sipName_MergedChannels, static_cast<int>( ::QProcess::MergedChannels), 198},
    {sipName_NormalExit, static_cast<int>( ::QProcess::NormalExit), 195},
    {sipName_NotRunning, static_cast<int>( ::QProcess::NotRunning), 200},
    {sipName_ReadError, static_cast<int>( ::QProcess::ReadError), 199},
    {sipName_Running, static_cast<int>( ::QProcess::Running), 200},
    {sipName_SeparateChannels, static_cast<int>( ::QProcess::SeparateChannels), 198},
    {sipName_StandardError, static_cast<int>( ::QProcess::StandardError), 197},
    {sipName_StandardOutput, static_cast<int>( ::QProcess::StandardOutput), 197},
    {sipName_Starting, static_cast<int>( ::QProcess::Starting), 200},
    {sipName_Timedout, static_cast<int>( ::QProcess::Timedout), 199},
    {sipName_UnknownError, static_cast<int>( ::QProcess::UnknownError), 199},
    {sipName_WriteError, static_cast<int>( ::QProcess::WriteError), 199},
};

PyDoc_STRVAR(doc_QProcess, "\1QProcess(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QProcess[] = {
    {"errorOccurred(QProcess::ProcessError)", "\1errorOccurred(self, QProcess.ProcessError)", SIP_NULLPTR, SIP_NULLPTR},
    {"readyReadStandardError()", "\1readyReadStandardError(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"readyReadStandardOutput()", "\1readyReadStandardOutput(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QProcess::ProcessState)", "\1stateChanged(self, QProcess.ProcessState)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished(int,QProcess::ExitStatus)", "\1finished(self, int, QProcess.ExitStatus)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QProcess::ProcessError)", "\1error(self, QProcess.ProcessError)", &methods_QProcess[8], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QProcess = {
    & ::QProcess::staticMetaObject,
    0,
    signals_QProcess,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QProcess = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QProcess,
        SIP_NULLPTR,
        &plugin_QProcess
    },
    {
        sipNameNr_QProcess,
        {0, 0, 1},
        50, methods_QProcess,
        20, enummembers_QProcess,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QProcess,
    -1,
    -1,
    supers_QProcess,
    SIP_NULLPTR,
    init_type_QProcess,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QProcess,
    SIP_NULLPTR,
    array_QProcess,
    SIP_NULLPTR,
    release_QProcess,
    cast_QProcess,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
