/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariantanimation.sip"
#include <qvariantanimation.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 139 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 49 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQVariantAnimation.cpp"


class sipQVariantAnimation : public  ::QVariantAnimation
{
public:
    sipQVariantAnimation( ::QObject*);
    virtual ~sipQVariantAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant interpolated(const  ::QVariant&,const  ::QVariant&, ::qreal) const SIP_OVERRIDE;
    void updateCurrentValue(const  ::QVariant&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQVariantAnimation(const sipQVariantAnimation &);
    sipQVariantAnimation &operator = (const sipQVariantAnimation &);

    char sipPyMethods[13];
};

sipQVariantAnimation::sipQVariantAnimation( ::QObject*a0):  ::QVariantAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQVariantAnimation::~sipQVariantAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQVariantAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QVariantAnimation);

    return  ::QVariantAnimation::metaObject();
}

int sipQVariantAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QVariantAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QVariantAnimation,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQVariantAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QVariantAnimation, _clname, &sipCpp) ? sipCpp :  ::QVariantAnimation::qt_metacast(_clname));
}

 ::QVariant sipQVariantAnimation::interpolated(const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_interpolated);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_interpolated);
#endif

    if (!sipMeth)
        return  ::QVariantAnimation::interpolated(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,const  ::QVariant&, ::qreal);

    return sipVH_QtCore_58(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQVariantAnimation::updateCurrentValue(const  ::QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_updateCurrentValue);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_updateCurrentValue);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&);

    sipVH_QtCore_57(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQVariantAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QVariantAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQVariantAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QVariantAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQVariantAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_duration);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_duration);
#endif

    if (!sipMeth)
        return  ::QVariantAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQVariantAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_updateCurrentTime);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_updateCurrentTime);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_updateState);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_updateState);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQVariantAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_updateDirection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_updateDirection);
#endif

    if (!sipMeth)
    {
         ::QVariantAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QVariantAnimation_startValue, "startValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_startValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_startValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->startValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_startValue, doc_QVariantAnimation_startValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setStartValue, "setStartValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setStartValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setStartValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setStartValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setStartValue, doc_QVariantAnimation_setStartValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_endValue, "endValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_endValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_endValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->endValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_endValue, doc_QVariantAnimation_endValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEndValue, "setEndValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setEndValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEndValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setEndValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEndValue, doc_QVariantAnimation_setEndValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValueAt, "keyValueAt(self, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->keyValueAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValueAt, doc_QVariantAnimation_keyValueAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValueAt, "setKeyValueAt(self, float, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setKeyValueAt(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValueAt, doc_QVariantAnimation_setKeyValueAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValues, "keyValues(self) -> List[Tuple[float, Any]]");

extern "C" {static PyObject *meth_QVariantAnimation_keyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariantAnimation::KeyValues*sipRes;

            sipRes = new  ::QVariantAnimation::KeyValues(sipCpp->keyValues());

            return sipConvertFromNewType(sipRes,sipType_QVector_0600QPair_2400_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValues, doc_QVariantAnimation_keyValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValues, "setKeyValues(self, Iterable[Tuple[float, Any]])");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation::KeyValues* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVector_0600QPair_2400_0100QVariant,&a0, &a0State))
        {
            sipCpp->setKeyValues(*a0);
            sipReleaseType(const_cast< ::QVariantAnimation::KeyValues *>(a0),sipType_QVector_0600QPair_2400_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValues, doc_QVariantAnimation_setKeyValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_currentValue, "currentValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->currentValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_currentValue, doc_QVariantAnimation_currentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QVariantAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::duration() : sipCpp->duration());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_duration, doc_QVariantAnimation_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setDuration, "setDuration(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setDuration, doc_QVariantAnimation_setDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_easingCurve, "easingCurve(self) -> QEasingCurve");

extern "C" {static PyObject *meth_QVariantAnimation_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QEasingCurve*sipRes;

            sipRes = new  ::QEasingCurve(sipCpp->easingCurve());

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_easingCurve, doc_QVariantAnimation_easingCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEasingCurve, "setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type])");

extern "C" {static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp->setEasingCurve(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEasingCurve, doc_QVariantAnimation_setEasingCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QVariantAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_event, doc_QVariantAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentTime, doc_QVariantAnimation_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QVariantAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateState, doc_QVariantAnimation_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentValue, "updateCurrentValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateCurrentValue(*a0) : sipCpp->updateCurrentValue(*a0));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentValue, doc_QVariantAnimation_updateCurrentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_interpolated, "interpolated(self, Any, Any, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_interpolated(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_interpolated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::qreal a2;
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1d", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QVariantAnimation::interpolated(*a0,*a1,a2) : sipCpp->interpolated(*a0,*a1,a2)));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_interpolated, doc_QVariantAnimation_interpolated);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QVariantAnimation(void *, const sipTypeDef *);}
static void *cast_QVariantAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariantAnimation(void *, int);}
static void release_QVariantAnimation(void *sipCppV, int)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QVariantAnimation(Py_ssize_t);}
static void *array_QVariantAnimation(Py_ssize_t sipNrElem)
{
    return new  ::QVariantAnimation[sipNrElem];
}


extern "C" {static void dealloc_QVariantAnimation(sipSimpleWrapper *);}
static void dealloc_QVariantAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQVariantAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariantAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QVariantAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariantAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQVariantAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQVariantAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QVariantAnimation[] = {{0, 255, 1}};


static PyMethodDef methods_QVariantAnimation[] = {
    {sipName_currentValue, meth_QVariantAnimation_currentValue, METH_VARARGS, doc_QVariantAnimation_currentValue},
    {sipName_duration, meth_QVariantAnimation_duration, METH_VARARGS, doc_QVariantAnimation_duration},
    {sipName_easingCurve, meth_QVariantAnimation_easingCurve, METH_VARARGS, doc_QVariantAnimation_easingCurve},
    {sipName_endValue, meth_QVariantAnimation_endValue, METH_VARARGS, doc_QVariantAnimation_endValue},
    {sipName_event, meth_QVariantAnimation_event, METH_VARARGS, doc_QVariantAnimation_event},
    {sipName_interpolated, meth_QVariantAnimation_interpolated, METH_VARARGS, doc_QVariantAnimation_interpolated},
    {sipName_keyValueAt, meth_QVariantAnimation_keyValueAt, METH_VARARGS, doc_QVariantAnimation_keyValueAt},
    {sipName_keyValues, meth_QVariantAnimation_keyValues, METH_VARARGS, doc_QVariantAnimation_keyValues},
    {sipName_setDuration, meth_QVariantAnimation_setDuration, METH_VARARGS, doc_QVariantAnimation_setDuration},
    {sipName_setEasingCurve, meth_QVariantAnimation_setEasingCurve, METH_VARARGS, doc_QVariantAnimation_setEasingCurve},
    {sipName_setEndValue, meth_QVariantAnimation_setEndValue, METH_VARARGS, doc_QVariantAnimation_setEndValue},
    {sipName_setKeyValueAt, meth_QVariantAnimation_setKeyValueAt, METH_VARARGS, doc_QVariantAnimation_setKeyValueAt},
    {sipName_setKeyValues, meth_QVariantAnimation_setKeyValues, METH_VARARGS, doc_QVariantAnimation_setKeyValues},
    {sipName_setStartValue, meth_QVariantAnimation_setStartValue, METH_VARARGS, doc_QVariantAnimation_setStartValue},
    {sipName_startValue, meth_QVariantAnimation_startValue, METH_VARARGS, doc_QVariantAnimation_startValue},
    {sipName_updateCurrentTime, meth_QVariantAnimation_updateCurrentTime, METH_VARARGS, doc_QVariantAnimation_updateCurrentTime},
    {sipName_updateCurrentValue, meth_QVariantAnimation_updateCurrentValue, METH_VARARGS, doc_QVariantAnimation_updateCurrentValue},
    {sipName_updateState, meth_QVariantAnimation_updateState, METH_VARARGS, doc_QVariantAnimation_updateState}
};

PyDoc_STRVAR(doc_QVariantAnimation, "\1QVariantAnimation(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QVariantAnimation[] = {
    {"valueChanged(QVariant)", "\1valueChanged(self, Any)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QVariantAnimation = {
    & ::QVariantAnimation::staticMetaObject,
    0,
    signals_QVariantAnimation,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVariantAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVariantAnimation,
        SIP_NULLPTR,
        &plugin_QVariantAnimation
    },
    {
        sipNameNr_QVariantAnimation,
        {0, 0, 1},
        18, methods_QVariantAnimation,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVariantAnimation,
    -1,
    -1,
    supers_QVariantAnimation,
    SIP_NULLPTR,
    init_type_QVariantAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QVariantAnimation,
    SIP_NULLPTR,
    array_QVariantAnimation,
    SIP_NULLPTR,
    release_QVariantAnimation,
    cast_QVariantAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
