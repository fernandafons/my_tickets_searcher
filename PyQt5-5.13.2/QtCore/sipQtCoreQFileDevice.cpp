/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"

#line 305 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"


PyDoc_STRVAR(doc_QFileDevice_error, "error(self) -> QFileDevice.FileError");

extern "C" {static PyObject *meth_QFileDevice_error(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QFileDevice::FileError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFileDevice_FileError);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_error, doc_QFileDevice_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_unsetError, "unsetError(self)");

extern "C" {static PyObject *meth_QFileDevice_unsetError(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_unsetError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            sipCpp->unsetError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_unsetError, doc_QFileDevice_unsetError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_close, "close(self)");

extern "C" {static PyObject *meth_QFileDevice_close(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDevice::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_close, doc_QFileDevice_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_isSequential, doc_QFileDevice_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_handle(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->handle();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_handle, doc_QFileDevice_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QFileDevice_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QFileDevice::fileName() : sipCpp->fileName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_fileName, doc_QFileDevice_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_pos(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::pos() : sipCpp->pos());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_pos, doc_QFileDevice_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QFileDevice_seek(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_seek, doc_QFileDevice_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_atEnd, doc_QFileDevice_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_flush(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_flush, doc_QFileDevice_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_size, "size(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_size(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_size, doc_QFileDevice_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_resize, "resize(self, int) -> bool");

extern "C" {static PyObject *meth_QFileDevice_resize(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::resize(a0) : sipCpp->resize(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_resize, doc_QFileDevice_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_permissions, "permissions(self) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileDevice_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((sipSelfWasArg ? sipCpp-> ::QFileDevice::permissions() : sipCpp->permissions()));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_permissions, doc_QFileDevice_permissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_setPermissions, "setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool");

extern "C" {static PyObject *meth_QFileDevice_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::setPermissions(*a0) : sipCpp->setPermissions(*a0));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_setPermissions, doc_QFileDevice_setPermissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_map, "map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr");

extern "C" {static PyObject *meth_QFileDevice_map(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_map(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1;
         ::QFileDevice::MemoryMapFlags a2 = QFileDevice::NoOptions;
         ::QFileDevice *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bnn|E", &sipSelf, sipType_QFileDevice, &sipCpp, &a0, &a1, sipType_QFileDevice_MemoryMapFlags, &a2))
        {
            void*sipRes;

            sipRes = sipCpp->map(a0,a1,a2);

            return sipConvertFromVoidPtrAndSize(sipRes,a1);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_map, doc_QFileDevice_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_unmap, "unmap(self, sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QFileDevice_unmap(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_unmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        void* a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->unmap(reinterpret_cast< ::uchar *>(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_unmap, doc_QFileDevice_unmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QFileDevice_readData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFileDevice::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 609 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_readData, doc_QFileDevice_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QFileDevice_writeData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        Py_ssize_t a1;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QFileDevice, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_writeData, doc_QFileDevice_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_readLineData, "readLineData(self, int) -> bytes");

extern "C" {static PyObject *meth_QFileDevice_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 143 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFileDevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 709 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileDevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_readLineData, doc_QFileDevice_readLineData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_fileTime, "fileTime(self, QFileDevice.FileTime) -> QDateTime");

extern "C" {static PyObject *meth_QFileDevice_fileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_fileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileTime a0;
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QFileDevice_FileTime, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->fileTime(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_fileTime, doc_QFileDevice_fileTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_setFileTime, "setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool");

extern "C" {static PyObject *meth_QFileDevice_setFileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_setFileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QFileDevice::FileTime a1;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QFileDevice_FileTime, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setFileTime(*a0,a1);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_setFileTime, doc_QFileDevice_setFileTime);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileDevice(void *, const sipTypeDef *);}
static void *cast_QFileDevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileDevice *sipCpp = reinterpret_cast< ::QFileDevice *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDevice(void *, int);}
static void release_QFileDevice(void *sipCppV, int)
{
     ::QFileDevice *sipCpp = reinterpret_cast< ::QFileDevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileDevice(sipSimpleWrapper *);}
static void dealloc_QFileDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDevice(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileDevice[] = {{95, 255, 1}};


static PyMethodDef methods_QFileDevice[] = {
    {sipName_atEnd, meth_QFileDevice_atEnd, METH_VARARGS, doc_QFileDevice_atEnd},
    {sipName_close, meth_QFileDevice_close, METH_VARARGS, doc_QFileDevice_close},
    {sipName_error, meth_QFileDevice_error, METH_VARARGS, doc_QFileDevice_error},
    {sipName_fileName, meth_QFileDevice_fileName, METH_VARARGS, doc_QFileDevice_fileName},
    {sipName_fileTime, meth_QFileDevice_fileTime, METH_VARARGS, doc_QFileDevice_fileTime},
    {sipName_flush, meth_QFileDevice_flush, METH_VARARGS, doc_QFileDevice_flush},
    {sipName_handle, meth_QFileDevice_handle, METH_VARARGS, doc_QFileDevice_handle},
    {sipName_isSequential, meth_QFileDevice_isSequential, METH_VARARGS, doc_QFileDevice_isSequential},
    {sipName_map, SIP_MLMETH_CAST(meth_QFileDevice_map), METH_VARARGS|METH_KEYWORDS, doc_QFileDevice_map},
    {sipName_permissions, meth_QFileDevice_permissions, METH_VARARGS, doc_QFileDevice_permissions},
    {sipName_pos, meth_QFileDevice_pos, METH_VARARGS, doc_QFileDevice_pos},
    {sipName_readData, meth_QFileDevice_readData, METH_VARARGS, doc_QFileDevice_readData},
    {sipName_readLineData, meth_QFileDevice_readLineData, METH_VARARGS, doc_QFileDevice_readLineData},
    {sipName_resize, meth_QFileDevice_resize, METH_VARARGS, doc_QFileDevice_resize},
    {sipName_seek, meth_QFileDevice_seek, METH_VARARGS, doc_QFileDevice_seek},
    {sipName_setFileTime, meth_QFileDevice_setFileTime, METH_VARARGS, doc_QFileDevice_setFileTime},
    {sipName_setPermissions, meth_QFileDevice_setPermissions, METH_VARARGS, doc_QFileDevice_setPermissions},
    {sipName_size, meth_QFileDevice_size, METH_VARARGS, doc_QFileDevice_size},
    {sipName_unmap, meth_QFileDevice_unmap, METH_VARARGS, doc_QFileDevice_unmap},
    {sipName_unsetError, meth_QFileDevice_unsetError, METH_VARARGS, doc_QFileDevice_unsetError},
    {sipName_writeData, meth_QFileDevice_writeData, METH_VARARGS, doc_QFileDevice_writeData}
};

static sipEnumMemberDef enummembers_QFileDevice[] = {
    {sipName_AbortError, static_cast<int>( ::QFileDevice::AbortError), 78},
    {sipName_AutoCloseHandle, static_cast<int>( ::QFileDevice::AutoCloseHandle), 79},
    {sipName_CopyError, static_cast<int>( ::QFileDevice::CopyError), 78},
    {sipName_DontCloseHandle, static_cast<int>( ::QFileDevice::DontCloseHandle), 79},
    {sipName_ExeGroup, static_cast<int>( ::QFileDevice::ExeGroup), 83},
    {sipName_ExeOther, static_cast<int>( ::QFileDevice::ExeOther), 83},
    {sipName_ExeOwner, static_cast<int>( ::QFileDevice::ExeOwner), 83},
    {sipName_ExeUser, static_cast<int>( ::QFileDevice::ExeUser), 83},
    {sipName_FatalError, static_cast<int>( ::QFileDevice::FatalError), 78},
    {sipName_FileAccessTime, static_cast<int>( ::QFileDevice::FileAccessTime), 81},
    {sipName_FileBirthTime, static_cast<int>( ::QFileDevice::FileBirthTime), 81},
    {sipName_FileMetadataChangeTime, static_cast<int>( ::QFileDevice::FileMetadataChangeTime), 81},
    {sipName_FileModificationTime, static_cast<int>( ::QFileDevice::FileModificationTime), 81},
    {sipName_MapPrivateOption, static_cast<int>( ::QFileDevice::MapPrivateOption), 82},
    {sipName_NoError, static_cast<int>( ::QFileDevice::NoError), 78},
    {sipName_NoOptions, static_cast<int>( ::QFileDevice::NoOptions), 82},
    {sipName_OpenError, static_cast<int>( ::QFileDevice::OpenError), 78},
    {sipName_PermissionsError, static_cast<int>( ::QFileDevice::PermissionsError), 78},
    {sipName_PositionError, static_cast<int>( ::QFileDevice::PositionError), 78},
    {sipName_ReadError, static_cast<int>( ::QFileDevice::ReadError), 78},
    {sipName_ReadGroup, static_cast<int>( ::QFileDevice::ReadGroup), 83},
    {sipName_ReadOther, static_cast<int>( ::QFileDevice::ReadOther), 83},
    {sipName_ReadOwner, static_cast<int>( ::QFileDevice::ReadOwner), 83},
    {sipName_ReadUser, static_cast<int>( ::QFileDevice::ReadUser), 83},
    {sipName_RemoveError, static_cast<int>( ::QFileDevice::RemoveError), 78},
    {sipName_RenameError, static_cast<int>( ::QFileDevice::RenameError), 78},
    {sipName_ResizeError, static_cast<int>( ::QFileDevice::ResizeError), 78},
    {sipName_ResourceError, static_cast<int>( ::QFileDevice::ResourceError), 78},
    {sipName_TimeOutError, static_cast<int>( ::QFileDevice::TimeOutError), 78},
    {sipName_UnspecifiedError, static_cast<int>( ::QFileDevice::UnspecifiedError), 78},
    {sipName_WriteError, static_cast<int>( ::QFileDevice::WriteError), 78},
    {sipName_WriteGroup, static_cast<int>( ::QFileDevice::WriteGroup), 83},
    {sipName_WriteOther, static_cast<int>( ::QFileDevice::WriteOther), 83},
    {sipName_WriteOwner, static_cast<int>( ::QFileDevice::WriteOwner), 83},
    {sipName_WriteUser, static_cast<int>( ::QFileDevice::WriteUser), 83},
};


static pyqt5ClassPluginDef plugin_QFileDevice = {
    & ::QFileDevice::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileDevice,
        SIP_NULLPTR,
        &plugin_QFileDevice
    },
    {
        sipNameNr_QFileDevice,
        {0, 0, 1},
        21, methods_QFileDevice,
        35, enummembers_QFileDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFileDevice,
    cast_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
