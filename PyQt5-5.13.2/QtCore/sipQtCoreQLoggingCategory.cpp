/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qloggingcategory.sip"
#include <qloggingcategory.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQLoggingCategory.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQLoggingCategory.cpp"


PyDoc_STRVAR(doc_QLoggingCategory_isEnabled, "isEnabled(self, QtMsgType) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLoggingCategory, &sipCpp, sipType_QtMsgType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isEnabled, doc_QLoggingCategory_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_setEnabled, "setEnabled(self, QtMsgType, bool)");

extern "C" {static PyObject *meth_QLoggingCategory_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
        bool a1;
         ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QLoggingCategory, &sipCpp, sipType_QtMsgType, &a0, &a1))
        {
            sipCpp->setEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_setEnabled, doc_QLoggingCategory_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isDebugEnabled, "isDebugEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isDebugEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isDebugEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDebugEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isDebugEnabled, doc_QLoggingCategory_isDebugEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isInfoEnabled, "isInfoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isInfoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isInfoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInfoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isInfoEnabled, doc_QLoggingCategory_isInfoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isWarningEnabled, "isWarningEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isWarningEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isWarningEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWarningEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isWarningEnabled, doc_QLoggingCategory_isWarningEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isCriticalEnabled, "isCriticalEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isCriticalEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isCriticalEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCriticalEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isCriticalEnabled, doc_QLoggingCategory_isCriticalEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_categoryName, "categoryName(self) -> str");

extern "C" {static PyObject *meth_QLoggingCategory_categoryName(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_categoryName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->categoryName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_categoryName, doc_QLoggingCategory_categoryName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_defaultCategory, "defaultCategory() -> QLoggingCategory");

extern "C" {static PyObject *meth_QLoggingCategory_defaultCategory(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_defaultCategory(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLoggingCategory*sipRes;

            sipRes =  ::QLoggingCategory::defaultCategory();

            return sipConvertFromType(sipRes,sipType_QLoggingCategory,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_defaultCategory, doc_QLoggingCategory_defaultCategory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_setFilterRules, "setFilterRules(str)");

extern "C" {static PyObject *meth_QLoggingCategory_setFilterRules(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_setFilterRules(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QLoggingCategory::setFilterRules(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_setFilterRules, doc_QLoggingCategory_setFilterRules);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLoggingCategory___call__(PyObject *,PyObject *,PyObject *);}
static PyObject *slot_QLoggingCategory___call__(PyObject *sipSelf,PyObject *sipArgs,PyObject *)
{
     ::QLoggingCategory *sipCpp = reinterpret_cast< ::QLoggingCategory *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLoggingCategory));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLoggingCategory*sipRes;

            sipRes = &(*sipCpp)();

            return sipConvertFromType(sipRes,sipType_QLoggingCategory,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName___call__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLoggingCategory(void *, int);}
static void release_QLoggingCategory(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLoggingCategory *>(sipCppV);
}


extern "C" {static void dealloc_QLoggingCategory(sipSimpleWrapper *);}
static void dealloc_QLoggingCategory(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLoggingCategory(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLoggingCategory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLoggingCategory(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLoggingCategory *sipCpp = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AA", &a0Keep, &a0))
        {
            sipCpp = new  ::QLoggingCategory(a0);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QtMsgType a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AAE", &a0Keep, &a0, sipType_QtMsgType, &a1))
        {
            sipCpp = new  ::QLoggingCategory(a0,a1);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLoggingCategory[] = {
    {(void *)slot_QLoggingCategory___call__, call_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLoggingCategory[] = {
    {sipName_categoryName, meth_QLoggingCategory_categoryName, METH_VARARGS, doc_QLoggingCategory_categoryName},
    {sipName_defaultCategory, meth_QLoggingCategory_defaultCategory, METH_VARARGS, doc_QLoggingCategory_defaultCategory},
    {sipName_isCriticalEnabled, meth_QLoggingCategory_isCriticalEnabled, METH_VARARGS, doc_QLoggingCategory_isCriticalEnabled},
    {sipName_isDebugEnabled, meth_QLoggingCategory_isDebugEnabled, METH_VARARGS, doc_QLoggingCategory_isDebugEnabled},
    {sipName_isEnabled, meth_QLoggingCategory_isEnabled, METH_VARARGS, doc_QLoggingCategory_isEnabled},
    {sipName_isInfoEnabled, meth_QLoggingCategory_isInfoEnabled, METH_VARARGS, doc_QLoggingCategory_isInfoEnabled},
    {sipName_isWarningEnabled, meth_QLoggingCategory_isWarningEnabled, METH_VARARGS, doc_QLoggingCategory_isWarningEnabled},
    {sipName_setEnabled, meth_QLoggingCategory_setEnabled, METH_VARARGS, doc_QLoggingCategory_setEnabled},
    {sipName_setFilterRules, meth_QLoggingCategory_setFilterRules, METH_VARARGS, doc_QLoggingCategory_setFilterRules}
};

PyDoc_STRVAR(doc_QLoggingCategory, "\1QLoggingCategory(str)\n"
"QLoggingCategory(str, QtMsgType)");


static pyqt5ClassPluginDef plugin_QLoggingCategory = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLoggingCategory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLoggingCategory,
        SIP_NULLPTR,
        &plugin_QLoggingCategory
    },
    {
        sipNameNr_QLoggingCategory,
        {0, 0, 1},
        9, methods_QLoggingCategory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLoggingCategory,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLoggingCategory,
    init_type_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
