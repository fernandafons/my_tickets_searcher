/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcommandlineparser.sip"
#include <qcommandlineparser.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"

#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQCommandLineParser.cpp"


PyDoc_STRVAR(doc_QCommandLineParser_setSingleDashWordOptionMode, "setSingleDashWordOptionMode(self, QCommandLineParser.SingleDashWordOptionMode)");

extern "C" {static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser::SingleDashWordOptionMode a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineParser_SingleDashWordOptionMode, &a0))
        {
            sipCpp->setSingleDashWordOptionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setSingleDashWordOptionMode, doc_QCommandLineParser_setSingleDashWordOptionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOption, "addOption(self, QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption* a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addOption(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOption, doc_QCommandLineParser_addOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addVersionOption, "addVersionOption(self) -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QCommandLineOption*sipRes;

            sipRes = new  ::QCommandLineOption(sipCpp->addVersionOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addVersionOption, doc_QCommandLineParser_addVersionOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addHelpOption, "addHelpOption(self) -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QCommandLineOption*sipRes;

            sipRes = new  ::QCommandLineOption(sipCpp->addHelpOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addHelpOption, doc_QCommandLineParser_addHelpOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_setApplicationDescription, "setApplicationDescription(self, str)");

extern "C" {static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setApplicationDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setApplicationDescription, doc_QCommandLineParser_setApplicationDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_applicationDescription, "applicationDescription(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->applicationDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_applicationDescription, doc_QCommandLineParser_applicationDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addPositionalArgument, "addPositionalArgument(self, str, str, syntax: str = '')");

extern "C" {static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->addPositionalArgument(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addPositionalArgument, doc_QCommandLineParser_addPositionalArgument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_clearPositionalArguments, "clearPositionalArguments(self)");

extern "C" {static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->clearPositionalArguments();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_clearPositionalArguments, doc_QCommandLineParser_clearPositionalArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_process, "process(self, Iterable[str])\n"
"process(self, QCoreApplication)");

extern "C" {static PyObject *meth_QCommandLineParser_process(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_process(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QCoreApplication* a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCoreApplication, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_process, doc_QCommandLineParser_process);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_parse, "parse(self, Iterable[str]) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_parse(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->parse(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_parse, doc_QCommandLineParser_parse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_errorText, "errorText(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_errorText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_errorText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_errorText, doc_QCommandLineParser_errorText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_isSet, "isSet(self, str) -> bool\n"
"isSet(self, QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_isSet(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_isSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_isSet, doc_QCommandLineParser_isSet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_value, "value(self, str) -> str\n"
"value(self, QCommandLineOption) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_value(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_value, doc_QCommandLineParser_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_values, "values(self, str) -> List[str]\n"
"values(self, QCommandLineOption) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_values(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_values(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->values(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->values(*a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_values, doc_QCommandLineParser_values);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_positionalArguments, "positionalArguments(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->positionalArguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_positionalArguments, doc_QCommandLineParser_positionalArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_optionNames, "optionNames(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_optionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_optionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->optionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_optionNames, doc_QCommandLineParser_optionNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_unknownOptionNames, "unknownOptionNames(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->unknownOptionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_unknownOptionNames, doc_QCommandLineParser_unknownOptionNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_showHelp, "showHelp(self, exitCode: int = 0)");

extern "C" {static PyObject *meth_QCommandLineParser_showHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            sipName_exitCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QCommandLineParser, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showHelp(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showHelp, doc_QCommandLineParser_showHelp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_helpText, "helpText(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_helpText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_helpText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->helpText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_helpText, doc_QCommandLineParser_helpText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOptions, "addOptions(self, Iterable[QCommandLineOption]) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOptions(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QCommandLineOption>* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QList_0100QCommandLineOption,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->addOptions(*a0);
            sipReleaseType(const_cast<QList< ::QCommandLineOption> *>(a0),sipType_QList_0100QCommandLineOption,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOptions, doc_QCommandLineParser_addOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_showVersion, "showVersion(self)");

extern "C" {static PyObject *meth_QCommandLineParser_showVersion(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->showVersion();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showVersion, doc_QCommandLineParser_showVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode, "setOptionsAfterPositionalArgumentsMode(self, QCommandLineParser.OptionsAfterPositionalArgumentsMode)");

extern "C" {static PyObject *meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser::OptionsAfterPositionalArgumentsMode a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineParser_OptionsAfterPositionalArgumentsMode, &a0))
        {
            sipCpp->setOptionsAfterPositionalArgumentsMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setOptionsAfterPositionalArgumentsMode, doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommandLineParser(void *, int);}
static void release_QCommandLineParser(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCommandLineParser *>(sipCppV);
}


extern "C" {static void *array_QCommandLineParser(Py_ssize_t);}
static void *array_QCommandLineParser(Py_ssize_t sipNrElem)
{
    return new  ::QCommandLineParser[sipNrElem];
}


extern "C" {static void dealloc_QCommandLineParser(sipSimpleWrapper *);}
static void dealloc_QCommandLineParser(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCommandLineParser(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCommandLineParser *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCommandLineParser();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCommandLineParser[] = {
    {sipName_addHelpOption, meth_QCommandLineParser_addHelpOption, METH_VARARGS, doc_QCommandLineParser_addHelpOption},
    {sipName_addOption, meth_QCommandLineParser_addOption, METH_VARARGS, doc_QCommandLineParser_addOption},
    {sipName_addOptions, meth_QCommandLineParser_addOptions, METH_VARARGS, doc_QCommandLineParser_addOptions},
    {sipName_addPositionalArgument, SIP_MLMETH_CAST(meth_QCommandLineParser_addPositionalArgument), METH_VARARGS|METH_KEYWORDS, doc_QCommandLineParser_addPositionalArgument},
    {sipName_addVersionOption, meth_QCommandLineParser_addVersionOption, METH_VARARGS, doc_QCommandLineParser_addVersionOption},
    {sipName_applicationDescription, meth_QCommandLineParser_applicationDescription, METH_VARARGS, doc_QCommandLineParser_applicationDescription},
    {sipName_clearPositionalArguments, meth_QCommandLineParser_clearPositionalArguments, METH_VARARGS, doc_QCommandLineParser_clearPositionalArguments},
    {sipName_errorText, meth_QCommandLineParser_errorText, METH_VARARGS, doc_QCommandLineParser_errorText},
    {sipName_helpText, meth_QCommandLineParser_helpText, METH_VARARGS, doc_QCommandLineParser_helpText},
    {sipName_isSet, meth_QCommandLineParser_isSet, METH_VARARGS, doc_QCommandLineParser_isSet},
    {sipName_optionNames, meth_QCommandLineParser_optionNames, METH_VARARGS, doc_QCommandLineParser_optionNames},
    {sipName_parse, meth_QCommandLineParser_parse, METH_VARARGS, doc_QCommandLineParser_parse},
    {sipName_positionalArguments, meth_QCommandLineParser_positionalArguments, METH_VARARGS, doc_QCommandLineParser_positionalArguments},
    {sipName_process, meth_QCommandLineParser_process, METH_VARARGS, doc_QCommandLineParser_process},
    {sipName_setApplicationDescription, meth_QCommandLineParser_setApplicationDescription, METH_VARARGS, doc_QCommandLineParser_setApplicationDescription},
    {sipName_setOptionsAfterPositionalArgumentsMode, meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode, METH_VARARGS, doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode},
    {sipName_setSingleDashWordOptionMode, meth_QCommandLineParser_setSingleDashWordOptionMode, METH_VARARGS, doc_QCommandLineParser_setSingleDashWordOptionMode},
    {sipName_showHelp, SIP_MLMETH_CAST(meth_QCommandLineParser_showHelp), METH_VARARGS|METH_KEYWORDS, doc_QCommandLineParser_showHelp},
    {sipName_showVersion, meth_QCommandLineParser_showVersion, METH_VARARGS, doc_QCommandLineParser_showVersion},
    {sipName_unknownOptionNames, meth_QCommandLineParser_unknownOptionNames, METH_VARARGS, doc_QCommandLineParser_unknownOptionNames},
    {sipName_value, meth_QCommandLineParser_value, METH_VARARGS, doc_QCommandLineParser_value},
    {sipName_values, meth_QCommandLineParser_values, METH_VARARGS, doc_QCommandLineParser_values}
};

static sipEnumMemberDef enummembers_QCommandLineParser[] = {
    {sipName_ParseAsCompactedShortOptions, static_cast<int>( ::QCommandLineParser::ParseAsCompactedShortOptions), 42},
    {sipName_ParseAsLongOptions, static_cast<int>( ::QCommandLineParser::ParseAsLongOptions), 42},
    {sipName_ParseAsOptions, static_cast<int>( ::QCommandLineParser::ParseAsOptions), 41},
    {sipName_ParseAsPositionalArguments, static_cast<int>( ::QCommandLineParser::ParseAsPositionalArguments), 41},
};

PyDoc_STRVAR(doc_QCommandLineParser, "\1QCommandLineParser()");


static pyqt5ClassPluginDef plugin_QCommandLineParser = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCommandLineParser = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCommandLineParser,
        SIP_NULLPTR,
        &plugin_QCommandLineParser
    },
    {
        sipNameNr_QCommandLineParser,
        {0, 0, 1},
        22, methods_QCommandLineParser,
        4, enummembers_QCommandLineParser,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCommandLineParser,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCommandLineParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QCommandLineParser,
    SIP_NULLPTR,
    array_QCommandLineParser,
    SIP_NULLPTR,
    release_QCommandLineParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
