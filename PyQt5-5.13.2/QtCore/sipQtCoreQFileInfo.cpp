/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"
#line 305 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"


PyDoc_STRVAR(doc_QFileInfo_setFile, "setFile(self, str)\n"
"setFile(self, QFile)\n"
"setFile(self, QDir, str)");

extern "C" {static PyObject *meth_QFileInfo_setFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QFile* a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFile, &a0))
        {
            sipCpp->setFile(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QDir* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setFile, doc_QFileInfo_setFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_exists, "exists(self) -> bool\n"
"exists(str) -> bool");

extern "C" {static PyObject *meth_QFileInfo_exists(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exists();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QFileInfo::exists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_exists, doc_QFileInfo_exists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_refresh, "refresh(self)");

extern "C" {static PyObject *meth_QFileInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_refresh, doc_QFileInfo_refresh);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_filePath, "filePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_filePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_filePath, doc_QFileInfo_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo___fspath__, "__fspath__(self) -> object");

extern "C" {static PyObject *meth_QFileInfo___fspath__(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo___fspath__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 46 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtCore/qfileinfo.sip"
        sipRes = qpycore_PyObject_FromQString(QDir::toNativeSeparators(sipCpp->filePath()));
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtCore/sipQtCoreQFileInfo.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName___fspath__, doc_QFileInfo___fspath__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteFilePath, "absoluteFilePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absoluteFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteFilePath, doc_QFileInfo_absoluteFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalFilePath, "canonicalFilePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->canonicalFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalFilePath, doc_QFileInfo_canonicalFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileName, doc_QFileInfo_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_baseName, "baseName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_baseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_baseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->baseName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_baseName, doc_QFileInfo_baseName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_completeBaseName, "completeBaseName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_completeBaseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeBaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->completeBaseName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeBaseName, doc_QFileInfo_completeBaseName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_suffix, "suffix(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_suffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->suffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_suffix, doc_QFileInfo_suffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_completeSuffix, "completeSuffix(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_completeSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->completeSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeSuffix, doc_QFileInfo_completeSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_path, "path(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_path(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_path, doc_QFileInfo_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absolutePath, "absolutePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absolutePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absolutePath, doc_QFileInfo_absolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalPath, "canonicalPath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->canonicalPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalPath, doc_QFileInfo_canonicalPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_dir, "dir(self) -> QDir");

extern "C" {static PyObject *meth_QFileInfo_dir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_dir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir(sipCpp->dir());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_dir, doc_QFileInfo_dir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteDir, "absoluteDir(self) -> QDir");

extern "C" {static PyObject *meth_QFileInfo_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir(sipCpp->absoluteDir());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteDir, doc_QFileInfo_absoluteDir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isReadable, doc_QFileInfo_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isWritable, doc_QFileInfo_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isExecutable, "isExecutable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isExecutable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isExecutable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExecutable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isExecutable, doc_QFileInfo_isExecutable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isHidden, "isHidden(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isHidden, doc_QFileInfo_isHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRelative();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRelative, doc_QFileInfo_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isAbsolute, "isAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isAbsolute, doc_QFileInfo_isAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_makeAbsolute, "makeAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->makeAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_makeAbsolute, doc_QFileInfo_makeAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isFile, "isFile(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFile();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isFile, doc_QFileInfo_isFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isDir, "isDir(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDir();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isDir, doc_QFileInfo_isDir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isSymLink, "isSymLink(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isSymLink(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSymLink();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isSymLink, doc_QFileInfo_isSymLink);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isRoot, "isRoot(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRoot, doc_QFileInfo_isRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_owner, "owner(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_owner(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->owner());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_owner, doc_QFileInfo_owner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_ownerId, "ownerId(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_ownerId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_ownerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->ownerId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_ownerId, doc_QFileInfo_ownerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_group, "group(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_group(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_group, doc_QFileInfo_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_groupId, "groupId(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_groupId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_groupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->groupId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_groupId, doc_QFileInfo_groupId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_permission, "permission(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool");

extern "C" {static PyObject *meth_QFileInfo_permission(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->permission(*a0);
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permission, doc_QFileInfo_permission);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_permissions, "permissions(self) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileInfo_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions(sipCpp->permissions());

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permissions, doc_QFileInfo_permissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_size, "size(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_size(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_size, doc_QFileInfo_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_created, "created(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_created(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_created(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->created());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_created, doc_QFileInfo_created);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_lastModified, "lastModified(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastModified, doc_QFileInfo_lastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_lastRead, "lastRead(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastRead(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastRead());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastRead, doc_QFileInfo_lastRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_caching, "caching(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_caching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_caching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->caching();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_caching, doc_QFileInfo_caching);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_setCaching, "setCaching(self, bool)");

extern "C" {static PyObject *meth_QFileInfo_setCaching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setCaching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileInfo, &sipCpp, &a0))
        {
            sipCpp->setCaching(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setCaching, doc_QFileInfo_setCaching);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_symLinkTarget, "symLinkTarget(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->symLinkTarget());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_symLinkTarget, doc_QFileInfo_symLinkTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_bundleName, "bundleName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_bundleName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_bundleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->bundleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_bundleName, doc_QFileInfo_bundleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isBundle, "isBundle(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isBundle(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBundle();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isBundle, doc_QFileInfo_isBundle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isNativePath, "isNativePath(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isNativePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isNativePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNativePath();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isNativePath, doc_QFileInfo_isNativePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_swap, "swap(self, QFileInfo)");

extern "C" {static PyObject *meth_QFileInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo* a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_swap, doc_QFileInfo_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_birthTime, "birthTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_birthTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_birthTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->birthTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_birthTime, doc_QFileInfo_birthTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_metadataChangeTime, "metadataChangeTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_metadataChangeTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_metadataChangeTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->metadataChangeTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_metadataChangeTime, doc_QFileInfo_metadataChangeTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_fileTime, "fileTime(self, QFileDevice.FileTime) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_fileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileTime a0;
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileDevice_FileTime, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->fileTime(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileTime, doc_QFileInfo_fileTime);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFileInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileInfo *sipCpp = reinterpret_cast< ::QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFileInfo::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QFileInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileInfo *sipCpp = reinterpret_cast< ::QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFileInfo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QFileInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileInfo(void *, int);}
static void release_QFileInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFileInfo *>(sipCppV);
}


extern "C" {static void *array_QFileInfo(Py_ssize_t);}
static void *array_QFileInfo(Py_ssize_t sipNrElem)
{
    return new  ::QFileInfo[sipNrElem];
}


extern "C" {static void assign_QFileInfo(void *, Py_ssize_t, void *);}
static void assign_QFileInfo(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFileInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFileInfo *>(sipSrc);
}


extern "C" {static void *copy_QFileInfo(const void *, Py_ssize_t);}
static void *copy_QFileInfo(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QFileInfo(reinterpret_cast<const  ::QFileInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileInfo(sipSimpleWrapper *);}
static void dealloc_QFileInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFileInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFileInfo();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QFileInfo(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QFile* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFile, &a0))
        {
            sipCpp = new  ::QFileInfo(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QDir* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1", sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QFileInfo(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QFileInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFileInfo, &a0))
        {
            sipCpp = new  ::QFileInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileInfo[] = {
    {(void *)slot_QFileInfo___ne__, ne_slot},
    {(void *)slot_QFileInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFileInfo[] = {
    {sipName___fspath__, meth_QFileInfo___fspath__, METH_VARARGS, doc_QFileInfo___fspath__},
    {sipName_absoluteDir, meth_QFileInfo_absoluteDir, METH_VARARGS, doc_QFileInfo_absoluteDir},
    {sipName_absoluteFilePath, meth_QFileInfo_absoluteFilePath, METH_VARARGS, doc_QFileInfo_absoluteFilePath},
    {sipName_absolutePath, meth_QFileInfo_absolutePath, METH_VARARGS, doc_QFileInfo_absolutePath},
    {sipName_baseName, meth_QFileInfo_baseName, METH_VARARGS, doc_QFileInfo_baseName},
    {sipName_birthTime, meth_QFileInfo_birthTime, METH_VARARGS, doc_QFileInfo_birthTime},
    {sipName_bundleName, meth_QFileInfo_bundleName, METH_VARARGS, doc_QFileInfo_bundleName},
    {sipName_caching, meth_QFileInfo_caching, METH_VARARGS, doc_QFileInfo_caching},
    {sipName_canonicalFilePath, meth_QFileInfo_canonicalFilePath, METH_VARARGS, doc_QFileInfo_canonicalFilePath},
    {sipName_canonicalPath, meth_QFileInfo_canonicalPath, METH_VARARGS, doc_QFileInfo_canonicalPath},
    {sipName_completeBaseName, meth_QFileInfo_completeBaseName, METH_VARARGS, doc_QFileInfo_completeBaseName},
    {sipName_completeSuffix, meth_QFileInfo_completeSuffix, METH_VARARGS, doc_QFileInfo_completeSuffix},
    {sipName_created, meth_QFileInfo_created, METH_VARARGS, doc_QFileInfo_created},
    {sipName_dir, meth_QFileInfo_dir, METH_VARARGS, doc_QFileInfo_dir},
    {sipName_exists, meth_QFileInfo_exists, METH_VARARGS, doc_QFileInfo_exists},
    {sipName_fileName, meth_QFileInfo_fileName, METH_VARARGS, doc_QFileInfo_fileName},
    {sipName_filePath, meth_QFileInfo_filePath, METH_VARARGS, doc_QFileInfo_filePath},
    {sipName_fileTime, meth_QFileInfo_fileTime, METH_VARARGS, doc_QFileInfo_fileTime},
    {sipName_group, meth_QFileInfo_group, METH_VARARGS, doc_QFileInfo_group},
    {sipName_groupId, meth_QFileInfo_groupId, METH_VARARGS, doc_QFileInfo_groupId},
    {sipName_isAbsolute, meth_QFileInfo_isAbsolute, METH_VARARGS, doc_QFileInfo_isAbsolute},
    {sipName_isBundle, meth_QFileInfo_isBundle, METH_VARARGS, doc_QFileInfo_isBundle},
    {sipName_isDir, meth_QFileInfo_isDir, METH_VARARGS, doc_QFileInfo_isDir},
    {sipName_isExecutable, meth_QFileInfo_isExecutable, METH_VARARGS, doc_QFileInfo_isExecutable},
    {sipName_isFile, meth_QFileInfo_isFile, METH_VARARGS, doc_QFileInfo_isFile},
    {sipName_isHidden, meth_QFileInfo_isHidden, METH_VARARGS, doc_QFileInfo_isHidden},
    {sipName_isNativePath, meth_QFileInfo_isNativePath, METH_VARARGS, doc_QFileInfo_isNativePath},
    {sipName_isReadable, meth_QFileInfo_isReadable, METH_VARARGS, doc_QFileInfo_isReadable},
    {sipName_isRelative, meth_QFileInfo_isRelative, METH_VARARGS, doc_QFileInfo_isRelative},
    {sipName_isRoot, meth_QFileInfo_isRoot, METH_VARARGS, doc_QFileInfo_isRoot},
    {sipName_isSymLink, meth_QFileInfo_isSymLink, METH_VARARGS, doc_QFileInfo_isSymLink},
    {sipName_isWritable, meth_QFileInfo_isWritable, METH_VARARGS, doc_QFileInfo_isWritable},
    {sipName_lastModified, meth_QFileInfo_lastModified, METH_VARARGS, doc_QFileInfo_lastModified},
    {sipName_lastRead, meth_QFileInfo_lastRead, METH_VARARGS, doc_QFileInfo_lastRead},
    {sipName_makeAbsolute, meth_QFileInfo_makeAbsolute, METH_VARARGS, doc_QFileInfo_makeAbsolute},
    {sipName_metadataChangeTime, meth_QFileInfo_metadataChangeTime, METH_VARARGS, doc_QFileInfo_metadataChangeTime},
    {sipName_owner, meth_QFileInfo_owner, METH_VARARGS, doc_QFileInfo_owner},
    {sipName_ownerId, meth_QFileInfo_ownerId, METH_VARARGS, doc_QFileInfo_ownerId},
    {sipName_path, meth_QFileInfo_path, METH_VARARGS, doc_QFileInfo_path},
    {sipName_permission, meth_QFileInfo_permission, METH_VARARGS, doc_QFileInfo_permission},
    {sipName_permissions, meth_QFileInfo_permissions, METH_VARARGS, doc_QFileInfo_permissions},
    {sipName_refresh, meth_QFileInfo_refresh, METH_VARARGS, doc_QFileInfo_refresh},
    {sipName_setCaching, meth_QFileInfo_setCaching, METH_VARARGS, doc_QFileInfo_setCaching},
    {sipName_setFile, meth_QFileInfo_setFile, METH_VARARGS, doc_QFileInfo_setFile},
    {sipName_size, meth_QFileInfo_size, METH_VARARGS, doc_QFileInfo_size},
    {sipName_suffix, meth_QFileInfo_suffix, METH_VARARGS, doc_QFileInfo_suffix},
    {sipName_swap, meth_QFileInfo_swap, METH_VARARGS, doc_QFileInfo_swap},
    {sipName_symLinkTarget, meth_QFileInfo_symLinkTarget, METH_VARARGS, doc_QFileInfo_symLinkTarget}
};

PyDoc_STRVAR(doc_QFileInfo, "\1QFileInfo()\n"
"QFileInfo(str)\n"
"QFileInfo(QFile)\n"
"QFileInfo(QDir, str)\n"
"QFileInfo(QFileInfo)");


static pyqt5ClassPluginDef plugin_QFileInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileInfo,
        SIP_NULLPTR,
        &plugin_QFileInfo
    },
    {
        sipNameNr_QFileInfo,
        {0, 0, 1},
        48, methods_QFileInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFileInfo,
    init_type_QFileInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFileInfo,
    assign_QFileInfo,
    array_QFileInfo,
    copy_QFileInfo,
    release_QFileInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
