/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtTest.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestcase.sip"
#include <qtestcase.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestkeyboard.sip"
#include <qtestkeyboard.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestmouse.sip"
#include <qtestmouse.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestsystem.sip"
#include <qtestsystem.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
#include <qtesttouch.h>
#line 32 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
#include <qtesttouch.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTestQTouchEventSequence.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 43 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTestQTouchEventSequence.cpp"
#line 26 "sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 46 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTestQTouchEventSequence.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 49 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTestQTouchEventSequence.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTestQTouchEventSequence.cpp"


PyDoc_STRVAR(doc_QTest_QTouchEventSequence_press, "press(self, int, QPoint, window: QWindow = None) -> QTest.QTouchEventSequence\n"
"press(self, int, QPoint, QWidget) -> QTest.QTouchEventSequence");

extern "C" {static PyObject *meth_QTest_QTouchEventSequence_press(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_QTouchEventSequence_press(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QWindow* a2 = 0;
         ::QTest::QTouchEventSequence *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9|J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWindow, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->press(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QWidget* a2;
         ::QTest::QTouchEventSequence *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ9J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWidget, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->press(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTouchEventSequence, sipName_press, doc_QTest_QTouchEventSequence_press);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_QTouchEventSequence_move, "move(self, int, QPoint, window: QWindow = None) -> QTest.QTouchEventSequence\n"
"move(self, int, QPoint, QWidget) -> QTest.QTouchEventSequence");

extern "C" {static PyObject *meth_QTest_QTouchEventSequence_move(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_QTouchEventSequence_move(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QWindow* a2 = 0;
         ::QTest::QTouchEventSequence *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9|J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWindow, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->move(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QWidget* a2;
         ::QTest::QTouchEventSequence *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ9J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWidget, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->move(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTouchEventSequence, sipName_move, doc_QTest_QTouchEventSequence_move);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_QTouchEventSequence_release, "release(self, int, QPoint, window: QWindow = None) -> QTest.QTouchEventSequence\n"
"release(self, int, QPoint, QWidget) -> QTest.QTouchEventSequence");

extern "C" {static PyObject *meth_QTest_QTouchEventSequence_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_QTouchEventSequence_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QWindow* a2 = 0;
         ::QTest::QTouchEventSequence *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9|J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWindow, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->release(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QWidget* a2;
         ::QTest::QTouchEventSequence *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ9J8", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0, sipType_QPoint, &a1, sipType_QWidget, &a2))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->release(a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTouchEventSequence, sipName_release, doc_QTest_QTouchEventSequence_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_QTouchEventSequence_stationary, "stationary(self, int) -> QTest.QTouchEventSequence");

extern "C" {static PyObject *meth_QTest_QTouchEventSequence_stationary(PyObject *, PyObject *);}
static PyObject *meth_QTest_QTouchEventSequence_stationary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTest::QTouchEventSequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0))
        {
             ::QTest::QTouchEventSequence*sipRes;

            sipRes = &sipCpp->stationary(a0);

            return sipConvertFromType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTouchEventSequence, sipName_stationary, doc_QTest_QTouchEventSequence_stationary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_QTouchEventSequence_commit, "commit(self, processEvents: bool = True)");

extern "C" {static PyObject *meth_QTest_QTouchEventSequence_commit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_QTouchEventSequence_commit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::QTest::QTouchEventSequence *sipCpp;

        static const char *sipKwdList[] = {
            sipName_processEvents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QTest_QTouchEventSequence, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->commit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTouchEventSequence, sipName_commit, doc_QTest_QTouchEventSequence_commit);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTest_QTouchEventSequence(void *, int);}
static void release_QTest_QTouchEventSequence(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTest::QTouchEventSequence *>(sipCppV);
}


extern "C" {static void assign_QTest_QTouchEventSequence(void *, Py_ssize_t, void *);}
static void assign_QTest_QTouchEventSequence(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTest::QTouchEventSequence *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTest::QTouchEventSequence *>(sipSrc);
}


extern "C" {static void *copy_QTest_QTouchEventSequence(const void *, Py_ssize_t);}
static void *copy_QTest_QTouchEventSequence(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTest::QTouchEventSequence(reinterpret_cast<const  ::QTest::QTouchEventSequence *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTest_QTouchEventSequence(sipSimpleWrapper *);}
static void dealloc_QTest_QTouchEventSequence(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTest_QTouchEventSequence(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTest_QTouchEventSequence(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTest_QTouchEventSequence(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTest::QTouchEventSequence *sipCpp = SIP_NULLPTR;

    {
        const  ::QTest::QTouchEventSequence* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTest_QTouchEventSequence, &a0))
        {
            sipCpp = new  ::QTest::QTouchEventSequence(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTest_QTouchEventSequence[] = {
    {sipName_commit, SIP_MLMETH_CAST(meth_QTest_QTouchEventSequence_commit), METH_VARARGS|METH_KEYWORDS, doc_QTest_QTouchEventSequence_commit},
    {sipName_move, SIP_MLMETH_CAST(meth_QTest_QTouchEventSequence_move), METH_VARARGS|METH_KEYWORDS, doc_QTest_QTouchEventSequence_move},
    {sipName_press, SIP_MLMETH_CAST(meth_QTest_QTouchEventSequence_press), METH_VARARGS|METH_KEYWORDS, doc_QTest_QTouchEventSequence_press},
    {sipName_release, SIP_MLMETH_CAST(meth_QTest_QTouchEventSequence_release), METH_VARARGS|METH_KEYWORDS, doc_QTest_QTouchEventSequence_release},
    {sipName_stationary, meth_QTest_QTouchEventSequence_stationary, METH_VARARGS, doc_QTest_QTouchEventSequence_stationary}
};

PyDoc_STRVAR(doc_QTest_QTouchEventSequence, "\1QTest.QTouchEventSequence(QTest.QTouchEventSequence)");


static pyqt5ClassPluginDef plugin_QTest_QTouchEventSequence = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtTest_QTest_QTouchEventSequence = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTest__QTouchEventSequence,
        SIP_NULLPTR,
        &plugin_QTest_QTouchEventSequence
    },
    {
        sipNameNr_QTouchEventSequence,
        {3, 255, 0},
        5, methods_QTest_QTouchEventSequence,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTest_QTouchEventSequence,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTest_QTouchEventSequence,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTest_QTouchEventSequence,
    assign_QTest_QTouchEventSequence,
    SIP_NULLPTR,
    copy_QTest_QTouchEventSequence,
    release_QTest_QTouchEventSequence,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
