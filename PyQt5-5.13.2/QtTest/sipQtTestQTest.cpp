/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtTest.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestcase.sip"
#include <qtestcase.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestkeyboard.sip"
#include <qtestkeyboard.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestmouse.sip"
#include <qtestmouse.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestsystem.sip"
#include <qtestsystem.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
#include <qtesttouch.h>
#line 37 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestcase.sip"
#include <qtestcase.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestkeyboard.sip"
#include <qtestkeyboard.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestmouse.sip"
#include <qtestmouse.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtestsystem.sip"
#include <qtestsystem.h>
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
#include <qtesttouch.h>
#line 32 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
#include <qtesttouch.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"
#line 26 "sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"


PyDoc_STRVAR(doc_QTest_touchEvent, "touchEvent(QWidget, QTouchDevice) -> QTest.QTouchEventSequence\n"
"touchEvent(QWindow, QTouchDevice) -> QTest.QTouchEventSequence");

extern "C" {static PyObject *meth_QTest_touchEvent(PyObject *, PyObject *);}
static PyObject *meth_QTest_touchEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QTouchDevice* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QWidget, &a0, sipType_QTouchDevice, &a1))
        {
             ::QTest::QTouchEventSequence*sipRes = 0;

#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
        // Disable auto-committing so that we can copy the instance around.
        sipRes = new QTest::QTouchEventSequence(QTest::touchEvent(a0, a1, false));
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"

            return sipConvertFromNewType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    {
         ::QWindow* a0;
         ::QTouchDevice* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QWindow, &a0, sipType_QTouchDevice, &a1))
        {
             ::QTest::QTouchEventSequence*sipRes = 0;

#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtTest/qtesttouch.sip"
        // Disable auto-committing so that we can copy the instance around.
        sipRes = new QTest::QTouchEventSequence(QTest::touchEvent(a0, a1, false));
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtTest/sipQtTestQTest.cpp"

            return sipConvertFromNewType(sipRes,sipType_QTest_QTouchEventSequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_touchEvent, doc_QTest_touchEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_qWaitForWindowExposed, "qWaitForWindowExposed(QWindow, timeout: int = 5000) -> bool\n"
"qWaitForWindowExposed(QWidget, timeout: int = 5000) -> bool");

extern "C" {static PyObject *meth_QTest_qWaitForWindowExposed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_qWaitForWindowExposed(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
        int a1 = 5000;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QWindow, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTest::qWaitForWindowExposed(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        int a1 = 5000;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QWidget, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTest::qWaitForWindowExposed(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qWaitForWindowExposed, doc_QTest_qWaitForWindowExposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_qWaitForWindowActive, "qWaitForWindowActive(QWindow, timeout: int = 5000) -> bool\n"
"qWaitForWindowActive(QWidget, timeout: int = 5000) -> bool");

extern "C" {static PyObject *meth_QTest_qWaitForWindowActive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_qWaitForWindowActive(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
        int a1 = 5000;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QWindow, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTest::qWaitForWindowActive(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        int a1 = 5000;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QWidget, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTest::qWaitForWindowActive(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qWaitForWindowActive, doc_QTest_qWaitForWindowActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_qWait, "qWait(int)");

extern "C" {static PyObject *meth_QTest_qWait(PyObject *, PyObject *);}
static PyObject *meth_QTest_qWait(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QTest::qWait(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qWait, doc_QTest_qWait);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_mouseRelease, "mouseRelease(QWidget, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)\n"
"mouseRelease(QWindow, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)");

extern "C" {static PyObject *meth_QTest_mouseRelease(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_mouseRelease(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWidget, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseRelease(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWindow, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseRelease(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mouseRelease, doc_QTest_mouseRelease);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_mousePress, "mousePress(QWidget, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)\n"
"mousePress(QWindow, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)");

extern "C" {static PyObject *meth_QTest_mousePress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_mousePress(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWidget, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mousePress(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWindow, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mousePress(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mousePress, doc_QTest_mousePress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_mouseMove, "mouseMove(QWidget, pos: QPoint = QPoint(), delay: int = -1)\n"
"mouseMove(QWindow, pos: QPoint = QPoint(), delay: int = -1)");

extern "C" {static PyObject *meth_QTest_mouseMove(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_mouseMove(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QPoint a1def = QPoint();
         ::QPoint* a1 = &a1def;
        int a2 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J9i", sipType_QWidget, &a0, sipType_QPoint, &a1, &a2))
        {
             ::QTest::mouseMove(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::QPoint a1def = QPoint();
         ::QPoint* a1 = &a1def;
        int a2 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J9i", sipType_QWindow, &a0, sipType_QPoint, &a1, &a2))
        {
             ::QTest::mouseMove(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mouseMove, doc_QTest_mouseMove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_mouseDClick, "mouseDClick(QWidget, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)\n"
"mouseDClick(QWindow, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)");

extern "C" {static PyObject *meth_QTest_mouseDClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_mouseDClick(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWidget, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseDClick(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWindow, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseDClick(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mouseDClick, doc_QTest_mouseDClick);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_mouseClick, "mouseClick(QWidget, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)\n"
"mouseClick(QWindow, Qt.MouseButton, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.KeyboardModifiers(), pos: QPoint = QPoint(), delay: int = -1)");

extern "C" {static PyObject *meth_QTest_mouseClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_mouseClick(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWidget, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseClick(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::MouseButton a1;
         ::Qt::KeyboardModifiers a2def = Qt::KeyboardModifiers();
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::QPoint a3def = QPoint();
         ::QPoint* a3 = &a3def;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_pos,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1J9i", sipType_QWindow, &a0, sipType_Qt_MouseButton, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QPoint, &a3, &a4))
        {
             ::QTest::mouseClick(a0,a1,*a2,*a3,a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mouseClick, doc_QTest_mouseClick);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keySequence, "keySequence(QWidget, Union[QKeySequence, QKeySequence.StandardKey, str, int])\n"
"keySequence(QWindow, Union[QKeySequence, QKeySequence.StandardKey, str, int])");

extern "C" {static PyObject *meth_QTest_keySequence(PyObject *, PyObject *);}
static PyObject *meth_QTest_keySequence(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QKeySequence* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1", sipType_QWidget, &a0, sipType_QKeySequence, &a1, &a1State))
        {
             ::QTest::keySequence(a0,*a1);
            sipReleaseType(const_cast< ::QKeySequence *>(a1),sipType_QKeySequence,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
        const  ::QKeySequence* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1", sipType_QWindow, &a0, sipType_QKeySequence, &a1, &a1State))
        {
             ::QTest::keySequence(a0,*a1);
            sipReleaseType(const_cast< ::QKeySequence *>(a1),sipType_QKeySequence,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keySequence, doc_QTest_keySequence);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keyRelease, "keyRelease(QWidget, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyRelease(QWidget, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyRelease(QWindow, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyRelease(QWindow, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)");

extern "C" {static PyObject *meth_QTest_keyRelease(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_keyRelease(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWidget, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyRelease(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWidget, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyRelease(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWindow, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyRelease(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWindow, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyRelease(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keyRelease, doc_QTest_keyRelease);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keyPress, "keyPress(QWidget, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyPress(QWidget, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyPress(QWindow, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyPress(QWindow, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)");

extern "C" {static PyObject *meth_QTest_keyPress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_keyPress(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWidget, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyPress(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWidget, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyPress(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWindow, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyPress(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWindow, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyPress(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keyPress, doc_QTest_keyPress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keyEvent, "keyEvent(QTest.KeyAction, QWidget, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyEvent(QTest.KeyAction, QWidget, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyEvent(QTest.KeyAction, QWindow, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyEvent(QTest.KeyAction, QWindow, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)");

extern "C" {static PyObject *meth_QTest_keyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_keyEvent(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTest::KeyAction a0;
         ::QWidget* a1;
         ::Qt::Key a2;
         ::Qt::KeyboardModifiers a3def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ8E|J1i", sipType_QTest_KeyAction, &a0, sipType_QWidget, &a1, sipType_Qt_Key, &a2, sipType_Qt_KeyboardModifiers, &a3, &a3State, &a4))
        {
             ::QTest::keyEvent(a0,a1,a2,*a3,a4);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTest::KeyAction a0;
         ::QWidget* a1;
        char a2;
         ::Qt::KeyboardModifiers a3def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ8aA|J1i", sipType_QTest_KeyAction, &a0, sipType_QWidget, &a1, &a2, sipType_Qt_KeyboardModifiers, &a3, &a3State, &a4))
        {
             ::QTest::keyEvent(a0,a1,a2,*a3,a4);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTest::KeyAction a0;
         ::QWindow* a1;
         ::Qt::Key a2;
         ::Qt::KeyboardModifiers a3def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ8E|J1i", sipType_QTest_KeyAction, &a0, sipType_QWindow, &a1, sipType_Qt_Key, &a2, sipType_Qt_KeyboardModifiers, &a3, &a3State, &a4))
        {
             ::QTest::keyEvent(a0,a1,a2,*a3,a4);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTest::KeyAction a0;
         ::QWindow* a1;
        char a2;
         ::Qt::KeyboardModifiers a3def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ8aA|J1i", sipType_QTest_KeyAction, &a0, sipType_QWindow, &a1, &a2, sipType_Qt_KeyboardModifiers, &a3, &a3State, &a4))
        {
             ::QTest::keyEvent(a0,a1,a2,*a3,a4);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keyEvent, doc_QTest_keyEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keyClicks, "keyClicks(QWidget, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)");

extern "C" {static PyObject *meth_QTest_keyClicks(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_keyClicks(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J1|J1i", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyClicks(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keyClicks, doc_QTest_keyClicks);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_keyClick, "keyClick(QWidget, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyClick(QWidget, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyClick(QWindow, Qt.Key, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)\n"
"keyClick(QWindow, str, modifier: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, delay: int = -1)");

extern "C" {static PyObject *meth_QTest_keyClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTest_keyClick(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWidget, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyClick(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWidget, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyClick(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
         ::Qt::Key a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8E|J1i", sipType_QWindow, &a0, sipType_Qt_Key, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyClick(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWindow* a0;
        char a1;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifier,
            sipName_delay,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8aA|J1i", sipType_QWindow, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3))
        {
             ::QTest::keyClick(a0,a1,*a2,a3);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_keyClick, doc_QTest_keyClick);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTest_qSleep, "qSleep(int)");

extern "C" {static PyObject *meth_QTest_qSleep(PyObject *, PyObject *);}
static PyObject *meth_QTest_qSleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QTest::qSleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSleep, doc_QTest_qSleep);

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTest[] = {
    {sipName_keyClick, SIP_MLMETH_CAST(meth_QTest_keyClick), METH_VARARGS|METH_KEYWORDS, doc_QTest_keyClick},
    {sipName_keyClicks, SIP_MLMETH_CAST(meth_QTest_keyClicks), METH_VARARGS|METH_KEYWORDS, doc_QTest_keyClicks},
    {sipName_keyEvent, SIP_MLMETH_CAST(meth_QTest_keyEvent), METH_VARARGS|METH_KEYWORDS, doc_QTest_keyEvent},
    {sipName_keyPress, SIP_MLMETH_CAST(meth_QTest_keyPress), METH_VARARGS|METH_KEYWORDS, doc_QTest_keyPress},
    {sipName_keyRelease, SIP_MLMETH_CAST(meth_QTest_keyRelease), METH_VARARGS|METH_KEYWORDS, doc_QTest_keyRelease},
    {sipName_keySequence, meth_QTest_keySequence, METH_VARARGS, doc_QTest_keySequence},
    {sipName_mouseClick, SIP_MLMETH_CAST(meth_QTest_mouseClick), METH_VARARGS|METH_KEYWORDS, doc_QTest_mouseClick},
    {sipName_mouseDClick, SIP_MLMETH_CAST(meth_QTest_mouseDClick), METH_VARARGS|METH_KEYWORDS, doc_QTest_mouseDClick},
    {sipName_mouseMove, SIP_MLMETH_CAST(meth_QTest_mouseMove), METH_VARARGS|METH_KEYWORDS, doc_QTest_mouseMove},
    {sipName_mousePress, SIP_MLMETH_CAST(meth_QTest_mousePress), METH_VARARGS|METH_KEYWORDS, doc_QTest_mousePress},
    {sipName_mouseRelease, SIP_MLMETH_CAST(meth_QTest_mouseRelease), METH_VARARGS|METH_KEYWORDS, doc_QTest_mouseRelease},
    {sipName_qSleep, meth_QTest_qSleep, METH_VARARGS, doc_QTest_qSleep},
    {sipName_qWait, meth_QTest_qWait, METH_VARARGS, doc_QTest_qWait},
    {sipName_qWaitForWindowActive, SIP_MLMETH_CAST(meth_QTest_qWaitForWindowActive), METH_VARARGS|METH_KEYWORDS, doc_QTest_qWaitForWindowActive},
    {sipName_qWaitForWindowExposed, SIP_MLMETH_CAST(meth_QTest_qWaitForWindowExposed), METH_VARARGS|METH_KEYWORDS, doc_QTest_qWaitForWindowExposed},
    {sipName_touchEvent, meth_QTest_touchEvent, METH_VARARGS, doc_QTest_touchEvent}
};

static sipEnumMemberDef enummembers_QTest[] = {
    {sipName_Click, static_cast<int>( ::QTest::Click), 4},
    {sipName_Press, static_cast<int>( ::QTest::Press), 4},
    {sipName_Release, static_cast<int>( ::QTest::Release), 4},
    {sipName_Shortcut, static_cast<int>( ::QTest::Shortcut), 4},
};


static pyqt5ClassPluginDef plugin_QTest = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtTest_QTest = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_NAMESPACE,
        sipNameNr_QTest,
        SIP_NULLPTR,
        &plugin_QTest
    },
    {
        sipNameNr_QTest,
        {0, 0, 1},
        16, methods_QTest,
        4, enummembers_QTest,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
