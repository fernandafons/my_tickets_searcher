/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"

#line 309 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 361 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 272 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 426 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 385 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 399 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 348 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 414 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 373 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 292 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"
#line 154 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNode.cpp"


PyDoc_STRVAR(doc_QDomNode_insertBefore, "insertBefore(self, QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_insertBefore(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
        const  ::QDomNode* a1;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->insertBefore(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertBefore, doc_QDomNode_insertBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_insertAfter, "insertAfter(self, QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_insertAfter(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
        const  ::QDomNode* a1;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->insertAfter(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertAfter, doc_QDomNode_insertAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_replaceChild, "replaceChild(self, QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_replaceChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_replaceChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
        const  ::QDomNode* a1;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->replaceChild(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_replaceChild, doc_QDomNode_replaceChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_removeChild, "removeChild(self, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->removeChild(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_removeChild, doc_QDomNode_removeChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_appendChild, "appendChild(self, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_appendChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_appendChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->appendChild(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_appendChild, doc_QDomNode_appendChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_hasChildNodes, "hasChildNodes(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_hasChildNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasChildNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasChildNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasChildNodes, doc_QDomNode_hasChildNodes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_cloneNode, "cloneNode(self, deep: bool = True) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_cloneNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_cloneNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        const  ::QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_deep,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QDomNode, &sipCpp, &a0))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->cloneNode(a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_cloneNode, doc_QDomNode_cloneNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QDomNode_normalize(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_normalize, doc_QDomNode_normalize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isSupported, "isSupported(self, str, str) -> bool");

extern "C" {static PyObject *meth_QDomNode_isSupported(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isSupported(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isSupported, doc_QDomNode_isSupported);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_nodeName, "nodeName(self) -> str");

extern "C" {static PyObject *meth_QDomNode_nodeName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nodeName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeName, doc_QDomNode_nodeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_nodeType, "nodeType(self) -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomNode_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDomNode_NodeType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeType, doc_QDomNode_nodeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_parentNode, "parentNode(self) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_parentNode(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_parentNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->parentNode());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_parentNode, doc_QDomNode_parentNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_childNodes, "childNodes(self) -> QDomNodeList");

extern "C" {static PyObject *meth_QDomNode_childNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_childNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNodeList*sipRes;

            sipRes = new  ::QDomNodeList(sipCpp->childNodes());

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_childNodes, doc_QDomNode_childNodes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_firstChild, "firstChild(self) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_firstChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->firstChild());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChild, doc_QDomNode_firstChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_lastChild, "lastChild(self) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_lastChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->lastChild());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChild, doc_QDomNode_lastChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_previousSibling, "previousSibling(self) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_previousSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->previousSibling());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSibling, doc_QDomNode_previousSibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_nextSibling, "nextSibling(self) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_nextSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->nextSibling());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSibling, doc_QDomNode_nextSibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_attributes, "attributes(self) -> QDomNamedNodeMap");

extern "C" {static PyObject *meth_QDomNode_attributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNamedNodeMap*sipRes;

            sipRes = new  ::QDomNamedNodeMap(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QDomNamedNodeMap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_attributes, doc_QDomNode_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_ownerDocument, "ownerDocument(self) -> QDomDocument");

extern "C" {static PyObject *meth_QDomNode_ownerDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_ownerDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomDocument*sipRes;

            sipRes = new  ::QDomDocument(sipCpp->ownerDocument());

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_ownerDocument, doc_QDomNode_ownerDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_namespaceURI, "namespaceURI(self) -> str");

extern "C" {static PyObject *meth_QDomNode_namespaceURI(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namespaceURI(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->namespaceURI());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namespaceURI, doc_QDomNode_namespaceURI);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_localName, "localName(self) -> str");

extern "C" {static PyObject *meth_QDomNode_localName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_localName, doc_QDomNode_localName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_hasAttributes, "hasAttributes(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_hasAttributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttributes();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasAttributes, doc_QDomNode_hasAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_nodeValue, "nodeValue(self) -> str");

extern "C" {static PyObject *meth_QDomNode_nodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nodeValue());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeValue, doc_QDomNode_nodeValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_setNodeValue, "setNodeValue(self, str)");

extern "C" {static PyObject *meth_QDomNode_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNodeValue(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setNodeValue, doc_QDomNode_setNodeValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_prefix, "prefix(self) -> str");

extern "C" {static PyObject *meth_QDomNode_prefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_prefix, doc_QDomNode_prefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_setPrefix, "setPrefix(self, str)");

extern "C" {static PyObject *meth_QDomNode_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPrefix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setPrefix, doc_QDomNode_setPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isAttr, "isAttr(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAttr();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isAttr, doc_QDomNode_isAttr);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isCDATASection, "isCDATASection(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCDATASection();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCDATASection, doc_QDomNode_isCDATASection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isDocumentFragment, "isDocumentFragment(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocumentFragment();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentFragment, doc_QDomNode_isDocumentFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isDocument, "isDocument(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocument, doc_QDomNode_isDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isDocumentType, "isDocumentType(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocumentType();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentType, doc_QDomNode_isDocumentType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isElement, "isElement(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isElement();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isElement, doc_QDomNode_isElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isEntityReference, "isEntityReference(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntityReference();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntityReference, doc_QDomNode_isEntityReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isText, "isText(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isText();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isText, doc_QDomNode_isText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isEntity, "isEntity(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntity();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntity, doc_QDomNode_isEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isNotation, "isNotation(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNotation();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNotation, doc_QDomNode_isNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isProcessingInstruction, "isProcessingInstruction(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProcessingInstruction();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isProcessingInstruction, doc_QDomNode_isProcessingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isCharacterData, "isCharacterData(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharacterData();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCharacterData, doc_QDomNode_isCharacterData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isComment, "isComment(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComment();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isComment, doc_QDomNode_isComment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_namedItem, "namedItem(self, str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_namedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->namedItem(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namedItem, doc_QDomNode_namedItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QDomNode_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNull, doc_QDomNode_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_clear, "clear(self)");

extern "C" {static PyObject *meth_QDomNode_clear(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_clear, doc_QDomNode_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toAttr, "toAttr(self) -> QDomAttr");

extern "C" {static PyObject *meth_QDomNode_toAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomAttr*sipRes;

            sipRes = new  ::QDomAttr(sipCpp->toAttr());

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toAttr, doc_QDomNode_toAttr);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toCDATASection, "toCDATASection(self) -> QDomCDATASection");

extern "C" {static PyObject *meth_QDomNode_toCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomCDATASection*sipRes;

            sipRes = new  ::QDomCDATASection(sipCpp->toCDATASection());

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCDATASection, doc_QDomNode_toCDATASection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toDocumentFragment, "toDocumentFragment(self) -> QDomDocumentFragment");

extern "C" {static PyObject *meth_QDomNode_toDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomDocumentFragment*sipRes;

            sipRes = new  ::QDomDocumentFragment(sipCpp->toDocumentFragment());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentFragment, doc_QDomNode_toDocumentFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toDocument, "toDocument(self) -> QDomDocument");

extern "C" {static PyObject *meth_QDomNode_toDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomDocument*sipRes;

            sipRes = new  ::QDomDocument(sipCpp->toDocument());

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocument, doc_QDomNode_toDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toDocumentType, "toDocumentType(self) -> QDomDocumentType");

extern "C" {static PyObject *meth_QDomNode_toDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomDocumentType*sipRes;

            sipRes = new  ::QDomDocumentType(sipCpp->toDocumentType());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentType, doc_QDomNode_toDocumentType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toElement, "toElement(self) -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_toElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->toElement());

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toElement, doc_QDomNode_toElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toEntityReference, "toEntityReference(self) -> QDomEntityReference");

extern "C" {static PyObject *meth_QDomNode_toEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomEntityReference*sipRes;

            sipRes = new  ::QDomEntityReference(sipCpp->toEntityReference());

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntityReference, doc_QDomNode_toEntityReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toText, "toText(self) -> QDomText");

extern "C" {static PyObject *meth_QDomNode_toText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomText*sipRes;

            sipRes = new  ::QDomText(sipCpp->toText());

            return sipConvertFromNewType(sipRes,sipType_QDomText,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toText, doc_QDomNode_toText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toEntity, "toEntity(self) -> QDomEntity");

extern "C" {static PyObject *meth_QDomNode_toEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomEntity*sipRes;

            sipRes = new  ::QDomEntity(sipCpp->toEntity());

            return sipConvertFromNewType(sipRes,sipType_QDomEntity,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntity, doc_QDomNode_toEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toNotation, "toNotation(self) -> QDomNotation");

extern "C" {static PyObject *meth_QDomNode_toNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomNotation*sipRes;

            sipRes = new  ::QDomNotation(sipCpp->toNotation());

            return sipConvertFromNewType(sipRes,sipType_QDomNotation,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toNotation, doc_QDomNode_toNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toProcessingInstruction, "toProcessingInstruction(self) -> QDomProcessingInstruction");

extern "C" {static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomProcessingInstruction*sipRes;

            sipRes = new  ::QDomProcessingInstruction(sipCpp->toProcessingInstruction());

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toProcessingInstruction, doc_QDomNode_toProcessingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toCharacterData, "toCharacterData(self) -> QDomCharacterData");

extern "C" {static PyObject *meth_QDomNode_toCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomCharacterData*sipRes;

            sipRes = new  ::QDomCharacterData(sipCpp->toCharacterData());

            return sipConvertFromNewType(sipRes,sipType_QDomCharacterData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCharacterData, doc_QDomNode_toCharacterData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_toComment, "toComment(self) -> QDomComment");

extern "C" {static PyObject *meth_QDomNode_toComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
             ::QDomComment*sipRes;

            sipRes = new  ::QDomComment(sipCpp->toComment());

            return sipConvertFromNewType(sipRes,sipType_QDomComment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toComment, doc_QDomNode_toComment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_save, "save(self, QTextStream, int, QDomNode.EncodingPolicy = QDomNode.EncodingFromDocument)");

extern "C" {static PyObject *meth_QDomNode_save(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;
        int a1;
         ::QDomNode::EncodingPolicy a2 = QDomNode::EncodingFromDocument;
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i|E", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QTextStream, &a0, &a1, sipType_QDomNode_EncodingPolicy, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_save, doc_QDomNode_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_firstChildElement, "firstChildElement(self, tagName: str = '') -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_firstChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->firstChildElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChildElement, doc_QDomNode_firstChildElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_lastChildElement, "lastChildElement(self, tagName: str = '') -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_lastChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->lastChildElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChildElement, doc_QDomNode_lastChildElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_previousSiblingElement, "previousSiblingElement(self, tagName: str = '') -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_previousSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->previousSiblingElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSiblingElement, doc_QDomNode_previousSiblingElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_nextSiblingElement, "nextSiblingElement(self, taName: str = '') -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_nextSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_taName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->nextSiblingElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSiblingElement, doc_QDomNode_nextSiblingElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_lineNumber, "lineNumber(self) -> int");

extern "C" {static PyObject *meth_QDomNode_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineNumber();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lineNumber, doc_QDomNode_lineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNode_columnNumber, "columnNumber(self) -> int");

extern "C" {static PyObject *meth_QDomNode_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnNumber();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_columnNumber, doc_QDomNode_columnNumber);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDomNode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDomNode *sipCpp = reinterpret_cast< ::QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDomNode::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtXml, ne_slot, sipType_QDomNode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDomNode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDomNode *sipCpp = reinterpret_cast< ::QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDomNode::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtXml, eq_slot, sipType_QDomNode, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomNode(void *, int);}
static void release_QDomNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDomNode *>(sipCppV);
}


extern "C" {static void *array_QDomNode(Py_ssize_t);}
static void *array_QDomNode(Py_ssize_t sipNrElem)
{
    return new  ::QDomNode[sipNrElem];
}


extern "C" {static void assign_QDomNode(void *, Py_ssize_t, void *);}
static void assign_QDomNode(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDomNode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDomNode *>(sipSrc);
}


extern "C" {static void *copy_QDomNode(const void *, Py_ssize_t);}
static void *copy_QDomNode(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDomNode(reinterpret_cast<const  ::QDomNode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomNode(sipSimpleWrapper *);}
static void dealloc_QDomNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDomNode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDomNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomNode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDomNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDomNode();

            return sipCpp;
        }
    }

    {
        const  ::QDomNode* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDomNode, &a0))
        {
            sipCpp = new  ::QDomNode(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDomNode[] = {
    {(void *)slot_QDomNode___ne__, ne_slot},
    {(void *)slot_QDomNode___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDomNode[] = {
    {sipName_appendChild, meth_QDomNode_appendChild, METH_VARARGS, doc_QDomNode_appendChild},
    {sipName_attributes, meth_QDomNode_attributes, METH_VARARGS, doc_QDomNode_attributes},
    {sipName_childNodes, meth_QDomNode_childNodes, METH_VARARGS, doc_QDomNode_childNodes},
    {sipName_clear, meth_QDomNode_clear, METH_VARARGS, doc_QDomNode_clear},
    {sipName_cloneNode, SIP_MLMETH_CAST(meth_QDomNode_cloneNode), METH_VARARGS|METH_KEYWORDS, doc_QDomNode_cloneNode},
    {sipName_columnNumber, meth_QDomNode_columnNumber, METH_VARARGS, doc_QDomNode_columnNumber},
    {sipName_firstChild, meth_QDomNode_firstChild, METH_VARARGS, doc_QDomNode_firstChild},
    {sipName_firstChildElement, SIP_MLMETH_CAST(meth_QDomNode_firstChildElement), METH_VARARGS|METH_KEYWORDS, doc_QDomNode_firstChildElement},
    {sipName_hasAttributes, meth_QDomNode_hasAttributes, METH_VARARGS, doc_QDomNode_hasAttributes},
    {sipName_hasChildNodes, meth_QDomNode_hasChildNodes, METH_VARARGS, doc_QDomNode_hasChildNodes},
    {sipName_insertAfter, meth_QDomNode_insertAfter, METH_VARARGS, doc_QDomNode_insertAfter},
    {sipName_insertBefore, meth_QDomNode_insertBefore, METH_VARARGS, doc_QDomNode_insertBefore},
    {sipName_isAttr, meth_QDomNode_isAttr, METH_VARARGS, doc_QDomNode_isAttr},
    {sipName_isCDATASection, meth_QDomNode_isCDATASection, METH_VARARGS, doc_QDomNode_isCDATASection},
    {sipName_isCharacterData, meth_QDomNode_isCharacterData, METH_VARARGS, doc_QDomNode_isCharacterData},
    {sipName_isComment, meth_QDomNode_isComment, METH_VARARGS, doc_QDomNode_isComment},
    {sipName_isDocument, meth_QDomNode_isDocument, METH_VARARGS, doc_QDomNode_isDocument},
    {sipName_isDocumentFragment, meth_QDomNode_isDocumentFragment, METH_VARARGS, doc_QDomNode_isDocumentFragment},
    {sipName_isDocumentType, meth_QDomNode_isDocumentType, METH_VARARGS, doc_QDomNode_isDocumentType},
    {sipName_isElement, meth_QDomNode_isElement, METH_VARARGS, doc_QDomNode_isElement},
    {sipName_isEntity, meth_QDomNode_isEntity, METH_VARARGS, doc_QDomNode_isEntity},
    {sipName_isEntityReference, meth_QDomNode_isEntityReference, METH_VARARGS, doc_QDomNode_isEntityReference},
    {sipName_isNotation, meth_QDomNode_isNotation, METH_VARARGS, doc_QDomNode_isNotation},
    {sipName_isNull, meth_QDomNode_isNull, METH_VARARGS, doc_QDomNode_isNull},
    {sipName_isProcessingInstruction, meth_QDomNode_isProcessingInstruction, METH_VARARGS, doc_QDomNode_isProcessingInstruction},
    {sipName_isSupported, meth_QDomNode_isSupported, METH_VARARGS, doc_QDomNode_isSupported},
    {sipName_isText, meth_QDomNode_isText, METH_VARARGS, doc_QDomNode_isText},
    {sipName_lastChild, meth_QDomNode_lastChild, METH_VARARGS, doc_QDomNode_lastChild},
    {sipName_lastChildElement, SIP_MLMETH_CAST(meth_QDomNode_lastChildElement), METH_VARARGS|METH_KEYWORDS, doc_QDomNode_lastChildElement},
    {sipName_lineNumber, meth_QDomNode_lineNumber, METH_VARARGS, doc_QDomNode_lineNumber},
    {sipName_localName, meth_QDomNode_localName, METH_VARARGS, doc_QDomNode_localName},
    {sipName_namedItem, meth_QDomNode_namedItem, METH_VARARGS, doc_QDomNode_namedItem},
    {sipName_namespaceURI, meth_QDomNode_namespaceURI, METH_VARARGS, doc_QDomNode_namespaceURI},
    {sipName_nextSibling, meth_QDomNode_nextSibling, METH_VARARGS, doc_QDomNode_nextSibling},
    {sipName_nextSiblingElement, SIP_MLMETH_CAST(meth_QDomNode_nextSiblingElement), METH_VARARGS|METH_KEYWORDS, doc_QDomNode_nextSiblingElement},
    {sipName_nodeName, meth_QDomNode_nodeName, METH_VARARGS, doc_QDomNode_nodeName},
    {sipName_nodeType, meth_QDomNode_nodeType, METH_VARARGS, doc_QDomNode_nodeType},
    {sipName_nodeValue, meth_QDomNode_nodeValue, METH_VARARGS, doc_QDomNode_nodeValue},
    {sipName_normalize, meth_QDomNode_normalize, METH_VARARGS, doc_QDomNode_normalize},
    {sipName_ownerDocument, meth_QDomNode_ownerDocument, METH_VARARGS, doc_QDomNode_ownerDocument},
    {sipName_parentNode, meth_QDomNode_parentNode, METH_VARARGS, doc_QDomNode_parentNode},
    {sipName_prefix, meth_QDomNode_prefix, METH_VARARGS, doc_QDomNode_prefix},
    {sipName_previousSibling, meth_QDomNode_previousSibling, METH_VARARGS, doc_QDomNode_previousSibling},
    {sipName_previousSiblingElement, SIP_MLMETH_CAST(meth_QDomNode_previousSiblingElement), METH_VARARGS|METH_KEYWORDS, doc_QDomNode_previousSiblingElement},
    {sipName_removeChild, meth_QDomNode_removeChild, METH_VARARGS, doc_QDomNode_removeChild},
    {sipName_replaceChild, meth_QDomNode_replaceChild, METH_VARARGS, doc_QDomNode_replaceChild},
    {sipName_save, meth_QDomNode_save, METH_VARARGS, doc_QDomNode_save},
    {sipName_setNodeValue, meth_QDomNode_setNodeValue, METH_VARARGS, doc_QDomNode_setNodeValue},
    {sipName_setPrefix, meth_QDomNode_setPrefix, METH_VARARGS, doc_QDomNode_setPrefix},
    {sipName_toAttr, meth_QDomNode_toAttr, METH_VARARGS, doc_QDomNode_toAttr},
    {sipName_toCDATASection, meth_QDomNode_toCDATASection, METH_VARARGS, doc_QDomNode_toCDATASection},
    {sipName_toCharacterData, meth_QDomNode_toCharacterData, METH_VARARGS, doc_QDomNode_toCharacterData},
    {sipName_toComment, meth_QDomNode_toComment, METH_VARARGS, doc_QDomNode_toComment},
    {sipName_toDocument, meth_QDomNode_toDocument, METH_VARARGS, doc_QDomNode_toDocument},
    {sipName_toDocumentFragment, meth_QDomNode_toDocumentFragment, METH_VARARGS, doc_QDomNode_toDocumentFragment},
    {sipName_toDocumentType, meth_QDomNode_toDocumentType, METH_VARARGS, doc_QDomNode_toDocumentType},
    {sipName_toElement, meth_QDomNode_toElement, METH_VARARGS, doc_QDomNode_toElement},
    {sipName_toEntity, meth_QDomNode_toEntity, METH_VARARGS, doc_QDomNode_toEntity},
    {sipName_toEntityReference, meth_QDomNode_toEntityReference, METH_VARARGS, doc_QDomNode_toEntityReference},
    {sipName_toNotation, meth_QDomNode_toNotation, METH_VARARGS, doc_QDomNode_toNotation},
    {sipName_toProcessingInstruction, meth_QDomNode_toProcessingInstruction, METH_VARARGS, doc_QDomNode_toProcessingInstruction},
    {sipName_toText, meth_QDomNode_toText, METH_VARARGS, doc_QDomNode_toText}
};

static sipEnumMemberDef enummembers_QDomNode[] = {
    {sipName_AttributeNode, static_cast<int>( ::QDomNode::AttributeNode), 15},
    {sipName_BaseNode, static_cast<int>( ::QDomNode::BaseNode), 15},
    {sipName_CDATASectionNode, static_cast<int>( ::QDomNode::CDATASectionNode), 15},
    {sipName_CharacterDataNode, static_cast<int>( ::QDomNode::CharacterDataNode), 15},
    {sipName_CommentNode, static_cast<int>( ::QDomNode::CommentNode), 15},
    {sipName_DocumentFragmentNode, static_cast<int>( ::QDomNode::DocumentFragmentNode), 15},
    {sipName_DocumentNode, static_cast<int>( ::QDomNode::DocumentNode), 15},
    {sipName_DocumentTypeNode, static_cast<int>( ::QDomNode::DocumentTypeNode), 15},
    {sipName_ElementNode, static_cast<int>( ::QDomNode::ElementNode), 15},
    {sipName_EncodingFromDocument, static_cast<int>( ::QDomNode::EncodingFromDocument), 14},
    {sipName_EncodingFromTextStream, static_cast<int>( ::QDomNode::EncodingFromTextStream), 14},
    {sipName_EntityNode, static_cast<int>( ::QDomNode::EntityNode), 15},
    {sipName_EntityReferenceNode, static_cast<int>( ::QDomNode::EntityReferenceNode), 15},
    {sipName_NotationNode, static_cast<int>( ::QDomNode::NotationNode), 15},
    {sipName_ProcessingInstructionNode, static_cast<int>( ::QDomNode::ProcessingInstructionNode), 15},
    {sipName_TextNode, static_cast<int>( ::QDomNode::TextNode), 15},
};

PyDoc_STRVAR(doc_QDomNode, "\1QDomNode()\n"
"QDomNode(QDomNode)");


static pyqt5ClassPluginDef plugin_QDomNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QDomNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDomNode,
        SIP_NULLPTR,
        &plugin_QDomNode
    },
    {
        sipNameNr_QDomNode,
        {0, 0, 1},
        62, methods_QDomNode,
        16, enummembers_QDomNode,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDomNode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDomNode,
    init_type_QDomNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDomNode,
    assign_QDomNode,
    array_QDomNode,
    copy_QDomNode,
    release_QDomNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
