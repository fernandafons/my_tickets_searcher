/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 296 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"
#line 82 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"
#line 190 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDefaultHandler.cpp"


class sipQXmlDefaultHandler : public  ::QXmlDefaultHandler
{
public:
    sipQXmlDefaultHandler();
    virtual ~sipQXmlDefaultHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool attributeDecl(const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool internalEntityDecl(const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool externalEntityDecl(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
     ::QString errorString() const SIP_OVERRIDE;
    bool startDTD(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool endDTD() SIP_OVERRIDE;
    bool startEntity(const  ::QString&) SIP_OVERRIDE;
    bool endEntity(const  ::QString&) SIP_OVERRIDE;
    bool startCDATA() SIP_OVERRIDE;
    bool endCDATA() SIP_OVERRIDE;
    bool comment(const  ::QString&) SIP_OVERRIDE;
    bool resolveEntity(const  ::QString&,const  ::QString&, ::QXmlInputSource*&) SIP_OVERRIDE;
    bool notationDecl(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool unparsedEntityDecl(const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool warning(const  ::QXmlParseException&) SIP_OVERRIDE;
    bool error(const  ::QXmlParseException&) SIP_OVERRIDE;
    bool fatalError(const  ::QXmlParseException&) SIP_OVERRIDE;
    void setDocumentLocator( ::QXmlLocator*) SIP_OVERRIDE;
    bool startDocument() SIP_OVERRIDE;
    bool endDocument() SIP_OVERRIDE;
    bool startPrefixMapping(const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool endPrefixMapping(const  ::QString&) SIP_OVERRIDE;
    bool startElement(const  ::QString&,const  ::QString&,const  ::QString&,const  ::QXmlAttributes&) SIP_OVERRIDE;
    bool endElement(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool characters(const  ::QString&) SIP_OVERRIDE;
    bool ignorableWhitespace(const  ::QString&) SIP_OVERRIDE;
    bool processingInstruction(const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool skippedEntity(const  ::QString&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlDefaultHandler(const sipQXmlDefaultHandler &);
    sipQXmlDefaultHandler &operator = (const sipQXmlDefaultHandler &);

    char sipPyMethods[33];
};

sipQXmlDefaultHandler::sipQXmlDefaultHandler():  ::QXmlDefaultHandler(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlDefaultHandler::~sipQXmlDefaultHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQXmlDefaultHandler::attributeDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3,const  ::QString& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_attributeDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_attributeDecl);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::attributeDecl(a0,a1,a2,a3,a4);

    extern bool sipVH_QtXml_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_35(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQXmlDefaultHandler::internalEntityDecl(const  ::QString& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_internalEntityDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_internalEntityDecl);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::internalEntityDecl(a0,a1);

    extern bool sipVH_QtXml_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&);

    return sipVH_QtXml_29(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlDefaultHandler::externalEntityDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_externalEntityDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_externalEntityDecl);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::externalEntityDecl(a0,a1,a2);

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QString sipQXmlDefaultHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_errorString);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_errorString);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::errorString();

    extern  ::QString sipVH_QtXml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_3(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::startDTD(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_startDTD);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_startDTD);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startDTD(a0,a1,a2);

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQXmlDefaultHandler::endDTD()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_endDTD);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_endDTD);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endDTD();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::startEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_startEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_startEntity);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startEntity(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::endEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_endEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_endEntity);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endEntity(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::startCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_startCDATA);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_startCDATA);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startCDATA();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::endCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_endCDATA);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_endCDATA);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endCDATA();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::comment(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_comment);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_comment);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::comment(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::resolveEntity(const  ::QString& a0,const  ::QString& a1, ::QXmlInputSource*&a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_resolveEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_resolveEntity);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::resolveEntity(a0,a1,a2);

    extern bool sipVH_QtXml_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&, ::QXmlInputSource*&);

    return sipVH_QtXml_34(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQXmlDefaultHandler::notationDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_notationDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_notationDecl);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::notationDecl(a0,a1,a2);

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQXmlDefaultHandler::unparsedEntityDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_unparsedEntityDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_unparsedEntityDecl);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::unparsedEntityDecl(a0,a1,a2,a3);

    extern bool sipVH_QtXml_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_33(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQXmlDefaultHandler::warning(const  ::QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_warning);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_warning);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::warning(a0);

    extern bool sipVH_QtXml_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlParseException&);

    return sipVH_QtXml_32(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::error(const  ::QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_error);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_error);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::error(a0);

    extern bool sipVH_QtXml_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlParseException&);

    return sipVH_QtXml_32(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::fatalError(const  ::QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_fatalError);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_fatalError);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::fatalError(a0);

    extern bool sipVH_QtXml_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlParseException&);

    return sipVH_QtXml_32(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQXmlDefaultHandler::setDocumentLocator( ::QXmlLocator*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_setDocumentLocator);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_setDocumentLocator);
#endif

    if (!sipMeth)
    {
         ::QXmlDefaultHandler::setDocumentLocator(a0);
        return;
    }

    extern void sipVH_QtXml_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlLocator*);

    sipVH_QtXml_28(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::startDocument()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_startDocument);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_startDocument);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startDocument();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::endDocument()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_endDocument);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_endDocument);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endDocument();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDefaultHandler::startPrefixMapping(const  ::QString& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_startPrefixMapping);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_startPrefixMapping);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startPrefixMapping(a0,a1);

    extern bool sipVH_QtXml_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&);

    return sipVH_QtXml_29(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlDefaultHandler::endPrefixMapping(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_endPrefixMapping);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_endPrefixMapping);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endPrefixMapping(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::startElement(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2,const  ::QXmlAttributes& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_startElement);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_startElement);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::startElement(a0,a1,a2,a3);

    extern bool sipVH_QtXml_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&,const  ::QXmlAttributes&);

    return sipVH_QtXml_30(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQXmlDefaultHandler::endElement(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_endElement);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_endElement);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::endElement(a0,a1,a2);

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQXmlDefaultHandler::characters(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_characters);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_characters);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::characters(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::ignorableWhitespace(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_ignorableWhitespace);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_ignorableWhitespace);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::ignorableWhitespace(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlDefaultHandler::processingInstruction(const  ::QString& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_processingInstruction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_processingInstruction);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::processingInstruction(a0,a1);

    extern bool sipVH_QtXml_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&);

    return sipVH_QtXml_29(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlDefaultHandler::skippedEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_skippedEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_skippedEntity);
#endif

    if (!sipMeth)
        return  ::QXmlDefaultHandler::skippedEntity(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_setDocumentLocator, "setDocumentLocator(self, QXmlLocator)");

extern "C" {static PyObject *meth_QXmlDefaultHandler_setDocumentLocator(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_setDocumentLocator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlLocator* a0;
        PyObject *a0Keep;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, &a0Keep, sipType_QXmlLocator, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::setDocumentLocator(a0) : sipCpp->setDocumentLocator(a0));

            sipKeepReference(sipSelf, -13, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_setDocumentLocator, doc_QXmlDefaultHandler_setDocumentLocator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startDocument, "startDocument(self) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startDocument() : sipCpp->startDocument());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startDocument, doc_QXmlDefaultHandler_startDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endDocument, "endDocument(self) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endDocument() : sipCpp->endDocument());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endDocument, doc_QXmlDefaultHandler_endDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startPrefixMapping, "startPrefixMapping(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startPrefixMapping(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startPrefixMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startPrefixMapping(*a0,*a1) : sipCpp->startPrefixMapping(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startPrefixMapping, doc_QXmlDefaultHandler_startPrefixMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endPrefixMapping, "endPrefixMapping(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endPrefixMapping(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endPrefixMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endPrefixMapping(*a0) : sipCpp->endPrefixMapping(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endPrefixMapping, doc_QXmlDefaultHandler_endPrefixMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startElement, "startElement(self, str, str, str, QXmlAttributes) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QXmlAttributes* a3;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QXmlAttributes, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startElement(*a0,*a1,*a2,*a3) : sipCpp->startElement(*a0,*a1,*a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startElement, doc_QXmlDefaultHandler_startElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endElement, "endElement(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endElement(*a0,*a1,*a2) : sipCpp->endElement(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endElement, doc_QXmlDefaultHandler_endElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_characters, "characters(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_characters(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_characters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::characters(*a0) : sipCpp->characters(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_characters, doc_QXmlDefaultHandler_characters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_ignorableWhitespace, "ignorableWhitespace(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_ignorableWhitespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_ignorableWhitespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::ignorableWhitespace(*a0) : sipCpp->ignorableWhitespace(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_ignorableWhitespace, doc_QXmlDefaultHandler_ignorableWhitespace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_processingInstruction, "processingInstruction(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_processingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_processingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::processingInstruction(*a0,*a1) : sipCpp->processingInstruction(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_processingInstruction, doc_QXmlDefaultHandler_processingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_skippedEntity, "skippedEntity(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_skippedEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_skippedEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::skippedEntity(*a0) : sipCpp->skippedEntity(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_skippedEntity, doc_QXmlDefaultHandler_skippedEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_warning, "warning(self, QXmlParseException) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_warning(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_warning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlParseException* a0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::warning(*a0) : sipCpp->warning(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_warning, doc_QXmlDefaultHandler_warning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_error, "error(self, QXmlParseException) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlParseException* a0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::error(*a0) : sipCpp->error(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_error, doc_QXmlDefaultHandler_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_fatalError, "fatalError(self, QXmlParseException) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_fatalError(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_fatalError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlParseException* a0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::fatalError(*a0) : sipCpp->fatalError(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_fatalError, doc_QXmlDefaultHandler_fatalError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_notationDecl, "notationDecl(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_notationDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_notationDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::notationDecl(*a0,*a1,*a2) : sipCpp->notationDecl(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_notationDecl, doc_QXmlDefaultHandler_notationDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_unparsedEntityDecl, "unparsedEntityDecl(self, str, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_unparsedEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_unparsedEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::unparsedEntityDecl(*a0,*a1,*a2,*a3) : sipCpp->unparsedEntityDecl(*a0,*a1,*a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_unparsedEntityDecl, doc_QXmlDefaultHandler_unparsedEntityDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_resolveEntity, "resolveEntity(self, str, str) -> Tuple[bool, QXmlInputSource]");

extern "C" {static PyObject *meth_QXmlDefaultHandler_resolveEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_resolveEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlInputSource* a2;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::resolveEntity(*a0,*a1,a2) : sipCpp->resolveEntity(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipBuildResult(0,"(bD)",sipRes,a2,sipType_QXmlInputSource,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_resolveEntity, doc_QXmlDefaultHandler_resolveEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startDTD, "startDTD(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startDTD(*a0,*a1,*a2) : sipCpp->startDTD(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startDTD, doc_QXmlDefaultHandler_startDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endDTD, "endDTD(self) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endDTD() : sipCpp->endDTD());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endDTD, doc_QXmlDefaultHandler_endDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startEntity, "startEntity(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startEntity(*a0) : sipCpp->startEntity(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startEntity, doc_QXmlDefaultHandler_startEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endEntity, "endEntity(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endEntity(*a0) : sipCpp->endEntity(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endEntity, doc_QXmlDefaultHandler_endEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_startCDATA, "startCDATA(self) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_startCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::startCDATA() : sipCpp->startCDATA());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startCDATA, doc_QXmlDefaultHandler_startCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_endCDATA, "endCDATA(self) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_endCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::endCDATA() : sipCpp->endCDATA());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endCDATA, doc_QXmlDefaultHandler_endCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_comment, "comment(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_comment(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::comment(*a0) : sipCpp->comment(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_comment, doc_QXmlDefaultHandler_comment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_attributeDecl, "attributeDecl(self, str, str, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_attributeDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_attributeDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString* a4;
        int a4State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::attributeDecl(*a0,*a1,*a2,*a3,*a4) : sipCpp->attributeDecl(*a0,*a1,*a2,*a3,*a4));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_attributeDecl, doc_QXmlDefaultHandler_attributeDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_internalEntityDecl, "internalEntityDecl(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_internalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_internalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::internalEntityDecl(*a0,*a1) : sipCpp->internalEntityDecl(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_internalEntityDecl, doc_QXmlDefaultHandler_internalEntityDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_externalEntityDecl, "externalEntityDecl(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDefaultHandler_externalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_externalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::externalEntityDecl(*a0,*a1,*a2) : sipCpp->externalEntityDecl(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_externalEntityDecl, doc_QXmlDefaultHandler_externalEntityDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDefaultHandler_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QXmlDefaultHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QXmlDefaultHandler::errorString() : sipCpp->errorString()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_errorString, doc_QXmlDefaultHandler_errorString);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QXmlDefaultHandler(void *, const sipTypeDef *);}
static void *cast_QXmlDefaultHandler(void *sipCppV, const sipTypeDef *targetType)
{
     ::QXmlDefaultHandler *sipCpp = reinterpret_cast< ::QXmlDefaultHandler *>(sipCppV);

    if (targetType == sipType_QXmlContentHandler)
        return static_cast< ::QXmlContentHandler *>(sipCpp);

    if (targetType == sipType_QXmlErrorHandler)
        return static_cast< ::QXmlErrorHandler *>(sipCpp);

    if (targetType == sipType_QXmlDTDHandler)
        return static_cast< ::QXmlDTDHandler *>(sipCpp);

    if (targetType == sipType_QXmlEntityResolver)
        return static_cast< ::QXmlEntityResolver *>(sipCpp);

    if (targetType == sipType_QXmlLexicalHandler)
        return static_cast< ::QXmlLexicalHandler *>(sipCpp);

    if (targetType == sipType_QXmlDeclHandler)
        return static_cast< ::QXmlDeclHandler *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlDefaultHandler(void *, int);}
static void release_QXmlDefaultHandler(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlDefaultHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlDefaultHandler *>(sipCppV);
}


extern "C" {static void *array_QXmlDefaultHandler(Py_ssize_t);}
static void *array_QXmlDefaultHandler(Py_ssize_t sipNrElem)
{
    return new  ::QXmlDefaultHandler[sipNrElem];
}


extern "C" {static void dealloc_QXmlDefaultHandler(sipSimpleWrapper *);}
static void dealloc_QXmlDefaultHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlDefaultHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlDefaultHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlDefaultHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlDefaultHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlDefaultHandler *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQXmlDefaultHandler();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QXmlDefaultHandler[] = {{21, 255, 0}, {26, 255, 0}, {22, 255, 0}, {25, 255, 0}, {28, 255, 0}, {23, 255, 1}};


static PyMethodDef methods_QXmlDefaultHandler[] = {
    {sipName_attributeDecl, meth_QXmlDefaultHandler_attributeDecl, METH_VARARGS, doc_QXmlDefaultHandler_attributeDecl},
    {sipName_characters, meth_QXmlDefaultHandler_characters, METH_VARARGS, doc_QXmlDefaultHandler_characters},
    {sipName_comment, meth_QXmlDefaultHandler_comment, METH_VARARGS, doc_QXmlDefaultHandler_comment},
    {sipName_endCDATA, meth_QXmlDefaultHandler_endCDATA, METH_VARARGS, doc_QXmlDefaultHandler_endCDATA},
    {sipName_endDTD, meth_QXmlDefaultHandler_endDTD, METH_VARARGS, doc_QXmlDefaultHandler_endDTD},
    {sipName_endDocument, meth_QXmlDefaultHandler_endDocument, METH_VARARGS, doc_QXmlDefaultHandler_endDocument},
    {sipName_endElement, meth_QXmlDefaultHandler_endElement, METH_VARARGS, doc_QXmlDefaultHandler_endElement},
    {sipName_endEntity, meth_QXmlDefaultHandler_endEntity, METH_VARARGS, doc_QXmlDefaultHandler_endEntity},
    {sipName_endPrefixMapping, meth_QXmlDefaultHandler_endPrefixMapping, METH_VARARGS, doc_QXmlDefaultHandler_endPrefixMapping},
    {sipName_error, meth_QXmlDefaultHandler_error, METH_VARARGS, doc_QXmlDefaultHandler_error},
    {sipName_errorString, meth_QXmlDefaultHandler_errorString, METH_VARARGS, doc_QXmlDefaultHandler_errorString},
    {sipName_externalEntityDecl, meth_QXmlDefaultHandler_externalEntityDecl, METH_VARARGS, doc_QXmlDefaultHandler_externalEntityDecl},
    {sipName_fatalError, meth_QXmlDefaultHandler_fatalError, METH_VARARGS, doc_QXmlDefaultHandler_fatalError},
    {sipName_ignorableWhitespace, meth_QXmlDefaultHandler_ignorableWhitespace, METH_VARARGS, doc_QXmlDefaultHandler_ignorableWhitespace},
    {sipName_internalEntityDecl, meth_QXmlDefaultHandler_internalEntityDecl, METH_VARARGS, doc_QXmlDefaultHandler_internalEntityDecl},
    {sipName_notationDecl, meth_QXmlDefaultHandler_notationDecl, METH_VARARGS, doc_QXmlDefaultHandler_notationDecl},
    {sipName_processingInstruction, meth_QXmlDefaultHandler_processingInstruction, METH_VARARGS, doc_QXmlDefaultHandler_processingInstruction},
    {sipName_resolveEntity, meth_QXmlDefaultHandler_resolveEntity, METH_VARARGS, doc_QXmlDefaultHandler_resolveEntity},
    {sipName_setDocumentLocator, meth_QXmlDefaultHandler_setDocumentLocator, METH_VARARGS, doc_QXmlDefaultHandler_setDocumentLocator},
    {sipName_skippedEntity, meth_QXmlDefaultHandler_skippedEntity, METH_VARARGS, doc_QXmlDefaultHandler_skippedEntity},
    {sipName_startCDATA, meth_QXmlDefaultHandler_startCDATA, METH_VARARGS, doc_QXmlDefaultHandler_startCDATA},
    {sipName_startDTD, meth_QXmlDefaultHandler_startDTD, METH_VARARGS, doc_QXmlDefaultHandler_startDTD},
    {sipName_startDocument, meth_QXmlDefaultHandler_startDocument, METH_VARARGS, doc_QXmlDefaultHandler_startDocument},
    {sipName_startElement, meth_QXmlDefaultHandler_startElement, METH_VARARGS, doc_QXmlDefaultHandler_startElement},
    {sipName_startEntity, meth_QXmlDefaultHandler_startEntity, METH_VARARGS, doc_QXmlDefaultHandler_startEntity},
    {sipName_startPrefixMapping, meth_QXmlDefaultHandler_startPrefixMapping, METH_VARARGS, doc_QXmlDefaultHandler_startPrefixMapping},
    {sipName_unparsedEntityDecl, meth_QXmlDefaultHandler_unparsedEntityDecl, METH_VARARGS, doc_QXmlDefaultHandler_unparsedEntityDecl},
    {sipName_warning, meth_QXmlDefaultHandler_warning, METH_VARARGS, doc_QXmlDefaultHandler_warning}
};

PyDoc_STRVAR(doc_QXmlDefaultHandler, "\1QXmlDefaultHandler()");


static pyqt5ClassPluginDef plugin_QXmlDefaultHandler = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QXmlDefaultHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlDefaultHandler,
        SIP_NULLPTR,
        &plugin_QXmlDefaultHandler
    },
    {
        sipNameNr_QXmlDefaultHandler,
        {0, 0, 1},
        28, methods_QXmlDefaultHandler,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlDefaultHandler,
    -1,
    -1,
    supers_QXmlDefaultHandler,
    SIP_NULLPTR,
    init_type_QXmlDefaultHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QXmlDefaultHandler,
    SIP_NULLPTR,
    array_QXmlDefaultHandler,
    SIP_NULLPTR,
    release_QXmlDefaultHandler,
    cast_QXmlDefaultHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
