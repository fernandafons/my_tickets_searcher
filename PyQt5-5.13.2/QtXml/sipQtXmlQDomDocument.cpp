/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 82 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 309 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 154 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 292 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 414 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 426 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 373 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 361 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 348 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 272 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 385 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 399 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomDocument.cpp"


PyDoc_STRVAR(doc_QDomDocument_createElement, "createElement(self, str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_createElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->createElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createElement, doc_QDomDocument_createElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createDocumentFragment, "createDocumentFragment(self) -> QDomDocumentFragment");

extern "C" {static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
             ::QDomDocumentFragment*sipRes;

            sipRes = new  ::QDomDocumentFragment(sipCpp->createDocumentFragment());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createDocumentFragment, doc_QDomDocument_createDocumentFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createTextNode, "createTextNode(self, str) -> QDomText");

extern "C" {static PyObject *meth_QDomDocument_createTextNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createTextNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomText*sipRes;

            sipRes = new  ::QDomText(sipCpp->createTextNode(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomText,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createTextNode, doc_QDomDocument_createTextNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createComment, "createComment(self, str) -> QDomComment");

extern "C" {static PyObject *meth_QDomDocument_createComment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomComment*sipRes;

            sipRes = new  ::QDomComment(sipCpp->createComment(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomComment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createComment, doc_QDomDocument_createComment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createCDATASection, "createCDATASection(self, str) -> QDomCDATASection");

extern "C" {static PyObject *meth_QDomDocument_createCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomCDATASection*sipRes;

            sipRes = new  ::QDomCDATASection(sipCpp->createCDATASection(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createCDATASection, doc_QDomDocument_createCDATASection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createProcessingInstruction, "createProcessingInstruction(self, str, str) -> QDomProcessingInstruction");

extern "C" {static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDomProcessingInstruction*sipRes;

            sipRes = new  ::QDomProcessingInstruction(sipCpp->createProcessingInstruction(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createProcessingInstruction, doc_QDomDocument_createProcessingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createAttribute, "createAttribute(self, str) -> QDomAttr");

extern "C" {static PyObject *meth_QDomDocument_createAttribute(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomAttr*sipRes;

            sipRes = new  ::QDomAttr(sipCpp->createAttribute(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createAttribute, doc_QDomDocument_createAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createEntityReference, "createEntityReference(self, str) -> QDomEntityReference");

extern "C" {static PyObject *meth_QDomDocument_createEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomEntityReference*sipRes;

            sipRes = new  ::QDomEntityReference(sipCpp->createEntityReference(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createEntityReference, doc_QDomDocument_createEntityReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_elementsByTagName, "elementsByTagName(self, str) -> QDomNodeList");

extern "C" {static PyObject *meth_QDomDocument_elementsByTagName(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomNodeList*sipRes;

            sipRes = new  ::QDomNodeList(sipCpp->elementsByTagName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementsByTagName, doc_QDomDocument_elementsByTagName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_importNode, "importNode(self, QDomNode, bool) -> QDomNode");

extern "C" {static PyObject *meth_QDomDocument_importNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_importNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNode* a0;
        bool a1;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QDomNode, &a0, &a1))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->importNode(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_importNode, doc_QDomDocument_importNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createElementNS, "createElementNS(self, str, str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_createElementNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElementNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->createElementNS(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createElementNS, doc_QDomDocument_createElementNS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_createAttributeNS, "createAttributeNS(self, str, str) -> QDomAttr");

extern "C" {static PyObject *meth_QDomDocument_createAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDomAttr*sipRes;

            sipRes = new  ::QDomAttr(sipCpp->createAttributeNS(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createAttributeNS, doc_QDomDocument_createAttributeNS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_elementsByTagNameNS, "elementsByTagNameNS(self, str, str) -> QDomNodeList");

extern "C" {static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDomNodeList*sipRes;

            sipRes = new  ::QDomNodeList(sipCpp->elementsByTagNameNS(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementsByTagNameNS, doc_QDomDocument_elementsByTagNameNS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_elementById, "elementById(self, str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_elementById(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementById(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->elementById(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementById, doc_QDomDocument_elementById);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_doctype, "doctype(self) -> QDomDocumentType");

extern "C" {static PyObject *meth_QDomDocument_doctype(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_doctype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
             ::QDomDocumentType*sipRes;

            sipRes = new  ::QDomDocumentType(sipCpp->doctype());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_doctype, doc_QDomDocument_doctype);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_implementation, "implementation(self) -> QDomImplementation");

extern "C" {static PyObject *meth_QDomDocument_implementation(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_implementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
             ::QDomImplementation*sipRes;

            sipRes = new  ::QDomImplementation(sipCpp->implementation());

            return sipConvertFromNewType(sipRes,sipType_QDomImplementation,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_implementation, doc_QDomDocument_implementation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_documentElement, "documentElement(self) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_documentElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_documentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
             ::QDomElement*sipRes;

            sipRes = new  ::QDomElement(sipCpp->documentElement());

            return sipConvertFromNewType(sipRes,sipType_QDomElement,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_documentElement, doc_QDomDocument_documentElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_nodeType, "nodeType(self) -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomDocument_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
             ::QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDomNode_NodeType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_nodeType, doc_QDomDocument_nodeType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], bool) -> Tuple[bool, str, int, int]\n"
"setContent(self, str, bool) -> Tuple[bool, str, int, int]\n"
"setContent(self, QIODevice, bool) -> Tuple[bool, str, int, int]\n"
"setContent(self, QXmlInputSource, bool) -> Tuple[bool, str, int, int]\n"
"setContent(self, Union[QByteArray, bytes, bytearray]) -> Tuple[bool, str, int, int]\n"
"setContent(self, str) -> Tuple[bool, str, int, int]\n"
"setContent(self, QIODevice) -> Tuple[bool, str, int, int]\n"
"setContent(self, QXmlInputSource, QXmlReader) -> Tuple[bool, str, int, int]");

extern "C" {static PyObject *meth_QDomDocument_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        bool a1;
         ::QString* a2;
        int a3;
        int a4;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;
            a2 = new  ::QString();

            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,SIP_NULLPTR,a3,a4);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
         ::QString* a2;
        int a3;
        int a4;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;
            a2 = new  ::QString();

            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,SIP_NULLPTR,a3,a4);
        }
    }

    {
         ::QIODevice* a0;
        bool a1;
         ::QString* a2;
        int a3;
        int a4;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QIODevice, &a0, &a1))
        {
            bool sipRes;
            a2 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,SIP_NULLPTR,a3,a4);
        }
    }

    {
         ::QXmlInputSource* a0;
        bool a1;
         ::QString* a2;
        int a3;
        int a4;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QXmlInputSource, &a0, &a1))
        {
            bool sipRes;
            a2 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,SIP_NULLPTR,a3,a4);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QString* a1;
        int a2;
        int a3;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;
            a1 = new  ::QString();

            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,SIP_NULLPTR,a2,a3);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a2;
        int a3;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;
            a1 = new  ::QString();

            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,SIP_NULLPTR,a2,a3);
        }
    }

    {
         ::QIODevice* a0;
         ::QString* a1;
        int a2;
        int a3;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;
            a1 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,SIP_NULLPTR,a2,a3);
        }
    }

    {
         ::QXmlInputSource* a0;
         ::QXmlReader* a1;
         ::QString* a2;
        int a3;
        int a4;
         ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QXmlInputSource, &a0, sipType_QXmlReader, &a1))
        {
            bool sipRes;
            a2 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,SIP_NULLPTR,a3,a4);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_setContent, doc_QDomDocument_setContent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_toString, "toString(self, indent: int = 1) -> str");

extern "C" {static PyObject *meth_QDomDocument_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
        const  ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QDomDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_toString, doc_QDomDocument_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomDocument_toByteArray, "toByteArray(self, indent: int = 1) -> QByteArray");

extern "C" {static PyObject *meth_QDomDocument_toByteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toByteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
        const  ::QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QDomDocument, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toByteArray(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_toByteArray, doc_QDomDocument_toByteArray);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDomDocument(void *, const sipTypeDef *);}
static void *cast_QDomDocument(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDomDocument *sipCpp = reinterpret_cast< ::QDomDocument *>(sipCppV);

    if (targetType == sipType_QDomNode)
        return static_cast< ::QDomNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomDocument(void *, int);}
static void release_QDomDocument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDomDocument *>(sipCppV);
}


extern "C" {static void *array_QDomDocument(Py_ssize_t);}
static void *array_QDomDocument(Py_ssize_t sipNrElem)
{
    return new  ::QDomDocument[sipNrElem];
}


extern "C" {static void assign_QDomDocument(void *, Py_ssize_t, void *);}
static void assign_QDomDocument(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDomDocument *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDomDocument *>(sipSrc);
}


extern "C" {static void *copy_QDomDocument(const void *, Py_ssize_t);}
static void *copy_QDomDocument(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDomDocument(reinterpret_cast<const  ::QDomDocument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomDocument(sipSimpleWrapper *);}
static void dealloc_QDomDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDomDocument(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDomDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomDocument(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDomDocument *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDomDocument();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QDomDocument(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QDomDocumentType* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDomDocumentType, &a0))
        {
            sipCpp = new  ::QDomDocument(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QDomDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDomDocument, &a0))
        {
            sipCpp = new  ::QDomDocument(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomDocument[] = {{13, 255, 1}};


static PyMethodDef methods_QDomDocument[] = {
    {sipName_createAttribute, meth_QDomDocument_createAttribute, METH_VARARGS, doc_QDomDocument_createAttribute},
    {sipName_createAttributeNS, meth_QDomDocument_createAttributeNS, METH_VARARGS, doc_QDomDocument_createAttributeNS},
    {sipName_createCDATASection, meth_QDomDocument_createCDATASection, METH_VARARGS, doc_QDomDocument_createCDATASection},
    {sipName_createComment, meth_QDomDocument_createComment, METH_VARARGS, doc_QDomDocument_createComment},
    {sipName_createDocumentFragment, meth_QDomDocument_createDocumentFragment, METH_VARARGS, doc_QDomDocument_createDocumentFragment},
    {sipName_createElement, meth_QDomDocument_createElement, METH_VARARGS, doc_QDomDocument_createElement},
    {sipName_createElementNS, meth_QDomDocument_createElementNS, METH_VARARGS, doc_QDomDocument_createElementNS},
    {sipName_createEntityReference, meth_QDomDocument_createEntityReference, METH_VARARGS, doc_QDomDocument_createEntityReference},
    {sipName_createProcessingInstruction, meth_QDomDocument_createProcessingInstruction, METH_VARARGS, doc_QDomDocument_createProcessingInstruction},
    {sipName_createTextNode, meth_QDomDocument_createTextNode, METH_VARARGS, doc_QDomDocument_createTextNode},
    {sipName_doctype, meth_QDomDocument_doctype, METH_VARARGS, doc_QDomDocument_doctype},
    {sipName_documentElement, meth_QDomDocument_documentElement, METH_VARARGS, doc_QDomDocument_documentElement},
    {sipName_elementById, meth_QDomDocument_elementById, METH_VARARGS, doc_QDomDocument_elementById},
    {sipName_elementsByTagName, meth_QDomDocument_elementsByTagName, METH_VARARGS, doc_QDomDocument_elementsByTagName},
    {sipName_elementsByTagNameNS, meth_QDomDocument_elementsByTagNameNS, METH_VARARGS, doc_QDomDocument_elementsByTagNameNS},
    {sipName_implementation, meth_QDomDocument_implementation, METH_VARARGS, doc_QDomDocument_implementation},
    {sipName_importNode, meth_QDomDocument_importNode, METH_VARARGS, doc_QDomDocument_importNode},
    {sipName_nodeType, meth_QDomDocument_nodeType, METH_VARARGS, doc_QDomDocument_nodeType},
    {sipName_setContent, SIP_MLMETH_CAST(meth_QDomDocument_setContent), METH_VARARGS|METH_KEYWORDS, doc_QDomDocument_setContent},
    {sipName_toByteArray, SIP_MLMETH_CAST(meth_QDomDocument_toByteArray), METH_VARARGS|METH_KEYWORDS, doc_QDomDocument_toByteArray},
    {sipName_toString, SIP_MLMETH_CAST(meth_QDomDocument_toString), METH_VARARGS|METH_KEYWORDS, doc_QDomDocument_toString}
};

PyDoc_STRVAR(doc_QDomDocument, "\1QDomDocument()\n"
"QDomDocument(str)\n"
"QDomDocument(QDomDocumentType)\n"
"QDomDocument(QDomDocument)");


static pyqt5ClassPluginDef plugin_QDomDocument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QDomDocument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDomDocument,
        SIP_NULLPTR,
        &plugin_QDomDocument
    },
    {
        sipNameNr_QDomDocument,
        {0, 0, 1},
        21, methods_QDomDocument,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDomDocument,
    -1,
    -1,
    supers_QDomDocument,
    SIP_NULLPTR,
    init_type_QDomDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDomDocument,
    assign_QDomDocument,
    array_QDomDocument,
    copy_QDomDocument,
    release_QDomDocument,
    cast_QDomDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
