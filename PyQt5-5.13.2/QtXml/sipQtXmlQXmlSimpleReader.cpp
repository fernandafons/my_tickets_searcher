/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 155 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"

#line 82 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 282 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 264 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 203 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 252 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlSimpleReader.cpp"


class sipQXmlSimpleReader : public  ::QXmlSimpleReader
{
public:
    sipQXmlSimpleReader();
    virtual ~sipQXmlSimpleReader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool parseContinue() SIP_OVERRIDE;
    bool parse(const  ::QXmlInputSource*,bool) SIP_OVERRIDE;
    bool feature(const  ::QString&,bool*) const SIP_OVERRIDE;
    void setFeature(const  ::QString&,bool) SIP_OVERRIDE;
    bool hasFeature(const  ::QString&) const SIP_OVERRIDE;
    void* property(const  ::QString&,bool*) const SIP_OVERRIDE;
    void setProperty(const  ::QString&,void*) SIP_OVERRIDE;
    bool hasProperty(const  ::QString&) const SIP_OVERRIDE;
    void setEntityResolver( ::QXmlEntityResolver*) SIP_OVERRIDE;
     ::QXmlEntityResolver* entityResolver() const SIP_OVERRIDE;
    void setDTDHandler( ::QXmlDTDHandler*) SIP_OVERRIDE;
     ::QXmlDTDHandler* DTDHandler() const SIP_OVERRIDE;
    void setContentHandler( ::QXmlContentHandler*) SIP_OVERRIDE;
     ::QXmlContentHandler* contentHandler() const SIP_OVERRIDE;
    void setErrorHandler( ::QXmlErrorHandler*) SIP_OVERRIDE;
     ::QXmlErrorHandler* errorHandler() const SIP_OVERRIDE;
    void setLexicalHandler( ::QXmlLexicalHandler*) SIP_OVERRIDE;
     ::QXmlLexicalHandler* lexicalHandler() const SIP_OVERRIDE;
    void setDeclHandler( ::QXmlDeclHandler*) SIP_OVERRIDE;
     ::QXmlDeclHandler* declHandler() const SIP_OVERRIDE;
    bool parse(const  ::QXmlInputSource*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlSimpleReader(const sipQXmlSimpleReader &);
    sipQXmlSimpleReader &operator = (const sipQXmlSimpleReader &);

    char sipPyMethods[21];
};

sipQXmlSimpleReader::sipQXmlSimpleReader():  ::QXmlSimpleReader(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlSimpleReader::~sipQXmlSimpleReader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQXmlSimpleReader::parseContinue()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_parseContinue);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_parseContinue);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::parseContinue();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlSimpleReader::parse(const  ::QXmlInputSource*a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_parse);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_parse);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::parse(a0,a1);

    extern bool sipVH_QtXml_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlInputSource*,bool);

    return sipVH_QtXml_25(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::feature(const  ::QString& a0,bool*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_feature);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_feature);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::feature(a0,a1);

    extern bool sipVH_QtXml_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool*);

    return sipVH_QtXml_6(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQXmlSimpleReader::setFeature(const  ::QString& a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_setFeature);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_setFeature);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setFeature(a0,a1);
        return;
    }

    extern void sipVH_QtXml_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool);

    sipVH_QtXml_7(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::hasFeature(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasFeature);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, SIP_NULLPTR, sipName_hasFeature);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::hasFeature(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void* sipQXmlSimpleReader::property(const  ::QString& a0,bool*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_property);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_property);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::property(a0,a1);

    extern void* sipVH_QtXml_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool*);

    return sipVH_QtXml_9(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQXmlSimpleReader::setProperty(const  ::QString& a0,void*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_setProperty);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_setProperty);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setProperty(a0,a1);
        return;
    }

    extern void sipVH_QtXml_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,void*);

    sipVH_QtXml_10(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::hasProperty(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasProperty);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_hasProperty);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::hasProperty(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQXmlSimpleReader::setEntityResolver( ::QXmlEntityResolver*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_setEntityResolver);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_setEntityResolver);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setEntityResolver(a0);
        return;
    }

    extern void sipVH_QtXml_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlEntityResolver*);

    sipVH_QtXml_11(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlEntityResolver* sipQXmlSimpleReader::entityResolver() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_entityResolver);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_entityResolver);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::entityResolver();

    extern  ::QXmlEntityResolver* sipVH_QtXml_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_12(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setDTDHandler( ::QXmlDTDHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_setDTDHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_setDTDHandler);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setDTDHandler(a0);
        return;
    }

    extern void sipVH_QtXml_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlDTDHandler*);

    sipVH_QtXml_13(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlDTDHandler* sipQXmlSimpleReader::DTDHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DTDHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_DTDHandler);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::DTDHandler();

    extern  ::QXmlDTDHandler* sipVH_QtXml_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_14(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setContentHandler( ::QXmlContentHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_setContentHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_setContentHandler);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setContentHandler(a0);
        return;
    }

    extern void sipVH_QtXml_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlContentHandler*);

    sipVH_QtXml_15(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlContentHandler* sipQXmlSimpleReader::contentHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_contentHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_contentHandler);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::contentHandler();

    extern  ::QXmlContentHandler* sipVH_QtXml_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_16(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setErrorHandler( ::QXmlErrorHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_setErrorHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_setErrorHandler);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setErrorHandler(a0);
        return;
    }

    extern void sipVH_QtXml_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlErrorHandler*);

    sipVH_QtXml_17(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlErrorHandler* sipQXmlSimpleReader::errorHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_errorHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_errorHandler);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::errorHandler();

    extern  ::QXmlErrorHandler* sipVH_QtXml_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_18(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setLexicalHandler( ::QXmlLexicalHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_setLexicalHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_setLexicalHandler);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setLexicalHandler(a0);
        return;
    }

    extern void sipVH_QtXml_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlLexicalHandler*);

    sipVH_QtXml_19(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlLexicalHandler* sipQXmlSimpleReader::lexicalHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_lexicalHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_lexicalHandler);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::lexicalHandler();

    extern  ::QXmlLexicalHandler* sipVH_QtXml_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_20(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setDeclHandler( ::QXmlDeclHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_setDeclHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_setDeclHandler);
#endif

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setDeclHandler(a0);
        return;
    }

    extern void sipVH_QtXml_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlDeclHandler*);

    sipVH_QtXml_21(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QXmlDeclHandler* sipQXmlSimpleReader::declHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_declHandler);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_declHandler);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::declHandler();

    extern  ::QXmlDeclHandler* sipVH_QtXml_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_22(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlSimpleReader::parse(const  ::QXmlInputSource*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_parse);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_parse);
#endif

    if (!sipMeth)
        return  ::QXmlSimpleReader::parse(a0);

    extern bool sipVH_QtXml_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlInputSource*);

    return sipVH_QtXml_24(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QXmlSimpleReader_feature, "feature(self, str) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_QXmlSimpleReader_feature(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_feature(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QXmlSimpleReader *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::feature(*a0,&a1) : sipCpp->feature(*a0,&a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_feature, doc_QXmlSimpleReader_feature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setFeature, "setFeature(self, str, bool)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setFeature(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setFeature(*a0,a1) : sipCpp->setFeature(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setFeature, doc_QXmlSimpleReader_setFeature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_hasFeature, "hasFeature(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::hasFeature(*a0) : sipCpp->hasFeature(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_hasFeature, doc_QXmlSimpleReader_hasFeature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_property, "property(self, str) -> Tuple[sip.voidptr, bool]");

extern "C" {static PyObject *meth_QXmlSimpleReader_property(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_property(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QXmlSimpleReader *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            void*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::property(*a0,&a1) : sipCpp->property(*a0,&a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(Vb)",sipRes,a1);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_property, doc_QXmlSimpleReader_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setProperty, "setProperty(self, str, sip.voidptr)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        void* a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setProperty(*a0,a1) : sipCpp->setProperty(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setProperty, doc_QXmlSimpleReader_setProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_hasProperty, "hasProperty(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::hasProperty(*a0) : sipCpp->hasProperty(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_hasProperty, doc_QXmlSimpleReader_hasProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setEntityResolver, "setEntityResolver(self, QXmlEntityResolver)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setEntityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setEntityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlEntityResolver* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlEntityResolver, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setEntityResolver(a0) : sipCpp->setEntityResolver(a0));

            sipKeepReference(sipSelf, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setEntityResolver, doc_QXmlSimpleReader_setEntityResolver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_entityResolver, "entityResolver(self) -> QXmlEntityResolver");

extern "C" {static PyObject *meth_QXmlSimpleReader_entityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_entityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlEntityResolver*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::entityResolver() : sipCpp->entityResolver());

            return sipConvertFromType(sipRes,sipType_QXmlEntityResolver,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_entityResolver, doc_QXmlSimpleReader_entityResolver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setDTDHandler, "setDTDHandler(self, QXmlDTDHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setDTDHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setDTDHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDTDHandler* a0;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QXmlDTDHandler, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setDTDHandler(a0) : sipCpp->setDTDHandler(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setDTDHandler, doc_QXmlSimpleReader_setDTDHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_DTDHandler, "DTDHandler(self) -> QXmlDTDHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_DTDHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_DTDHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlDTDHandler*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::DTDHandler() : sipCpp->DTDHandler());

            return sipConvertFromType(sipRes,sipType_QXmlDTDHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_DTDHandler, doc_QXmlSimpleReader_DTDHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setContentHandler, "setContentHandler(self, QXmlContentHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setContentHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setContentHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlContentHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlContentHandler, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setContentHandler(a0) : sipCpp->setContentHandler(a0));

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setContentHandler, doc_QXmlSimpleReader_setContentHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_contentHandler, "contentHandler(self) -> QXmlContentHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_contentHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_contentHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlContentHandler*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::contentHandler() : sipCpp->contentHandler());

            return sipConvertFromType(sipRes,sipType_QXmlContentHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_contentHandler, doc_QXmlSimpleReader_contentHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setErrorHandler, "setErrorHandler(self, QXmlErrorHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setErrorHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setErrorHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlErrorHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlErrorHandler, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setErrorHandler(a0) : sipCpp->setErrorHandler(a0));

            sipKeepReference(sipSelf, -9, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setErrorHandler, doc_QXmlSimpleReader_setErrorHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_errorHandler, "errorHandler(self) -> QXmlErrorHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_errorHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_errorHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlErrorHandler*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::errorHandler() : sipCpp->errorHandler());

            return sipConvertFromType(sipRes,sipType_QXmlErrorHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_errorHandler, doc_QXmlSimpleReader_errorHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setLexicalHandler, "setLexicalHandler(self, QXmlLexicalHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setLexicalHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setLexicalHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlLexicalHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlLexicalHandler, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setLexicalHandler(a0) : sipCpp->setLexicalHandler(a0));

            sipKeepReference(sipSelf, -10, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setLexicalHandler, doc_QXmlSimpleReader_setLexicalHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_lexicalHandler, "lexicalHandler(self) -> QXmlLexicalHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_lexicalHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_lexicalHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlLexicalHandler*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::lexicalHandler() : sipCpp->lexicalHandler());

            return sipConvertFromType(sipRes,sipType_QXmlLexicalHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_lexicalHandler, doc_QXmlSimpleReader_lexicalHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setDeclHandler, "setDeclHandler(self, QXmlDeclHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setDeclHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setDeclHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDeclHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlDeclHandler, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setDeclHandler(a0) : sipCpp->setDeclHandler(a0));

            sipKeepReference(sipSelf, -11, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setDeclHandler, doc_QXmlSimpleReader_setDeclHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_declHandler, "declHandler(self) -> QXmlDeclHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_declHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_declHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlDeclHandler*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::declHandler() : sipCpp->declHandler());

            return sipConvertFromType(sipRes,sipType_QXmlDeclHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_declHandler, doc_QXmlSimpleReader_declHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_parse, "parse(self, QXmlInputSource) -> bool\n"
"parse(self, QXmlInputSource, bool) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_parse(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlInputSource* a0;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QXmlInputSource, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parse(a0) : sipCpp->parse(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QXmlInputSource* a0;
        bool a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QXmlInputSource, &a0, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parse(a0,a1) : sipCpp->parse(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_parse, doc_QXmlSimpleReader_parse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_parseContinue, "parseContinue(self) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_parseContinue(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_parseContinue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parseContinue() : sipCpp->parseContinue());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_parseContinue, doc_QXmlSimpleReader_parseContinue);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QXmlSimpleReader(void *, const sipTypeDef *);}
static void *cast_QXmlSimpleReader(void *sipCppV, const sipTypeDef *targetType)
{
     ::QXmlSimpleReader *sipCpp = reinterpret_cast< ::QXmlSimpleReader *>(sipCppV);

    if (targetType == sipType_QXmlReader)
        return static_cast< ::QXmlReader *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlSimpleReader(void *, int);}
static void release_QXmlSimpleReader(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlSimpleReader *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlSimpleReader *>(sipCppV);
}


extern "C" {static void *array_QXmlSimpleReader(Py_ssize_t);}
static void *array_QXmlSimpleReader(Py_ssize_t sipNrElem)
{
    return new  ::QXmlSimpleReader[sipNrElem];
}


extern "C" {static void dealloc_QXmlSimpleReader(sipSimpleWrapper *);}
static void dealloc_QXmlSimpleReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlSimpleReader *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlSimpleReader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlSimpleReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlSimpleReader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlSimpleReader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQXmlSimpleReader();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QXmlSimpleReader[] = {{32, 255, 1}};


static PyMethodDef methods_QXmlSimpleReader[] = {
    {sipName_DTDHandler, meth_QXmlSimpleReader_DTDHandler, METH_VARARGS, doc_QXmlSimpleReader_DTDHandler},
    {sipName_contentHandler, meth_QXmlSimpleReader_contentHandler, METH_VARARGS, doc_QXmlSimpleReader_contentHandler},
    {sipName_declHandler, meth_QXmlSimpleReader_declHandler, METH_VARARGS, doc_QXmlSimpleReader_declHandler},
    {sipName_entityResolver, meth_QXmlSimpleReader_entityResolver, METH_VARARGS, doc_QXmlSimpleReader_entityResolver},
    {sipName_errorHandler, meth_QXmlSimpleReader_errorHandler, METH_VARARGS, doc_QXmlSimpleReader_errorHandler},
    {sipName_feature, SIP_MLMETH_CAST(meth_QXmlSimpleReader_feature), METH_VARARGS|METH_KEYWORDS, doc_QXmlSimpleReader_feature},
    {sipName_hasFeature, meth_QXmlSimpleReader_hasFeature, METH_VARARGS, doc_QXmlSimpleReader_hasFeature},
    {sipName_hasProperty, meth_QXmlSimpleReader_hasProperty, METH_VARARGS, doc_QXmlSimpleReader_hasProperty},
    {sipName_lexicalHandler, meth_QXmlSimpleReader_lexicalHandler, METH_VARARGS, doc_QXmlSimpleReader_lexicalHandler},
    {sipName_parse, meth_QXmlSimpleReader_parse, METH_VARARGS, doc_QXmlSimpleReader_parse},
    {sipName_parseContinue, meth_QXmlSimpleReader_parseContinue, METH_VARARGS, doc_QXmlSimpleReader_parseContinue},
    {sipName_property, SIP_MLMETH_CAST(meth_QXmlSimpleReader_property), METH_VARARGS|METH_KEYWORDS, doc_QXmlSimpleReader_property},
    {sipName_setContentHandler, meth_QXmlSimpleReader_setContentHandler, METH_VARARGS, doc_QXmlSimpleReader_setContentHandler},
    {sipName_setDTDHandler, meth_QXmlSimpleReader_setDTDHandler, METH_VARARGS, doc_QXmlSimpleReader_setDTDHandler},
    {sipName_setDeclHandler, meth_QXmlSimpleReader_setDeclHandler, METH_VARARGS, doc_QXmlSimpleReader_setDeclHandler},
    {sipName_setEntityResolver, meth_QXmlSimpleReader_setEntityResolver, METH_VARARGS, doc_QXmlSimpleReader_setEntityResolver},
    {sipName_setErrorHandler, meth_QXmlSimpleReader_setErrorHandler, METH_VARARGS, doc_QXmlSimpleReader_setErrorHandler},
    {sipName_setFeature, meth_QXmlSimpleReader_setFeature, METH_VARARGS, doc_QXmlSimpleReader_setFeature},
    {sipName_setLexicalHandler, meth_QXmlSimpleReader_setLexicalHandler, METH_VARARGS, doc_QXmlSimpleReader_setLexicalHandler},
    {sipName_setProperty, meth_QXmlSimpleReader_setProperty, METH_VARARGS, doc_QXmlSimpleReader_setProperty}
};

PyDoc_STRVAR(doc_QXmlSimpleReader, "\1QXmlSimpleReader()");


static pyqt5ClassPluginDef plugin_QXmlSimpleReader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QXmlSimpleReader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlSimpleReader,
        SIP_NULLPTR,
        &plugin_QXmlSimpleReader
    },
    {
        sipNameNr_QXmlSimpleReader,
        {0, 0, 1},
        20, methods_QXmlSimpleReader,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlSimpleReader,
    -1,
    -1,
    supers_QXmlSimpleReader,
    SIP_NULLPTR,
    init_type_QXmlSimpleReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QXmlSimpleReader,
    SIP_NULLPTR,
    array_QXmlSimpleReader,
    SIP_NULLPTR,
    release_QXmlSimpleReader,
    cast_QXmlSimpleReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
