/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 154 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNodeList.cpp"

#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNodeList.cpp"


PyDoc_STRVAR(doc_QDomNodeList_item, "item(self, int) -> QDomNode");

extern "C" {static PyObject *meth_QDomNodeList_item(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDomNodeList, &sipCpp, &a0))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->item(a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_item, doc_QDomNodeList_item);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNodeList_at, "at(self, int) -> QDomNode");

extern "C" {static PyObject *meth_QDomNodeList_at(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDomNodeList, &sipCpp, &a0))
        {
             ::QDomNode*sipRes;

            sipRes = new  ::QDomNode(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_at, doc_QDomNodeList_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNodeList_length, "length(self) -> int");

extern "C" {static PyObject *meth_QDomNodeList_length(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNodeList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_length, doc_QDomNodeList_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNodeList_count, "count(self) -> int");

extern "C" {static PyObject *meth_QDomNodeList_count(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNodeList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_count, doc_QDomNodeList_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNodeList_size, "size(self) -> int");

extern "C" {static PyObject *meth_QDomNodeList_size(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNodeList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_size, doc_QDomNodeList_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomNodeList_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QDomNodeList_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QDomNodeList_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNodeList, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomNodeList, sipName_isEmpty, doc_QDomNodeList_isEmpty);

    return SIP_NULLPTR;
}


extern "C" {static Py_ssize_t slot_QDomNodeList___len__(PyObject *);}
static Py_ssize_t slot_QDomNodeList___len__(PyObject *sipSelf)
{
     ::QDomNodeList *sipCpp = reinterpret_cast< ::QDomNodeList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNodeList));

    if (!sipCpp)
        return 0;


    {
        {
            Py_ssize_t sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (Py_ssize_t)sipCpp->count();
#line 215 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomNodeList.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDomNodeList___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDomNodeList___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDomNodeList *sipCpp = reinterpret_cast< ::QDomNodeList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNodeList));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNodeList, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDomNodeList::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtXml, ne_slot, sipType_QDomNodeList, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDomNodeList___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDomNodeList___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDomNodeList *sipCpp = reinterpret_cast< ::QDomNodeList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNodeList));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomNodeList* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNodeList, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDomNodeList::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtXml, eq_slot, sipType_QDomNodeList, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomNodeList(void *, int);}
static void release_QDomNodeList(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDomNodeList *>(sipCppV);
}


extern "C" {static void *array_QDomNodeList(Py_ssize_t);}
static void *array_QDomNodeList(Py_ssize_t sipNrElem)
{
    return new  ::QDomNodeList[sipNrElem];
}


extern "C" {static void assign_QDomNodeList(void *, Py_ssize_t, void *);}
static void assign_QDomNodeList(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDomNodeList *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDomNodeList *>(sipSrc);
}


extern "C" {static void *copy_QDomNodeList(const void *, Py_ssize_t);}
static void *copy_QDomNodeList(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDomNodeList(reinterpret_cast<const  ::QDomNodeList *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomNodeList(sipSimpleWrapper *);}
static void dealloc_QDomNodeList(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDomNodeList(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDomNodeList(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomNodeList(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDomNodeList *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDomNodeList();

            return sipCpp;
        }
    }

    {
        const  ::QDomNodeList* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDomNodeList, &a0))
        {
            sipCpp = new  ::QDomNodeList(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDomNodeList[] = {
    {(void *)slot_QDomNodeList___len__, len_slot},
    {(void *)slot_QDomNodeList___ne__, ne_slot},
    {(void *)slot_QDomNodeList___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDomNodeList[] = {
    {sipName_at, meth_QDomNodeList_at, METH_VARARGS, doc_QDomNodeList_at},
    {sipName_count, meth_QDomNodeList_count, METH_VARARGS, doc_QDomNodeList_count},
    {sipName_isEmpty, meth_QDomNodeList_isEmpty, METH_VARARGS, doc_QDomNodeList_isEmpty},
    {sipName_item, meth_QDomNodeList_item, METH_VARARGS, doc_QDomNodeList_item},
    {sipName_length, meth_QDomNodeList_length, METH_VARARGS, doc_QDomNodeList_length},
    {sipName_size, meth_QDomNodeList_size, METH_VARARGS, doc_QDomNodeList_size}
};

PyDoc_STRVAR(doc_QDomNodeList, "\1QDomNodeList()\n"
"QDomNodeList(QDomNodeList)");


static pyqt5ClassPluginDef plugin_QDomNodeList = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QDomNodeList = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDomNodeList,
        SIP_NULLPTR,
        &plugin_QDomNodeList
    },
    {
        sipNameNr_QDomNodeList,
        {0, 0, 1},
        6, methods_QDomNodeList,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDomNodeList,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDomNodeList,
    init_type_QDomNodeList,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDomNodeList,
    assign_QDomNodeList,
    array_QDomNodeList,
    copy_QDomNodeList,
    release_QDomNodeList,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
