/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 282 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDeclHandler.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlDeclHandler.cpp"


class sipQXmlDeclHandler : public  ::QXmlDeclHandler
{
public:
    sipQXmlDeclHandler();
    sipQXmlDeclHandler(const  ::QXmlDeclHandler&);
    virtual ~sipQXmlDeclHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString errorString() const SIP_OVERRIDE;
    bool externalEntityDecl(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool internalEntityDecl(const  ::QString&,const  ::QString&) SIP_OVERRIDE;
    bool attributeDecl(const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlDeclHandler(const sipQXmlDeclHandler &);
    sipQXmlDeclHandler &operator = (const sipQXmlDeclHandler &);

    char sipPyMethods[4];
};

sipQXmlDeclHandler::sipQXmlDeclHandler():  ::QXmlDeclHandler(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlDeclHandler::sipQXmlDeclHandler(const  ::QXmlDeclHandler& a0):  ::QXmlDeclHandler(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlDeclHandler::~sipQXmlDeclHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QString sipQXmlDeclHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QXmlDeclHandler, sipName_errorString);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, sipName_QXmlDeclHandler, sipName_errorString);
#endif

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtXml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_3(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlDeclHandler::externalEntityDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, sipName_QXmlDeclHandler, sipName_externalEntityDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, sipName_QXmlDeclHandler, sipName_externalEntityDecl);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQXmlDeclHandler::internalEntityDecl(const  ::QString& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, sipName_QXmlDeclHandler, sipName_internalEntityDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, sipName_QXmlDeclHandler, sipName_internalEntityDecl);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&);

    return sipVH_QtXml_29(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlDeclHandler::attributeDecl(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3,const  ::QString& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, sipName_QXmlDeclHandler, sipName_attributeDecl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, sipName_QXmlDeclHandler, sipName_attributeDecl);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_35(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QXmlDeclHandler_attributeDecl, "attributeDecl(self, str, str, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDeclHandler_attributeDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDeclHandler_attributeDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString* a4;
        int a4State = 0;
         ::QXmlDeclHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1", &sipSelf, sipType_QXmlDeclHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlDeclHandler, sipName_attributeDecl);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->attributeDecl(*a0,*a1,*a2,*a3,*a4);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDeclHandler, sipName_attributeDecl, doc_QXmlDeclHandler_attributeDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDeclHandler_internalEntityDecl, "internalEntityDecl(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDeclHandler_internalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDeclHandler_internalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlDeclHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDeclHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlDeclHandler, sipName_internalEntityDecl);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->internalEntityDecl(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDeclHandler, sipName_internalEntityDecl, doc_QXmlDeclHandler_internalEntityDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDeclHandler_externalEntityDecl, "externalEntityDecl(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlDeclHandler_externalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDeclHandler_externalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlDeclHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDeclHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlDeclHandler, sipName_externalEntityDecl);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->externalEntityDecl(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDeclHandler, sipName_externalEntityDecl, doc_QXmlDeclHandler_externalEntityDecl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlDeclHandler_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QXmlDeclHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlDeclHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QXmlDeclHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDeclHandler, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlDeclHandler, sipName_errorString);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlDeclHandler, sipName_errorString, doc_QXmlDeclHandler_errorString);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlDeclHandler(void *, int);}
static void release_QXmlDeclHandler(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlDeclHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlDeclHandler *>(sipCppV);
}


extern "C" {static void dealloc_QXmlDeclHandler(sipSimpleWrapper *);}
static void dealloc_QXmlDeclHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlDeclHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlDeclHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlDeclHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlDeclHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlDeclHandler *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQXmlDeclHandler();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QXmlDeclHandler* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlDeclHandler, &a0))
        {
            sipCpp = new sipQXmlDeclHandler(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QXmlDeclHandler[] = {
    {sipName_attributeDecl, meth_QXmlDeclHandler_attributeDecl, METH_VARARGS, doc_QXmlDeclHandler_attributeDecl},
    {sipName_errorString, meth_QXmlDeclHandler_errorString, METH_VARARGS, doc_QXmlDeclHandler_errorString},
    {sipName_externalEntityDecl, meth_QXmlDeclHandler_externalEntityDecl, METH_VARARGS, doc_QXmlDeclHandler_externalEntityDecl},
    {sipName_internalEntityDecl, meth_QXmlDeclHandler_internalEntityDecl, METH_VARARGS, doc_QXmlDeclHandler_internalEntityDecl}
};

PyDoc_STRVAR(doc_QXmlDeclHandler, "\1QXmlDeclHandler()\n"
"QXmlDeclHandler(QXmlDeclHandler)");


static pyqt5ClassPluginDef plugin_QXmlDeclHandler = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QXmlDeclHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlDeclHandler,
        SIP_NULLPTR,
        &plugin_QXmlDeclHandler
    },
    {
        sipNameNr_QXmlDeclHandler,
        {0, 0, 1},
        4, methods_QXmlDeclHandler,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlDeclHandler,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QXmlDeclHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QXmlDeclHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QXmlDeclHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
