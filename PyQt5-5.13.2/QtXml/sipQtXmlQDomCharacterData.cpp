/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 272 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"

#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 309 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 361 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 426 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 385 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 399 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 348 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 414 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 373 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 292 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"
#line 154 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQDomCharacterData.cpp"


PyDoc_STRVAR(doc_QDomCharacterData_substringData, "substringData(self, int, int) -> str");

extern "C" {static PyObject *meth_QDomCharacterData_substringData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_substringData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;
        unsigned long a1;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bmm", &sipSelf, sipType_QDomCharacterData, &sipCpp, &a0, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->substringData(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_substringData, doc_QDomCharacterData_substringData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_appendData, "appendData(self, str)");

extern "C" {static PyObject *meth_QDomCharacterData_appendData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_appendData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomCharacterData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->appendData(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_appendData, doc_QDomCharacterData_appendData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_insertData, "insertData(self, int, str)");

extern "C" {static PyObject *meth_QDomCharacterData_insertData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_insertData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BmJ1", &sipSelf, sipType_QDomCharacterData, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->insertData(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_insertData, doc_QDomCharacterData_insertData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_deleteData, "deleteData(self, int, int)");

extern "C" {static PyObject *meth_QDomCharacterData_deleteData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_deleteData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;
        unsigned long a1;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bmm", &sipSelf, sipType_QDomCharacterData, &sipCpp, &a0, &a1))
        {
            sipCpp->deleteData(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_deleteData, doc_QDomCharacterData_deleteData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_replaceData, "replaceData(self, int, int, str)");

extern "C" {static PyObject *meth_QDomCharacterData_replaceData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_replaceData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;
        unsigned long a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BmmJ1", &sipSelf, sipType_QDomCharacterData, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->replaceData(a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_replaceData, doc_QDomCharacterData_replaceData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_length, "length(self) -> int");

extern "C" {static PyObject *meth_QDomCharacterData_length(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomCharacterData, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_length, doc_QDomCharacterData_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_data, "data(self) -> str");

extern "C" {static PyObject *meth_QDomCharacterData_data(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomCharacterData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->data());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_data, doc_QDomCharacterData_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_setData, "setData(self, str)");

extern "C" {static PyObject *meth_QDomCharacterData_setData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomCharacterData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setData(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_setData, doc_QDomCharacterData_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDomCharacterData_nodeType, "nodeType(self) -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomCharacterData_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomCharacterData, &sipCpp))
        {
             ::QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDomNode_NodeType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDomCharacterData, sipName_nodeType, doc_QDomCharacterData_nodeType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDomCharacterData(void *, const sipTypeDef *);}
static void *cast_QDomCharacterData(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDomCharacterData *sipCpp = reinterpret_cast< ::QDomCharacterData *>(sipCppV);

    if (targetType == sipType_QDomNode)
        return static_cast< ::QDomNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomCharacterData(void *, int);}
static void release_QDomCharacterData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDomCharacterData *>(sipCppV);
}


extern "C" {static void *array_QDomCharacterData(Py_ssize_t);}
static void *array_QDomCharacterData(Py_ssize_t sipNrElem)
{
    return new  ::QDomCharacterData[sipNrElem];
}


extern "C" {static void assign_QDomCharacterData(void *, Py_ssize_t, void *);}
static void assign_QDomCharacterData(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDomCharacterData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDomCharacterData *>(sipSrc);
}


extern "C" {static void *copy_QDomCharacterData(const void *, Py_ssize_t);}
static void *copy_QDomCharacterData(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDomCharacterData(reinterpret_cast<const  ::QDomCharacterData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomCharacterData(sipSimpleWrapper *);}
static void dealloc_QDomCharacterData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDomCharacterData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDomCharacterData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomCharacterData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDomCharacterData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDomCharacterData();

            return sipCpp;
        }
    }

    {
        const  ::QDomCharacterData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDomCharacterData, &a0))
        {
            sipCpp = new  ::QDomCharacterData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomCharacterData[] = {{13, 255, 1}};


static PyMethodDef methods_QDomCharacterData[] = {
    {sipName_appendData, meth_QDomCharacterData_appendData, METH_VARARGS, doc_QDomCharacterData_appendData},
    {sipName_data, meth_QDomCharacterData_data, METH_VARARGS, doc_QDomCharacterData_data},
    {sipName_deleteData, meth_QDomCharacterData_deleteData, METH_VARARGS, doc_QDomCharacterData_deleteData},
    {sipName_insertData, meth_QDomCharacterData_insertData, METH_VARARGS, doc_QDomCharacterData_insertData},
    {sipName_length, meth_QDomCharacterData_length, METH_VARARGS, doc_QDomCharacterData_length},
    {sipName_nodeType, meth_QDomCharacterData_nodeType, METH_VARARGS, doc_QDomCharacterData_nodeType},
    {sipName_replaceData, meth_QDomCharacterData_replaceData, METH_VARARGS, doc_QDomCharacterData_replaceData},
    {sipName_setData, meth_QDomCharacterData_setData, METH_VARARGS, doc_QDomCharacterData_setData},
    {sipName_substringData, meth_QDomCharacterData_substringData, METH_VARARGS, doc_QDomCharacterData_substringData}
};

PyDoc_STRVAR(doc_QDomCharacterData, "\1QDomCharacterData()\n"
"QDomCharacterData(QDomCharacterData)");


static pyqt5ClassPluginDef plugin_QDomCharacterData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QDomCharacterData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDomCharacterData,
        SIP_NULLPTR,
        &plugin_QDomCharacterData
    },
    {
        sipNameNr_QDomCharacterData,
        {0, 0, 1},
        9, methods_QDomCharacterData,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDomCharacterData,
    -1,
    -1,
    supers_QDomCharacterData,
    SIP_NULLPTR,
    init_type_QDomCharacterData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDomCharacterData,
    assign_QDomCharacterData,
    array_QDomCharacterData,
    copy_QDomCharacterData,
    release_QDomCharacterData,
    cast_QDomCharacterData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
