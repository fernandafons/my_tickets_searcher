/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 264 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlLexicalHandler.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtXml/sipQtXmlQXmlLexicalHandler.cpp"


class sipQXmlLexicalHandler : public  ::QXmlLexicalHandler
{
public:
    sipQXmlLexicalHandler();
    sipQXmlLexicalHandler(const  ::QXmlLexicalHandler&);
    virtual ~sipQXmlLexicalHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString errorString() const SIP_OVERRIDE;
    bool comment(const  ::QString&) SIP_OVERRIDE;
    bool endCDATA() SIP_OVERRIDE;
    bool startCDATA() SIP_OVERRIDE;
    bool endEntity(const  ::QString&) SIP_OVERRIDE;
    bool startEntity(const  ::QString&) SIP_OVERRIDE;
    bool endDTD() SIP_OVERRIDE;
    bool startDTD(const  ::QString&,const  ::QString&,const  ::QString&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlLexicalHandler(const sipQXmlLexicalHandler &);
    sipQXmlLexicalHandler &operator = (const sipQXmlLexicalHandler &);

    char sipPyMethods[8];
};

sipQXmlLexicalHandler::sipQXmlLexicalHandler():  ::QXmlLexicalHandler(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlLexicalHandler::sipQXmlLexicalHandler(const  ::QXmlLexicalHandler& a0):  ::QXmlLexicalHandler(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlLexicalHandler::~sipQXmlLexicalHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QString sipQXmlLexicalHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QXmlLexicalHandler, sipName_errorString);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, sipName_QXmlLexicalHandler, sipName_errorString);
#endif

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtXml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_3(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlLexicalHandler::comment(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, sipName_QXmlLexicalHandler, sipName_comment);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, sipName_QXmlLexicalHandler, sipName_comment);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlLexicalHandler::endCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, sipName_QXmlLexicalHandler, sipName_endCDATA);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, sipName_QXmlLexicalHandler, sipName_endCDATA);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlLexicalHandler::startCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, sipName_QXmlLexicalHandler, sipName_startCDATA);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, sipName_QXmlLexicalHandler, sipName_startCDATA);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlLexicalHandler::endEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, sipName_QXmlLexicalHandler, sipName_endEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, sipName_QXmlLexicalHandler, sipName_endEntity);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlLexicalHandler::startEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, sipName_QXmlLexicalHandler, sipName_startEntity);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, sipName_QXmlLexicalHandler, sipName_startEntity);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQXmlLexicalHandler::endDTD()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, sipName_QXmlLexicalHandler, sipName_endDTD);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, sipName_QXmlLexicalHandler, sipName_endDTD);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQXmlLexicalHandler::startDTD(const  ::QString& a0,const  ::QString& a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, sipName_QXmlLexicalHandler, sipName_startDTD);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, sipName_QXmlLexicalHandler, sipName_startDTD);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtXml_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QString&,const  ::QString&);

    return sipVH_QtXml_31(sipGILState, sipImportedVirtErrorHandlers_QtXml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_startDTD, "startDTD(self, str, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_startDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startDTD);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->startDTD(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startDTD, doc_QXmlLexicalHandler_startDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_endDTD, "endDTD(self) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_endDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endDTD);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->endDTD();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endDTD, doc_QXmlLexicalHandler_endDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_startEntity, "startEntity(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_startEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startEntity);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->startEntity(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startEntity, doc_QXmlLexicalHandler_startEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_endEntity, "endEntity(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_endEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endEntity);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->endEntity(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endEntity, doc_QXmlLexicalHandler_endEntity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_startCDATA, "startCDATA(self) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_startCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startCDATA);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->startCDATA();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startCDATA, doc_QXmlLexicalHandler_startCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_endCDATA, "endCDATA(self) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_endCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endCDATA);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->endCDATA();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endCDATA, doc_QXmlLexicalHandler_endCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_comment, "comment(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlLexicalHandler_comment(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_comment);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->comment(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_comment, doc_QXmlLexicalHandler_comment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlLexicalHandler_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QXmlLexicalHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_errorString);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_errorString, doc_QXmlLexicalHandler_errorString);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlLexicalHandler(void *, int);}
static void release_QXmlLexicalHandler(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlLexicalHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlLexicalHandler *>(sipCppV);
}


extern "C" {static void dealloc_QXmlLexicalHandler(sipSimpleWrapper *);}
static void dealloc_QXmlLexicalHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlLexicalHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlLexicalHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlLexicalHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlLexicalHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlLexicalHandler *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQXmlLexicalHandler();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QXmlLexicalHandler* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlLexicalHandler, &a0))
        {
            sipCpp = new sipQXmlLexicalHandler(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QXmlLexicalHandler[] = {
    {sipName_comment, meth_QXmlLexicalHandler_comment, METH_VARARGS, doc_QXmlLexicalHandler_comment},
    {sipName_endCDATA, meth_QXmlLexicalHandler_endCDATA, METH_VARARGS, doc_QXmlLexicalHandler_endCDATA},
    {sipName_endDTD, meth_QXmlLexicalHandler_endDTD, METH_VARARGS, doc_QXmlLexicalHandler_endDTD},
    {sipName_endEntity, meth_QXmlLexicalHandler_endEntity, METH_VARARGS, doc_QXmlLexicalHandler_endEntity},
    {sipName_errorString, meth_QXmlLexicalHandler_errorString, METH_VARARGS, doc_QXmlLexicalHandler_errorString},
    {sipName_startCDATA, meth_QXmlLexicalHandler_startCDATA, METH_VARARGS, doc_QXmlLexicalHandler_startCDATA},
    {sipName_startDTD, meth_QXmlLexicalHandler_startDTD, METH_VARARGS, doc_QXmlLexicalHandler_startDTD},
    {sipName_startEntity, meth_QXmlLexicalHandler_startEntity, METH_VARARGS, doc_QXmlLexicalHandler_startEntity}
};

PyDoc_STRVAR(doc_QXmlLexicalHandler, "\1QXmlLexicalHandler()\n"
"QXmlLexicalHandler(QXmlLexicalHandler)");


static pyqt5ClassPluginDef plugin_QXmlLexicalHandler = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtXml_QXmlLexicalHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlLexicalHandler,
        SIP_NULLPTR,
        &plugin_QXmlLexicalHandler
    },
    {
        sipNameNr_QXmlLexicalHandler,
        {0, 0, 1},
        8, methods_QXmlLexicalHandler,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlLexicalHandler,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QXmlLexicalHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QXmlLexicalHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QXmlLexicalHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
