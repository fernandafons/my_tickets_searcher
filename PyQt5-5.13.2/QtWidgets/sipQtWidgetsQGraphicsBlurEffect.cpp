/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"


class sipQGraphicsBlurEffect : public  ::QGraphicsBlurEffect
{
public:
    sipQGraphicsBlurEffect( ::QObject*);
    virtual ~sipQGraphicsBlurEffect();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QRectF boundingRectFor(const  ::QRectF&) const SIP_OVERRIDE;
    void draw( ::QPainter*) SIP_OVERRIDE;
    void sourceChanged( ::QGraphicsEffect::ChangeFlags) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsBlurEffect(const sipQGraphicsBlurEffect &);
    sipQGraphicsBlurEffect &operator = (const sipQGraphicsBlurEffect &);

    char sipPyMethods[10];
};

sipQGraphicsBlurEffect::sipQGraphicsBlurEffect( ::QObject*a0):  ::QGraphicsBlurEffect(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsBlurEffect::~sipQGraphicsBlurEffect()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGraphicsBlurEffect::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsBlurEffect);

    return  ::QGraphicsBlurEffect::metaObject();
}

int sipQGraphicsBlurEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGraphicsBlurEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGraphicsBlurEffect,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQGraphicsBlurEffect::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGraphicsBlurEffect, _clname, &sipCpp) ? sipCpp :  ::QGraphicsBlurEffect::qt_metacast(_clname));
}

void sipQGraphicsBlurEffect::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsBlurEffect::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QGraphicsBlurEffect::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsBlurEffect::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QGraphicsBlurEffect::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQGraphicsBlurEffect::boundingRectFor(const  ::QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_boundingRectFor);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_boundingRectFor);
#endif

    if (!sipMeth)
        return  ::QGraphicsBlurEffect::boundingRectFor(a0);

    extern  ::QRectF sipVH_QtWidgets_142(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&);

    return sipVH_QtWidgets_142(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::draw( ::QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_draw);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_draw);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::draw(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::sourceChanged( ::QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_sourceChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_sourceChanged);
#endif

    if (!sipMeth)
    {
         ::QGraphicsBlurEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_143(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsEffect::ChangeFlags);

    sipVH_QtWidgets_143(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_boundingRectFor, "boundingRectFor(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QGraphicsBlurEffect::boundingRectFor(*a0) : sipCpp->boundingRectFor(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_boundingRectFor, doc_QGraphicsBlurEffect_boundingRectFor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurRadius, "blurRadius(self) -> float");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->blurRadius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurRadius, doc_QGraphicsBlurEffect_blurRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurHints, "blurHints(self) -> QGraphicsBlurEffect.BlurHints");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
             ::QGraphicsBlurEffect::BlurHints*sipRes;

            sipRes = new  ::QGraphicsBlurEffect::BlurHints(sipCpp->blurHints());

            return sipConvertFromNewType(sipRes,sipType_QGraphicsBlurEffect_BlurHints,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurHints, doc_QGraphicsBlurEffect_blurHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurRadius, "setBlurRadius(self, float)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, &a0))
        {
            sipCpp->setBlurRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurRadius, doc_QGraphicsBlurEffect_setBlurRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurHints, "setBlurHints(self, Union[QGraphicsBlurEffect.BlurHints, QGraphicsBlurEffect.BlurHint])");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGraphicsBlurEffect::BlurHints* a0;
        int a0State = 0;
         ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QGraphicsBlurEffect_BlurHints, &a0, &a0State))
        {
            sipCpp->setBlurHints(*a0);
            sipReleaseType(a0,sipType_QGraphicsBlurEffect_BlurHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurHints, doc_QGraphicsBlurEffect_setBlurHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_draw, "draw(self, QPainter)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
         ::QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QPainter, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGraphicsBlurEffect::draw(a0) : sipCpp->draw(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_draw, doc_QGraphicsBlurEffect_draw);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsBlurEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsBlurEffect(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGraphicsBlurEffect *sipCpp = reinterpret_cast< ::QGraphicsBlurEffect *>(sipCppV);

    if (targetType == sipType_QGraphicsEffect)
        return static_cast< ::QGraphicsEffect *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsBlurEffect(void *, int);}
static void release_QGraphicsBlurEffect(void *sipCppV, int)
{
     ::QGraphicsBlurEffect *sipCpp = reinterpret_cast< ::QGraphicsBlurEffect *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QGraphicsBlurEffect(Py_ssize_t);}
static void *array_QGraphicsBlurEffect(Py_ssize_t sipNrElem)
{
    return new  ::QGraphicsBlurEffect[sipNrElem];
}


extern "C" {static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGraphicsBlurEffect *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGraphicsBlurEffect(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGraphicsBlurEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsBlurEffect *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsBlurEffect(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsBlurEffect[] = {{117, 255, 1}};


static PyMethodDef methods_QGraphicsBlurEffect[] = {
    {sipName_blurHints, meth_QGraphicsBlurEffect_blurHints, METH_VARARGS, doc_QGraphicsBlurEffect_blurHints},
    {sipName_blurRadius, meth_QGraphicsBlurEffect_blurRadius, METH_VARARGS, doc_QGraphicsBlurEffect_blurRadius},
    {sipName_boundingRectFor, meth_QGraphicsBlurEffect_boundingRectFor, METH_VARARGS, doc_QGraphicsBlurEffect_boundingRectFor},
    {sipName_draw, meth_QGraphicsBlurEffect_draw, METH_VARARGS, doc_QGraphicsBlurEffect_draw},
    {sipName_setBlurHints, meth_QGraphicsBlurEffect_setBlurHints, METH_VARARGS, doc_QGraphicsBlurEffect_setBlurHints},
    {sipName_setBlurRadius, meth_QGraphicsBlurEffect_setBlurRadius, METH_VARARGS, doc_QGraphicsBlurEffect_setBlurRadius}
};

static sipEnumMemberDef enummembers_QGraphicsBlurEffect[] = {
    {sipName_AnimationHint, static_cast<int>( ::QGraphicsBlurEffect::AnimationHint), 113},
    {sipName_PerformanceHint, static_cast<int>( ::QGraphicsBlurEffect::PerformanceHint), 113},
    {sipName_QualityHint, static_cast<int>( ::QGraphicsBlurEffect::QualityHint), 113},
};

PyDoc_STRVAR(doc_QGraphicsBlurEffect, "\1QGraphicsBlurEffect(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsBlurEffect[] = {
    {"blurHintsChanged(BlurHints)|(QGraphicsBlurEffect::BlurHints)", "\1blurHintsChanged(self, Union[QGraphicsBlurEffect.BlurHints, QGraphicsBlurEffect.BlurHint])", SIP_NULLPTR, SIP_NULLPTR},
    {"blurRadiusChanged(qreal)", "\1blurRadiusChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QGraphicsBlurEffect = {
    & ::QGraphicsBlurEffect::staticMetaObject,
    0,
    signals_QGraphicsBlurEffect,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QGraphicsBlurEffect = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsBlurEffect,
        SIP_NULLPTR,
        &plugin_QGraphicsBlurEffect
    },
    {
        sipNameNr_QGraphicsBlurEffect,
        {0, 0, 1},
        6, methods_QGraphicsBlurEffect,
        3, enummembers_QGraphicsBlurEffect,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGraphicsBlurEffect,
    -1,
    -1,
    supers_QGraphicsBlurEffect,
    SIP_NULLPTR,
    init_type_QGraphicsBlurEffect,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGraphicsBlurEffect,
    SIP_NULLPTR,
    array_QGraphicsBlurEffect,
    SIP_NULLPTR,
    release_QGraphicsBlurEffect,
    cast_QGraphicsBlurEffect,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
