/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qboxlayout.sip"
#include <qboxlayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"


class sipQBoxLayout : public  ::QBoxLayout
{
public:
    sipQBoxLayout( ::QBoxLayout::Direction, ::QWidget*);
    virtual ~sipQBoxLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QSizePolicy::ControlTypes controlTypes() const SIP_OVERRIDE;
     ::QSpacerItem* spacerItem() SIP_OVERRIDE;
     ::QLayout* layout() SIP_OVERRIDE;
     ::QWidget* widget() SIP_OVERRIDE;
    void invalidate() SIP_OVERRIDE;
    int minimumHeightForWidth(int) const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool isEmpty() const SIP_OVERRIDE;
     ::QRect geometry() const SIP_OVERRIDE;
    void setGeometry(const  ::QRect&) SIP_OVERRIDE;
     ::Qt::Orientations expandingDirections() const SIP_OVERRIDE;
     ::QSize maximumSize() const SIP_OVERRIDE;
     ::QSize minimumSize() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void addItem( ::QLayoutItem*) SIP_OVERRIDE;
     ::QLayoutItem* itemAt(int) const SIP_OVERRIDE;
     ::QLayoutItem* takeAt(int) SIP_OVERRIDE;
    int indexOf( ::QWidget*) const SIP_OVERRIDE;
    int count() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBoxLayout(const sipQBoxLayout &);
    sipQBoxLayout &operator = (const sipQBoxLayout &);

    char sipPyMethods[27];
};

sipQBoxLayout::sipQBoxLayout( ::QBoxLayout::Direction a0, ::QWidget*a1):  ::QBoxLayout(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBoxLayout::~sipQBoxLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBoxLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QBoxLayout);

    return  ::QBoxLayout::metaObject();
}

int sipQBoxLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBoxLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QBoxLayout,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQBoxLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QBoxLayout, _clname, &sipCpp) ? sipCpp :  ::QBoxLayout::qt_metacast(_clname));
}

void sipQBoxLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBoxLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQBoxLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSizePolicy::ControlTypes sipQBoxLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_controlTypes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_controlTypes);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::controlTypes();

    extern  ::QSizePolicy::ControlTypes sipVH_QtWidgets_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_81(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSpacerItem* sipQBoxLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_spacerItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_spacerItem);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::spacerItem();

    extern  ::QSpacerItem* sipVH_QtWidgets_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_80(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QLayout* sipQBoxLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_layout);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_layout);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::layout();

    extern  ::QLayout* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QWidget* sipQBoxLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_widget);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_widget);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::widget();

    extern  ::QWidget* sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_78(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQBoxLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_invalidate);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_invalidate);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::invalidate();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQBoxLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_minimumHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQBoxLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBoxLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBoxLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isEmpty);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_isEmpty);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::isEmpty();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRect sipQBoxLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_geometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_geometry);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::geometry();

    extern  ::QRect sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_77(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQBoxLayout::setGeometry(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_setGeometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_setGeometry);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtWidgets_76(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::Qt::Orientations sipQBoxLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_expandingDirections);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_expandingDirections);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::expandingDirections();

    extern  ::Qt::Orientations sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_75(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQBoxLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_maximumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_maximumSize);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::maximumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQBoxLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[20]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[20]), sipPySelf, SIP_NULLPTR, sipName_minimumSize);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::minimumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQBoxLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQBoxLayout::addItem( ::QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_addItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_addItem);
#endif

    if (!sipMeth)
    {
         ::QBoxLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLayoutItem*);

    sipVH_QtWidgets_82(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQBoxLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_itemAt);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::itemAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQBoxLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_takeAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_takeAt);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::takeAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQBoxLayout::indexOf( ::QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[25]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_indexOf);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[25]), sipPySelf, SIP_NULLPTR, sipName_indexOf);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::indexOf(a0);

    extern int sipVH_QtWidgets_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    return sipVH_QtWidgets_85(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQBoxLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_count);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), sipPySelf, SIP_NULLPTR, sipName_count);
#endif

    if (!sipMeth)
        return  ::QBoxLayout::count();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QBoxLayout_direction, "direction(self) -> QBoxLayout.Direction");

extern "C" {static PyObject *meth_QBoxLayout_direction(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
             ::QBoxLayout::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBoxLayout_Direction);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_direction, doc_QBoxLayout_direction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_setDirection, "setDirection(self, QBoxLayout.Direction)");

extern "C" {static PyObject *meth_QBoxLayout_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBoxLayout::Direction a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QBoxLayout_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setDirection, doc_QBoxLayout_setDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addSpacing, "addSpacing(self, int)");

extern "C" {static PyObject *meth_QBoxLayout_addSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addSpacing, doc_QBoxLayout_addSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addStretch, "addStretch(self, stretch: int = 0)");

extern "C" {static PyObject *meth_QBoxLayout_addStretch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStretch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addStretch, doc_QBoxLayout_addStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addWidget, "addWidget(self, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())");

extern "C" {static PyObject *meth_QBoxLayout_addWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
        int a1 = 0;
         ::Qt::Alignment a2def = Qt::Alignment();
         ::Qt::Alignment* a2 = &a2def;
        int a2State = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_stretch,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B@J8|iJ1", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0, &a1, sipType_Qt_Alignment, &a2, &a2State))
        {
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qboxlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0, a1, *a2);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 931 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
            sipReleaseType(a2,sipType_Qt_Alignment,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addWidget, doc_QBoxLayout_addWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addLayout, "addLayout(self, QLayout, stretch: int = 0)");

extern "C" {static PyObject *meth_QBoxLayout_addLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLayout* a0;
        int a1 = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayout, &a0, &a1))
        {
            sipCpp->addLayout(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addLayout, doc_QBoxLayout_addLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addStrut, "addStrut(self, int)");

extern "C" {static PyObject *meth_QBoxLayout_addStrut(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStrut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addStrut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addStrut, doc_QBoxLayout_addStrut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addItem, "addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QBoxLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLayoutItem* a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QBoxLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addItem, doc_QBoxLayout_addItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertSpacing, "insertSpacing(self, int, int)");

extern "C" {static PyObject *meth_QBoxLayout_insertSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->insertSpacing(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertSpacing, doc_QBoxLayout_insertSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertStretch, "insertStretch(self, int, stretch: int = 0)");

extern "C" {static PyObject *meth_QBoxLayout_insertStretch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertStretch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->insertStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertStretch, doc_QBoxLayout_insertStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertWidget, "insertWidget(self, int, QWidget, stretch: int = 0, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())");

extern "C" {static PyObject *meth_QBoxLayout_insertWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWidget* a1;
        PyObject *a1Wrapper;
        int a2 = 0;
         ::Qt::Alignment a3def = Qt::Alignment();
         ::Qt::Alignment* a3 = &a3def;
        int a3State = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stretch,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi@J8|iJ1", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1Wrapper, sipType_QWidget, &a1, &a2, sipType_Qt_Alignment, &a3, &a3State))
        {
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qboxlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->insertWidget(a0, a1, a2, *a3);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a1Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows insertWidget(QWidget()).
            sipTransferTo(a1Wrapper, sipSelf);
        }
#line 1142 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQBoxLayout.cpp"
            sipReleaseType(a3,sipType_Qt_Alignment,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertWidget, doc_QBoxLayout_insertWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertLayout, "insertLayout(self, int, QLayout, stretch: int = 0)");

extern "C" {static PyObject *meth_QBoxLayout_insertLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLayout* a1;
        int a2 = 0;
         ::QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ:|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QLayout, &a1, &a2))
        {
            sipCpp->insertLayout(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertLayout, doc_QBoxLayout_insertLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_setStretchFactor, "setStretchFactor(self, QWidget, int) -> bool\n"
"setStretchFactor(self, QLayout, int) -> bool");

extern "C" {static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        int a1;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QWidget, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setStretchFactor(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLayout* a0;
        int a1;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayout, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setStretchFactor(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setStretchFactor, doc_QBoxLayout_setStretchFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QBoxLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_sizeHint, doc_QBoxLayout_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QBoxLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_minimumSize, doc_QBoxLayout_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QBoxLayout::maximumSize() : sipCpp->maximumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_maximumSize, doc_QBoxLayout_maximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_hasHeightForWidth, doc_QBoxLayout_hasHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_heightForWidth, doc_QBoxLayout_heightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_minimumHeightForWidth, "minimumHeightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::minimumHeightForWidth(a0) : sipCpp->minimumHeightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_minimumHeightForWidth, doc_QBoxLayout_minimumHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QBoxLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((sipSelfWasArg ? sipCpp-> ::QBoxLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_expandingDirections, doc_QBoxLayout_expandingDirections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QBoxLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QBoxLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_invalidate, doc_QBoxLayout_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_itemAt, "itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QBoxLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_itemAt, doc_QBoxLayout_itemAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QBoxLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_takeAt, doc_QBoxLayout_takeAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QBoxLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBoxLayout::count() : sipCpp->count());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_count, doc_QBoxLayout_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QBoxLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QBoxLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setGeometry, doc_QBoxLayout_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QBoxLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_spacing, doc_QBoxLayout_spacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QBoxLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setSpacing, doc_QBoxLayout_setSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_addSpacerItem, "addSpacerItem(self, QSpacerItem)");

extern "C" {static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSpacerItem* a0;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QSpacerItem, &a0))
        {
            sipCpp->addSpacerItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addSpacerItem, doc_QBoxLayout_addSpacerItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertSpacerItem, "insertSpacerItem(self, int, QSpacerItem)");

extern "C" {static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSpacerItem* a1;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QSpacerItem, &a1))
        {
            sipCpp->insertSpacerItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertSpacerItem, doc_QBoxLayout_insertSpacerItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_setStretch, "setStretch(self, int, int)");

extern "C" {static PyObject *meth_QBoxLayout_setStretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setStretch, doc_QBoxLayout_setStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_stretch, "stretch(self, int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_stretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_stretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->stretch(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_stretch, doc_QBoxLayout_stretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBoxLayout_insertItem, "insertItem(self, int, QLayoutItem)");

extern "C" {static PyObject *meth_QBoxLayout_insertItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLayoutItem* a1;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJH", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QLayoutItem, &a1, &sipOwner))
        {
            sipCpp->insertItem(a0,a1);

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertItem, doc_QBoxLayout_insertItem);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBoxLayout(void *, const sipTypeDef *);}
static void *cast_QBoxLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBoxLayout *sipCpp = reinterpret_cast< ::QBoxLayout *>(sipCppV);

    if (targetType == sipType_QLayout)
        return static_cast< ::QLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QLayoutItem)
        return static_cast< ::QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBoxLayout(void *, int);}
static void release_QBoxLayout(void *sipCppV, int)
{
     ::QBoxLayout *sipCpp = reinterpret_cast< ::QBoxLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBoxLayout(sipSimpleWrapper *);}
static void dealloc_QBoxLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBoxLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBoxLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBoxLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBoxLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBoxLayout *sipCpp = SIP_NULLPTR;

    {
         ::QBoxLayout::Direction a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBoxLayout_Direction, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQBoxLayout(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBoxLayout[] = {{188, 255, 1}};


static PyMethodDef methods_QBoxLayout[] = {
    {sipName_addItem, meth_QBoxLayout_addItem, METH_VARARGS, doc_QBoxLayout_addItem},
    {sipName_addLayout, SIP_MLMETH_CAST(meth_QBoxLayout_addLayout), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_addLayout},
    {sipName_addSpacerItem, meth_QBoxLayout_addSpacerItem, METH_VARARGS, doc_QBoxLayout_addSpacerItem},
    {sipName_addSpacing, meth_QBoxLayout_addSpacing, METH_VARARGS, doc_QBoxLayout_addSpacing},
    {sipName_addStretch, SIP_MLMETH_CAST(meth_QBoxLayout_addStretch), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_addStretch},
    {sipName_addStrut, meth_QBoxLayout_addStrut, METH_VARARGS, doc_QBoxLayout_addStrut},
    {sipName_addWidget, SIP_MLMETH_CAST(meth_QBoxLayout_addWidget), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_addWidget},
    {sipName_count, meth_QBoxLayout_count, METH_VARARGS, doc_QBoxLayout_count},
    {sipName_direction, meth_QBoxLayout_direction, METH_VARARGS, doc_QBoxLayout_direction},
    {sipName_expandingDirections, meth_QBoxLayout_expandingDirections, METH_VARARGS, doc_QBoxLayout_expandingDirections},
    {sipName_hasHeightForWidth, meth_QBoxLayout_hasHeightForWidth, METH_VARARGS, doc_QBoxLayout_hasHeightForWidth},
    {sipName_heightForWidth, meth_QBoxLayout_heightForWidth, METH_VARARGS, doc_QBoxLayout_heightForWidth},
    {sipName_insertItem, meth_QBoxLayout_insertItem, METH_VARARGS, doc_QBoxLayout_insertItem},
    {sipName_insertLayout, SIP_MLMETH_CAST(meth_QBoxLayout_insertLayout), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_insertLayout},
    {sipName_insertSpacerItem, meth_QBoxLayout_insertSpacerItem, METH_VARARGS, doc_QBoxLayout_insertSpacerItem},
    {sipName_insertSpacing, meth_QBoxLayout_insertSpacing, METH_VARARGS, doc_QBoxLayout_insertSpacing},
    {sipName_insertStretch, SIP_MLMETH_CAST(meth_QBoxLayout_insertStretch), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_insertStretch},
    {sipName_insertWidget, SIP_MLMETH_CAST(meth_QBoxLayout_insertWidget), METH_VARARGS|METH_KEYWORDS, doc_QBoxLayout_insertWidget},
    {sipName_invalidate, meth_QBoxLayout_invalidate, METH_VARARGS, doc_QBoxLayout_invalidate},
    {sipName_itemAt, meth_QBoxLayout_itemAt, METH_VARARGS, doc_QBoxLayout_itemAt},
    {sipName_maximumSize, meth_QBoxLayout_maximumSize, METH_VARARGS, doc_QBoxLayout_maximumSize},
    {sipName_minimumHeightForWidth, meth_QBoxLayout_minimumHeightForWidth, METH_VARARGS, doc_QBoxLayout_minimumHeightForWidth},
    {sipName_minimumSize, meth_QBoxLayout_minimumSize, METH_VARARGS, doc_QBoxLayout_minimumSize},
    {sipName_setDirection, meth_QBoxLayout_setDirection, METH_VARARGS, doc_QBoxLayout_setDirection},
    {sipName_setGeometry, meth_QBoxLayout_setGeometry, METH_VARARGS, doc_QBoxLayout_setGeometry},
    {sipName_setSpacing, meth_QBoxLayout_setSpacing, METH_VARARGS, doc_QBoxLayout_setSpacing},
    {sipName_setStretch, meth_QBoxLayout_setStretch, METH_VARARGS, doc_QBoxLayout_setStretch},
    {sipName_setStretchFactor, meth_QBoxLayout_setStretchFactor, METH_VARARGS, doc_QBoxLayout_setStretchFactor},
    {sipName_sizeHint, meth_QBoxLayout_sizeHint, METH_VARARGS, doc_QBoxLayout_sizeHint},
    {sipName_spacing, meth_QBoxLayout_spacing, METH_VARARGS, doc_QBoxLayout_spacing},
    {sipName_stretch, meth_QBoxLayout_stretch, METH_VARARGS, doc_QBoxLayout_stretch},
    {sipName_takeAt, meth_QBoxLayout_takeAt, METH_VARARGS, doc_QBoxLayout_takeAt}
};

static sipEnumMemberDef enummembers_QBoxLayout[] = {
    {sipName_BottomToTop, static_cast<int>( ::QBoxLayout::BottomToTop), 34},
    {sipName_Down, static_cast<int>( ::QBoxLayout::Down), 34},
    {sipName_LeftToRight, static_cast<int>( ::QBoxLayout::LeftToRight), 34},
    {sipName_RightToLeft, static_cast<int>( ::QBoxLayout::RightToLeft), 34},
    {sipName_TopToBottom, static_cast<int>( ::QBoxLayout::TopToBottom), 34},
    {sipName_Up, static_cast<int>( ::QBoxLayout::Up), 34},
};

PyDoc_STRVAR(doc_QBoxLayout, "\1QBoxLayout(QBoxLayout.Direction, parent: QWidget = None)");


static pyqt5ClassPluginDef plugin_QBoxLayout = {
    & ::QBoxLayout::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QBoxLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBoxLayout,
        SIP_NULLPTR,
        &plugin_QBoxLayout
    },
    {
        sipNameNr_QBoxLayout,
        {0, 0, 1},
        32, methods_QBoxLayout,
        6, enummembers_QBoxLayout,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBoxLayout,
    -1,
    -1,
    supers_QBoxLayout,
    SIP_NULLPTR,
    init_type_QBoxLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QBoxLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBoxLayout,
    cast_QBoxLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
