/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"

#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 118 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 59 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 59 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 261 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 97 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 85 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 88 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 100 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 103 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 106 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 109 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 112 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 115 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 118 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 121 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 124 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"


class sipQPlainTextDocumentLayout : public  ::QPlainTextDocumentLayout
{
public:
    sipQPlainTextDocumentLayout( ::QTextDocument*);
    virtual ~sipQPlainTextDocumentLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    void draw( ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&) SIP_OVERRIDE;
    int hitTest(const  ::QPointF&, ::Qt::HitTestAccuracy) const SIP_OVERRIDE;
    int pageCount() const SIP_OVERRIDE;
     ::QSizeF documentSize() const SIP_OVERRIDE;
     ::QRectF frameBoundingRect( ::QTextFrame*) const SIP_OVERRIDE;
     ::QRectF blockBoundingRect(const  ::QTextBlock&) const SIP_OVERRIDE;
    void documentChanged(int,int,int) SIP_OVERRIDE;
    void resizeInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void positionInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void drawInlineObject( ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextDocumentLayout(const sipQPlainTextDocumentLayout &);
    sipQPlainTextDocumentLayout &operator = (const sipQPlainTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQPlainTextDocumentLayout::sipQPlainTextDocumentLayout( ::QTextDocument*a0):  ::QPlainTextDocumentLayout(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextDocumentLayout::~sipQPlainTextDocumentLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPlainTextDocumentLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QPlainTextDocumentLayout);

    return  ::QPlainTextDocumentLayout::metaObject();
}

int sipQPlainTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPlainTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QPlainTextDocumentLayout,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQPlainTextDocumentLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QPlainTextDocumentLayout, _clname, &sipCpp) ? sipCpp :  ::QPlainTextDocumentLayout::qt_metacast(_clname));
}

void sipQPlainTextDocumentLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextDocumentLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQPlainTextDocumentLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::draw( ::QPainter*a0,const  ::QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_draw);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_draw);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::draw(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_194(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtWidgets_194(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

int sipQPlainTextDocumentLayout::hitTest(const  ::QPointF& a0, ::Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hitTest);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_hitTest);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::hitTest(a0,a1);

    extern int sipVH_QtWidgets_193(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&, ::Qt::HitTestAccuracy);

    return sipVH_QtWidgets_193(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

int sipQPlainTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_pageCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_pageCount);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::pageCount();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSizeF sipQPlainTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_documentSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_documentSize);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::documentSize();

    extern  ::QSizeF sipVH_QtWidgets_192(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_192(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRectF sipQPlainTextDocumentLayout::frameBoundingRect( ::QTextFrame*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_frameBoundingRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_frameBoundingRect);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::frameBoundingRect(a0);

    extern  ::QRectF sipVH_QtWidgets_191(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextFrame*);

    return sipVH_QtWidgets_191(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQPlainTextDocumentLayout::blockBoundingRect(const  ::QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_blockBoundingRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_blockBoundingRect);
#endif

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::blockBoundingRect(a0);

    extern  ::QRectF sipVH_QtWidgets_190(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    return sipVH_QtWidgets_190(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_documentChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_documentChanged);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::documentChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_189(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    sipVH_QtWidgets_189(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::resizeInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_resizeInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_resizeInlineObject);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_188(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtWidgets_188(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::positionInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_positionInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_positionInlineObject);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_188(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtWidgets_188(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::drawInlineObject( ::QPainter*a0,const  ::QRectF& a1, ::QTextInlineObject a2,int a3,const  ::QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_drawInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_drawInlineObject);
#endif

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtWidgets_187(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtWidgets_187(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_draw, "draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QAbstractTextDocumentLayout::PaintContext* a1;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::draw(a0,*a1) : sipCpp->draw(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_draw, doc_QPlainTextDocumentLayout_draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_hitTest, "hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::HitTestAccuracy a1;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::hitTest(*a0,a1) : sipCpp->hitTest(*a0,a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_hitTest, doc_QPlainTextDocumentLayout_hitTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_pageCount, "pageCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::pageCount() : sipCpp->pageCount());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_pageCount, doc_QPlainTextDocumentLayout_pageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentSize, "documentSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::documentSize() : sipCpp->documentSize()));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentSize, doc_QPlainTextDocumentLayout_documentSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_frameBoundingRect, "frameBoundingRect(self, QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextFrame* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::frameBoundingRect(a0) : sipCpp->frameBoundingRect(a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_frameBoundingRect, doc_QPlainTextDocumentLayout_frameBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::blockBoundingRect(*a0) : sipCpp->blockBoundingRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_blockBoundingRect, doc_QPlainTextDocumentLayout_blockBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_ensureBlockLayout, "ensureBlockLayout(self, QTextBlock)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->ensureBlockLayout(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_ensureBlockLayout, doc_QPlainTextDocumentLayout_ensureBlockLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            sipCpp->setCursorWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_setCursorWidth, doc_QPlainTextDocumentLayout_setCursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_cursorWidth, doc_QPlainTextDocumentLayout_cursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_requestUpdate, "requestUpdate(self)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            sipCpp->requestUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_requestUpdate, doc_QPlainTextDocumentLayout_requestUpdate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentChanged, "documentChanged(self, int, int, int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::documentChanged(a0,a1,a2) : sipCpp->documentChanged(a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentChanged, doc_QPlainTextDocumentLayout_documentChanged);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlainTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QPlainTextDocumentLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlainTextDocumentLayout *sipCpp = reinterpret_cast< ::QPlainTextDocumentLayout *>(sipCppV);

    if (targetType == sipType_QAbstractTextDocumentLayout)
        return static_cast< ::QAbstractTextDocumentLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextDocumentLayout(void *, int);}
static void release_QPlainTextDocumentLayout(void *sipCppV, int)
{
     ::QPlainTextDocumentLayout *sipCpp = reinterpret_cast< ::QPlainTextDocumentLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlainTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlainTextDocumentLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlainTextDocumentLayout *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQPlainTextDocumentLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextDocumentLayout[] = {{0, 1, 1}};


static PyMethodDef methods_QPlainTextDocumentLayout[] = {
    {sipName_blockBoundingRect, meth_QPlainTextDocumentLayout_blockBoundingRect, METH_VARARGS, doc_QPlainTextDocumentLayout_blockBoundingRect},
    {sipName_cursorWidth, meth_QPlainTextDocumentLayout_cursorWidth, METH_VARARGS, doc_QPlainTextDocumentLayout_cursorWidth},
    {sipName_documentChanged, meth_QPlainTextDocumentLayout_documentChanged, METH_VARARGS, doc_QPlainTextDocumentLayout_documentChanged},
    {sipName_documentSize, meth_QPlainTextDocumentLayout_documentSize, METH_VARARGS, doc_QPlainTextDocumentLayout_documentSize},
    {sipName_draw, meth_QPlainTextDocumentLayout_draw, METH_VARARGS, doc_QPlainTextDocumentLayout_draw},
    {sipName_ensureBlockLayout, meth_QPlainTextDocumentLayout_ensureBlockLayout, METH_VARARGS, doc_QPlainTextDocumentLayout_ensureBlockLayout},
    {sipName_frameBoundingRect, meth_QPlainTextDocumentLayout_frameBoundingRect, METH_VARARGS, doc_QPlainTextDocumentLayout_frameBoundingRect},
    {sipName_hitTest, meth_QPlainTextDocumentLayout_hitTest, METH_VARARGS, doc_QPlainTextDocumentLayout_hitTest},
    {sipName_pageCount, meth_QPlainTextDocumentLayout_pageCount, METH_VARARGS, doc_QPlainTextDocumentLayout_pageCount},
    {sipName_requestUpdate, meth_QPlainTextDocumentLayout_requestUpdate, METH_VARARGS, doc_QPlainTextDocumentLayout_requestUpdate},
    {sipName_setCursorWidth, meth_QPlainTextDocumentLayout_setCursorWidth, METH_VARARGS, doc_QPlainTextDocumentLayout_setCursorWidth}
};

PyDoc_STRVAR(doc_QPlainTextDocumentLayout, "\1QPlainTextDocumentLayout(QTextDocument)");


static pyqt5ClassPluginDef plugin_QPlainTextDocumentLayout = {
    & ::QPlainTextDocumentLayout::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QPlainTextDocumentLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextDocumentLayout,
        SIP_NULLPTR,
        &plugin_QPlainTextDocumentLayout
    },
    {
        sipNameNr_QPlainTextDocumentLayout,
        {0, 0, 1},
        11, methods_QPlainTextDocumentLayout,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPlainTextDocumentLayout,
    -1,
    -1,
    supers_QPlainTextDocumentLayout,
    SIP_NULLPTR,
    init_type_QPlainTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPlainTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPlainTextDocumentLayout,
    cast_QPlainTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
