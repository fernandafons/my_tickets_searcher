/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qproxystyle.sip"
#include <qproxystyle.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qapplication.sip"
#include <qapplication.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 867 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 693 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQProxyStyle.cpp"


class sipQProxyStyle : public  ::QProxyStyle
{
public:
    sipQProxyStyle( ::QStyle*);
    sipQProxyStyle(const  ::QString&);
    virtual ~sipQProxyStyle();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int layoutSpacing( ::QSizePolicy::ControlType, ::QSizePolicy::ControlType, ::Qt::Orientation,const  ::QStyleOption*,const  ::QWidget*) const SIP_OVERRIDE;
     ::QPixmap generatedIconPixmap( ::QIcon::Mode,const  ::QPixmap&,const  ::QStyleOption*) const SIP_OVERRIDE;
     ::QIcon standardIcon( ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*) const SIP_OVERRIDE;
     ::QPixmap standardPixmap( ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*) const SIP_OVERRIDE;
    int styleHint( ::QStyle::StyleHint,const  ::QStyleOption*,const  ::QWidget*, ::QStyleHintReturn*) const SIP_OVERRIDE;
     ::QSize sizeFromContents( ::QStyle::ContentsType,const  ::QStyleOption*,const  ::QSize&,const  ::QWidget*) const SIP_OVERRIDE;
    int pixelMetric( ::QStyle::PixelMetric,const  ::QStyleOption*,const  ::QWidget*) const SIP_OVERRIDE;
     ::QRect subControlRect( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QStyle::SubControl,const  ::QWidget*) const SIP_OVERRIDE;
     ::QStyle::SubControl hitTestComplexControl( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*,const  ::QPoint&,const  ::QWidget*) const SIP_OVERRIDE;
    void drawComplexControl( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QPainter*,const  ::QWidget*) const SIP_OVERRIDE;
     ::QRect subElementRect( ::QStyle::SubElement,const  ::QStyleOption*,const  ::QWidget*) const SIP_OVERRIDE;
    void drawControl( ::QStyle::ControlElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*) const SIP_OVERRIDE;
    void drawPrimitive( ::QStyle::PrimitiveElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*) const SIP_OVERRIDE;
     ::QPalette standardPalette() const SIP_OVERRIDE;
    void drawItemPixmap( ::QPainter*,const  ::QRect&,int,const  ::QPixmap&) const SIP_OVERRIDE;
    void drawItemText( ::QPainter*,const  ::QRect&,int,const  ::QPalette&,bool,const  ::QString&, ::QPalette::ColorRole) const SIP_OVERRIDE;
     ::QRect itemPixmapRect(const  ::QRect&,int,const  ::QPixmap&) const SIP_OVERRIDE;
     ::QRect itemTextRect(const  ::QFontMetrics&,const  ::QRect&,int,bool,const  ::QString&) const SIP_OVERRIDE;
    void polish( ::QPalette&) SIP_OVERRIDE;
    void unpolish( ::QApplication*) SIP_OVERRIDE;
    void polish( ::QApplication*) SIP_OVERRIDE;
    void unpolish( ::QWidget*) SIP_OVERRIDE;
    void polish( ::QWidget*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProxyStyle(const sipQProxyStyle &);
    sipQProxyStyle &operator = (const sipQProxyStyle &);

    char sipPyMethods[30];
};

sipQProxyStyle::sipQProxyStyle( ::QStyle*a0):  ::QProxyStyle(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyStyle::sipQProxyStyle(const  ::QString& a0):  ::QProxyStyle(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyStyle::~sipQProxyStyle()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQProxyStyle::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QProxyStyle);

    return  ::QProxyStyle::metaObject();
}

int sipQProxyStyle::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QProxyStyle::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QProxyStyle,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQProxyStyle::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QProxyStyle, _clname, &sipCpp) ? sipCpp :  ::QProxyStyle::qt_metacast(_clname));
}

int sipQProxyStyle::layoutSpacing( ::QSizePolicy::ControlType a0, ::QSizePolicy::ControlType a1, ::Qt::Orientation a2,const  ::QStyleOption*a3,const  ::QWidget*a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_layoutSpacing);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_layoutSpacing);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::layoutSpacing(a0,a1,a2,a3,a4);

    extern int sipVH_QtWidgets_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSizePolicy::ControlType, ::QSizePolicy::ControlType, ::Qt::Orientation,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtWidgets_107(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QPixmap sipQProxyStyle::generatedIconPixmap( ::QIcon::Mode a0,const  ::QPixmap& a1,const  ::QStyleOption*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_generatedIconPixmap);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_generatedIconPixmap);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::generatedIconPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtWidgets_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIcon::Mode,const  ::QPixmap&,const  ::QStyleOption*);

    return sipVH_QtWidgets_106(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QIcon sipQProxyStyle::standardIcon( ::QStyle::StandardPixmap a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_standardIcon);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_standardIcon);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::standardIcon(a0,a1,a2);

    extern  ::QIcon sipVH_QtWidgets_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtWidgets_105(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPixmap sipQProxyStyle::standardPixmap( ::QStyle::StandardPixmap a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_standardPixmap);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_standardPixmap);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::standardPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtWidgets_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtWidgets_104(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQProxyStyle::styleHint( ::QStyle::StyleHint a0,const  ::QStyleOption*a1,const  ::QWidget*a2, ::QStyleHintReturn*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_styleHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, SIP_NULLPTR, sipName_styleHint);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::styleHint(a0,a1,a2,a3);

    extern int sipVH_QtWidgets_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::StyleHint,const  ::QStyleOption*,const  ::QWidget*, ::QStyleHintReturn*);

    return sipVH_QtWidgets_103(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QSize sipQProxyStyle::sizeFromContents( ::QStyle::ContentsType a0,const  ::QStyleOption*a1,const  ::QSize& a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeFromContents);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_sizeFromContents);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::sizeFromContents(a0,a1,a2,a3);

    extern  ::QSize sipVH_QtWidgets_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ContentsType,const  ::QStyleOption*,const  ::QSize&,const  ::QWidget*);

    return sipVH_QtWidgets_102(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

int sipQProxyStyle::pixelMetric( ::QStyle::PixelMetric a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_pixelMetric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), sipPySelf, SIP_NULLPTR, sipName_pixelMetric);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::pixelMetric(a0,a1,a2);

    extern int sipVH_QtWidgets_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::PixelMetric,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtWidgets_101(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QRect sipQProxyStyle::subControlRect( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1, ::QStyle::SubControl a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_subControlRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_subControlRect);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::subControlRect(a0,a1,a2,a3);

    extern  ::QRect sipVH_QtWidgets_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QStyle::SubControl,const  ::QWidget*);

    return sipVH_QtWidgets_100(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QStyle::SubControl sipQProxyStyle::hitTestComplexControl( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1,const  ::QPoint& a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hitTestComplexControl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_hitTestComplexControl);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::hitTestComplexControl(a0,a1,a2,a3);

    extern  ::QStyle::SubControl sipVH_QtWidgets_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*,const  ::QPoint&,const  ::QWidget*);

    return sipVH_QtWidgets_99(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawComplexControl( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawComplexControl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_drawComplexControl);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::drawComplexControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QPainter*,const  ::QWidget*);

    sipVH_QtWidgets_98(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QRect sipQProxyStyle::subElementRect( ::QStyle::SubElement a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_subElementRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_subElementRect);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::subElementRect(a0,a1,a2);

    extern  ::QRect sipVH_QtWidgets_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::SubElement,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtWidgets_97(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQProxyStyle::drawControl( ::QStyle::ControlElement a0,const  ::QStyleOption*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawControl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_drawControl);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::drawControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ControlElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*);

    sipVH_QtWidgets_96(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawPrimitive( ::QStyle::PrimitiveElement a0,const  ::QStyleOption*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawPrimitive);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_drawPrimitive);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::drawPrimitive(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::PrimitiveElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*);

    sipVH_QtWidgets_95(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QPalette sipQProxyStyle::standardPalette() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_standardPalette);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_standardPalette);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::standardPalette();

    extern  ::QPalette sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQProxyStyle::drawItemPixmap( ::QPainter*a0,const  ::QRect& a1,int a2,const  ::QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawItemPixmap);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_drawItemPixmap);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::drawItemPixmap(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int,const  ::QPixmap&);

    sipVH_QtWidgets_93(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawItemText( ::QPainter*a0,const  ::QRect& a1,int a2,const  ::QPalette& a3,bool a4,const  ::QString& a5, ::QPalette::ColorRole a6) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawItemText);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_drawItemText);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::drawItemText(a0,a1,a2,a3,a4,a5,a6);
        return;
    }

    extern void sipVH_QtWidgets_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int,const  ::QPalette&,bool,const  ::QString&, ::QPalette::ColorRole);

    sipVH_QtWidgets_92(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5, a6);
}

 ::QRect sipQProxyStyle::itemPixmapRect(const  ::QRect& a0,int a1,const  ::QPixmap& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemPixmapRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_itemPixmapRect);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::itemPixmapRect(a0,a1,a2);

    extern  ::QRect sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&,int,const  ::QPixmap&);

    return sipVH_QtWidgets_91(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QRect sipQProxyStyle::itemTextRect(const  ::QFontMetrics& a0,const  ::QRect& a1,int a2,bool a3,const  ::QString& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemTextRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_itemTextRect);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::itemTextRect(a0,a1,a2,a3,a4);

    extern  ::QRect sipVH_QtWidgets_90(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFontMetrics&,const  ::QRect&,int,bool,const  ::QString&);

    return sipVH_QtWidgets_90(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

void sipQProxyStyle::polish( ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_polish);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_polish);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_89(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPalette&);

    sipVH_QtWidgets_89(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::unpolish( ::QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_unpolish);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_unpolish);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_88(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QApplication*);

    sipVH_QtWidgets_88(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::polish( ::QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_polish);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_polish);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_88(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QApplication*);

    sipVH_QtWidgets_88(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::unpolish( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_unpolish);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_unpolish);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::polish( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_polish);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_polish);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQProxyStyle::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQProxyStyle::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QProxyStyle::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQProxyStyle::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QProxyStyle::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QProxyStyle_baseStyle, "baseStyle(self) -> QStyle");

extern "C" {static PyObject *meth_QProxyStyle_baseStyle(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_baseStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyStyle, &sipCpp))
        {
             ::QStyle*sipRes;

            sipRes = sipCpp->baseStyle();

            return sipConvertFromType(sipRes,sipType_QStyle,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_baseStyle, doc_QProxyStyle_baseStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_setBaseStyle, "setBaseStyle(self, QStyle)");

extern "C" {static PyObject *meth_QProxyStyle_setBaseStyle(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_setBaseStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyle* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle, &a0))
        {
            sipCpp->setBaseStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_setBaseStyle, doc_QProxyStyle_setBaseStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_drawPrimitive, "drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawPrimitive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::PrimitiveElement a0;
        const  ::QStyleOption* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::drawPrimitive(a0,a1,a2,a3) : sipCpp->drawPrimitive(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawPrimitive, doc_QProxyStyle_drawPrimitive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_drawControl, "drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ControlElement a0;
        const  ::QStyleOption* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::drawControl(a0,a1,a2,a3) : sipCpp->drawControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawControl, doc_QProxyStyle_drawControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_drawComplexControl, "drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::drawComplexControl(a0,a1,a2,a3) : sipCpp->drawComplexControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawComplexControl, doc_QProxyStyle_drawComplexControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_drawItemText, "drawItemText(self, QPainter, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole)");

extern "C" {static PyObject *meth_QProxyStyle_drawItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        int a2;
        const  ::QPalette* a3;
        bool a4;
        const  ::QString* a5;
        int a5State = 0;
         ::QPalette::ColorRole a6 = QPalette::NoRole;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_textRole,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9iJ9bJ1|E", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2, sipType_QPalette, &a3, &a4, sipType_QString,&a5, &a5State, sipType_QPalette_ColorRole, &a6))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::drawItemText(a0,*a1,a2,*a3,a4,*a5,a6) : sipCpp->drawItemText(a0,*a1,a2,*a3,a4,*a5,a6));
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawItemText, doc_QProxyStyle_drawItemText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_drawItemPixmap, "drawItemPixmap(self, QPainter, QRect, int, QPixmap)");

extern "C" {static PyObject *meth_QProxyStyle_drawItemPixmap(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawItemPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        int a2;
        const  ::QPixmap* a3;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9iJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2, sipType_QPixmap, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::drawItemPixmap(a0,*a1,a2,*a3) : sipCpp->drawItemPixmap(a0,*a1,a2,*a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawItemPixmap, doc_QProxyStyle_drawItemPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_sizeFromContents, "sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, QWidget) -> QSize");

extern "C" {static PyObject *meth_QProxyStyle_sizeFromContents(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_sizeFromContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ContentsType a0;
        const  ::QStyleOption* a1;
        const  ::QSize* a2;
        const  ::QWidget* a3;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8J9J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ContentsType, &a0, sipType_QStyleOption, &a1, sipType_QSize, &a2, sipType_QWidget, &a3))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QProxyStyle::sizeFromContents(a0,a1,*a2,a3) : sipCpp->sizeFromContents(a0,a1,*a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_sizeFromContents, doc_QProxyStyle_sizeFromContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_subElementRect, "subElementRect(self, QStyle.SubElement, QStyleOption, QWidget) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_subElementRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_subElementRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::SubElement a0;
        const  ::QStyleOption* a1;
        const  ::QWidget* a2;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_SubElement, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QProxyStyle::subElementRect(a0,a1,a2) : sipCpp->subElementRect(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_subElementRect, doc_QProxyStyle_subElementRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_subControlRect, "subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, QWidget) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_subControlRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_subControlRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
         ::QStyle::SubControl a2;
        const  ::QWidget* a3;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8EJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QStyle_SubControl, &a2, sipType_QWidget, &a3))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QProxyStyle::subControlRect(a0,a1,a2,a3) : sipCpp->subControlRect(a0,a1,a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_subControlRect, doc_QProxyStyle_subControlRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_itemTextRect, "itemTextRect(self, QFontMetrics, QRect, int, bool, str) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_itemTextRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_itemTextRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFontMetrics* a0;
        const  ::QRect* a1;
        int a2;
        bool a3;
        const  ::QString* a4;
        int a4State = 0;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9ibJ1", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QFontMetrics, &a0, sipType_QRect, &a1, &a2, &a3, sipType_QString,&a4, &a4State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QProxyStyle::itemTextRect(*a0,*a1,a2,a3,*a4) : sipCpp->itemTextRect(*a0,*a1,a2,a3,*a4)));
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_itemTextRect, doc_QProxyStyle_itemTextRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_itemPixmapRect, "itemPixmapRect(self, QRect, int, QPixmap) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_itemPixmapRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_itemPixmapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
        int a1;
        const  ::QPixmap* a2;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPixmap, &a2))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QProxyStyle::itemPixmapRect(*a0,a1,*a2) : sipCpp->itemPixmapRect(*a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_itemPixmapRect, doc_QProxyStyle_itemPixmapRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_hitTestComplexControl, "hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl");

extern "C" {static PyObject *meth_QProxyStyle_hitTestComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_hitTestComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
        const  ::QPoint* a2;
        const  ::QWidget* a3 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ8J9|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPoint, &a2, sipType_QWidget, &a3))
        {
             ::QStyle::SubControl sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyStyle::hitTestComplexControl(a0,a1,*a2,a3) : sipCpp->hitTestComplexControl(a0,a1,*a2,a3));

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QStyle_SubControl);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_hitTestComplexControl, doc_QProxyStyle_hitTestComplexControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_styleHint, "styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_styleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_styleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::StyleHint a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
         ::QStyleHintReturn* a3 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_option,
            sipName_widget,
            sipName_returnData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J8J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StyleHint, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2, sipType_QStyleHintReturn, &a3))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyStyle::styleHint(a0,a1,a2,a3) : sipCpp->styleHint(a0,a1,a2,a3));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_styleHint, doc_QProxyStyle_styleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_pixelMetric, "pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_pixelMetric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_pixelMetric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::PixelMetric a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_PixelMetric, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyStyle::pixelMetric(a0,a1,a2) : sipCpp->pixelMetric(a0,a1,a2));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_pixelMetric, doc_QProxyStyle_pixelMetric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_layoutSpacing, "layoutSpacing(self, QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_layoutSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_layoutSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSizePolicy::ControlType a0;
         ::QSizePolicy::ControlType a1;
         ::Qt::Orientation a2;
        const  ::QStyleOption* a3 = 0;
        const  ::QWidget* a4 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEEE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QSizePolicy_ControlType, &a0, sipType_QSizePolicy_ControlType, &a1, sipType_Qt_Orientation, &a2, sipType_QStyleOption, &a3, sipType_QWidget, &a4))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyStyle::layoutSpacing(a0,a1,a2,a3,a4) : sipCpp->layoutSpacing(a0,a1,a2,a3,a4));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_layoutSpacing, doc_QProxyStyle_layoutSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_standardIcon, "standardIcon(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon");

extern "C" {static PyObject *meth_QProxyStyle_standardIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::StandardPixmap a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon((sipSelfWasArg ? sipCpp-> ::QProxyStyle::standardIcon(a0,a1,a2) : sipCpp->standardIcon(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardIcon, doc_QProxyStyle_standardIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_standardPixmap, "standardPixmap(self, QStyle.StandardPixmap, QStyleOption, widget: QWidget = None) -> QPixmap");

extern "C" {static PyObject *meth_QProxyStyle_standardPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::StandardPixmap a0;
        const  ::QStyleOption* a1;
        const  ::QWidget* a2 = 0;
        const  ::QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QProxyStyle::standardPixmap(a0,a1,a2) : sipCpp->standardPixmap(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardPixmap, doc_QProxyStyle_standardPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_generatedIconPixmap, "generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap");

extern "C" {static PyObject *meth_QProxyStyle_generatedIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_generatedIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIcon::Mode a0;
        const  ::QPixmap* a1;
        const  ::QStyleOption* a2;
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QPixmap, &a1, sipType_QStyleOption, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QProxyStyle::generatedIconPixmap(a0,*a1,a2) : sipCpp->generatedIconPixmap(a0,*a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_generatedIconPixmap, doc_QProxyStyle_generatedIconPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_standardPalette, "standardPalette(self) -> QPalette");

extern "C" {static PyObject *meth_QProxyStyle_standardPalette(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyStyle, &sipCpp))
        {
             ::QPalette*sipRes;

            sipRes = new  ::QPalette((sipSelfWasArg ? sipCpp-> ::QProxyStyle::standardPalette() : sipCpp->standardPalette()));

            return sipConvertFromNewType(sipRes,sipType_QPalette,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardPalette, doc_QProxyStyle_standardPalette);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_polish, "polish(self, QWidget)\n"
"polish(self, QPalette) -> QPalette\n"
"polish(self, QApplication)");

extern "C" {static PyObject *meth_QProxyStyle_polish(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPalette* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPalette, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::polish(*a0) : sipCpp->polish(*a0));

            return sipConvertFromType(a0,sipType_QPalette,SIP_NULLPTR);
        }
    }

    {
         ::QApplication* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_polish, doc_QProxyStyle_polish);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_unpolish, "unpolish(self, QWidget)\n"
"unpolish(self, QApplication)");

extern "C" {static PyObject *meth_QProxyStyle_unpolish(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_unpolish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QApplication* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QProxyStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_unpolish, doc_QProxyStyle_unpolish);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProxyStyle_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QProxyStyle_event(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyStyle::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_event, doc_QProxyStyle_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QProxyStyle(void *, const sipTypeDef *);}
static void *cast_QProxyStyle(void *sipCppV, const sipTypeDef *targetType)
{
     ::QProxyStyle *sipCpp = reinterpret_cast< ::QProxyStyle *>(sipCppV);

    if (targetType == sipType_QCommonStyle)
        return static_cast< ::QCommonStyle *>(sipCpp);

    if (targetType == sipType_QStyle)
        return static_cast< ::QStyle *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProxyStyle(void *, int);}
static void release_QProxyStyle(void *sipCppV, int)
{
     ::QProxyStyle *sipCpp = reinterpret_cast< ::QProxyStyle *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QProxyStyle(Py_ssize_t);}
static void *array_QProxyStyle(Py_ssize_t sipNrElem)
{
    return new  ::QProxyStyle[sipNrElem];
}


extern "C" {static void dealloc_QProxyStyle(sipSimpleWrapper *);}
static void dealloc_QProxyStyle(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQProxyStyle *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProxyStyle(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QProxyStyle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProxyStyle(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQProxyStyle *sipCpp = SIP_NULLPTR;

    {
         ::QStyle* a0 = 0;
        PyObject *a0Wrapper = 0;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|@J8", &a0Wrapper, sipType_QStyle, &a0))
        {
            sipCpp = new sipQProxyStyle(a0);

            sipTransferTo(a0Wrapper, (PyObject *)sipSelf);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQProxyStyle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProxyStyle[] = {{49, 255, 1}};


static PyMethodDef methods_QProxyStyle[] = {
    {sipName_baseStyle, meth_QProxyStyle_baseStyle, METH_VARARGS, doc_QProxyStyle_baseStyle},
    {sipName_drawComplexControl, SIP_MLMETH_CAST(meth_QProxyStyle_drawComplexControl), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_drawComplexControl},
    {sipName_drawControl, SIP_MLMETH_CAST(meth_QProxyStyle_drawControl), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_drawControl},
    {sipName_drawItemPixmap, meth_QProxyStyle_drawItemPixmap, METH_VARARGS, doc_QProxyStyle_drawItemPixmap},
    {sipName_drawItemText, SIP_MLMETH_CAST(meth_QProxyStyle_drawItemText), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_drawItemText},
    {sipName_drawPrimitive, SIP_MLMETH_CAST(meth_QProxyStyle_drawPrimitive), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_drawPrimitive},
    {sipName_event, meth_QProxyStyle_event, METH_VARARGS, doc_QProxyStyle_event},
    {sipName_generatedIconPixmap, meth_QProxyStyle_generatedIconPixmap, METH_VARARGS, doc_QProxyStyle_generatedIconPixmap},
    {sipName_hitTestComplexControl, SIP_MLMETH_CAST(meth_QProxyStyle_hitTestComplexControl), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_hitTestComplexControl},
    {sipName_itemPixmapRect, meth_QProxyStyle_itemPixmapRect, METH_VARARGS, doc_QProxyStyle_itemPixmapRect},
    {sipName_itemTextRect, meth_QProxyStyle_itemTextRect, METH_VARARGS, doc_QProxyStyle_itemTextRect},
    {sipName_layoutSpacing, SIP_MLMETH_CAST(meth_QProxyStyle_layoutSpacing), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_layoutSpacing},
    {sipName_pixelMetric, SIP_MLMETH_CAST(meth_QProxyStyle_pixelMetric), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_pixelMetric},
    {sipName_polish, meth_QProxyStyle_polish, METH_VARARGS, doc_QProxyStyle_polish},
    {sipName_setBaseStyle, meth_QProxyStyle_setBaseStyle, METH_VARARGS, doc_QProxyStyle_setBaseStyle},
    {sipName_sizeFromContents, meth_QProxyStyle_sizeFromContents, METH_VARARGS, doc_QProxyStyle_sizeFromContents},
    {sipName_standardIcon, SIP_MLMETH_CAST(meth_QProxyStyle_standardIcon), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_standardIcon},
    {sipName_standardPalette, meth_QProxyStyle_standardPalette, METH_VARARGS, doc_QProxyStyle_standardPalette},
    {sipName_standardPixmap, SIP_MLMETH_CAST(meth_QProxyStyle_standardPixmap), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_standardPixmap},
    {sipName_styleHint, SIP_MLMETH_CAST(meth_QProxyStyle_styleHint), METH_VARARGS|METH_KEYWORDS, doc_QProxyStyle_styleHint},
    {sipName_subControlRect, meth_QProxyStyle_subControlRect, METH_VARARGS, doc_QProxyStyle_subControlRect},
    {sipName_subElementRect, meth_QProxyStyle_subElementRect, METH_VARARGS, doc_QProxyStyle_subElementRect},
    {sipName_unpolish, meth_QProxyStyle_unpolish, METH_VARARGS, doc_QProxyStyle_unpolish}
};

PyDoc_STRVAR(doc_QProxyStyle, "\1QProxyStyle(style: QStyle = None)\n"
"QProxyStyle(str)");


static pyqt5ClassPluginDef plugin_QProxyStyle = {
    & ::QProxyStyle::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QProxyStyle = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QProxyStyle,
        SIP_NULLPTR,
        &plugin_QProxyStyle
    },
    {
        sipNameNr_QProxyStyle,
        {0, 0, 1},
        23, methods_QProxyStyle,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QProxyStyle,
    -1,
    -1,
    supers_QProxyStyle,
    SIP_NULLPTR,
    init_type_QProxyStyle,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QProxyStyle,
    SIP_NULLPTR,
    array_QProxyStyle,
    SIP_NULLPTR,
    release_QProxyStyle,
    cast_QProxyStyle,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
