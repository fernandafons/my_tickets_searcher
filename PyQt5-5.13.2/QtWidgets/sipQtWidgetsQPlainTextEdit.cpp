/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 118 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 124 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 127 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 130 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 133 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 136 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 139 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 261 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 142 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 145 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 148 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 151 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 154 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 157 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 160 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 163 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 166 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 169 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 208 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 172 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 175 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 178 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 181 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 184 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 187 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 190 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 193 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 196 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 199 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 202 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 205 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 208 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 211 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 214 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 217 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 220 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 223 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 226 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 229 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 232 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 235 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 238 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 241 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 244 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 247 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 250 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 253 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 256 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 259 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 262 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 265 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 268 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 271 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 274 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 277 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 282 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 285 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 288 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 291 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 294 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 297 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 300 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 303 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 306 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPlainTextEdit.cpp"


class sipQPlainTextEdit : public  ::QPlainTextEdit
{
public:
    sipQPlainTextEdit( ::QWidget*);
    sipQPlainTextEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQPlainTextEdit();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void insertFromMimeData(const  ::QMimeData*) SIP_OVERRIDE;
    bool canInsertFromMimeData(const  ::QMimeData*) const SIP_OVERRIDE;
     ::QMimeData* createMimeDataFromSelection() const SIP_OVERRIDE;
     ::QVariant loadResource(int,const  ::QUrl&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QSize viewportSizeHint() const SIP_OVERRIDE;
    bool viewportEvent( ::QEvent*) SIP_OVERRIDE;
    void scrollContentsBy(int,int) SIP_OVERRIDE;
    void setupViewport( ::QWidget*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextEdit(const sipQPlainTextEdit &);
    sipQPlainTextEdit &operator = (const sipQPlainTextEdit &);

    char sipPyMethods[54];
};

sipQPlainTextEdit::sipQPlainTextEdit( ::QWidget*a0):  ::QPlainTextEdit(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::sipQPlainTextEdit(const  ::QString& a0, ::QWidget*a1):  ::QPlainTextEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::~sipQPlainTextEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPlainTextEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QPlainTextEdit);

    return  ::QPlainTextEdit::metaObject();
}

int sipQPlainTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPlainTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QPlainTextEdit,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQPlainTextEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QPlainTextEdit, _clname, &sipCpp) ? sipCpp :  ::QPlainTextEdit::qt_metacast(_clname));
}

void sipQPlainTextEdit::insertFromMimeData(const  ::QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_insertFromMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_insertFromMimeData);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtWidgets_186(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    sipVH_QtWidgets_186(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::canInsertFromMimeData(const  ::QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canInsertFromMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_canInsertFromMimeData);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtWidgets_185(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    return sipVH_QtWidgets_185(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QMimeData* sipQPlainTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_createMimeDataFromSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_createMimeDataFromSelection);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::createMimeDataFromSelection();

    extern  ::QMimeData* sipVH_QtWidgets_184(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_184(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QVariant sipQPlainTextEdit::loadResource(int a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_loadResource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_loadResource);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::loadResource(a0,a1);

    extern  ::QVariant sipVH_QtWidgets_183(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QUrl&);

    return sipVH_QtWidgets_183(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPlainTextEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQPlainTextEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQPlainTextEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQPlainTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPlainTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQPlainTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQPlainTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQPlainTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPlainTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQPlainTextEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQPlainTextEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQPlainTextEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[48]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[48]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQPlainTextEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[49]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[49]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQPlainTextEdit::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[50]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewportSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[50]), sipPySelf, SIP_NULLPTR, sipName_viewportSizeHint);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQPlainTextEdit::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_viewportEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_viewportEvent);
#endif

    if (!sipMeth)
        return  ::QPlainTextEdit::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPlainTextEdit::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_setupViewport);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], sipPySelf, SIP_NULLPTR, sipName_setupViewport);
#endif

    if (!sipMeth)
    {
         ::QPlainTextEdit::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPlainTextEdit_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QPlainTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            sipCpp->setDocument(a0);

            sipKeepReference(sipSelf, -40, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setDocument, doc_QPlainTextEdit_setDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QPlainTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_document, doc_QPlainTextEdit_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTextCursor, "setTextCursor(self, QTextCursor)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->setTextCursor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTextCursor, doc_QPlainTextEdit_setTextCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_textCursor, "textCursor(self) -> QTextCursor");

extern "C" {static PyObject *meth_QPlainTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->textCursor());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_textCursor, doc_QPlainTextEdit_textCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_isReadOnly, doc_QPlainTextEdit_isReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setReadOnly, doc_QPlainTextEdit_setReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTextInteractionFlags, doc_QPlainTextEdit_setTextInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_textInteractionFlags, doc_QPlainTextEdit_textInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mergeCurrentCharFormat, "mergeCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mergeCurrentCharFormat, doc_QPlainTextEdit_mergeCurrentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCurrentCharFormat, "setCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCurrentCharFormat, doc_QPlainTextEdit_setCurrentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_currentCharFormat, "currentCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->currentCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_currentCharFormat, doc_QPlainTextEdit_currentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_tabChangesFocus, "tabChangesFocus(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabChangesFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_tabChangesFocus, doc_QPlainTextEdit_tabChangesFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTabChangesFocus, "setTabChangesFocus(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabChangesFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTabChangesFocus, doc_QPlainTextEdit_setTabChangesFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setDocumentTitle, "setDocumentTitle(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDocumentTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setDocumentTitle, doc_QPlainTextEdit_setDocumentTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_documentTitle, "documentTitle(self) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->documentTitle());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_documentTitle, doc_QPlainTextEdit_documentTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_isUndoRedoEnabled, "isUndoRedoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoRedoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_isUndoRedoEnabled, doc_QPlainTextEdit_isUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setUndoRedoEnabled, "setUndoRedoEnabled(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setUndoRedoEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setUndoRedoEnabled, doc_QPlainTextEdit_setUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setMaximumBlockCount, "setMaximumBlockCount(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setMaximumBlockCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setMaximumBlockCount, doc_QPlainTextEdit_setMaximumBlockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_maximumBlockCount, "maximumBlockCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumBlockCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_maximumBlockCount, doc_QPlainTextEdit_maximumBlockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_lineWrapMode, "lineWrapMode(self) -> QPlainTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QPlainTextEdit::LineWrapMode sipRes;

            sipRes = sipCpp->lineWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPlainTextEdit_LineWrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_lineWrapMode, doc_QPlainTextEdit_lineWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setLineWrapMode, "setLineWrapMode(self, QPlainTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit::LineWrapMode a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPlainTextEdit_LineWrapMode, &a0))
        {
            sipCpp->setLineWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setLineWrapMode, doc_QPlainTextEdit_setLineWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_wordWrapMode, "wordWrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            sipRes = sipCpp->wordWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextOption_WrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_wordWrapMode, doc_QPlainTextEdit_wordWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setWordWrapMode, "setWordWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::WrapMode a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            sipCpp->setWordWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setWordWrapMode, doc_QPlainTextEdit_setWordWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setBackgroundVisible, "setBackgroundVisible(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setBackgroundVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setBackgroundVisible, doc_QPlainTextEdit_setBackgroundVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_backgroundVisible, "backgroundVisible(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->backgroundVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_backgroundVisible, doc_QPlainTextEdit_backgroundVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCenterOnScroll, "setCenterOnScroll(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setCenterOnScroll(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCenterOnScroll, doc_QPlainTextEdit_setCenterOnScroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_centerOnScroll, "centerOnScroll(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->centerOnScroll();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_centerOnScroll, doc_QPlainTextEdit_centerOnScroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_find, "find(self, str, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool\n"
"find(self, QRegExp, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument::FindFlags a1def = QTextDocument::FindFlags();
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRegExp* a0;
         ::QTextDocument::FindFlags a1def = QTextDocument::FindFlags();
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QRegExp, &a0, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_find, doc_QPlainTextEdit_find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_toPlainText, doc_QPlainTextEdit_toPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_ensureCursorVisible, "ensureCursorVisible(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->ensureCursorVisible();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_ensureCursorVisible, doc_QPlainTextEdit_ensureCursorVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_loadResource, "loadResource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QPlainTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QUrl* a1;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_loadResource, doc_QPlainTextEdit_loadResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu\n"
"createStandardContextMenu(self, QPoint) -> QMenu");

extern "C" {static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu(*a0);

            return sipConvertFromNewType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_createStandardContextMenu, doc_QPlainTextEdit_createStandardContextMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorForPosition, "cursorForPosition(self, QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->cursorForPosition(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorForPosition, doc_QPlainTextEdit_cursorForPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorRect, "cursorRect(self, QTextCursor) -> QRect\n"
"cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cursorRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorRect, doc_QPlainTextEdit_cursorRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_overwriteMode, "overwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overwriteMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_overwriteMode, doc_QPlainTextEdit_overwriteMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setOverwriteMode, "setOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setOverwriteMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setOverwriteMode, doc_QPlainTextEdit_setOverwriteMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_tabStopWidth, "tabStopWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tabStopWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_tabStopWidth, doc_QPlainTextEdit_tabStopWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTabStopWidth, "setTabStopWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabStopWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTabStopWidth, doc_QPlainTextEdit_setTabStopWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorWidth, doc_QPlainTextEdit_cursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCursorWidth, doc_QPlainTextEdit_setCursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setExtraSelections, "setExtraSelections(self, Iterable[QTextEdit.ExtraSelection])");

extern "C" {static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextEdit::ExtraSelection>* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            sipCpp->setExtraSelections(*a0);
            sipReleaseType(const_cast<QList< ::QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setExtraSelections, doc_QPlainTextEdit_setExtraSelections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_extraSelections, "extraSelections(self) -> List[QTextEdit.ExtraSelection]");

extern "C" {static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            QList< ::QTextEdit::ExtraSelection>*sipRes;

            sipRes = new QList< ::QTextEdit::ExtraSelection>(sipCpp->extraSelections());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_extraSelections, doc_QPlainTextEdit_extraSelections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_moveCursor, "moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor::MoveOperation a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|E", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            sipCpp->moveCursor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_moveCursor, doc_QPlainTextEdit_moveCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_canPaste, "canPaste(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canPaste();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_canPaste, doc_QPlainTextEdit_canPaste);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_print_, "print_(self, QPagedPaintDevice)");

extern "C" {static PyObject *meth_QPlainTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPagedPaintDevice* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_print_, doc_QPlainTextEdit_print_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_print, "print(self, QPagedPaintDevice)");

extern "C" {static PyObject *meth_QPlainTextEdit_print(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPagedPaintDevice* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_print, doc_QPlainTextEdit_print);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockCount, "blockCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_blockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockCount, doc_QPlainTextEdit_blockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setPlainText, "setPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setPlainText, doc_QPlainTextEdit_setPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cut, doc_QPlainTextEdit_cut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_copy, doc_QPlainTextEdit_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_paste, doc_QPlainTextEdit_paste);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_undo, doc_QPlainTextEdit_undo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_redo, doc_QPlainTextEdit_redo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_clear, doc_QPlainTextEdit_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_selectAll, doc_QPlainTextEdit_selectAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_insertPlainText, "insertPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_insertPlainText, doc_QPlainTextEdit_insertPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_appendPlainText, "appendPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->appendPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_appendPlainText, doc_QPlainTextEdit_appendPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_appendHtml, "appendHtml(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->appendHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_appendHtml, doc_QPlainTextEdit_appendHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_centerCursor, "centerCursor(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            sipCpp->centerCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_centerCursor, doc_QPlainTextEdit_centerCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_event, doc_QPlainTextEdit_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_timerEvent, doc_QPlainTextEdit_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_keyPressEvent, doc_QPlainTextEdit_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_keyReleaseEvent, doc_QPlainTextEdit_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_resizeEvent, doc_QPlainTextEdit_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_paintEvent, doc_QPlainTextEdit_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mousePressEvent, doc_QPlainTextEdit_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseMoveEvent, doc_QPlainTextEdit_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseReleaseEvent, doc_QPlainTextEdit_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseDoubleClickEvent, doc_QPlainTextEdit_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusNextPrevChild, doc_QPlainTextEdit_focusNextPrevChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_contextMenuEvent, doc_QPlainTextEdit_contextMenuEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragEnterEvent, doc_QPlainTextEdit_dragEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragLeaveEvent, doc_QPlainTextEdit_dragLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragMoveEvent, doc_QPlainTextEdit_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dropEvent, doc_QPlainTextEdit_dropEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusInEvent, doc_QPlainTextEdit_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusOutEvent, doc_QPlainTextEdit_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_showEvent, doc_QPlainTextEdit_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_changeEvent, doc_QPlainTextEdit_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_wheelEvent, doc_QPlainTextEdit_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_inputMethodEvent, doc_QPlainTextEdit_inputMethodEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any\n"
"inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any");

extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
         ::Qt::InputMethodQuery a0;
         ::QVariant* a1;
        int a1State = 0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->inputMethodQuery(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_inputMethodQuery, doc_QPlainTextEdit_inputMethodQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_createMimeDataFromSelection, "createMimeDataFromSelection(self) -> QMimeData");

extern "C" {static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::createMimeDataFromSelection() : sipCpp->createMimeDataFromSelection());

            return sipConvertFromNewType(sipRes,sipType_QMimeData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_createMimeDataFromSelection, doc_QPlainTextEdit_createMimeDataFromSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_canInsertFromMimeData, "canInsertFromMimeData(self, QMimeData) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::canInsertFromMimeData(a0) : sipCpp->canInsertFromMimeData(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_canInsertFromMimeData, doc_QPlainTextEdit_canInsertFromMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_insertFromMimeData, "insertFromMimeData(self, QMimeData)");

extern "C" {static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::insertFromMimeData(a0) : sipCpp->insertFromMimeData(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_insertFromMimeData, doc_QPlainTextEdit_insertFromMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_scrollContentsBy, doc_QPlainTextEdit_scrollContentsBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_firstVisibleBlock, "firstVisibleBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->firstVisibleBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_firstVisibleBlock, doc_QPlainTextEdit_firstVisibleBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_contentOffset, "contentOffset(self) -> QPointF");

extern "C" {static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->contentOffset());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_contentOffset, doc_QPlainTextEdit_contentOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->blockBoundingRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockBoundingRect, doc_QPlainTextEdit_blockBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockBoundingGeometry, "blockBoundingGeometry(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->blockBoundingGeometry(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockBoundingGeometry, doc_QPlainTextEdit_blockBoundingGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_getPaintContext, "getPaintContext(self) -> QAbstractTextDocumentLayout.PaintContext");

extern "C" {static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QAbstractTextDocumentLayout::PaintContext*sipRes;

            sipRes = new  ::QAbstractTextDocumentLayout::PaintContext(sipCpp->getPaintContext());

            return sipConvertFromNewType(sipRes,sipType_QAbstractTextDocumentLayout_PaintContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_getPaintContext, doc_QPlainTextEdit_getPaintContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_anchorAt, "anchorAt(self, QPoint) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_anchorAt, doc_QPlainTextEdit_anchorAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_zoomIn, "zoomIn(self, range: int = 1)");

extern "C" {static PyObject *meth_QPlainTextEdit_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomIn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_zoomIn, doc_QPlainTextEdit_zoomIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_zoomOut, "zoomOut(self, range: int = 1)");

extern "C" {static PyObject *meth_QPlainTextEdit_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_zoomOut, doc_QPlainTextEdit_zoomOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setPlaceholderText, "setPlaceholderText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setPlaceholderText, doc_QPlainTextEdit_setPlaceholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_placeholderText, "placeholderText(self) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_placeholderText, doc_QPlainTextEdit_placeholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_tabStopDistance, "tabStopDistance(self) -> float");

extern "C" {static PyObject *meth_QPlainTextEdit_tabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStopDistance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_tabStopDistance, doc_QPlainTextEdit_tabStopDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTabStopDistance, "setTabStopDistance(self, float)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabStopDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTabStopDistance, doc_QPlainTextEdit_setTabStopDistance);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlainTextEdit(void *, const sipTypeDef *);}
static void *cast_QPlainTextEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlainTextEdit *sipCpp = reinterpret_cast< ::QPlainTextEdit *>(sipCppV);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextEdit(void *, int);}
static void release_QPlainTextEdit(void *sipCppV, int)
{
     ::QPlainTextEdit *sipCpp = reinterpret_cast< ::QPlainTextEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QPlainTextEdit(Py_ssize_t);}
static void *array_QPlainTextEdit(Py_ssize_t sipNrElem)
{
    return new  ::QPlainTextEdit[sipNrElem];
}


extern "C" {static void dealloc_QPlainTextEdit(sipSimpleWrapper *);}
static void dealloc_QPlainTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlainTextEdit *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlainTextEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlainTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlainTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlainTextEdit *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQPlainTextEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQPlainTextEdit(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextEdit[] = {{15, 255, 1}};


static PyMethodDef methods_QPlainTextEdit[] = {
    {sipName_anchorAt, meth_QPlainTextEdit_anchorAt, METH_VARARGS, doc_QPlainTextEdit_anchorAt},
    {sipName_appendHtml, meth_QPlainTextEdit_appendHtml, METH_VARARGS, doc_QPlainTextEdit_appendHtml},
    {sipName_appendPlainText, meth_QPlainTextEdit_appendPlainText, METH_VARARGS, doc_QPlainTextEdit_appendPlainText},
    {sipName_backgroundVisible, meth_QPlainTextEdit_backgroundVisible, METH_VARARGS, doc_QPlainTextEdit_backgroundVisible},
    {sipName_blockBoundingGeometry, meth_QPlainTextEdit_blockBoundingGeometry, METH_VARARGS, doc_QPlainTextEdit_blockBoundingGeometry},
    {sipName_blockBoundingRect, meth_QPlainTextEdit_blockBoundingRect, METH_VARARGS, doc_QPlainTextEdit_blockBoundingRect},
    {sipName_blockCount, meth_QPlainTextEdit_blockCount, METH_VARARGS, doc_QPlainTextEdit_blockCount},
    {sipName_canInsertFromMimeData, meth_QPlainTextEdit_canInsertFromMimeData, METH_VARARGS, doc_QPlainTextEdit_canInsertFromMimeData},
    {sipName_canPaste, meth_QPlainTextEdit_canPaste, METH_VARARGS, doc_QPlainTextEdit_canPaste},
    {sipName_centerCursor, meth_QPlainTextEdit_centerCursor, METH_VARARGS, doc_QPlainTextEdit_centerCursor},
    {sipName_centerOnScroll, meth_QPlainTextEdit_centerOnScroll, METH_VARARGS, doc_QPlainTextEdit_centerOnScroll},
    {sipName_changeEvent, meth_QPlainTextEdit_changeEvent, METH_VARARGS, doc_QPlainTextEdit_changeEvent},
    {sipName_clear, meth_QPlainTextEdit_clear, METH_VARARGS, doc_QPlainTextEdit_clear},
    {sipName_contentOffset, meth_QPlainTextEdit_contentOffset, METH_VARARGS, doc_QPlainTextEdit_contentOffset},
    {sipName_contextMenuEvent, meth_QPlainTextEdit_contextMenuEvent, METH_VARARGS, doc_QPlainTextEdit_contextMenuEvent},
    {sipName_copy, meth_QPlainTextEdit_copy, METH_VARARGS, doc_QPlainTextEdit_copy},
    {sipName_createMimeDataFromSelection, meth_QPlainTextEdit_createMimeDataFromSelection, METH_VARARGS, doc_QPlainTextEdit_createMimeDataFromSelection},
    {sipName_createStandardContextMenu, meth_QPlainTextEdit_createStandardContextMenu, METH_VARARGS, doc_QPlainTextEdit_createStandardContextMenu},
    {sipName_currentCharFormat, meth_QPlainTextEdit_currentCharFormat, METH_VARARGS, doc_QPlainTextEdit_currentCharFormat},
    {sipName_cursorForPosition, meth_QPlainTextEdit_cursorForPosition, METH_VARARGS, doc_QPlainTextEdit_cursorForPosition},
    {sipName_cursorRect, meth_QPlainTextEdit_cursorRect, METH_VARARGS, doc_QPlainTextEdit_cursorRect},
    {sipName_cursorWidth, meth_QPlainTextEdit_cursorWidth, METH_VARARGS, doc_QPlainTextEdit_cursorWidth},
    {sipName_cut, meth_QPlainTextEdit_cut, METH_VARARGS, doc_QPlainTextEdit_cut},
    {sipName_document, meth_QPlainTextEdit_document, METH_VARARGS, doc_QPlainTextEdit_document},
    {sipName_documentTitle, meth_QPlainTextEdit_documentTitle, METH_VARARGS, doc_QPlainTextEdit_documentTitle},
    {sipName_dragEnterEvent, meth_QPlainTextEdit_dragEnterEvent, METH_VARARGS, doc_QPlainTextEdit_dragEnterEvent},
    {sipName_dragLeaveEvent, meth_QPlainTextEdit_dragLeaveEvent, METH_VARARGS, doc_QPlainTextEdit_dragLeaveEvent},
    {sipName_dragMoveEvent, meth_QPlainTextEdit_dragMoveEvent, METH_VARARGS, doc_QPlainTextEdit_dragMoveEvent},
    {sipName_dropEvent, meth_QPlainTextEdit_dropEvent, METH_VARARGS, doc_QPlainTextEdit_dropEvent},
    {sipName_ensureCursorVisible, meth_QPlainTextEdit_ensureCursorVisible, METH_VARARGS, doc_QPlainTextEdit_ensureCursorVisible},
    {sipName_event, meth_QPlainTextEdit_event, METH_VARARGS, doc_QPlainTextEdit_event},
    {sipName_extraSelections, meth_QPlainTextEdit_extraSelections, METH_VARARGS, doc_QPlainTextEdit_extraSelections},
    {sipName_find, SIP_MLMETH_CAST(meth_QPlainTextEdit_find), METH_VARARGS|METH_KEYWORDS, doc_QPlainTextEdit_find},
    {sipName_firstVisibleBlock, meth_QPlainTextEdit_firstVisibleBlock, METH_VARARGS, doc_QPlainTextEdit_firstVisibleBlock},
    {sipName_focusInEvent, meth_QPlainTextEdit_focusInEvent, METH_VARARGS, doc_QPlainTextEdit_focusInEvent},
    {sipName_focusNextPrevChild, meth_QPlainTextEdit_focusNextPrevChild, METH_VARARGS, doc_QPlainTextEdit_focusNextPrevChild},
    {sipName_focusOutEvent, meth_QPlainTextEdit_focusOutEvent, METH_VARARGS, doc_QPlainTextEdit_focusOutEvent},
    {sipName_getPaintContext, meth_QPlainTextEdit_getPaintContext, METH_VARARGS, doc_QPlainTextEdit_getPaintContext},
    {sipName_inputMethodEvent, meth_QPlainTextEdit_inputMethodEvent, METH_VARARGS, doc_QPlainTextEdit_inputMethodEvent},
    {sipName_inputMethodQuery, meth_QPlainTextEdit_inputMethodQuery, METH_VARARGS, doc_QPlainTextEdit_inputMethodQuery},
    {sipName_insertFromMimeData, meth_QPlainTextEdit_insertFromMimeData, METH_VARARGS, doc_QPlainTextEdit_insertFromMimeData},
    {sipName_insertPlainText, meth_QPlainTextEdit_insertPlainText, METH_VARARGS, doc_QPlainTextEdit_insertPlainText},
    {sipName_isReadOnly, meth_QPlainTextEdit_isReadOnly, METH_VARARGS, doc_QPlainTextEdit_isReadOnly},
    {sipName_isUndoRedoEnabled, meth_QPlainTextEdit_isUndoRedoEnabled, METH_VARARGS, doc_QPlainTextEdit_isUndoRedoEnabled},
    {sipName_keyPressEvent, meth_QPlainTextEdit_keyPressEvent, METH_VARARGS, doc_QPlainTextEdit_keyPressEvent},
    {sipName_keyReleaseEvent, meth_QPlainTextEdit_keyReleaseEvent, METH_VARARGS, doc_QPlainTextEdit_keyReleaseEvent},
    {sipName_lineWrapMode, meth_QPlainTextEdit_lineWrapMode, METH_VARARGS, doc_QPlainTextEdit_lineWrapMode},
    {sipName_loadResource, meth_QPlainTextEdit_loadResource, METH_VARARGS, doc_QPlainTextEdit_loadResource},
    {sipName_maximumBlockCount, meth_QPlainTextEdit_maximumBlockCount, METH_VARARGS, doc_QPlainTextEdit_maximumBlockCount},
    {sipName_mergeCurrentCharFormat, meth_QPlainTextEdit_mergeCurrentCharFormat, METH_VARARGS, doc_QPlainTextEdit_mergeCurrentCharFormat},
    {sipName_mouseDoubleClickEvent, meth_QPlainTextEdit_mouseDoubleClickEvent, METH_VARARGS, doc_QPlainTextEdit_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QPlainTextEdit_mouseMoveEvent, METH_VARARGS, doc_QPlainTextEdit_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QPlainTextEdit_mousePressEvent, METH_VARARGS, doc_QPlainTextEdit_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QPlainTextEdit_mouseReleaseEvent, METH_VARARGS, doc_QPlainTextEdit_mouseReleaseEvent},
    {sipName_moveCursor, SIP_MLMETH_CAST(meth_QPlainTextEdit_moveCursor), METH_VARARGS|METH_KEYWORDS, doc_QPlainTextEdit_moveCursor},
    {sipName_overwriteMode, meth_QPlainTextEdit_overwriteMode, METH_VARARGS, doc_QPlainTextEdit_overwriteMode},
    {sipName_paintEvent, meth_QPlainTextEdit_paintEvent, METH_VARARGS, doc_QPlainTextEdit_paintEvent},
    {sipName_paste, meth_QPlainTextEdit_paste, METH_VARARGS, doc_QPlainTextEdit_paste},
    {sipName_placeholderText, meth_QPlainTextEdit_placeholderText, METH_VARARGS, doc_QPlainTextEdit_placeholderText},
    {sipName_print, meth_QPlainTextEdit_print, METH_VARARGS, doc_QPlainTextEdit_print},
    {sipName_print_, meth_QPlainTextEdit_print_, METH_VARARGS, doc_QPlainTextEdit_print_},
    {sipName_redo, meth_QPlainTextEdit_redo, METH_VARARGS, doc_QPlainTextEdit_redo},
    {sipName_resizeEvent, meth_QPlainTextEdit_resizeEvent, METH_VARARGS, doc_QPlainTextEdit_resizeEvent},
    {sipName_scrollContentsBy, meth_QPlainTextEdit_scrollContentsBy, METH_VARARGS, doc_QPlainTextEdit_scrollContentsBy},
    {sipName_selectAll, meth_QPlainTextEdit_selectAll, METH_VARARGS, doc_QPlainTextEdit_selectAll},
    {sipName_setBackgroundVisible, meth_QPlainTextEdit_setBackgroundVisible, METH_VARARGS, doc_QPlainTextEdit_setBackgroundVisible},
    {sipName_setCenterOnScroll, meth_QPlainTextEdit_setCenterOnScroll, METH_VARARGS, doc_QPlainTextEdit_setCenterOnScroll},
    {sipName_setCurrentCharFormat, meth_QPlainTextEdit_setCurrentCharFormat, METH_VARARGS, doc_QPlainTextEdit_setCurrentCharFormat},
    {sipName_setCursorWidth, meth_QPlainTextEdit_setCursorWidth, METH_VARARGS, doc_QPlainTextEdit_setCursorWidth},
    {sipName_setDocument, meth_QPlainTextEdit_setDocument, METH_VARARGS, doc_QPlainTextEdit_setDocument},
    {sipName_setDocumentTitle, meth_QPlainTextEdit_setDocumentTitle, METH_VARARGS, doc_QPlainTextEdit_setDocumentTitle},
    {sipName_setExtraSelections, meth_QPlainTextEdit_setExtraSelections, METH_VARARGS, doc_QPlainTextEdit_setExtraSelections},
    {sipName_setLineWrapMode, meth_QPlainTextEdit_setLineWrapMode, METH_VARARGS, doc_QPlainTextEdit_setLineWrapMode},
    {sipName_setMaximumBlockCount, meth_QPlainTextEdit_setMaximumBlockCount, METH_VARARGS, doc_QPlainTextEdit_setMaximumBlockCount},
    {sipName_setOverwriteMode, meth_QPlainTextEdit_setOverwriteMode, METH_VARARGS, doc_QPlainTextEdit_setOverwriteMode},
    {sipName_setPlaceholderText, meth_QPlainTextEdit_setPlaceholderText, METH_VARARGS, doc_QPlainTextEdit_setPlaceholderText},
    {sipName_setPlainText, meth_QPlainTextEdit_setPlainText, METH_VARARGS, doc_QPlainTextEdit_setPlainText},
    {sipName_setReadOnly, meth_QPlainTextEdit_setReadOnly, METH_VARARGS, doc_QPlainTextEdit_setReadOnly},
    {sipName_setTabChangesFocus, meth_QPlainTextEdit_setTabChangesFocus, METH_VARARGS, doc_QPlainTextEdit_setTabChangesFocus},
    {sipName_setTabStopDistance, meth_QPlainTextEdit_setTabStopDistance, METH_VARARGS, doc_QPlainTextEdit_setTabStopDistance},
    {sipName_setTabStopWidth, meth_QPlainTextEdit_setTabStopWidth, METH_VARARGS, doc_QPlainTextEdit_setTabStopWidth},
    {sipName_setTextCursor, meth_QPlainTextEdit_setTextCursor, METH_VARARGS, doc_QPlainTextEdit_setTextCursor},
    {sipName_setTextInteractionFlags, meth_QPlainTextEdit_setTextInteractionFlags, METH_VARARGS, doc_QPlainTextEdit_setTextInteractionFlags},
    {sipName_setUndoRedoEnabled, meth_QPlainTextEdit_setUndoRedoEnabled, METH_VARARGS, doc_QPlainTextEdit_setUndoRedoEnabled},
    {sipName_setWordWrapMode, meth_QPlainTextEdit_setWordWrapMode, METH_VARARGS, doc_QPlainTextEdit_setWordWrapMode},
    {sipName_showEvent, meth_QPlainTextEdit_showEvent, METH_VARARGS, doc_QPlainTextEdit_showEvent},
    {sipName_tabChangesFocus, meth_QPlainTextEdit_tabChangesFocus, METH_VARARGS, doc_QPlainTextEdit_tabChangesFocus},
    {sipName_tabStopDistance, meth_QPlainTextEdit_tabStopDistance, METH_VARARGS, doc_QPlainTextEdit_tabStopDistance},
    {sipName_tabStopWidth, meth_QPlainTextEdit_tabStopWidth, METH_VARARGS, doc_QPlainTextEdit_tabStopWidth},
    {sipName_textCursor, meth_QPlainTextEdit_textCursor, METH_VARARGS, doc_QPlainTextEdit_textCursor},
    {sipName_textInteractionFlags, meth_QPlainTextEdit_textInteractionFlags, METH_VARARGS, doc_QPlainTextEdit_textInteractionFlags},
    {sipName_timerEvent, meth_QPlainTextEdit_timerEvent, METH_VARARGS, doc_QPlainTextEdit_timerEvent},
    {sipName_toPlainText, meth_QPlainTextEdit_toPlainText, METH_VARARGS, doc_QPlainTextEdit_toPlainText},
    {sipName_undo, meth_QPlainTextEdit_undo, METH_VARARGS, doc_QPlainTextEdit_undo},
    {sipName_wheelEvent, meth_QPlainTextEdit_wheelEvent, METH_VARARGS, doc_QPlainTextEdit_wheelEvent},
    {sipName_wordWrapMode, meth_QPlainTextEdit_wordWrapMode, METH_VARARGS, doc_QPlainTextEdit_wordWrapMode},
    {sipName_zoomIn, SIP_MLMETH_CAST(meth_QPlainTextEdit_zoomIn), METH_VARARGS|METH_KEYWORDS, doc_QPlainTextEdit_zoomIn},
    {sipName_zoomOut, SIP_MLMETH_CAST(meth_QPlainTextEdit_zoomOut), METH_VARARGS|METH_KEYWORDS, doc_QPlainTextEdit_zoomOut}
};

static sipEnumMemberDef enummembers_QPlainTextEdit[] = {
    {sipName_NoWrap, static_cast<int>( ::QPlainTextEdit::NoWrap), 250},
    {sipName_WidgetWidth, static_cast<int>( ::QPlainTextEdit::WidgetWidth), 250},
};

PyDoc_STRVAR(doc_QPlainTextEdit, "\1QPlainTextEdit(parent: QWidget = None)\n"
"QPlainTextEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QPlainTextEdit[] = {
    {"modificationChanged(bool)", "\1modificationChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"blockCountChanged(int)", "\1blockCountChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"updateRequest(QRect,int)", "\1updateRequest(self, QRect, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"cursorPositionChanged()", "\1cursorPositionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"selectionChanged()", "\1selectionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"copyAvailable(bool)", "\1copyAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"redoAvailable(bool)", "\1redoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"undoAvailable(bool)", "\1undoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"textChanged()", "\1textChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QPlainTextEdit = {
    & ::QPlainTextEdit::staticMetaObject,
    0,
    signals_QPlainTextEdit,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QPlainTextEdit = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextEdit,
        SIP_NULLPTR,
        &plugin_QPlainTextEdit
    },
    {
        sipNameNr_QPlainTextEdit,
        {0, 0, 1},
        98, methods_QPlainTextEdit,
        2, enummembers_QPlainTextEdit,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPlainTextEdit,
    -1,
    -1,
    supers_QPlainTextEdit,
    SIP_NULLPTR,
    init_type_QPlainTextEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPlainTextEdit,
    SIP_NULLPTR,
    array_QPlainTextEdit,
    SIP_NULLPTR,
    release_QPlainTextEdit,
    cast_QPlainTextEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
