/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTableWidgetSelectionRange.cpp"



PyDoc_STRVAR(doc_QTableWidgetSelectionRange_topRow, "topRow(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_topRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_topRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->topRow();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_topRow, doc_QTableWidgetSelectionRange_topRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTableWidgetSelectionRange_bottomRow, "bottomRow(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_bottomRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_bottomRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottomRow();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_bottomRow, doc_QTableWidgetSelectionRange_bottomRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTableWidgetSelectionRange_leftColumn, "leftColumn(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_leftColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_leftColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->leftColumn();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_leftColumn, doc_QTableWidgetSelectionRange_leftColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTableWidgetSelectionRange_rightColumn, "rightColumn(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_rightColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_rightColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rightColumn();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_rightColumn, doc_QTableWidgetSelectionRange_rightColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTableWidgetSelectionRange_rowCount, "rowCount(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_rowCount, doc_QTableWidgetSelectionRange_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTableWidgetSelectionRange_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QTableWidgetSelectionRange_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetSelectionRange_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTableWidgetSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTableWidgetSelectionRange, sipName_columnCount, doc_QTableWidgetSelectionRange_columnCount);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableWidgetSelectionRange(void *, int);}
static void release_QTableWidgetSelectionRange(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTableWidgetSelectionRange *>(sipCppV);
}


extern "C" {static void *array_QTableWidgetSelectionRange(Py_ssize_t);}
static void *array_QTableWidgetSelectionRange(Py_ssize_t sipNrElem)
{
    return new  ::QTableWidgetSelectionRange[sipNrElem];
}


extern "C" {static void assign_QTableWidgetSelectionRange(void *, Py_ssize_t, void *);}
static void assign_QTableWidgetSelectionRange(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTableWidgetSelectionRange *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTableWidgetSelectionRange *>(sipSrc);
}


extern "C" {static void *copy_QTableWidgetSelectionRange(const void *, Py_ssize_t);}
static void *copy_QTableWidgetSelectionRange(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTableWidgetSelectionRange(reinterpret_cast<const  ::QTableWidgetSelectionRange *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTableWidgetSelectionRange(sipSimpleWrapper *);}
static void dealloc_QTableWidgetSelectionRange(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTableWidgetSelectionRange(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTableWidgetSelectionRange(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTableWidgetSelectionRange(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTableWidgetSelectionRange *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTableWidgetSelectionRange();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QTableWidgetSelectionRange(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QTableWidgetSelectionRange* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTableWidgetSelectionRange, &a0))
        {
            sipCpp = new  ::QTableWidgetSelectionRange(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTableWidgetSelectionRange[] = {
    {sipName_bottomRow, meth_QTableWidgetSelectionRange_bottomRow, METH_VARARGS, doc_QTableWidgetSelectionRange_bottomRow},
    {sipName_columnCount, meth_QTableWidgetSelectionRange_columnCount, METH_VARARGS, doc_QTableWidgetSelectionRange_columnCount},
    {sipName_leftColumn, meth_QTableWidgetSelectionRange_leftColumn, METH_VARARGS, doc_QTableWidgetSelectionRange_leftColumn},
    {sipName_rightColumn, meth_QTableWidgetSelectionRange_rightColumn, METH_VARARGS, doc_QTableWidgetSelectionRange_rightColumn},
    {sipName_rowCount, meth_QTableWidgetSelectionRange_rowCount, METH_VARARGS, doc_QTableWidgetSelectionRange_rowCount},
    {sipName_topRow, meth_QTableWidgetSelectionRange_topRow, METH_VARARGS, doc_QTableWidgetSelectionRange_topRow}
};

PyDoc_STRVAR(doc_QTableWidgetSelectionRange, "\1QTableWidgetSelectionRange()\n"
"QTableWidgetSelectionRange(int, int, int, int)\n"
"QTableWidgetSelectionRange(QTableWidgetSelectionRange)");


static pyqt5ClassPluginDef plugin_QTableWidgetSelectionRange = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTableWidgetSelectionRange = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTableWidgetSelectionRange,
        SIP_NULLPTR,
        &plugin_QTableWidgetSelectionRange
    },
    {
        sipNameNr_QTableWidgetSelectionRange,
        {0, 0, 1},
        6, methods_QTableWidgetSelectionRange,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTableWidgetSelectionRange,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTableWidgetSelectionRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTableWidgetSelectionRange,
    assign_QTableWidgetSelectionRange,
    array_QTableWidgetSelectionRange,
    copy_QTableWidgetSelectionRange,
    release_QTableWidgetSelectionRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
