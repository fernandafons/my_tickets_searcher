/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qcompleter.sip"
#include <qcompleter.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 208 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 218 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 221 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQLineEdit.cpp"


class sipQLineEdit : public  ::QLineEdit
{
public:
    sipQLineEdit( ::QWidget*);
    sipQLineEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQLineEdit();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLineEdit(const sipQLineEdit &);
    sipQLineEdit &operator = (const sipQLineEdit &);

    char sipPyMethods[46];
};

sipQLineEdit::sipQLineEdit( ::QWidget*a0):  ::QLineEdit(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::sipQLineEdit(const  ::QString& a0, ::QWidget*a1):  ::QLineEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::~sipQLineEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLineEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLineEdit);

    return  ::QLineEdit::metaObject();
}

int sipQLineEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLineEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLineEdit,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQLineEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLineEdit, _clname, &sipCpp) ? sipCpp :  ::QLineEdit::qt_metacast(_clname));
}

void sipQLineEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QLineEdit::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQLineEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QLineEdit::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLineEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QLineEdit::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQLineEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QLineEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLineEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QLineEdit::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLineEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQLineEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QLineEdit::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQLineEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QLineEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLineEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QLineEdit::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQLineEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QLineEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QLineEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[42]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[42]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QLineEdit::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLineEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QLineEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQLineEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QLineEdit::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLineEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QLineEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLineEdit_text, "text(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_text(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_text, doc_QLineEdit_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_displayText, "displayText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_displayText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_displayText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_displayText, doc_QLineEdit_displayText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_maxLength, "maxLength(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_maxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_maxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxLength();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_maxLength, doc_QLineEdit_maxLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setMaxLength, "setMaxLength(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setMaxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setMaxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setMaxLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setMaxLength, doc_QLineEdit_setMaxLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setFrame, "setFrame(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setFrame, doc_QLineEdit_setFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_hasFrame, "hasFrame(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasFrame, doc_QLineEdit_hasFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_echoMode, "echoMode(self) -> QLineEdit.EchoMode");

extern "C" {static PyObject *meth_QLineEdit_echoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_echoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QLineEdit::EchoMode sipRes;

            sipRes = sipCpp->echoMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLineEdit_EchoMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_echoMode, doc_QLineEdit_echoMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setEchoMode, "setEchoMode(self, QLineEdit.EchoMode)");

extern "C" {static PyObject *meth_QLineEdit_setEchoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setEchoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit::EchoMode a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QLineEdit_EchoMode, &a0))
        {
            sipCpp->setEchoMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setEchoMode, doc_QLineEdit_setEchoMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isReadOnly, doc_QLineEdit_isReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setReadOnly, doc_QLineEdit_setReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setValidator, "setValidator(self, QValidator)");

extern "C" {static PyObject *meth_QLineEdit_setValidator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QValidator* a0;
        PyObject *a0Keep;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QValidator, &a0))
        {
            sipCpp->setValidator(a0);

            sipKeepReference(sipSelf, -34, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setValidator, doc_QLineEdit_setValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_validator, "validator(self) -> QValidator");

extern "C" {static PyObject *meth_QLineEdit_validator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_validator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            const  ::QValidator*sipRes;

            sipRes = sipCpp->validator();

            return sipConvertFromType(const_cast< ::QValidator *>(sipRes),sipType_QValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_validator, doc_QLineEdit_validator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLineEdit::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_sizeHint, doc_QLineEdit_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLineEdit::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_minimumSizeHint, doc_QLineEdit_minimumSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPosition, "cursorPosition(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorPosition();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPosition, doc_QLineEdit_cursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorPosition, "setCursorPosition(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorPosition, doc_QLineEdit_setCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPositionAt, "cursorPositionAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->cursorPositionAt(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPositionAt, doc_QLineEdit_cursorPositionAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QLineEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setAlignment, doc_QLineEdit_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QLineEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_alignment, doc_QLineEdit_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorForward, "cursorForward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorForward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorForward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 1;
         ::QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorForward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorForward, doc_QLineEdit_cursorForward);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorBackward, "cursorBackward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorBackward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorBackward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 1;
         ::QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorBackward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorBackward, doc_QLineEdit_cursorBackward);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordForward, "cursorWordForward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordForward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordForward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordForward, doc_QLineEdit_cursorWordForward);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordBackward, "cursorWordBackward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordBackward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordBackward, doc_QLineEdit_cursorWordBackward);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_backspace, "backspace(self)");

extern "C" {static PyObject *meth_QLineEdit_backspace(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_backspace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->backspace();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_backspace, doc_QLineEdit_backspace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_del_, "del_(self)");

extern "C" {static PyObject *meth_QLineEdit_del_(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_del_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->del();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_del_, doc_QLineEdit_del_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_home, "home(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_home(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_home(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->home(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_home, doc_QLineEdit_home);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_end, "end(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_end(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->end(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_end, doc_QLineEdit_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isModified, doc_QLineEdit_isModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setModified, "setModified(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setModified, doc_QLineEdit_setModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setSelection, "setSelection(self, int, int)");

extern "C" {static PyObject *meth_QLineEdit_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->setSelection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setSelection, doc_QLineEdit_setSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_hasSelectedText, "hasSelectedText(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelectedText();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasSelectedText, doc_QLineEdit_hasSelectedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectedText, doc_QLineEdit_selectedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_selectionStart, "selectionStart(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionStart, doc_QLineEdit_selectionStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_isUndoAvailable, "isUndoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isUndoAvailable, doc_QLineEdit_isUndoAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_isRedoAvailable, "isRedoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRedoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isRedoAvailable, doc_QLineEdit_isRedoAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setDragEnabled, doc_QLineEdit_setDragEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnabled, "dragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnabled, doc_QLineEdit_dragEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_inputMask, "inputMask(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_inputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->inputMask());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMask, doc_QLineEdit_inputMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setInputMask, "setInputMask(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setInputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setInputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInputMask(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setInputMask, doc_QLineEdit_setInputMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_hasAcceptableInput, "hasAcceptableInput(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAcceptableInput();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasAcceptableInput, doc_QLineEdit_hasAcceptableInput);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setText, doc_QLineEdit_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QLineEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_clear, doc_QLineEdit_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QLineEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectAll, doc_QLineEdit_selectAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QLineEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_undo, doc_QLineEdit_undo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QLineEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_redo, doc_QLineEdit_redo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QLineEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cut, doc_QLineEdit_cut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QLineEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_copy, doc_QLineEdit_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QLineEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paste, doc_QLineEdit_paste);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_deselect, "deselect(self)");

extern "C" {static PyObject *meth_QLineEdit_deselect(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_deselect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->deselect();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_deselect, doc_QLineEdit_deselect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_insert, "insert(self, str)");

extern "C" {static PyObject *meth_QLineEdit_insert(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insert(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_insert, doc_QLineEdit_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_createStandardContextMenu, doc_QLineEdit_createStandardContextMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_initStyleOption, "initStyleOption(self, QStyleOptionFrame)");

extern "C" {static PyObject *meth_QLineEdit_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionFrame* a0;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QStyleOptionFrame, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_initStyleOption, doc_QLineEdit_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mousePressEvent, doc_QLineEdit_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseMoveEvent, doc_QLineEdit_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseReleaseEvent, doc_QLineEdit_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseDoubleClickEvent, doc_QLineEdit_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QLineEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_keyPressEvent, doc_QLineEdit_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusInEvent, doc_QLineEdit_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusOutEvent, doc_QLineEdit_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QLineEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paintEvent, doc_QLineEdit_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnterEvent, doc_QLineEdit_dragEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragMoveEvent, doc_QLineEdit_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragLeaveEvent, doc_QLineEdit_dragLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QLineEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dropEvent, doc_QLineEdit_dropEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_changeEvent, doc_QLineEdit_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_contextMenuEvent, doc_QLineEdit_contextMenuEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QLineEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodEvent, doc_QLineEdit_inputMethodEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorRect, "cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QLineEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorRect, doc_QLineEdit_cursorRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any\n"
"inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any");

extern "C" {static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QLineEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
         ::Qt::InputMethodQuery a0;
         ::QVariant* a1;
        int a1State = 0;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->inputMethodQuery(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodQuery, doc_QLineEdit_inputMethodQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QLineEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLineEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_event, doc_QLineEdit_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setCompleter, "setCompleter(self, QCompleter)");

extern "C" {static PyObject *meth_QLineEdit_setCompleter(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCompleter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCompleter* a0;
        PyObject *a0Keep;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QCompleter, &a0))
        {
            sipCpp->setCompleter(a0);

            sipKeepReference(sipSelf, -35, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCompleter, doc_QLineEdit_setCompleter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_completer, "completer(self) -> QCompleter");

extern "C" {static PyObject *meth_QLineEdit_completer(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_completer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QCompleter*sipRes;

            sipRes = sipCpp->completer();

            return sipConvertFromType(sipRes,sipType_QCompleter,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_completer, doc_QLineEdit_completer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setTextMargins, "setTextMargins(self, int, int, int, int)\n"
"setTextMargins(self, QMargins)");

extern "C" {static PyObject *meth_QLineEdit_setTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setTextMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QMargins* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->setTextMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setTextMargins, doc_QLineEdit_setTextMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_getTextMargins, "getTextMargins(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QLineEdit_getTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_getTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->getTextMargins(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_getTextMargins, doc_QLineEdit_getTextMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_textMargins, "textMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QLineEdit_textMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_textMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->textMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_textMargins, doc_QLineEdit_textMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_placeholderText, "placeholderText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_placeholderText, doc_QLineEdit_placeholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setPlaceholderText, "setPlaceholderText(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setPlaceholderText, doc_QLineEdit_setPlaceholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorMoveStyle, "setCursorMoveStyle(self, Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CursorMoveStyle a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorMoveStyle, doc_QLineEdit_setCursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_cursorMoveStyle, "cursorMoveStyle(self) -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->cursorMoveStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CursorMoveStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorMoveStyle, doc_QLineEdit_cursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_setClearButtonEnabled, "setClearButtonEnabled(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setClearButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setClearButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setClearButtonEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setClearButtonEnabled, doc_QLineEdit_setClearButtonEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_isClearButtonEnabled, "isClearButtonEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isClearButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isClearButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClearButtonEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isClearButtonEnabled, doc_QLineEdit_isClearButtonEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_addAction, "addAction(self, QAction)\n"
"addAction(self, QAction, QLineEdit.ActionPosition)\n"
"addAction(self, QIcon, QLineEdit.ActionPosition) -> QAction");

extern "C" {static PyObject *meth_QLineEdit_addAction(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_addAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->addAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QAction* a0;
         ::QLineEdit::ActionPosition a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8E", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QAction, &a0, sipType_QLineEdit_ActionPosition, &a1))
        {
            sipCpp->addAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QIcon* a0;
         ::QLineEdit::ActionPosition a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QIcon, &a0, sipType_QLineEdit_ActionPosition, &a1))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->addAction(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_addAction, doc_QLineEdit_addAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_selectionEnd, "selectionEnd(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionEnd(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionEnd();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionEnd, doc_QLineEdit_selectionEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineEdit_selectionLength, "selectionLength(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionLength();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionLength, doc_QLineEdit_selectionLength);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLineEdit(void *, const sipTypeDef *);}
static void *cast_QLineEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLineEdit *sipCpp = reinterpret_cast< ::QLineEdit *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLineEdit(void *, int);}
static void release_QLineEdit(void *sipCppV, int)
{
     ::QLineEdit *sipCpp = reinterpret_cast< ::QLineEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QLineEdit(Py_ssize_t);}
static void *array_QLineEdit(Py_ssize_t sipNrElem)
{
    return new  ::QLineEdit[sipNrElem];
}


extern "C" {static void dealloc_QLineEdit(sipSimpleWrapper *);}
static void dealloc_QLineEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLineEdit *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLineEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLineEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLineEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLineEdit *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQLineEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQLineEdit(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLineEdit[] = {{458, 255, 1}};


static PyMethodDef methods_QLineEdit[] = {
    {sipName_addAction, meth_QLineEdit_addAction, METH_VARARGS, doc_QLineEdit_addAction},
    {sipName_alignment, meth_QLineEdit_alignment, METH_VARARGS, doc_QLineEdit_alignment},
    {sipName_backspace, meth_QLineEdit_backspace, METH_VARARGS, doc_QLineEdit_backspace},
    {sipName_changeEvent, meth_QLineEdit_changeEvent, METH_VARARGS, doc_QLineEdit_changeEvent},
    {sipName_clear, meth_QLineEdit_clear, METH_VARARGS, doc_QLineEdit_clear},
    {sipName_completer, meth_QLineEdit_completer, METH_VARARGS, doc_QLineEdit_completer},
    {sipName_contextMenuEvent, meth_QLineEdit_contextMenuEvent, METH_VARARGS, doc_QLineEdit_contextMenuEvent},
    {sipName_copy, meth_QLineEdit_copy, METH_VARARGS, doc_QLineEdit_copy},
    {sipName_createStandardContextMenu, meth_QLineEdit_createStandardContextMenu, METH_VARARGS, doc_QLineEdit_createStandardContextMenu},
    {sipName_cursorBackward, SIP_MLMETH_CAST(meth_QLineEdit_cursorBackward), METH_VARARGS|METH_KEYWORDS, doc_QLineEdit_cursorBackward},
    {sipName_cursorForward, SIP_MLMETH_CAST(meth_QLineEdit_cursorForward), METH_VARARGS|METH_KEYWORDS, doc_QLineEdit_cursorForward},
    {sipName_cursorMoveStyle, meth_QLineEdit_cursorMoveStyle, METH_VARARGS, doc_QLineEdit_cursorMoveStyle},
    {sipName_cursorPosition, meth_QLineEdit_cursorPosition, METH_VARARGS, doc_QLineEdit_cursorPosition},
    {sipName_cursorPositionAt, meth_QLineEdit_cursorPositionAt, METH_VARARGS, doc_QLineEdit_cursorPositionAt},
    {sipName_cursorRect, meth_QLineEdit_cursorRect, METH_VARARGS, doc_QLineEdit_cursorRect},
    {sipName_cursorWordBackward, meth_QLineEdit_cursorWordBackward, METH_VARARGS, doc_QLineEdit_cursorWordBackward},
    {sipName_cursorWordForward, meth_QLineEdit_cursorWordForward, METH_VARARGS, doc_QLineEdit_cursorWordForward},
    {sipName_cut, meth_QLineEdit_cut, METH_VARARGS, doc_QLineEdit_cut},
    {sipName_del_, meth_QLineEdit_del_, METH_VARARGS, doc_QLineEdit_del_},
    {sipName_deselect, meth_QLineEdit_deselect, METH_VARARGS, doc_QLineEdit_deselect},
    {sipName_displayText, meth_QLineEdit_displayText, METH_VARARGS, doc_QLineEdit_displayText},
    {sipName_dragEnabled, meth_QLineEdit_dragEnabled, METH_VARARGS, doc_QLineEdit_dragEnabled},
    {sipName_dragEnterEvent, meth_QLineEdit_dragEnterEvent, METH_VARARGS, doc_QLineEdit_dragEnterEvent},
    {sipName_dragLeaveEvent, meth_QLineEdit_dragLeaveEvent, METH_VARARGS, doc_QLineEdit_dragLeaveEvent},
    {sipName_dragMoveEvent, meth_QLineEdit_dragMoveEvent, METH_VARARGS, doc_QLineEdit_dragMoveEvent},
    {sipName_dropEvent, meth_QLineEdit_dropEvent, METH_VARARGS, doc_QLineEdit_dropEvent},
    {sipName_echoMode, meth_QLineEdit_echoMode, METH_VARARGS, doc_QLineEdit_echoMode},
    {sipName_end, meth_QLineEdit_end, METH_VARARGS, doc_QLineEdit_end},
    {sipName_event, meth_QLineEdit_event, METH_VARARGS, doc_QLineEdit_event},
    {sipName_focusInEvent, meth_QLineEdit_focusInEvent, METH_VARARGS, doc_QLineEdit_focusInEvent},
    {sipName_focusOutEvent, meth_QLineEdit_focusOutEvent, METH_VARARGS, doc_QLineEdit_focusOutEvent},
    {sipName_getTextMargins, meth_QLineEdit_getTextMargins, METH_VARARGS, doc_QLineEdit_getTextMargins},
    {sipName_hasAcceptableInput, meth_QLineEdit_hasAcceptableInput, METH_VARARGS, doc_QLineEdit_hasAcceptableInput},
    {sipName_hasFrame, meth_QLineEdit_hasFrame, METH_VARARGS, doc_QLineEdit_hasFrame},
    {sipName_hasSelectedText, meth_QLineEdit_hasSelectedText, METH_VARARGS, doc_QLineEdit_hasSelectedText},
    {sipName_home, meth_QLineEdit_home, METH_VARARGS, doc_QLineEdit_home},
    {sipName_initStyleOption, meth_QLineEdit_initStyleOption, METH_VARARGS, doc_QLineEdit_initStyleOption},
    {sipName_inputMask, meth_QLineEdit_inputMask, METH_VARARGS, doc_QLineEdit_inputMask},
    {sipName_inputMethodEvent, meth_QLineEdit_inputMethodEvent, METH_VARARGS, doc_QLineEdit_inputMethodEvent},
    {sipName_inputMethodQuery, meth_QLineEdit_inputMethodQuery, METH_VARARGS, doc_QLineEdit_inputMethodQuery},
    {sipName_insert, meth_QLineEdit_insert, METH_VARARGS, doc_QLineEdit_insert},
    {sipName_isClearButtonEnabled, meth_QLineEdit_isClearButtonEnabled, METH_VARARGS, doc_QLineEdit_isClearButtonEnabled},
    {sipName_isModified, meth_QLineEdit_isModified, METH_VARARGS, doc_QLineEdit_isModified},
    {sipName_isReadOnly, meth_QLineEdit_isReadOnly, METH_VARARGS, doc_QLineEdit_isReadOnly},
    {sipName_isRedoAvailable, meth_QLineEdit_isRedoAvailable, METH_VARARGS, doc_QLineEdit_isRedoAvailable},
    {sipName_isUndoAvailable, meth_QLineEdit_isUndoAvailable, METH_VARARGS, doc_QLineEdit_isUndoAvailable},
    {sipName_keyPressEvent, meth_QLineEdit_keyPressEvent, METH_VARARGS, doc_QLineEdit_keyPressEvent},
    {sipName_maxLength, meth_QLineEdit_maxLength, METH_VARARGS, doc_QLineEdit_maxLength},
    {sipName_minimumSizeHint, meth_QLineEdit_minimumSizeHint, METH_VARARGS, doc_QLineEdit_minimumSizeHint},
    {sipName_mouseDoubleClickEvent, meth_QLineEdit_mouseDoubleClickEvent, METH_VARARGS, doc_QLineEdit_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QLineEdit_mouseMoveEvent, METH_VARARGS, doc_QLineEdit_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QLineEdit_mousePressEvent, METH_VARARGS, doc_QLineEdit_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QLineEdit_mouseReleaseEvent, METH_VARARGS, doc_QLineEdit_mouseReleaseEvent},
    {sipName_paintEvent, meth_QLineEdit_paintEvent, METH_VARARGS, doc_QLineEdit_paintEvent},
    {sipName_paste, meth_QLineEdit_paste, METH_VARARGS, doc_QLineEdit_paste},
    {sipName_placeholderText, meth_QLineEdit_placeholderText, METH_VARARGS, doc_QLineEdit_placeholderText},
    {sipName_redo, meth_QLineEdit_redo, METH_VARARGS, doc_QLineEdit_redo},
    {sipName_selectAll, meth_QLineEdit_selectAll, METH_VARARGS, doc_QLineEdit_selectAll},
    {sipName_selectedText, meth_QLineEdit_selectedText, METH_VARARGS, doc_QLineEdit_selectedText},
    {sipName_selectionEnd, meth_QLineEdit_selectionEnd, METH_VARARGS, doc_QLineEdit_selectionEnd},
    {sipName_selectionLength, meth_QLineEdit_selectionLength, METH_VARARGS, doc_QLineEdit_selectionLength},
    {sipName_selectionStart, meth_QLineEdit_selectionStart, METH_VARARGS, doc_QLineEdit_selectionStart},
    {sipName_setAlignment, meth_QLineEdit_setAlignment, METH_VARARGS, doc_QLineEdit_setAlignment},
    {sipName_setClearButtonEnabled, meth_QLineEdit_setClearButtonEnabled, METH_VARARGS, doc_QLineEdit_setClearButtonEnabled},
    {sipName_setCompleter, meth_QLineEdit_setCompleter, METH_VARARGS, doc_QLineEdit_setCompleter},
    {sipName_setCursorMoveStyle, meth_QLineEdit_setCursorMoveStyle, METH_VARARGS, doc_QLineEdit_setCursorMoveStyle},
    {sipName_setCursorPosition, meth_QLineEdit_setCursorPosition, METH_VARARGS, doc_QLineEdit_setCursorPosition},
    {sipName_setDragEnabled, meth_QLineEdit_setDragEnabled, METH_VARARGS, doc_QLineEdit_setDragEnabled},
    {sipName_setEchoMode, meth_QLineEdit_setEchoMode, METH_VARARGS, doc_QLineEdit_setEchoMode},
    {sipName_setFrame, meth_QLineEdit_setFrame, METH_VARARGS, doc_QLineEdit_setFrame},
    {sipName_setInputMask, meth_QLineEdit_setInputMask, METH_VARARGS, doc_QLineEdit_setInputMask},
    {sipName_setMaxLength, meth_QLineEdit_setMaxLength, METH_VARARGS, doc_QLineEdit_setMaxLength},
    {sipName_setModified, meth_QLineEdit_setModified, METH_VARARGS, doc_QLineEdit_setModified},
    {sipName_setPlaceholderText, meth_QLineEdit_setPlaceholderText, METH_VARARGS, doc_QLineEdit_setPlaceholderText},
    {sipName_setReadOnly, meth_QLineEdit_setReadOnly, METH_VARARGS, doc_QLineEdit_setReadOnly},
    {sipName_setSelection, meth_QLineEdit_setSelection, METH_VARARGS, doc_QLineEdit_setSelection},
    {sipName_setText, meth_QLineEdit_setText, METH_VARARGS, doc_QLineEdit_setText},
    {sipName_setTextMargins, meth_QLineEdit_setTextMargins, METH_VARARGS, doc_QLineEdit_setTextMargins},
    {sipName_setValidator, meth_QLineEdit_setValidator, METH_VARARGS, doc_QLineEdit_setValidator},
    {sipName_sizeHint, meth_QLineEdit_sizeHint, METH_VARARGS, doc_QLineEdit_sizeHint},
    {sipName_text, meth_QLineEdit_text, METH_VARARGS, doc_QLineEdit_text},
    {sipName_textMargins, meth_QLineEdit_textMargins, METH_VARARGS, doc_QLineEdit_textMargins},
    {sipName_undo, meth_QLineEdit_undo, METH_VARARGS, doc_QLineEdit_undo},
    {sipName_validator, meth_QLineEdit_validator, METH_VARARGS, doc_QLineEdit_validator}
};

static sipEnumMemberDef enummembers_QLineEdit[] = {
    {sipName_LeadingPosition, static_cast<int>( ::QLineEdit::LeadingPosition), 192},
    {sipName_NoEcho, static_cast<int>( ::QLineEdit::NoEcho), 193},
    {sipName_Normal, static_cast<int>( ::QLineEdit::Normal), 193},
    {sipName_Password, static_cast<int>( ::QLineEdit::Password), 193},
    {sipName_PasswordEchoOnEdit, static_cast<int>( ::QLineEdit::PasswordEchoOnEdit), 193},
    {sipName_TrailingPosition, static_cast<int>( ::QLineEdit::TrailingPosition), 192},
};

PyDoc_STRVAR(doc_QLineEdit, "\1QLineEdit(parent: QWidget = None)\n"
"QLineEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLineEdit[] = {
    {"inputRejected()", "\1inputRejected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"selectionChanged()", "\1selectionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"editingFinished()", "\1editingFinished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"returnPressed()", "\1returnPressed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"cursorPositionChanged(int,int)", "\1cursorPositionChanged(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"textEdited(QString)", "\1textEdited(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"textChanged(QString)", "\1textChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QLineEdit = {
    & ::QLineEdit::staticMetaObject,
    0,
    signals_QLineEdit,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QLineEdit = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLineEdit,
        SIP_NULLPTR,
        &plugin_QLineEdit
    },
    {
        sipNameNr_QLineEdit,
        {0, 0, 1},
        84, methods_QLineEdit,
        6, enummembers_QLineEdit,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLineEdit,
    -1,
    -1,
    supers_QLineEdit,
    SIP_NULLPTR,
    init_type_QLineEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QLineEdit,
    SIP_NULLPTR,
    array_QLineEdit,
    SIP_NULLPTR,
    release_QLineEdit,
    cast_QLineEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
