/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 297 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 147 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 560 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 231 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 237 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 240 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 243 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 246 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 249 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 252 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 255 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 258 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 266 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 269 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 272 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 275 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 278 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 281 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 284 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 287 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 290 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 293 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"


class sipQHeaderView : public  ::QHeaderView
{
public:
    sipQHeaderView( ::Qt::Orientation, ::QWidget*);
    virtual ~sipQHeaderView();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSize sectionSizeFromContents(int) const SIP_OVERRIDE;
    void paintSection( ::QPainter*,const  ::QRect&,int) const SIP_OVERRIDE;
    void setupViewport( ::QWidget*) SIP_OVERRIDE;
    void scrollContentsBy(int,int) SIP_OVERRIDE;
    bool viewportEvent( ::QEvent*) SIP_OVERRIDE;
     ::QSize viewportSizeHint() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void setModel( ::QAbstractItemModel*) SIP_OVERRIDE;
    void setSelectionModel( ::QItemSelectionModel*) SIP_OVERRIDE;
    void keyboardSearch(const  ::QString&) SIP_OVERRIDE;
     ::QRect visualRect(const  ::QModelIndex&) const SIP_OVERRIDE;
    void scrollTo(const  ::QModelIndex&, ::QAbstractItemView::ScrollHint) SIP_OVERRIDE;
     ::QModelIndex indexAt(const  ::QPoint&) const SIP_OVERRIDE;
    int sizeHintForRow(int) const SIP_OVERRIDE;
    int sizeHintForColumn(int) const SIP_OVERRIDE;
    void reset() SIP_OVERRIDE;
    void setRootIndex(const  ::QModelIndex&) SIP_OVERRIDE;
    void selectAll() SIP_OVERRIDE;
    void dataChanged(const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&) SIP_OVERRIDE;
    void rowsInserted(const  ::QModelIndex&,int,int) SIP_OVERRIDE;
    void rowsAboutToBeRemoved(const  ::QModelIndex&,int,int) SIP_OVERRIDE;
    void selectionChanged(const  ::QItemSelection&,const  ::QItemSelection&) SIP_OVERRIDE;
    void currentChanged(const  ::QModelIndex&,const  ::QModelIndex&) SIP_OVERRIDE;
    void updateEditorData() SIP_OVERRIDE;
    void updateEditorGeometries() SIP_OVERRIDE;
    void updateGeometries() SIP_OVERRIDE;
    void verticalScrollbarAction(int) SIP_OVERRIDE;
    void horizontalScrollbarAction(int) SIP_OVERRIDE;
    void verticalScrollbarValueChanged(int) SIP_OVERRIDE;
    void horizontalScrollbarValueChanged(int) SIP_OVERRIDE;
    void closeEditor( ::QWidget*, ::QAbstractItemDelegate::EndEditHint) SIP_OVERRIDE;
    void commitData( ::QWidget*) SIP_OVERRIDE;
    void editorDestroyed( ::QObject*) SIP_OVERRIDE;
     ::QModelIndex moveCursor( ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers) SIP_OVERRIDE;
    int horizontalOffset() const SIP_OVERRIDE;
    int verticalOffset() const SIP_OVERRIDE;
    bool isIndexHidden(const  ::QModelIndex&) const SIP_OVERRIDE;
    void setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
     ::QRegion visualRegionForSelection(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QModelIndexList selectedIndexes() const SIP_OVERRIDE;
    bool edit(const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*) SIP_OVERRIDE;
     ::QItemSelectionModel::SelectionFlags selectionCommand(const  ::QModelIndex&,const  ::QEvent*) const SIP_OVERRIDE;
    void startDrag( ::Qt::DropActions) SIP_OVERRIDE;
     ::QStyleOptionViewItem viewOptions() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHeaderView(const sipQHeaderView &);
    sipQHeaderView &operator = (const sipQHeaderView &);

    char sipPyMethods[89];
};

sipQHeaderView::sipQHeaderView( ::Qt::Orientation a0, ::QWidget*a1):  ::QHeaderView(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHeaderView::~sipQHeaderView()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQHeaderView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QHeaderView);

    return  ::QHeaderView::metaObject();
}

int sipQHeaderView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHeaderView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QHeaderView,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQHeaderView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QHeaderView, _clname, &sipCpp) ? sipCpp :  ::QHeaderView::qt_metacast(_clname));
}

 ::QSize sipQHeaderView::sectionSizeFromContents(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sectionSizeFromContents);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_sectionSizeFromContents);
#endif

    if (!sipMeth)
        return  ::QHeaderView::sectionSizeFromContents(a0);

    extern  ::QSize sipVH_QtWidgets_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_166(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintSection( ::QPainter*a0,const  ::QRect& a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintSection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_paintSection);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::paintSection(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_165(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int);

    sipVH_QtWidgets_165(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_setupViewport);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_setupViewport);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQHeaderView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_viewportEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_viewportEvent);
#endif

    if (!sipMeth)
        return  ::QHeaderView::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQHeaderView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewportSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_viewportSizeHint);
#endif

    if (!sipMeth)
        return  ::QHeaderView::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQHeaderView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QHeaderView::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QHeaderView::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQHeaderView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QHeaderView::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QHeaderView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQHeaderView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QHeaderView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QHeaderView::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQHeaderView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[39]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[39]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QHeaderView::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQHeaderView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QHeaderView::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[42]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[42]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QHeaderView::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQHeaderView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[43]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[43]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QHeaderView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQHeaderView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QHeaderView::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QHeaderView::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QHeaderView::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_setModel);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], sipPySelf, SIP_NULLPTR, sipName_setModel);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtWidgets_48(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelectionModel( ::QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_setSelectionModel);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], sipPySelf, SIP_NULLPTR, sipName_setSelectionModel);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QItemSelectionModel*);

    sipVH_QtWidgets_49(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyboardSearch(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[54], &sipPySelf, SIP_NULLPTR, sipName_keyboardSearch);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[54], sipPySelf, SIP_NULLPTR, sipName_keyboardSearch);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::keyboardSearch(a0);
        return;
    }

    extern void sipVH_QtWidgets_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtWidgets_50(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRect sipQHeaderView::visualRect(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[55]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_visualRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[55]), sipPySelf, SIP_NULLPTR, sipName_visualRect);
#endif

    if (!sipMeth)
        return  ::QHeaderView::visualRect(a0);

    extern  ::QRect sipVH_QtWidgets_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_51(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::scrollTo(const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[56], &sipPySelf, SIP_NULLPTR, sipName_scrollTo);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[56], sipPySelf, SIP_NULLPTR, sipName_scrollTo);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_52(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQHeaderView::indexAt(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[57]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_indexAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[57]), sipPySelf, SIP_NULLPTR, sipName_indexAt);
#endif

    if (!sipMeth)
        return  ::QHeaderView::indexAt(a0);

    extern  ::QModelIndex sipVH_QtWidgets_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtWidgets_53(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[58]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHintForRow);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[58]), sipPySelf, SIP_NULLPTR, sipName_sizeHintForRow);
#endif

    if (!sipMeth)
        return  ::QHeaderView::sizeHintForRow(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[59]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHintForColumn);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[59]), sipPySelf, SIP_NULLPTR, sipName_sizeHintForColumn);
#endif

    if (!sipMeth)
        return  ::QHeaderView::sizeHintForColumn(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[60], &sipPySelf, SIP_NULLPTR, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[60], sipPySelf, SIP_NULLPTR, sipName_reset);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::reset();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::setRootIndex(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[61], &sipPySelf, SIP_NULLPTR, sipName_setRootIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[61], sipPySelf, SIP_NULLPTR, sipName_setRootIndex);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setRootIndex(a0);
        return;
    }

    extern void sipVH_QtWidgets_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtWidgets_54(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[62], &sipPySelf, SIP_NULLPTR, sipName_selectAll);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[62], sipPySelf, SIP_NULLPTR, sipName_selectAll);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::selectAll();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::dataChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[63], &sipPySelf, SIP_NULLPTR, sipName_dataChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[63], sipPySelf, SIP_NULLPTR, sipName_dataChanged);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);

    sipVH_QtWidgets_55(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::rowsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[64], &sipPySelf, SIP_NULLPTR, sipName_rowsInserted);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[64], sipPySelf, SIP_NULLPTR, sipName_rowsInserted);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::rowsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[65], &sipPySelf, SIP_NULLPTR, sipName_rowsAboutToBeRemoved);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[65], sipPySelf, SIP_NULLPTR, sipName_rowsAboutToBeRemoved);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::selectionChanged(const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[66], &sipPySelf, SIP_NULLPTR, sipName_selectionChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[66], sipPySelf, SIP_NULLPTR, sipName_selectionChanged);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&,const  ::QItemSelection&);

    sipVH_QtWidgets_57(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::currentChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[67], &sipPySelf, SIP_NULLPTR, sipName_currentChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[67], sipPySelf, SIP_NULLPTR, sipName_currentChanged);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtWidgets_58(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[68], &sipPySelf, SIP_NULLPTR, sipName_updateEditorData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[68], sipPySelf, SIP_NULLPTR, sipName_updateEditorData);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::updateEditorData();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[69], &sipPySelf, SIP_NULLPTR, sipName_updateEditorGeometries);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[69], sipPySelf, SIP_NULLPTR, sipName_updateEditorGeometries);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::updateEditorGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[70], &sipPySelf, SIP_NULLPTR, sipName_updateGeometries);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[70], sipPySelf, SIP_NULLPTR, sipName_updateGeometries);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::updateGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[71], &sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarAction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[71], sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarAction);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[72], &sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarAction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[72], sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarAction);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[73], &sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarValueChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[73], sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarValueChanged);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[74], &sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarValueChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[74], sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarValueChanged);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEditor( ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[75], &sipPySelf, SIP_NULLPTR, sipName_closeEditor);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[75], sipPySelf, SIP_NULLPTR, sipName_closeEditor);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*, ::QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_60(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::commitData( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[76], &sipPySelf, SIP_NULLPTR, sipName_commitData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[76], sipPySelf, SIP_NULLPTR, sipName_commitData);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::editorDestroyed( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[77], &sipPySelf, SIP_NULLPTR, sipName_editorDestroyed);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[77], sipPySelf, SIP_NULLPTR, sipName_editorDestroyed);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtWidgets_61(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQHeaderView::moveCursor( ::QAbstractItemView::CursorAction a0, ::Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[78], &sipPySelf, SIP_NULLPTR, sipName_moveCursor);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[78], sipPySelf, SIP_NULLPTR, sipName_moveCursor);
#endif

    if (!sipMeth)
        return  ::QHeaderView::moveCursor(a0,a1);

    extern  ::QModelIndex sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);

    return sipVH_QtWidgets_62(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

int sipQHeaderView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[79]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_horizontalOffset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[79]), sipPySelf, SIP_NULLPTR, sipName_horizontalOffset);
#endif

    if (!sipMeth)
        return  ::QHeaderView::horizontalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQHeaderView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[80]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_verticalOffset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[80]), sipPySelf, SIP_NULLPTR, sipName_verticalOffset);
#endif

    if (!sipMeth)
        return  ::QHeaderView::verticalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::isIndexHidden(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[81]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isIndexHidden);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[81]), sipPySelf, SIP_NULLPTR, sipName_isIndexHidden);
#endif

    if (!sipMeth)
        return  ::QHeaderView::isIndexHidden(a0);

    extern bool sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_63(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[82], &sipPySelf, SIP_NULLPTR, sipName_setSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[82], sipPySelf, SIP_NULLPTR, sipName_setSelection);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_64(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QRegion sipQHeaderView::visualRegionForSelection(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[83]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_visualRegionForSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[83]), sipPySelf, SIP_NULLPTR, sipName_visualRegionForSelection);
#endif

    if (!sipMeth)
        return  ::QHeaderView::visualRegionForSelection(a0);

    extern  ::QRegion sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtWidgets_65(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQHeaderView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[84]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_selectedIndexes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[84]), sipPySelf, SIP_NULLPTR, sipName_selectedIndexes);
#endif

    if (!sipMeth)
        return  ::QHeaderView::selectedIndexes();

    extern  ::QModelIndexList sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_66(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::edit(const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[85], &sipPySelf, SIP_NULLPTR, sipName_edit);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[85], sipPySelf, SIP_NULLPTR, sipName_edit);
#endif

    if (!sipMeth)
        return  ::QHeaderView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);

    return sipVH_QtWidgets_67(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QItemSelectionModel::SelectionFlags sipQHeaderView::selectionCommand(const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[86]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_selectionCommand);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[86]), sipPySelf, SIP_NULLPTR, sipName_selectionCommand);
#endif

    if (!sipMeth)
        return  ::QHeaderView::selectionCommand(a0,a1);

    extern  ::QItemSelectionModel::SelectionFlags sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QEvent*);

    return sipVH_QtWidgets_68(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::startDrag( ::Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[87], &sipPySelf, SIP_NULLPTR, sipName_startDrag);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[87], sipPySelf, SIP_NULLPTR, sipName_startDrag);
#endif

    if (!sipMeth)
    {
         ::QHeaderView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::DropActions);

    sipVH_QtWidgets_69(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QStyleOptionViewItem sipQHeaderView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[88]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewOptions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[88]), sipPySelf, SIP_NULLPTR, sipName_viewOptions);
#endif

    if (!sipMeth)
        return  ::QHeaderView::viewOptions();

    extern  ::QStyleOptionViewItem sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_70(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QHeaderView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QHeaderView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHeaderView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -29, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setModel, doc_QHeaderView_setModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QHeaderView_orientation(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_Orientation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_orientation, doc_QHeaderView_orientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_offset, "offset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_offset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->offset();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_offset, doc_QHeaderView_offset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_length, "length(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_length(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_length, doc_QHeaderView_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QHeaderView::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sizeHint, doc_QHeaderView_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeHint, "sectionSizeHint(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSizeHint(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeHint, doc_QHeaderView_sectionSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndexAt, "visualIndexAt(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndexAt(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndexAt, doc_QHeaderView_visualIndexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndexAt, "logicalIndexAt(self, int) -> int\n"
"logicalIndexAt(self, int, int) -> int\n"
"logicalIndexAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0,a1);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndexAt, doc_QHeaderView_logicalIndexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSize, "sectionSize(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSize(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSize, doc_QHeaderView_sectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionPosition, "sectionPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionPosition(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionPosition, doc_QHeaderView_sectionPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionViewportPosition, "sectionViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionViewportPosition(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionViewportPosition, doc_QHeaderView_sectionViewportPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_moveSection, "moveSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_moveSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->moveSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveSection, doc_QHeaderView_moveSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSection, "resizeSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_resizeSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->resizeSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSection, doc_QHeaderView_resizeSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_isSectionHidden, "isSectionHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSectionHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSectionHidden, doc_QHeaderView_isSectionHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionHidden, "setSectionHidden(self, int, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->setSectionHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionHidden, doc_QHeaderView_setSectionHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_count, "count(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_count(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_count, doc_QHeaderView_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndex, "visualIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndex(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndex, doc_QHeaderView_visualIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndex, "logicalIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndex(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndex, doc_QHeaderView_logicalIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setHighlightSections, "setHighlightSections(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setHighlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setHighlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setHighlightSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setHighlightSections, doc_QHeaderView_setHighlightSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_highlightSections, "highlightSections(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_highlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_highlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->highlightSections();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_highlightSections, doc_QHeaderView_highlightSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_stretchSectionCount, "stretchSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stretchSectionCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchSectionCount, doc_QHeaderView_stretchSectionCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicatorShown, "setSortIndicatorShown(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSortIndicatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicatorShown, doc_QHeaderView_setSortIndicatorShown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_isSortIndicatorShown, "isSortIndicatorShown(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortIndicatorShown();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSortIndicatorShown, doc_QHeaderView_isSortIndicatorShown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicator, "setSortIndicator(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::SortOrder a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->setSortIndicator(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicator, doc_QHeaderView_setSortIndicator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorSection, "sortIndicatorSection(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortIndicatorSection();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorSection, doc_QHeaderView_sortIndicatorSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorOrder, "sortIndicatorOrder(self) -> Qt.SortOrder");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::SortOrder sipRes;

            sipRes = sipCpp->sortIndicatorOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_SortOrder);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorOrder, doc_QHeaderView_sortIndicatorOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_stretchLastSection, "stretchLastSection(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_stretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stretchLastSection();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchLastSection, doc_QHeaderView_stretchLastSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setStretchLastSection, "setStretchLastSection(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setStretchLastSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setStretchLastSection, doc_QHeaderView_setStretchLastSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMoved, "sectionsMoved(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMoved(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMoved();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMoved, doc_QHeaderView_sectionsMoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setOffset, "setOffset(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffset, doc_QHeaderView_setOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_headerDataChanged, "headerDataChanged(self, Qt.Orientation, int, int)");

extern "C" {static PyObject *meth_QHeaderView_headerDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_headerDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientation a0;
        int a1;
        int a2;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Orientation, &a0, &a1, &a2))
        {
            sipCpp->headerDataChanged(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_headerDataChanged, doc_QHeaderView_headerDataChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToSectionPosition, "setOffsetToSectionPosition(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffsetToSectionPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToSectionPosition, doc_QHeaderView_setOffsetToSectionPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_updateSection, "updateSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_updateSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->updateSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateSection, doc_QHeaderView_updateSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSections, "resizeSections(self)\n"
"resizeSections(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_resizeSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->resizeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QHeaderView::ResizeMode a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->resizeSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSections, doc_QHeaderView_resizeSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsInserted, "sectionsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsInserted(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sectionsInserted(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsInserted, doc_QHeaderView_sectionsInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsAboutToBeRemoved, "sectionsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sectionsAboutToBeRemoved(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsAboutToBeRemoved, doc_QHeaderView_sectionsAboutToBeRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_initialize, "initialize(self)");

extern "C" {static PyObject *meth_QHeaderView_initialize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initialize, doc_QHeaderView_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_initializeSections, "initializeSections(self)\n"
"initializeSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_initializeSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initializeSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->initializeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->initializeSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initializeSections, doc_QHeaderView_initializeSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QHeaderView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_currentChanged, doc_QHeaderView_currentChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_event(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHeaderView::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_event, doc_QHeaderView_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHeaderView::viewportEvent(a0) : sipCpp->viewportEvent(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewportEvent, doc_QHeaderView_viewportEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QHeaderView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintEvent, doc_QHeaderView_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mousePressEvent, doc_QHeaderView_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseMoveEvent, doc_QHeaderView_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseReleaseEvent, doc_QHeaderView_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseDoubleClickEvent, doc_QHeaderView_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_paintSection, "paintSection(self, QPainter, QRect, int)");

extern "C" {static PyObject *meth_QHeaderView_paintSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        int a2;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9i", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::paintSection(a0,*a1,a2) : sipCpp->paintSection(a0,*a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintSection, doc_QHeaderView_paintSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeFromContents, "sectionSizeFromContents(self, int) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QHeaderView::sectionSizeFromContents(a0) : sipCpp->sectionSizeFromContents(a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeFromContents, doc_QHeaderView_sectionSizeFromContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHeaderView::horizontalOffset() : sipCpp->horizontalOffset());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_horizontalOffset, doc_QHeaderView_horizontalOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHeaderView::verticalOffset() : sipCpp->verticalOffset());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_verticalOffset, doc_QHeaderView_verticalOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QHeaderView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::updateGeometries() : sipCpp->updateGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateGeometries, doc_QHeaderView_updateGeometries);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollContentsBy, doc_QHeaderView_scrollContentsBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QHeaderView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;
         ::QHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "pJ9J9|J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::dataChanged(*a0,*a1,*a2) : sipCpp->dataChanged(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dataChanged, doc_QHeaderView_dataChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_rowsInserted, doc_QHeaderView_rowsInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QHeaderView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QHeaderView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRect, doc_QHeaderView_visualRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_scrollTo, "scrollTo(self, QModelIndex, QAbstractItemView.ScrollHint)");

extern "C" {static PyObject *meth_QHeaderView_scrollTo(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::ScrollHint a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9E", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollTo, doc_QHeaderView_scrollTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPoint* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QHeaderView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_indexAt, doc_QHeaderView_indexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHeaderView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isIndexHidden, doc_QHeaderView_isIndexHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemView::CursorAction a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QHeaderView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveCursor, doc_QHeaderView_moveCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QHeaderView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSelection, doc_QHeaderView_setSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((sipSelfWasArg ? sipCpp-> ::QHeaderView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRegionForSelection, doc_QHeaderView_visualRegionForSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_hideSection, "hideSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_hideSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hideSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->hideSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hideSection, doc_QHeaderView_hideSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_showSection, "showSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_showSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_showSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->showSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_showSection, doc_QHeaderView_showSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_hiddenSectionCount, "hiddenSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hiddenSectionCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hiddenSectionCount, doc_QHeaderView_hiddenSectionCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_defaultSectionSize, "defaultSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->defaultSectionSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultSectionSize, doc_QHeaderView_defaultSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultSectionSize, "setDefaultSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setDefaultSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultSectionSize, doc_QHeaderView_setDefaultSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_defaultAlignment, "defaultAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QHeaderView_defaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->defaultAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultAlignment, doc_QHeaderView_defaultAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultAlignment, "setDefaultAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setDefaultAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultAlignment, doc_QHeaderView_setDefaultAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsHidden, "sectionsHidden(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsHidden, doc_QHeaderView_sectionsHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_swapSections, "swapSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_swapSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_swapSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->swapSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_swapSections, doc_QHeaderView_swapSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_cascadingSectionResizes, "cascadingSectionResizes(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cascadingSectionResizes();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_cascadingSectionResizes, doc_QHeaderView_cascadingSectionResizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setCascadingSectionResizes, "setCascadingSectionResizes(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setCascadingSectionResizes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setCascadingSectionResizes, doc_QHeaderView_setCascadingSectionResizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_minimumSectionSize, "minimumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumSectionSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_minimumSectionSize, doc_QHeaderView_minimumSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setMinimumSectionSize, "setMinimumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMinimumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMinimumSectionSize, doc_QHeaderView_setMinimumSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_saveState, "saveState(self) -> QByteArray");

extern "C" {static PyObject *meth_QHeaderView_saveState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->saveState());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_saveState, doc_QHeaderView_saveState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QHeaderView_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_restoreState, doc_QHeaderView_restoreState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_reset, "reset(self)");

extern "C" {static PyObject *meth_QHeaderView_reset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_reset, doc_QHeaderView_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToLastSection, "setOffsetToLastSection(self)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->setOffsetToLastSection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToLastSection, doc_QHeaderView_setOffsetToLastSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_initStyleOption, "initStyleOption(self, QStyleOptionHeader)");

extern "C" {static PyObject *meth_QHeaderView_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionHeader* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QStyleOptionHeader, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initStyleOption, doc_QHeaderView_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsMovable, "setSectionsMovable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsMovable, doc_QHeaderView_setSectionsMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMovable, "sectionsMovable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMovable, doc_QHeaderView_sectionsMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsClickable, "setSectionsClickable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsClickable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsClickable, doc_QHeaderView_setSectionsClickable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsClickable, "sectionsClickable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsClickable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsClickable, doc_QHeaderView_sectionsClickable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_sectionResizeMode, "sectionResizeMode(self, int) -> QHeaderView.ResizeMode");

extern "C" {static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
             ::QHeaderView::ResizeMode sipRes;

            sipRes = sipCpp->sectionResizeMode(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QHeaderView_ResizeMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionResizeMode, doc_QHeaderView_sectionResizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionResizeMode, "setSectionResizeMode(self, int, QHeaderView.ResizeMode)\n"
"setSectionResizeMode(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView::ResizeMode a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_QHeaderView_ResizeMode, &a1))
        {
            sipCpp->setSectionResizeMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QHeaderView::ResizeMode a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->setSectionResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionResizeMode, doc_QHeaderView_setSectionResizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setVisible, doc_QHeaderView_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setResizeContentsPrecision, "setResizeContentsPrecision(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setResizeContentsPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setResizeContentsPrecision, doc_QHeaderView_setResizeContentsPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_resizeContentsPrecision, "resizeContentsPrecision(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->resizeContentsPrecision();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeContentsPrecision, doc_QHeaderView_resizeContentsPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_maximumSectionSize, "maximumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumSectionSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_maximumSectionSize, doc_QHeaderView_maximumSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setMaximumSectionSize, "setMaximumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMaximumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMaximumSectionSize, doc_QHeaderView_setMaximumSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_resetDefaultSectionSize, "resetDefaultSectionSize(self)");

extern "C" {static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->resetDefaultSectionSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resetDefaultSectionSize, doc_QHeaderView_resetDefaultSectionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_setFirstSectionMovable, "setFirstSectionMovable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setFirstSectionMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setFirstSectionMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setFirstSectionMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setFirstSectionMovable, doc_QHeaderView_setFirstSectionMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHeaderView_isFirstSectionMovable, "isFirstSectionMovable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isFirstSectionMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isFirstSectionMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstSectionMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isFirstSectionMovable, doc_QHeaderView_isFirstSectionMovable);

    return SIP_NULLPTR;
}


extern "C" {static Py_ssize_t slot_QHeaderView___len__(PyObject *);}
static Py_ssize_t slot_QHeaderView___len__(PyObject *sipSelf)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHeaderView));

    if (!sipCpp)
        return 0;


    {
        {
            Py_ssize_t sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (Py_ssize_t)sipCpp->count();
#line 5098 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQHeaderView.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHeaderView(void *, const sipTypeDef *);}
static void *cast_QHeaderView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipCppV);

    if (targetType == sipType_QAbstractItemView)
        return static_cast< ::QAbstractItemView *>(sipCpp);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHeaderView(void *, int);}
static void release_QHeaderView(void *sipCppV, int)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHeaderView(sipSimpleWrapper *);}
static void dealloc_QHeaderView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHeaderView *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHeaderView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHeaderView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHeaderView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHeaderView *sipCpp = SIP_NULLPTR;

    {
         ::Qt::Orientation a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Qt_Orientation, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQHeaderView(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHeaderView[] = {{4, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QHeaderView[] = {
    {(void *)slot_QHeaderView___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHeaderView[] = {
    {sipName_cascadingSectionResizes, meth_QHeaderView_cascadingSectionResizes, METH_VARARGS, doc_QHeaderView_cascadingSectionResizes},
    {sipName_count, meth_QHeaderView_count, METH_VARARGS, doc_QHeaderView_count},
    {sipName_currentChanged, meth_QHeaderView_currentChanged, METH_VARARGS, doc_QHeaderView_currentChanged},
    {sipName_dataChanged, SIP_MLMETH_CAST(meth_QHeaderView_dataChanged), METH_VARARGS|METH_KEYWORDS, doc_QHeaderView_dataChanged},
    {sipName_defaultAlignment, meth_QHeaderView_defaultAlignment, METH_VARARGS, doc_QHeaderView_defaultAlignment},
    {sipName_defaultSectionSize, meth_QHeaderView_defaultSectionSize, METH_VARARGS, doc_QHeaderView_defaultSectionSize},
    {sipName_event, meth_QHeaderView_event, METH_VARARGS, doc_QHeaderView_event},
    {sipName_headerDataChanged, meth_QHeaderView_headerDataChanged, METH_VARARGS, doc_QHeaderView_headerDataChanged},
    {sipName_hiddenSectionCount, meth_QHeaderView_hiddenSectionCount, METH_VARARGS, doc_QHeaderView_hiddenSectionCount},
    {sipName_hideSection, meth_QHeaderView_hideSection, METH_VARARGS, doc_QHeaderView_hideSection},
    {sipName_highlightSections, meth_QHeaderView_highlightSections, METH_VARARGS, doc_QHeaderView_highlightSections},
    {sipName_horizontalOffset, meth_QHeaderView_horizontalOffset, METH_VARARGS, doc_QHeaderView_horizontalOffset},
    {sipName_indexAt, meth_QHeaderView_indexAt, METH_VARARGS, doc_QHeaderView_indexAt},
    {sipName_initStyleOption, meth_QHeaderView_initStyleOption, METH_VARARGS, doc_QHeaderView_initStyleOption},
    {sipName_initialize, meth_QHeaderView_initialize, METH_VARARGS, doc_QHeaderView_initialize},
    {sipName_initializeSections, meth_QHeaderView_initializeSections, METH_VARARGS, doc_QHeaderView_initializeSections},
    {sipName_isFirstSectionMovable, meth_QHeaderView_isFirstSectionMovable, METH_VARARGS, doc_QHeaderView_isFirstSectionMovable},
    {sipName_isIndexHidden, meth_QHeaderView_isIndexHidden, METH_VARARGS, doc_QHeaderView_isIndexHidden},
    {sipName_isSectionHidden, meth_QHeaderView_isSectionHidden, METH_VARARGS, doc_QHeaderView_isSectionHidden},
    {sipName_isSortIndicatorShown, meth_QHeaderView_isSortIndicatorShown, METH_VARARGS, doc_QHeaderView_isSortIndicatorShown},
    {sipName_length, meth_QHeaderView_length, METH_VARARGS, doc_QHeaderView_length},
    {sipName_logicalIndex, meth_QHeaderView_logicalIndex, METH_VARARGS, doc_QHeaderView_logicalIndex},
    {sipName_logicalIndexAt, meth_QHeaderView_logicalIndexAt, METH_VARARGS, doc_QHeaderView_logicalIndexAt},
    {sipName_maximumSectionSize, meth_QHeaderView_maximumSectionSize, METH_VARARGS, doc_QHeaderView_maximumSectionSize},
    {sipName_minimumSectionSize, meth_QHeaderView_minimumSectionSize, METH_VARARGS, doc_QHeaderView_minimumSectionSize},
    {sipName_mouseDoubleClickEvent, meth_QHeaderView_mouseDoubleClickEvent, METH_VARARGS, doc_QHeaderView_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QHeaderView_mouseMoveEvent, METH_VARARGS, doc_QHeaderView_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QHeaderView_mousePressEvent, METH_VARARGS, doc_QHeaderView_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QHeaderView_mouseReleaseEvent, METH_VARARGS, doc_QHeaderView_mouseReleaseEvent},
    {sipName_moveCursor, meth_QHeaderView_moveCursor, METH_VARARGS, doc_QHeaderView_moveCursor},
    {sipName_moveSection, meth_QHeaderView_moveSection, METH_VARARGS, doc_QHeaderView_moveSection},
    {sipName_offset, meth_QHeaderView_offset, METH_VARARGS, doc_QHeaderView_offset},
    {sipName_orientation, meth_QHeaderView_orientation, METH_VARARGS, doc_QHeaderView_orientation},
    {sipName_paintEvent, meth_QHeaderView_paintEvent, METH_VARARGS, doc_QHeaderView_paintEvent},
    {sipName_paintSection, meth_QHeaderView_paintSection, METH_VARARGS, doc_QHeaderView_paintSection},
    {sipName_reset, meth_QHeaderView_reset, METH_VARARGS, doc_QHeaderView_reset},
    {sipName_resetDefaultSectionSize, meth_QHeaderView_resetDefaultSectionSize, METH_VARARGS, doc_QHeaderView_resetDefaultSectionSize},
    {sipName_resizeContentsPrecision, meth_QHeaderView_resizeContentsPrecision, METH_VARARGS, doc_QHeaderView_resizeContentsPrecision},
    {sipName_resizeSection, meth_QHeaderView_resizeSection, METH_VARARGS, doc_QHeaderView_resizeSection},
    {sipName_resizeSections, meth_QHeaderView_resizeSections, METH_VARARGS, doc_QHeaderView_resizeSections},
    {sipName_restoreState, meth_QHeaderView_restoreState, METH_VARARGS, doc_QHeaderView_restoreState},
    {sipName_rowsInserted, meth_QHeaderView_rowsInserted, METH_VARARGS, doc_QHeaderView_rowsInserted},
    {sipName_saveState, meth_QHeaderView_saveState, METH_VARARGS, doc_QHeaderView_saveState},
    {sipName_scrollContentsBy, meth_QHeaderView_scrollContentsBy, METH_VARARGS, doc_QHeaderView_scrollContentsBy},
    {sipName_scrollTo, meth_QHeaderView_scrollTo, METH_VARARGS, doc_QHeaderView_scrollTo},
    {sipName_sectionPosition, meth_QHeaderView_sectionPosition, METH_VARARGS, doc_QHeaderView_sectionPosition},
    {sipName_sectionResizeMode, meth_QHeaderView_sectionResizeMode, METH_VARARGS, doc_QHeaderView_sectionResizeMode},
    {sipName_sectionSize, meth_QHeaderView_sectionSize, METH_VARARGS, doc_QHeaderView_sectionSize},
    {sipName_sectionSizeFromContents, meth_QHeaderView_sectionSizeFromContents, METH_VARARGS, doc_QHeaderView_sectionSizeFromContents},
    {sipName_sectionSizeHint, meth_QHeaderView_sectionSizeHint, METH_VARARGS, doc_QHeaderView_sectionSizeHint},
    {sipName_sectionViewportPosition, meth_QHeaderView_sectionViewportPosition, METH_VARARGS, doc_QHeaderView_sectionViewportPosition},
    {sipName_sectionsAboutToBeRemoved, meth_QHeaderView_sectionsAboutToBeRemoved, METH_VARARGS, doc_QHeaderView_sectionsAboutToBeRemoved},
    {sipName_sectionsClickable, meth_QHeaderView_sectionsClickable, METH_VARARGS, doc_QHeaderView_sectionsClickable},
    {sipName_sectionsHidden, meth_QHeaderView_sectionsHidden, METH_VARARGS, doc_QHeaderView_sectionsHidden},
    {sipName_sectionsInserted, meth_QHeaderView_sectionsInserted, METH_VARARGS, doc_QHeaderView_sectionsInserted},
    {sipName_sectionsMovable, meth_QHeaderView_sectionsMovable, METH_VARARGS, doc_QHeaderView_sectionsMovable},
    {sipName_sectionsMoved, meth_QHeaderView_sectionsMoved, METH_VARARGS, doc_QHeaderView_sectionsMoved},
    {sipName_setCascadingSectionResizes, meth_QHeaderView_setCascadingSectionResizes, METH_VARARGS, doc_QHeaderView_setCascadingSectionResizes},
    {sipName_setDefaultAlignment, meth_QHeaderView_setDefaultAlignment, METH_VARARGS, doc_QHeaderView_setDefaultAlignment},
    {sipName_setDefaultSectionSize, meth_QHeaderView_setDefaultSectionSize, METH_VARARGS, doc_QHeaderView_setDefaultSectionSize},
    {sipName_setFirstSectionMovable, meth_QHeaderView_setFirstSectionMovable, METH_VARARGS, doc_QHeaderView_setFirstSectionMovable},
    {sipName_setHighlightSections, meth_QHeaderView_setHighlightSections, METH_VARARGS, doc_QHeaderView_setHighlightSections},
    {sipName_setMaximumSectionSize, meth_QHeaderView_setMaximumSectionSize, METH_VARARGS, doc_QHeaderView_setMaximumSectionSize},
    {sipName_setMinimumSectionSize, meth_QHeaderView_setMinimumSectionSize, METH_VARARGS, doc_QHeaderView_setMinimumSectionSize},
    {sipName_setModel, meth_QHeaderView_setModel, METH_VARARGS, doc_QHeaderView_setModel},
    {sipName_setOffset, meth_QHeaderView_setOffset, METH_VARARGS, doc_QHeaderView_setOffset},
    {sipName_setOffsetToLastSection, meth_QHeaderView_setOffsetToLastSection, METH_VARARGS, doc_QHeaderView_setOffsetToLastSection},
    {sipName_setOffsetToSectionPosition, meth_QHeaderView_setOffsetToSectionPosition, METH_VARARGS, doc_QHeaderView_setOffsetToSectionPosition},
    {sipName_setResizeContentsPrecision, meth_QHeaderView_setResizeContentsPrecision, METH_VARARGS, doc_QHeaderView_setResizeContentsPrecision},
    {sipName_setSectionHidden, meth_QHeaderView_setSectionHidden, METH_VARARGS, doc_QHeaderView_setSectionHidden},
    {sipName_setSectionResizeMode, meth_QHeaderView_setSectionResizeMode, METH_VARARGS, doc_QHeaderView_setSectionResizeMode},
    {sipName_setSectionsClickable, meth_QHeaderView_setSectionsClickable, METH_VARARGS, doc_QHeaderView_setSectionsClickable},
    {sipName_setSectionsMovable, meth_QHeaderView_setSectionsMovable, METH_VARARGS, doc_QHeaderView_setSectionsMovable},
    {sipName_setSelection, meth_QHeaderView_setSelection, METH_VARARGS, doc_QHeaderView_setSelection},
    {sipName_setSortIndicator, meth_QHeaderView_setSortIndicator, METH_VARARGS, doc_QHeaderView_setSortIndicator},
    {sipName_setSortIndicatorShown, meth_QHeaderView_setSortIndicatorShown, METH_VARARGS, doc_QHeaderView_setSortIndicatorShown},
    {sipName_setStretchLastSection, meth_QHeaderView_setStretchLastSection, METH_VARARGS, doc_QHeaderView_setStretchLastSection},
    {sipName_setVisible, meth_QHeaderView_setVisible, METH_VARARGS, doc_QHeaderView_setVisible},
    {sipName_showSection, meth_QHeaderView_showSection, METH_VARARGS, doc_QHeaderView_showSection},
    {sipName_sizeHint, meth_QHeaderView_sizeHint, METH_VARARGS, doc_QHeaderView_sizeHint},
    {sipName_sortIndicatorOrder, meth_QHeaderView_sortIndicatorOrder, METH_VARARGS, doc_QHeaderView_sortIndicatorOrder},
    {sipName_sortIndicatorSection, meth_QHeaderView_sortIndicatorSection, METH_VARARGS, doc_QHeaderView_sortIndicatorSection},
    {sipName_stretchLastSection, meth_QHeaderView_stretchLastSection, METH_VARARGS, doc_QHeaderView_stretchLastSection},
    {sipName_stretchSectionCount, meth_QHeaderView_stretchSectionCount, METH_VARARGS, doc_QHeaderView_stretchSectionCount},
    {sipName_swapSections, meth_QHeaderView_swapSections, METH_VARARGS, doc_QHeaderView_swapSections},
    {sipName_updateGeometries, meth_QHeaderView_updateGeometries, METH_VARARGS, doc_QHeaderView_updateGeometries},
    {sipName_updateSection, meth_QHeaderView_updateSection, METH_VARARGS, doc_QHeaderView_updateSection},
    {sipName_verticalOffset, meth_QHeaderView_verticalOffset, METH_VARARGS, doc_QHeaderView_verticalOffset},
    {sipName_viewportEvent, meth_QHeaderView_viewportEvent, METH_VARARGS, doc_QHeaderView_viewportEvent},
    {sipName_visualIndex, meth_QHeaderView_visualIndex, METH_VARARGS, doc_QHeaderView_visualIndex},
    {sipName_visualIndexAt, meth_QHeaderView_visualIndexAt, METH_VARARGS, doc_QHeaderView_visualIndexAt},
    {sipName_visualRect, meth_QHeaderView_visualRect, METH_VARARGS, doc_QHeaderView_visualRect},
    {sipName_visualRegionForSelection, meth_QHeaderView_visualRegionForSelection, METH_VARARGS, doc_QHeaderView_visualRegionForSelection}
};

static sipEnumMemberDef enummembers_QHeaderView[] = {
    {sipName_Custom, static_cast<int>( ::QHeaderView::Custom), 174},
    {sipName_Fixed, static_cast<int>( ::QHeaderView::Fixed), 174},
    {sipName_Interactive, static_cast<int>( ::QHeaderView::Interactive), 174},
    {sipName_ResizeToContents, static_cast<int>( ::QHeaderView::ResizeToContents), 174},
    {sipName_Stretch, static_cast<int>( ::QHeaderView::Stretch), 174},
};

PyDoc_STRVAR(doc_QHeaderView, "\1QHeaderView(Qt.Orientation, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHeaderView[] = {
    {"sortIndicatorChanged(int,Qt::SortOrder)", "\1sortIndicatorChanged(self, int, Qt.SortOrder)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionEntered(int)", "\1sectionEntered(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionHandleDoubleClicked(int)", "\1sectionHandleDoubleClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionCountChanged(int,int)", "\1sectionCountChanged(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionDoubleClicked(int)", "\1sectionDoubleClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionClicked(int)", "\1sectionClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionPressed(int)", "\1sectionPressed(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionResized(int,int,int)", "\1sectionResized(self, int, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sectionMoved(int,int,int)", "\1sectionMoved(self, int, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"geometriesChanged()", "\1geometriesChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QHeaderView = {
    & ::QHeaderView::staticMetaObject,
    0,
    signals_QHeaderView,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QHeaderView = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHeaderView,
        SIP_NULLPTR,
        &plugin_QHeaderView
    },
    {
        sipNameNr_QHeaderView,
        {0, 0, 1},
        93, methods_QHeaderView,
        5, enummembers_QHeaderView,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHeaderView,
    -1,
    -1,
    supers_QHeaderView,
    slots_QHeaderView,
    init_type_QHeaderView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QHeaderView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QHeaderView,
    cast_QHeaderView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
