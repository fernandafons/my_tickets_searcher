/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtoolbutton.sip"
#include <qtoolbutton.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 773 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qbuttongroup.sip"
#include <qbuttongroup.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 215 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 218 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 221 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQToolButton.cpp"


class sipQToolButton : public  ::QToolButton
{
public:
    sipQToolButton( ::QWidget*);
    virtual ~sipQToolButton();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    bool hitButton(const  ::QPoint&) const SIP_OVERRIDE;
    void checkStateSet() SIP_OVERRIDE;
    void nextCheckState() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQToolButton(const sipQToolButton &);
    sipQToolButton &operator = (const sipQToolButton &);

    char sipPyMethods[49];
};

sipQToolButton::sipQToolButton( ::QWidget*a0):  ::QToolButton(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQToolButton::~sipQToolButton()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQToolButton::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QToolButton);

    return  ::QToolButton::metaObject();
}

int sipQToolButton::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QToolButton::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QToolButton,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQToolButton::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QToolButton, _clname, &sipCpp) ? sipCpp :  ::QToolButton::qt_metacast(_clname));
}

void sipQToolButton::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QToolButton::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQToolButton::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QToolButton::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQToolButton::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QToolButton::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQToolButton::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QToolButton::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQToolButton::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QToolButton::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQToolButton::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QToolButton::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQToolButton::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QToolButton::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQToolButton::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QToolButton::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQToolButton::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QToolButton::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQToolButton::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QToolButton::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQToolButton::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QToolButton::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQToolButton::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[37]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[37]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QToolButton::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQToolButton::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QToolButton::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQToolButton::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QToolButton::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQToolButton::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QToolButton::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQToolButton::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QToolButton::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QToolButton::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QToolButton::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQToolButton::hitButton(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hitButton);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_hitButton);
#endif

    if (!sipMeth)
        return  ::QToolButton::hitButton(a0);

    extern bool sipVH_QtWidgets_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtWidgets_36(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQToolButton::checkStateSet()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_checkStateSet);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_checkStateSet);
#endif

    if (!sipMeth)
    {
         ::QToolButton::checkStateSet();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQToolButton::nextCheckState()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_nextCheckState);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_nextCheckState);
#endif

    if (!sipMeth)
    {
         ::QToolButton::nextCheckState();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QToolButton_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QToolButton_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QToolButton::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_sizeHint, doc_QToolButton_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QToolButton_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QToolButton::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_minimumSizeHint, doc_QToolButton_minimumSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_toolButtonStyle, "toolButtonStyle(self) -> Qt.ToolButtonStyle");

extern "C" {static PyObject *meth_QToolButton_toolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_toolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::Qt::ToolButtonStyle sipRes;

            sipRes = sipCpp->toolButtonStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ToolButtonStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_toolButtonStyle, doc_QToolButton_toolButtonStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_arrowType, "arrowType(self) -> Qt.ArrowType");

extern "C" {static PyObject *meth_QToolButton_arrowType(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_arrowType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::Qt::ArrowType sipRes;

            sipRes = sipCpp->arrowType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ArrowType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_arrowType, doc_QToolButton_arrowType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setArrowType, "setArrowType(self, Qt.ArrowType)");

extern "C" {static PyObject *meth_QToolButton_setArrowType(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setArrowType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ArrowType a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolButton, &sipCpp, sipType_Qt_ArrowType, &a0))
        {
            sipCpp->setArrowType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setArrowType, doc_QToolButton_setArrowType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setMenu, "setMenu(self, QMenu)");

extern "C" {static PyObject *meth_QToolButton_setMenu(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMenu* a0;
        PyObject *a0Keep;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QToolButton, &sipCpp, &a0Keep, sipType_QMenu, &a0))
        {
            sipCpp->setMenu(a0);

            sipKeepReference(sipSelf, -49, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setMenu, doc_QToolButton_setMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_menu, "menu(self) -> QMenu");

extern "C" {static PyObject *meth_QToolButton_menu(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_menu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->menu();

            return sipConvertFromType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_menu, doc_QToolButton_menu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setPopupMode, "setPopupMode(self, QToolButton.ToolButtonPopupMode)");

extern "C" {static PyObject *meth_QToolButton_setPopupMode(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setPopupMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolButton::ToolButtonPopupMode a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QToolButton_ToolButtonPopupMode, &a0))
        {
            sipCpp->setPopupMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setPopupMode, doc_QToolButton_setPopupMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_popupMode, "popupMode(self) -> QToolButton.ToolButtonPopupMode");

extern "C" {static PyObject *meth_QToolButton_popupMode(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_popupMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::QToolButton::ToolButtonPopupMode sipRes;

            sipRes = sipCpp->popupMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QToolButton_ToolButtonPopupMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_popupMode, doc_QToolButton_popupMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_defaultAction, "defaultAction(self) -> QAction");

extern "C" {static PyObject *meth_QToolButton_defaultAction(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_defaultAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->defaultAction();

            return sipConvertFromType(sipRes,sipType_QAction,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_defaultAction, doc_QToolButton_defaultAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setAutoRaise, "setAutoRaise(self, bool)");

extern "C" {static PyObject *meth_QToolButton_setAutoRaise(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setAutoRaise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QToolButton, &sipCpp, &a0))
        {
            sipCpp->setAutoRaise(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setAutoRaise, doc_QToolButton_setAutoRaise);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_autoRaise, "autoRaise(self) -> bool");

extern "C" {static PyObject *meth_QToolButton_autoRaise(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_autoRaise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRaise();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_autoRaise, doc_QToolButton_autoRaise);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_showMenu, "showMenu(self)");

extern "C" {static PyObject *meth_QToolButton_showMenu(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_showMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QToolButton, &sipCpp))
        {
            sipCpp->showMenu();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_showMenu, doc_QToolButton_showMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setToolButtonStyle, "setToolButtonStyle(self, Qt.ToolButtonStyle)");

extern "C" {static PyObject *meth_QToolButton_setToolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setToolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolButtonStyle a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QToolButton, &sipCpp, sipType_Qt_ToolButtonStyle, &a0))
        {
            sipCpp->setToolButtonStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setToolButtonStyle, doc_QToolButton_setToolButtonStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_setDefaultAction, "setDefaultAction(self, QAction)");

extern "C" {static PyObject *meth_QToolButton_setDefaultAction(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_setDefaultAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction* a0;
        PyObject *a0Keep;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QToolButton, &sipCpp, &a0Keep, sipType_QAction, &a0))
        {
            sipCpp->setDefaultAction(a0);

            sipKeepReference(sipSelf, -50, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_setDefaultAction, doc_QToolButton_setDefaultAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_initStyleOption, "initStyleOption(self, QStyleOptionToolButton)");

extern "C" {static PyObject *meth_QToolButton_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionToolButton* a0;
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QStyleOptionToolButton, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_initStyleOption, doc_QToolButton_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QToolButton_event(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QToolButton::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_event, doc_QToolButton_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QToolButton_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_mousePressEvent, doc_QToolButton_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QToolButton_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_paintEvent, doc_QToolButton_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QToolButton_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QActionEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::actionEvent(a0) : sipCpp->actionEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_actionEvent, doc_QToolButton_actionEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QToolButton_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::enterEvent(a0) : sipCpp->enterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_enterEvent, doc_QToolButton_enterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QToolButton_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::leaveEvent(a0) : sipCpp->leaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_leaveEvent, doc_QToolButton_leaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QToolButton_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_timerEvent, doc_QToolButton_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QToolButton_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_changeEvent, doc_QToolButton_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QToolButton_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_mouseReleaseEvent, doc_QToolButton_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_nextCheckState, "nextCheckState(self)");

extern "C" {static PyObject *meth_QToolButton_nextCheckState(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_nextCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QToolButton, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QToolButton::nextCheckState() : sipCpp->nextCheckState());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_nextCheckState, doc_QToolButton_nextCheckState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QToolButton_hitButton, "hitButton(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QToolButton_hitButton(PyObject *, PyObject *);}
static PyObject *meth_QToolButton_hitButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPoint* a0;
        const  ::QToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QToolButton, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QToolButton::hitButton(*a0) : sipCpp->hitButton(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QToolButton, sipName_hitButton, doc_QToolButton_hitButton);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QToolButton(void *, const sipTypeDef *);}
static void *cast_QToolButton(void *sipCppV, const sipTypeDef *targetType)
{
     ::QToolButton *sipCpp = reinterpret_cast< ::QToolButton *>(sipCppV);

    if (targetType == sipType_QAbstractButton)
        return static_cast< ::QAbstractButton *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QToolButton(void *, int);}
static void release_QToolButton(void *sipCppV, int)
{
     ::QToolButton *sipCpp = reinterpret_cast< ::QToolButton *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QToolButton(Py_ssize_t);}
static void *array_QToolButton(Py_ssize_t sipNrElem)
{
    return new  ::QToolButton[sipNrElem];
}


extern "C" {static void dealloc_QToolButton(sipSimpleWrapper *);}
static void dealloc_QToolButton(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQToolButton *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QToolButton(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QToolButton(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QToolButton(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQToolButton *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQToolButton(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QToolButton[] = {{0, 255, 1}};


static PyMethodDef methods_QToolButton[] = {
    {sipName_actionEvent, meth_QToolButton_actionEvent, METH_VARARGS, doc_QToolButton_actionEvent},
    {sipName_arrowType, meth_QToolButton_arrowType, METH_VARARGS, doc_QToolButton_arrowType},
    {sipName_autoRaise, meth_QToolButton_autoRaise, METH_VARARGS, doc_QToolButton_autoRaise},
    {sipName_changeEvent, meth_QToolButton_changeEvent, METH_VARARGS, doc_QToolButton_changeEvent},
    {sipName_defaultAction, meth_QToolButton_defaultAction, METH_VARARGS, doc_QToolButton_defaultAction},
    {sipName_enterEvent, meth_QToolButton_enterEvent, METH_VARARGS, doc_QToolButton_enterEvent},
    {sipName_event, meth_QToolButton_event, METH_VARARGS, doc_QToolButton_event},
    {sipName_hitButton, meth_QToolButton_hitButton, METH_VARARGS, doc_QToolButton_hitButton},
    {sipName_initStyleOption, meth_QToolButton_initStyleOption, METH_VARARGS, doc_QToolButton_initStyleOption},
    {sipName_leaveEvent, meth_QToolButton_leaveEvent, METH_VARARGS, doc_QToolButton_leaveEvent},
    {sipName_menu, meth_QToolButton_menu, METH_VARARGS, doc_QToolButton_menu},
    {sipName_minimumSizeHint, meth_QToolButton_minimumSizeHint, METH_VARARGS, doc_QToolButton_minimumSizeHint},
    {sipName_mousePressEvent, meth_QToolButton_mousePressEvent, METH_VARARGS, doc_QToolButton_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QToolButton_mouseReleaseEvent, METH_VARARGS, doc_QToolButton_mouseReleaseEvent},
    {sipName_nextCheckState, meth_QToolButton_nextCheckState, METH_VARARGS, doc_QToolButton_nextCheckState},
    {sipName_paintEvent, meth_QToolButton_paintEvent, METH_VARARGS, doc_QToolButton_paintEvent},
    {sipName_popupMode, meth_QToolButton_popupMode, METH_VARARGS, doc_QToolButton_popupMode},
    {sipName_setArrowType, meth_QToolButton_setArrowType, METH_VARARGS, doc_QToolButton_setArrowType},
    {sipName_setAutoRaise, meth_QToolButton_setAutoRaise, METH_VARARGS, doc_QToolButton_setAutoRaise},
    {sipName_setDefaultAction, meth_QToolButton_setDefaultAction, METH_VARARGS, doc_QToolButton_setDefaultAction},
    {sipName_setMenu, meth_QToolButton_setMenu, METH_VARARGS, doc_QToolButton_setMenu},
    {sipName_setPopupMode, meth_QToolButton_setPopupMode, METH_VARARGS, doc_QToolButton_setPopupMode},
    {sipName_setToolButtonStyle, meth_QToolButton_setToolButtonStyle, METH_VARARGS, doc_QToolButton_setToolButtonStyle},
    {sipName_showMenu, meth_QToolButton_showMenu, METH_VARARGS, doc_QToolButton_showMenu},
    {sipName_sizeHint, meth_QToolButton_sizeHint, METH_VARARGS, doc_QToolButton_sizeHint},
    {sipName_timerEvent, meth_QToolButton_timerEvent, METH_VARARGS, doc_QToolButton_timerEvent},
    {sipName_toolButtonStyle, meth_QToolButton_toolButtonStyle, METH_VARARGS, doc_QToolButton_toolButtonStyle}
};

static sipEnumMemberDef enummembers_QToolButton[] = {
    {sipName_DelayedPopup, static_cast<int>( ::QToolButton::DelayedPopup), 442},
    {sipName_InstantPopup, static_cast<int>( ::QToolButton::InstantPopup), 442},
    {sipName_MenuButtonPopup, static_cast<int>( ::QToolButton::MenuButtonPopup), 442},
};

PyDoc_STRVAR(doc_QToolButton, "\1QToolButton(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QToolButton[] = {
    {"triggered(QAction*)", "\1triggered(self, QAction)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QToolButton = {
    & ::QToolButton::staticMetaObject,
    0,
    signals_QToolButton,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QToolButton = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QToolButton,
        SIP_NULLPTR,
        &plugin_QToolButton
    },
    {
        sipNameNr_QToolButton,
        {0, 0, 1},
        27, methods_QToolButton,
        3, enummembers_QToolButton,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QToolButton,
    -1,
    -1,
    supers_QToolButton,
    SIP_NULLPTR,
    init_type_QToolButton,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QToolButton,
    SIP_NULLPTR,
    array_QToolButton,
    SIP_NULLPTR,
    release_QToolButton,
    cast_QToolButton,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
