/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qdatawidgetmapper.sip"
#include <qdatawidgetmapper.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDataWidgetMapper.cpp"


class sipQDataWidgetMapper : public  ::QDataWidgetMapper
{
public:
    sipQDataWidgetMapper( ::QObject*);
    virtual ~sipQDataWidgetMapper();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setCurrentIndex(int) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDataWidgetMapper(const sipQDataWidgetMapper &);
    sipQDataWidgetMapper &operator = (const sipQDataWidgetMapper &);

    char sipPyMethods[8];
};

sipQDataWidgetMapper::sipQDataWidgetMapper( ::QObject*a0):  ::QDataWidgetMapper(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDataWidgetMapper::~sipQDataWidgetMapper()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDataWidgetMapper::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QDataWidgetMapper);

    return  ::QDataWidgetMapper::metaObject();
}

int sipQDataWidgetMapper::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDataWidgetMapper::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QDataWidgetMapper,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQDataWidgetMapper::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QDataWidgetMapper, _clname, &sipCpp) ? sipCpp :  ::QDataWidgetMapper::qt_metacast(_clname));
}

void sipQDataWidgetMapper::setCurrentIndex(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_setCurrentIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_setCurrentIndex);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::setCurrentIndex(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDataWidgetMapper::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QDataWidgetMapper::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDataWidgetMapper::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QDataWidgetMapper::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDataWidgetMapper::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDataWidgetMapper::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDataWidgetMapper::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDataWidgetMapper::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDataWidgetMapper::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QDataWidgetMapper::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setModel(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            sipKeepReference(sipSelf, -16, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setModel, doc_QDataWidgetMapper_setModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QDataWidgetMapper_model(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_model, doc_QDataWidgetMapper_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setItemDelegate, "setItemDelegate(self, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemDelegate* a0;
        PyObject *a0Keep;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            sipCpp->setItemDelegate(a0);

            sipKeepReference(sipSelf, -17, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setItemDelegate, doc_QDataWidgetMapper_setItemDelegate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_itemDelegate, "itemDelegate(self) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QDataWidgetMapper_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate();

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_itemDelegate, doc_QDataWidgetMapper_itemDelegate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->setRootIndex(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setRootIndex, doc_QDataWidgetMapper_setRootIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_rootIndex, "rootIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QDataWidgetMapper_rootIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_rootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->rootIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_rootIndex, doc_QDataWidgetMapper_rootIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setOrientation, "setOrientation(self, Qt.Orientation)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientation a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setOrientation, doc_QDataWidgetMapper_setOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QDataWidgetMapper_orientation(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
             ::Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_Orientation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_orientation, doc_QDataWidgetMapper_orientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setSubmitPolicy, "setSubmitPolicy(self, QDataWidgetMapper.SubmitPolicy)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setSubmitPolicy(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setSubmitPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper::SubmitPolicy a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QDataWidgetMapper_SubmitPolicy, &a0))
        {
            sipCpp->setSubmitPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setSubmitPolicy, doc_QDataWidgetMapper_setSubmitPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_submitPolicy, "submitPolicy(self) -> QDataWidgetMapper.SubmitPolicy");

extern "C" {static PyObject *meth_QDataWidgetMapper_submitPolicy(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_submitPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
             ::QDataWidgetMapper::SubmitPolicy sipRes;

            sipRes = sipCpp->submitPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataWidgetMapper_SubmitPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_submitPolicy, doc_QDataWidgetMapper_submitPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_addMapping, "addMapping(self, QWidget, int)\n"
"addMapping(self, QWidget, int, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QDataWidgetMapper_addMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_addMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        int a1;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QWidget, &a0, &a1))
        {
            sipCpp->addMapping(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        int a1;
        const  ::QByteArray* a2;
        int a2State = 0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ1", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QWidget, &a0, &a1, sipType_QByteArray, &a2, &a2State))
        {
            sipCpp->addMapping(a0,a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_addMapping, doc_QDataWidgetMapper_addMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_removeMapping, "removeMapping(self, QWidget)");

extern "C" {static PyObject *meth_QDataWidgetMapper_removeMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_removeMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->removeMapping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_removeMapping, doc_QDataWidgetMapper_removeMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_mappedPropertyName, "mappedPropertyName(self, QWidget) -> QByteArray");

extern "C" {static PyObject *meth_QDataWidgetMapper_mappedPropertyName(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedPropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QWidget, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->mappedPropertyName(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_mappedPropertyName, doc_QDataWidgetMapper_mappedPropertyName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_mappedSection, "mappedSection(self, QWidget) -> int");

extern "C" {static PyObject *meth_QDataWidgetMapper_mappedSection(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            sipRes = sipCpp->mappedSection(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_mappedSection, doc_QDataWidgetMapper_mappedSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_mappedWidgetAt, "mappedWidgetAt(self, int) -> QWidget");

extern "C" {static PyObject *meth_QDataWidgetMapper_mappedWidgetAt(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedWidgetAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->mappedWidgetAt(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_mappedWidgetAt, doc_QDataWidgetMapper_mappedWidgetAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_clearMapping, "clearMapping(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_clearMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_clearMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->clearMapping();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_clearMapping, doc_QDataWidgetMapper_clearMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QDataWidgetMapper_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_currentIndex, doc_QDataWidgetMapper_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_revert, "revert(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_revert(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->revert();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_revert, doc_QDataWidgetMapper_revert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDataWidgetMapper::setCurrentIndex(a0) : sipCpp->setCurrentIndex(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setCurrentIndex, doc_QDataWidgetMapper_setCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_setCurrentModelIndex, "setCurrentModelIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QDataWidgetMapper_setCurrentModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setCurrentModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDataWidgetMapper, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->setCurrentModelIndex(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_setCurrentModelIndex, doc_QDataWidgetMapper_setCurrentModelIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QDataWidgetMapper_submit(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->submit();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_submit, doc_QDataWidgetMapper_submit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_toFirst, "toFirst(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_toFirst(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->toFirst();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_toFirst, doc_QDataWidgetMapper_toFirst);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_toLast, "toLast(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_toLast(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->toLast();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_toLast, doc_QDataWidgetMapper_toLast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_toNext, "toNext(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_toNext(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->toNext();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_toNext, doc_QDataWidgetMapper_toNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataWidgetMapper_toPrevious, "toPrevious(self)");

extern "C" {static PyObject *meth_QDataWidgetMapper_toPrevious(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataWidgetMapper, &sipCpp))
        {
            sipCpp->toPrevious();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDataWidgetMapper, sipName_toPrevious, doc_QDataWidgetMapper_toPrevious);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDataWidgetMapper(void *, const sipTypeDef *);}
static void *cast_QDataWidgetMapper(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDataWidgetMapper *sipCpp = reinterpret_cast< ::QDataWidgetMapper *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataWidgetMapper(void *, int);}
static void release_QDataWidgetMapper(void *sipCppV, int)
{
     ::QDataWidgetMapper *sipCpp = reinterpret_cast< ::QDataWidgetMapper *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QDataWidgetMapper(Py_ssize_t);}
static void *array_QDataWidgetMapper(Py_ssize_t sipNrElem)
{
    return new  ::QDataWidgetMapper[sipNrElem];
}


extern "C" {static void dealloc_QDataWidgetMapper(sipSimpleWrapper *);}
static void dealloc_QDataWidgetMapper(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDataWidgetMapper *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDataWidgetMapper(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDataWidgetMapper(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDataWidgetMapper(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDataWidgetMapper *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQDataWidgetMapper(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDataWidgetMapper[] = {{32, 0, 1}};


static PyMethodDef methods_QDataWidgetMapper[] = {
    {sipName_addMapping, meth_QDataWidgetMapper_addMapping, METH_VARARGS, doc_QDataWidgetMapper_addMapping},
    {sipName_clearMapping, meth_QDataWidgetMapper_clearMapping, METH_VARARGS, doc_QDataWidgetMapper_clearMapping},
    {sipName_currentIndex, meth_QDataWidgetMapper_currentIndex, METH_VARARGS, doc_QDataWidgetMapper_currentIndex},
    {sipName_itemDelegate, meth_QDataWidgetMapper_itemDelegate, METH_VARARGS, doc_QDataWidgetMapper_itemDelegate},
    {sipName_mappedPropertyName, meth_QDataWidgetMapper_mappedPropertyName, METH_VARARGS, doc_QDataWidgetMapper_mappedPropertyName},
    {sipName_mappedSection, meth_QDataWidgetMapper_mappedSection, METH_VARARGS, doc_QDataWidgetMapper_mappedSection},
    {sipName_mappedWidgetAt, meth_QDataWidgetMapper_mappedWidgetAt, METH_VARARGS, doc_QDataWidgetMapper_mappedWidgetAt},
    {sipName_model, meth_QDataWidgetMapper_model, METH_VARARGS, doc_QDataWidgetMapper_model},
    {sipName_orientation, meth_QDataWidgetMapper_orientation, METH_VARARGS, doc_QDataWidgetMapper_orientation},
    {sipName_removeMapping, meth_QDataWidgetMapper_removeMapping, METH_VARARGS, doc_QDataWidgetMapper_removeMapping},
    {sipName_revert, meth_QDataWidgetMapper_revert, METH_VARARGS, doc_QDataWidgetMapper_revert},
    {sipName_rootIndex, meth_QDataWidgetMapper_rootIndex, METH_VARARGS, doc_QDataWidgetMapper_rootIndex},
    {sipName_setCurrentIndex, meth_QDataWidgetMapper_setCurrentIndex, METH_VARARGS, doc_QDataWidgetMapper_setCurrentIndex},
    {sipName_setCurrentModelIndex, meth_QDataWidgetMapper_setCurrentModelIndex, METH_VARARGS, doc_QDataWidgetMapper_setCurrentModelIndex},
    {sipName_setItemDelegate, meth_QDataWidgetMapper_setItemDelegate, METH_VARARGS, doc_QDataWidgetMapper_setItemDelegate},
    {sipName_setModel, meth_QDataWidgetMapper_setModel, METH_VARARGS, doc_QDataWidgetMapper_setModel},
    {sipName_setOrientation, meth_QDataWidgetMapper_setOrientation, METH_VARARGS, doc_QDataWidgetMapper_setOrientation},
    {sipName_setRootIndex, meth_QDataWidgetMapper_setRootIndex, METH_VARARGS, doc_QDataWidgetMapper_setRootIndex},
    {sipName_setSubmitPolicy, meth_QDataWidgetMapper_setSubmitPolicy, METH_VARARGS, doc_QDataWidgetMapper_setSubmitPolicy},
    {sipName_submit, meth_QDataWidgetMapper_submit, METH_VARARGS, doc_QDataWidgetMapper_submit},
    {sipName_submitPolicy, meth_QDataWidgetMapper_submitPolicy, METH_VARARGS, doc_QDataWidgetMapper_submitPolicy},
    {sipName_toFirst, meth_QDataWidgetMapper_toFirst, METH_VARARGS, doc_QDataWidgetMapper_toFirst},
    {sipName_toLast, meth_QDataWidgetMapper_toLast, METH_VARARGS, doc_QDataWidgetMapper_toLast},
    {sipName_toNext, meth_QDataWidgetMapper_toNext, METH_VARARGS, doc_QDataWidgetMapper_toNext},
    {sipName_toPrevious, meth_QDataWidgetMapper_toPrevious, METH_VARARGS, doc_QDataWidgetMapper_toPrevious}
};

static sipEnumMemberDef enummembers_QDataWidgetMapper[] = {
    {sipName_AutoSubmit, static_cast<int>( ::QDataWidgetMapper::AutoSubmit), 54},
    {sipName_ManualSubmit, static_cast<int>( ::QDataWidgetMapper::ManualSubmit), 54},
};

PyDoc_STRVAR(doc_QDataWidgetMapper, "\1QDataWidgetMapper(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDataWidgetMapper[] = {
    {"currentIndexChanged(int)", "\1currentIndexChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDataWidgetMapper = {
    & ::QDataWidgetMapper::staticMetaObject,
    0,
    signals_QDataWidgetMapper,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QDataWidgetMapper = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDataWidgetMapper,
        SIP_NULLPTR,
        &plugin_QDataWidgetMapper
    },
    {
        sipNameNr_QDataWidgetMapper,
        {0, 0, 1},
        25, methods_QDataWidgetMapper,
        2, enummembers_QDataWidgetMapper,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDataWidgetMapper,
    -1,
    -1,
    supers_QDataWidgetMapper,
    SIP_NULLPTR,
    init_type_QDataWidgetMapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDataWidgetMapper,
    SIP_NULLPTR,
    array_QDataWidgetMapper,
    SIP_NULLPTR,
    release_QDataWidgetMapper,
    cast_QDataWidgetMapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
