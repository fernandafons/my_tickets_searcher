/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmainwindow.sip"
#include <qmainwindow.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qdockwidget.sip"
#include <qdockwidget.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 646 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtabwidget.sip"
#include <qtabwidget.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtoolbar.sip"
#include <qtoolbar.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmainwindow.sip"
#include <qmainwindow.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstatusbar.sip"
#include <qstatusbar.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenubar.sip"
#include <qmenubar.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 222 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 228 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 257 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 263 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 266 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMainWindow.cpp"


class sipQMainWindow : public  ::QMainWindow
{
public:
    sipQMainWindow( ::QWidget*, ::Qt::WindowFlags);
    virtual ~sipQMainWindow();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QMenu* createPopupMenu() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMainWindow(const sipQMainWindow &);
    sipQMainWindow &operator = (const sipQMainWindow &);

    char sipPyMethods[47];
};

sipQMainWindow::sipQMainWindow( ::QWidget*a0, ::Qt::WindowFlags a1):  ::QMainWindow(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMainWindow::~sipQMainWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMainWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMainWindow);

    return  ::QMainWindow::metaObject();
}

int sipQMainWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMainWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMainWindow,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQMainWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMainWindow, _clname, &sipCpp) ? sipCpp :  ::QMainWindow::qt_metacast(_clname));
}

 ::QMenu* sipQMainWindow::createPopupMenu()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_createPopupMenu);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_createPopupMenu);
#endif

    if (!sipMeth)
        return  ::QMainWindow::createPopupMenu();

    extern  ::QMenu* sipVH_QtWidgets_182(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_182(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMainWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QMainWindow::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQMainWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QMainWindow::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMainWindow::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QMainWindow::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQMainWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QMainWindow::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMainWindow::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QMainWindow::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMainWindow::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQMainWindow::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QMainWindow::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQMainWindow::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QMainWindow::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMainWindow::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QMainWindow::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMainWindow::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQMainWindow::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[41]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[41]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QMainWindow::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QMainWindow::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[43]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[43]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QMainWindow::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMainWindow::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QMainWindow::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQMainWindow::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QMainWindow::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMainWindow::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QMainWindow::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMainWindow_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QMainWindow_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_iconSize, doc_QMainWindow_iconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QMainWindow_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setIconSize, doc_QMainWindow_setIconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_toolButtonStyle, "toolButtonStyle(self) -> Qt.ToolButtonStyle");

extern "C" {static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::Qt::ToolButtonStyle sipRes;

            sipRes = sipCpp->toolButtonStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ToolButtonStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolButtonStyle, doc_QMainWindow_toolButtonStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setToolButtonStyle, "setToolButtonStyle(self, Qt.ToolButtonStyle)");

extern "C" {static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolButtonStyle a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolButtonStyle, &a0))
        {
            sipCpp->setToolButtonStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setToolButtonStyle, doc_QMainWindow_setToolButtonStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_menuBar, "menuBar(self) -> QMenuBar");

extern "C" {static PyObject *meth_QMainWindow_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QMenuBar*sipRes;

            sipRes = sipCpp->menuBar();

            return sipConvertFromType(sipRes,sipType_QMenuBar,sipSelf);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuBar, doc_QMainWindow_menuBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuBar, "setMenuBar(self, QMenuBar)");

extern "C" {static PyObject *meth_QMainWindow_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMenuBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMenuBar, &a0))
        {
            sipCpp->setMenuBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuBar, doc_QMainWindow_setMenuBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_statusBar, "statusBar(self) -> QStatusBar");

extern "C" {static PyObject *meth_QMainWindow_statusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_statusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QStatusBar*sipRes;

            sipRes = sipCpp->statusBar();

            return sipConvertFromType(sipRes,sipType_QStatusBar,sipSelf);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_statusBar, doc_QMainWindow_statusBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setStatusBar, "setStatusBar(self, QStatusBar)");

extern "C" {static PyObject *meth_QMainWindow_setStatusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStatusBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QStatusBar, &a0))
        {
            sipCpp->setStatusBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setStatusBar, doc_QMainWindow_setStatusBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_centralWidget, "centralWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_centralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_centralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->centralWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_centralWidget, doc_QMainWindow_centralWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setCentralWidget, "setCentralWidget(self, QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setCentralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCentralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setCentralWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCentralWidget, doc_QMainWindow_setCentralWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setCorner, "setCorner(self, Qt.Corner, Qt.DockWidgetArea)");

extern "C" {static PyObject *meth_QMainWindow_setCorner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCorner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Corner a0;
         ::Qt::DockWidgetArea a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0, sipType_Qt_DockWidgetArea, &a1))
        {
            sipCpp->setCorner(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCorner, doc_QMainWindow_setCorner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_corner, "corner(self, Qt.Corner) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_corner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_corner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Corner a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0))
        {
             ::Qt::DockWidgetArea sipRes;

            sipRes = sipCpp->corner(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DockWidgetArea);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_corner, doc_QMainWindow_corner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBarBreak, "addToolBarBreak(self, area: Qt.ToolBarArea = Qt.TopToolBarArea)");

extern "C" {static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarArea a0 = Qt::TopToolBarArea;
         ::QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_area,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0))
        {
            sipCpp->addToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBarBreak, doc_QMainWindow_addToolBarBreak);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBarBreak, "insertToolBarBreak(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->insertToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBarBreak, doc_QMainWindow_insertToolBarBreak);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBar, "addToolBar(self, Qt.ToolBarArea, QToolBar)\n"
"addToolBar(self, QToolBar)\n"
"addToolBar(self, str) -> QToolBar");

extern "C" {static PyObject *meth_QMainWindow_addToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarArea a0;
         ::QToolBar* a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0, sipType_QToolBar, &a1))
        {
            sipCpp->addToolBar(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QToolBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->addToolBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QToolBar*sipRes;

            sipRes = sipCpp->addToolBar(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QToolBar,sipSelf);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBar, doc_QMainWindow_addToolBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBar, "insertToolBar(self, QToolBar, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
         ::QToolBar* a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0, sipType_QToolBar, &a1))
        {
            sipCpp->insertToolBar(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBar, doc_QMainWindow_insertToolBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBar, "removeToolBar(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->removeToolBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBar, doc_QMainWindow_removeToolBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarArea, "toolBarArea(self, QToolBar) -> Qt.ToolBarArea");

extern "C" {static PyObject *meth_QMainWindow_toolBarArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
             ::Qt::ToolBarArea sipRes;

            sipRes = sipCpp->toolBarArea(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ToolBarArea);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarArea, doc_QMainWindow_toolBarArea);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_addDockWidget, "addDockWidget(self, Qt.DockWidgetArea, QDockWidget)\n"
"addDockWidget(self, Qt.DockWidgetArea, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_addDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetArea a0;
         ::QDockWidget* a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1))
        {
            sipCpp->addDockWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Qt::DockWidgetArea a0;
         ::QDockWidget* a1;
         ::Qt::Orientation a2;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            sipCpp->addDockWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addDockWidget, doc_QMainWindow_addDockWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_splitDockWidget, "splitDockWidget(self, QDockWidget, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_splitDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_splitDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
         ::QDockWidget* a1;
         ::Qt::Orientation a2;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            sipCpp->splitDockWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_splitDockWidget, doc_QMainWindow_splitDockWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_removeDockWidget, "removeDockWidget(self, QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_removeDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            sipCpp->removeDockWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeDockWidget, doc_QMainWindow_removeDockWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_dockWidgetArea, "dockWidgetArea(self, QDockWidget) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
             ::Qt::DockWidgetArea sipRes;

            sipRes = sipCpp->dockWidgetArea(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DockWidgetArea);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockWidgetArea, doc_QMainWindow_dockWidgetArea);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_saveState, "saveState(self, version: int = 0) -> QByteArray");

extern "C" {static PyObject *meth_QMainWindow_saveState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_saveState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->saveState(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_saveState, doc_QMainWindow_saveState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray], version: int = 0) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1 = 0;
         ::QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreState, doc_QMainWindow_restoreState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_createPopupMenu, "createPopupMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QMainWindow_createPopupMenu(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_createPopupMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMainWindow::createPopupMenu() : sipCpp->createPopupMenu());

            return sipConvertFromType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_createPopupMenu, doc_QMainWindow_createPopupMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setAnimated, "setAnimated(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setAnimated, doc_QMainWindow_setAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setDockNestingEnabled, "setDockNestingEnabled(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setDockNestingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockNestingEnabled, doc_QMainWindow_setDockNestingEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMainWindow::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_contextMenuEvent, doc_QMainWindow_contextMenuEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMainWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMainWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_event, doc_QMainWindow_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_isAnimated, "isAnimated(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isAnimated, doc_QMainWindow_isAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_isDockNestingEnabled, "isDockNestingEnabled(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDockNestingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isDockNestingEnabled, doc_QMainWindow_isDockNestingEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_isSeparator, "isSeparator(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSeparator(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isSeparator, doc_QMainWindow_isSeparator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_menuWidget, "menuWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_menuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->menuWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuWidget, doc_QMainWindow_menuWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuWidget, "setMenuWidget(self, QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setMenuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setMenuWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuWidget, doc_QMainWindow_setMenuWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_tabifyDockWidget, "tabifyDockWidget(self, QDockWidget, QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
         ::QDockWidget* a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1))
        {
            sipCpp->tabifyDockWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifyDockWidget, doc_QMainWindow_tabifyDockWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setDockOptions, "setDockOptions(self, Union[QMainWindow.DockOptions, QMainWindow.DockOption])");

extern "C" {static PyObject *meth_QMainWindow_setDockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMainWindow::DockOptions* a0;
        int a0State = 0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMainWindow_DockOptions, &a0, &a0State))
        {
            sipCpp->setDockOptions(*a0);
            sipReleaseType(a0,sipType_QMainWindow_DockOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockOptions, doc_QMainWindow_setDockOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_dockOptions, "dockOptions(self) -> QMainWindow.DockOptions");

extern "C" {static PyObject *meth_QMainWindow_dockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QMainWindow::DockOptions*sipRes;

            sipRes = new  ::QMainWindow::DockOptions(sipCpp->dockOptions());

            return sipConvertFromNewType(sipRes,sipType_QMainWindow_DockOptions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockOptions, doc_QMainWindow_dockOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBarBreak, "removeToolBarBreak(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->removeToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBarBreak, doc_QMainWindow_removeToolBarBreak);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarBreak, "toolBarBreak(self, QToolBar) -> bool");

extern "C" {static PyObject *meth_QMainWindow_toolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QToolBar* a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->toolBarBreak(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarBreak, doc_QMainWindow_toolBarBreak);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setUnifiedTitleAndToolBarOnMac, "setUnifiedTitleAndToolBarOnMac(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setUnifiedTitleAndToolBarOnMac(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setUnifiedTitleAndToolBarOnMac, doc_QMainWindow_setUnifiedTitleAndToolBarOnMac);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_unifiedTitleAndToolBarOnMac, "unifiedTitleAndToolBarOnMac(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unifiedTitleAndToolBarOnMac();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_unifiedTitleAndToolBarOnMac, doc_QMainWindow_unifiedTitleAndToolBarOnMac);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_restoreDockWidget, "restoreDockWidget(self, QDockWidget) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->restoreDockWidget(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreDockWidget, doc_QMainWindow_restoreDockWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_documentMode, "documentMode(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->documentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_documentMode, doc_QMainWindow_documentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setDocumentMode, "setDocumentMode(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setDocumentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDocumentMode, doc_QMainWindow_setDocumentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_tabShape, "tabShape(self) -> QTabWidget.TabShape");

extern "C" {static PyObject *meth_QMainWindow_tabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QTabWidget::TabShape sipRes;

            sipRes = sipCpp->tabShape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabWidget_TabShape);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabShape, doc_QMainWindow_tabShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setTabShape, "setTabShape(self, QTabWidget.TabShape)");

extern "C" {static PyObject *meth_QMainWindow_setTabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabWidget::TabShape a0;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QTabWidget_TabShape, &a0))
        {
            sipCpp->setTabShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabShape, doc_QMainWindow_setTabShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_tabPosition, "tabPosition(self, Qt.DockWidgetArea) -> QTabWidget.TabPosition");

extern "C" {static PyObject *meth_QMainWindow_tabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetArea a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0))
        {
             ::QTabWidget::TabPosition sipRes;

            sipRes = sipCpp->tabPosition(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabWidget_TabPosition);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabPosition, doc_QMainWindow_tabPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_setTabPosition, "setTabPosition(self, Union[Qt.DockWidgetAreas, Qt.DockWidgetArea], QTabWidget.TabPosition)");

extern "C" {static PyObject *meth_QMainWindow_setTabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetAreas* a0;
        int a0State = 0;
         ::QTabWidget::TabPosition a1;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetAreas, &a0, &a0State, sipType_QTabWidget_TabPosition, &a1))
        {
            sipCpp->setTabPosition(*a0,a1);
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabPosition, doc_QMainWindow_setTabPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_tabifiedDockWidgets, "tabifiedDockWidgets(self, QDockWidget) -> List[QDockWidget]");

extern "C" {static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDockWidget* a0;
        const  ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            QList< ::QDockWidget*>*sipRes;

            sipRes = new QList< ::QDockWidget*>(sipCpp->tabifiedDockWidgets(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QDockWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifiedDockWidgets, doc_QMainWindow_tabifiedDockWidgets);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_takeCentralWidget, "takeCentralWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_takeCentralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_takeCentralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->takeCentralWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_takeCentralWidget, doc_QMainWindow_takeCentralWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMainWindow_resizeDocks, "resizeDocks(self, Iterable[QDockWidget], Iterable[int], Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_resizeDocks(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_resizeDocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QDockWidget*>* a0;
        int a0State = 0;
        const  ::QList<int>* a1;
        int a1State = 0;
         ::Qt::Orientation a2;
         ::QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QList_0101QDockWidget,&a0, &a0State, sipType_QList_1800,&a1, &a1State, sipType_Qt_Orientation, &a2))
        {
            sipCpp->resizeDocks(*a0,*a1,a2);
            sipReleaseType(const_cast<QList< ::QDockWidget*> *>(a0),sipType_QList_0101QDockWidget,a0State);
            sipReleaseType(const_cast< ::QList<int> *>(a1),sipType_QList_1800,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_resizeDocks, doc_QMainWindow_resizeDocks);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMainWindow(void *, const sipTypeDef *);}
static void *cast_QMainWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMainWindow *sipCpp = reinterpret_cast< ::QMainWindow *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMainWindow(void *, int);}
static void release_QMainWindow(void *sipCppV, int)
{
     ::QMainWindow *sipCpp = reinterpret_cast< ::QMainWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QMainWindow(Py_ssize_t);}
static void *array_QMainWindow(Py_ssize_t sipNrElem)
{
    return new  ::QMainWindow[sipNrElem];
}


extern "C" {static void dealloc_QMainWindow(sipSimpleWrapper *);}
static void dealloc_QMainWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMainWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMainWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMainWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMainWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMainWindow *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
         ::Qt::WindowFlags a1def = Qt::WindowFlags();
         ::Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQMainWindow(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMainWindow[] = {{458, 255, 1}};


static PyMethodDef methods_QMainWindow[] = {
    {sipName_addDockWidget, meth_QMainWindow_addDockWidget, METH_VARARGS, doc_QMainWindow_addDockWidget},
    {sipName_addToolBar, meth_QMainWindow_addToolBar, METH_VARARGS, doc_QMainWindow_addToolBar},
    {sipName_addToolBarBreak, SIP_MLMETH_CAST(meth_QMainWindow_addToolBarBreak), METH_VARARGS|METH_KEYWORDS, doc_QMainWindow_addToolBarBreak},
    {sipName_centralWidget, meth_QMainWindow_centralWidget, METH_VARARGS, doc_QMainWindow_centralWidget},
    {sipName_contextMenuEvent, meth_QMainWindow_contextMenuEvent, METH_VARARGS, doc_QMainWindow_contextMenuEvent},
    {sipName_corner, meth_QMainWindow_corner, METH_VARARGS, doc_QMainWindow_corner},
    {sipName_createPopupMenu, meth_QMainWindow_createPopupMenu, METH_VARARGS, doc_QMainWindow_createPopupMenu},
    {sipName_dockOptions, meth_QMainWindow_dockOptions, METH_VARARGS, doc_QMainWindow_dockOptions},
    {sipName_dockWidgetArea, meth_QMainWindow_dockWidgetArea, METH_VARARGS, doc_QMainWindow_dockWidgetArea},
    {sipName_documentMode, meth_QMainWindow_documentMode, METH_VARARGS, doc_QMainWindow_documentMode},
    {sipName_event, meth_QMainWindow_event, METH_VARARGS, doc_QMainWindow_event},
    {sipName_iconSize, meth_QMainWindow_iconSize, METH_VARARGS, doc_QMainWindow_iconSize},
    {sipName_insertToolBar, meth_QMainWindow_insertToolBar, METH_VARARGS, doc_QMainWindow_insertToolBar},
    {sipName_insertToolBarBreak, meth_QMainWindow_insertToolBarBreak, METH_VARARGS, doc_QMainWindow_insertToolBarBreak},
    {sipName_isAnimated, meth_QMainWindow_isAnimated, METH_VARARGS, doc_QMainWindow_isAnimated},
    {sipName_isDockNestingEnabled, meth_QMainWindow_isDockNestingEnabled, METH_VARARGS, doc_QMainWindow_isDockNestingEnabled},
    {sipName_isSeparator, meth_QMainWindow_isSeparator, METH_VARARGS, doc_QMainWindow_isSeparator},
    {sipName_menuBar, meth_QMainWindow_menuBar, METH_VARARGS, doc_QMainWindow_menuBar},
    {sipName_menuWidget, meth_QMainWindow_menuWidget, METH_VARARGS, doc_QMainWindow_menuWidget},
    {sipName_removeDockWidget, meth_QMainWindow_removeDockWidget, METH_VARARGS, doc_QMainWindow_removeDockWidget},
    {sipName_removeToolBar, meth_QMainWindow_removeToolBar, METH_VARARGS, doc_QMainWindow_removeToolBar},
    {sipName_removeToolBarBreak, meth_QMainWindow_removeToolBarBreak, METH_VARARGS, doc_QMainWindow_removeToolBarBreak},
    {sipName_resizeDocks, meth_QMainWindow_resizeDocks, METH_VARARGS, doc_QMainWindow_resizeDocks},
    {sipName_restoreDockWidget, meth_QMainWindow_restoreDockWidget, METH_VARARGS, doc_QMainWindow_restoreDockWidget},
    {sipName_restoreState, SIP_MLMETH_CAST(meth_QMainWindow_restoreState), METH_VARARGS|METH_KEYWORDS, doc_QMainWindow_restoreState},
    {sipName_saveState, SIP_MLMETH_CAST(meth_QMainWindow_saveState), METH_VARARGS|METH_KEYWORDS, doc_QMainWindow_saveState},
    {sipName_setAnimated, meth_QMainWindow_setAnimated, METH_VARARGS, doc_QMainWindow_setAnimated},
    {sipName_setCentralWidget, meth_QMainWindow_setCentralWidget, METH_VARARGS, doc_QMainWindow_setCentralWidget},
    {sipName_setCorner, meth_QMainWindow_setCorner, METH_VARARGS, doc_QMainWindow_setCorner},
    {sipName_setDockNestingEnabled, meth_QMainWindow_setDockNestingEnabled, METH_VARARGS, doc_QMainWindow_setDockNestingEnabled},
    {sipName_setDockOptions, meth_QMainWindow_setDockOptions, METH_VARARGS, doc_QMainWindow_setDockOptions},
    {sipName_setDocumentMode, meth_QMainWindow_setDocumentMode, METH_VARARGS, doc_QMainWindow_setDocumentMode},
    {sipName_setIconSize, meth_QMainWindow_setIconSize, METH_VARARGS, doc_QMainWindow_setIconSize},
    {sipName_setMenuBar, meth_QMainWindow_setMenuBar, METH_VARARGS, doc_QMainWindow_setMenuBar},
    {sipName_setMenuWidget, meth_QMainWindow_setMenuWidget, METH_VARARGS, doc_QMainWindow_setMenuWidget},
    {sipName_setStatusBar, meth_QMainWindow_setStatusBar, METH_VARARGS, doc_QMainWindow_setStatusBar},
    {sipName_setTabPosition, meth_QMainWindow_setTabPosition, METH_VARARGS, doc_QMainWindow_setTabPosition},
    {sipName_setTabShape, meth_QMainWindow_setTabShape, METH_VARARGS, doc_QMainWindow_setTabShape},
    {sipName_setToolButtonStyle, meth_QMainWindow_setToolButtonStyle, METH_VARARGS, doc_QMainWindow_setToolButtonStyle},
    {sipName_setUnifiedTitleAndToolBarOnMac, meth_QMainWindow_setUnifiedTitleAndToolBarOnMac, METH_VARARGS, doc_QMainWindow_setUnifiedTitleAndToolBarOnMac},
    {sipName_splitDockWidget, meth_QMainWindow_splitDockWidget, METH_VARARGS, doc_QMainWindow_splitDockWidget},
    {sipName_statusBar, meth_QMainWindow_statusBar, METH_VARARGS, doc_QMainWindow_statusBar},
    {sipName_tabPosition, meth_QMainWindow_tabPosition, METH_VARARGS, doc_QMainWindow_tabPosition},
    {sipName_tabShape, meth_QMainWindow_tabShape, METH_VARARGS, doc_QMainWindow_tabShape},
    {sipName_tabifiedDockWidgets, meth_QMainWindow_tabifiedDockWidgets, METH_VARARGS, doc_QMainWindow_tabifiedDockWidgets},
    {sipName_tabifyDockWidget, meth_QMainWindow_tabifyDockWidget, METH_VARARGS, doc_QMainWindow_tabifyDockWidget},
    {sipName_takeCentralWidget, meth_QMainWindow_takeCentralWidget, METH_VARARGS, doc_QMainWindow_takeCentralWidget},
    {sipName_toolBarArea, meth_QMainWindow_toolBarArea, METH_VARARGS, doc_QMainWindow_toolBarArea},
    {sipName_toolBarBreak, meth_QMainWindow_toolBarBreak, METH_VARARGS, doc_QMainWindow_toolBarBreak},
    {sipName_toolButtonStyle, meth_QMainWindow_toolButtonStyle, METH_VARARGS, doc_QMainWindow_toolButtonStyle},
    {sipName_unifiedTitleAndToolBarOnMac, meth_QMainWindow_unifiedTitleAndToolBarOnMac, METH_VARARGS, doc_QMainWindow_unifiedTitleAndToolBarOnMac}
};

static sipEnumMemberDef enummembers_QMainWindow[] = {
    {sipName_AllowNestedDocks, static_cast<int>( ::QMainWindow::AllowNestedDocks), 223},
    {sipName_AllowTabbedDocks, static_cast<int>( ::QMainWindow::AllowTabbedDocks), 223},
    {sipName_AnimatedDocks, static_cast<int>( ::QMainWindow::AnimatedDocks), 223},
    {sipName_ForceTabbedDocks, static_cast<int>( ::QMainWindow::ForceTabbedDocks), 223},
    {sipName_GroupedDragging, static_cast<int>( ::QMainWindow::GroupedDragging), 223},
    {sipName_VerticalTabs, static_cast<int>( ::QMainWindow::VerticalTabs), 223},
};

PyDoc_STRVAR(doc_QMainWindow, "\1QMainWindow(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMainWindow[] = {
    {"tabifiedDockWidgetActivated(QDockWidget*)", "\1tabifiedDockWidgetActivated(self, QDockWidget)", SIP_NULLPTR, SIP_NULLPTR},
    {"toolButtonStyleChanged(Qt::ToolButtonStyle)", "\1toolButtonStyleChanged(self, Qt.ToolButtonStyle)", SIP_NULLPTR, SIP_NULLPTR},
    {"iconSizeChanged(QSize)", "\1iconSizeChanged(self, QSize)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QMainWindow = {
    & ::QMainWindow::staticMetaObject,
    0,
    signals_QMainWindow,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QMainWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMainWindow,
        SIP_NULLPTR,
        &plugin_QMainWindow
    },
    {
        sipNameNr_QMainWindow,
        {0, 0, 1},
        51, methods_QMainWindow,
        6, enummembers_QMainWindow,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMainWindow,
    -1,
    -1,
    supers_QMainWindow,
    SIP_NULLPTR,
    init_type_QMainWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMainWindow,
    SIP_NULLPTR,
    array_QMainWindow,
    SIP_NULLPTR,
    release_QMainWindow,
    cast_QMainWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
