/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 70 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgesture.sip"
#include <qgesture.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 70 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgesture.sip"
#include <qgesture.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgesture.sip"
#include <qgesture.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQPinchGesture.cpp"


class sipQPinchGesture : public  ::QPinchGesture
{
public:
    sipQPinchGesture( ::QObject*);
    virtual ~sipQPinchGesture();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPinchGesture(const sipQPinchGesture &);
    sipQPinchGesture &operator = (const sipQPinchGesture &);

    char sipPyMethods[7];
};

sipQPinchGesture::sipQPinchGesture( ::QObject*a0):  ::QPinchGesture(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPinchGesture::~sipQPinchGesture()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPinchGesture::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QPinchGesture);

    return  ::QPinchGesture::metaObject();
}

int sipQPinchGesture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPinchGesture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QPinchGesture,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQPinchGesture::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QPinchGesture, _clname, &sipCpp) ? sipCpp :  ::QPinchGesture::qt_metacast(_clname));
}

void sipQPinchGesture::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QPinchGesture::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QPinchGesture::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QPinchGesture::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QPinchGesture::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QPinchGesture::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPinchGesture::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QPinchGesture::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQPinchGesture::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QPinchGesture::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPinchGesture_totalChangeFlags, "totalChangeFlags(self) -> QPinchGesture.ChangeFlags");

extern "C" {static PyObject *meth_QPinchGesture_totalChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPinchGesture::ChangeFlags*sipRes;

            sipRes = new  ::QPinchGesture::ChangeFlags(sipCpp->totalChangeFlags());

            return sipConvertFromNewType(sipRes,sipType_QPinchGesture_ChangeFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalChangeFlags, doc_QPinchGesture_totalChangeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalChangeFlags, "setTotalChangeFlags(self, Union[QPinchGesture.ChangeFlags, QPinchGesture.ChangeFlag])");

extern "C" {static PyObject *meth_QPinchGesture_setTotalChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPinchGesture::ChangeFlags* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPinchGesture_ChangeFlags, &a0, &a0State))
        {
            sipCpp->setTotalChangeFlags(*a0);
            sipReleaseType(a0,sipType_QPinchGesture_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalChangeFlags, doc_QPinchGesture_setTotalChangeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_changeFlags, "changeFlags(self) -> QPinchGesture.ChangeFlags");

extern "C" {static PyObject *meth_QPinchGesture_changeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_changeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPinchGesture::ChangeFlags*sipRes;

            sipRes = new  ::QPinchGesture::ChangeFlags(sipCpp->changeFlags());

            return sipConvertFromNewType(sipRes,sipType_QPinchGesture_ChangeFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_changeFlags, doc_QPinchGesture_changeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setChangeFlags, "setChangeFlags(self, Union[QPinchGesture.ChangeFlags, QPinchGesture.ChangeFlag])");

extern "C" {static PyObject *meth_QPinchGesture_setChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPinchGesture::ChangeFlags* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPinchGesture_ChangeFlags, &a0, &a0State))
        {
            sipCpp->setChangeFlags(*a0);
            sipReleaseType(a0,sipType_QPinchGesture_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setChangeFlags, doc_QPinchGesture_setChangeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_startCenterPoint, "startCenterPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_startCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_startCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startCenterPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_startCenterPoint, doc_QPinchGesture_startCenterPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_lastCenterPoint, "lastCenterPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_lastCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->lastCenterPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastCenterPoint, doc_QPinchGesture_lastCenterPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_centerPoint, "centerPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_centerPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_centerPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->centerPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_centerPoint, doc_QPinchGesture_centerPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setStartCenterPoint, "setStartCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setStartCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setStartCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setStartCenterPoint(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setStartCenterPoint, doc_QPinchGesture_setStartCenterPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastCenterPoint, "setLastCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setLastCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setLastCenterPoint(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastCenterPoint, doc_QPinchGesture_setLastCenterPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setCenterPoint, "setCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setCenterPoint(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setCenterPoint, doc_QPinchGesture_setCenterPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_totalScaleFactor, "totalScaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_totalScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->totalScaleFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalScaleFactor, doc_QPinchGesture_totalScaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_lastScaleFactor, "lastScaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_lastScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lastScaleFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastScaleFactor, doc_QPinchGesture_lastScaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_scaleFactor, "scaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_scaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_scaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->scaleFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_scaleFactor, doc_QPinchGesture_scaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalScaleFactor, "setTotalScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setTotalScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setTotalScaleFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalScaleFactor, doc_QPinchGesture_setTotalScaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastScaleFactor, "setLastScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setLastScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setLastScaleFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastScaleFactor, doc_QPinchGesture_setLastScaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setScaleFactor, "setScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setScaleFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setScaleFactor, doc_QPinchGesture_setScaleFactor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_totalRotationAngle, "totalRotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_totalRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->totalRotationAngle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalRotationAngle, doc_QPinchGesture_totalRotationAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_lastRotationAngle, "lastRotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_lastRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lastRotationAngle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastRotationAngle, doc_QPinchGesture_lastRotationAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_rotationAngle, "rotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_rotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_rotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rotationAngle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_rotationAngle, doc_QPinchGesture_rotationAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalRotationAngle, "setTotalRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setTotalRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setTotalRotationAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalRotationAngle, doc_QPinchGesture_setTotalRotationAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastRotationAngle, "setLastRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setLastRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setLastRotationAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastRotationAngle, doc_QPinchGesture_setLastRotationAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPinchGesture_setRotationAngle, "setRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            sipCpp->setRotationAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setRotationAngle, doc_QPinchGesture_setRotationAngle);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPinchGesture(void *, const sipTypeDef *);}
static void *cast_QPinchGesture(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPinchGesture *sipCpp = reinterpret_cast< ::QPinchGesture *>(sipCppV);

    if (targetType == sipType_QGesture)
        return static_cast< ::QGesture *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPinchGesture(void *, int);}
static void release_QPinchGesture(void *sipCppV, int)
{
     ::QPinchGesture *sipCpp = reinterpret_cast< ::QPinchGesture *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QPinchGesture(Py_ssize_t);}
static void *array_QPinchGesture(Py_ssize_t sipNrElem)
{
    return new  ::QPinchGesture[sipNrElem];
}


extern "C" {static void dealloc_QPinchGesture(sipSimpleWrapper *);}
static void dealloc_QPinchGesture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPinchGesture *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPinchGesture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPinchGesture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPinchGesture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPinchGesture *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPinchGesture(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPinchGesture[] = {{104, 255, 1}};


static PyMethodDef methods_QPinchGesture[] = {
    {sipName_centerPoint, meth_QPinchGesture_centerPoint, METH_VARARGS, doc_QPinchGesture_centerPoint},
    {sipName_changeFlags, meth_QPinchGesture_changeFlags, METH_VARARGS, doc_QPinchGesture_changeFlags},
    {sipName_lastCenterPoint, meth_QPinchGesture_lastCenterPoint, METH_VARARGS, doc_QPinchGesture_lastCenterPoint},
    {sipName_lastRotationAngle, meth_QPinchGesture_lastRotationAngle, METH_VARARGS, doc_QPinchGesture_lastRotationAngle},
    {sipName_lastScaleFactor, meth_QPinchGesture_lastScaleFactor, METH_VARARGS, doc_QPinchGesture_lastScaleFactor},
    {sipName_rotationAngle, meth_QPinchGesture_rotationAngle, METH_VARARGS, doc_QPinchGesture_rotationAngle},
    {sipName_scaleFactor, meth_QPinchGesture_scaleFactor, METH_VARARGS, doc_QPinchGesture_scaleFactor},
    {sipName_setCenterPoint, meth_QPinchGesture_setCenterPoint, METH_VARARGS, doc_QPinchGesture_setCenterPoint},
    {sipName_setChangeFlags, meth_QPinchGesture_setChangeFlags, METH_VARARGS, doc_QPinchGesture_setChangeFlags},
    {sipName_setLastCenterPoint, meth_QPinchGesture_setLastCenterPoint, METH_VARARGS, doc_QPinchGesture_setLastCenterPoint},
    {sipName_setLastRotationAngle, meth_QPinchGesture_setLastRotationAngle, METH_VARARGS, doc_QPinchGesture_setLastRotationAngle},
    {sipName_setLastScaleFactor, meth_QPinchGesture_setLastScaleFactor, METH_VARARGS, doc_QPinchGesture_setLastScaleFactor},
    {sipName_setRotationAngle, meth_QPinchGesture_setRotationAngle, METH_VARARGS, doc_QPinchGesture_setRotationAngle},
    {sipName_setScaleFactor, meth_QPinchGesture_setScaleFactor, METH_VARARGS, doc_QPinchGesture_setScaleFactor},
    {sipName_setStartCenterPoint, meth_QPinchGesture_setStartCenterPoint, METH_VARARGS, doc_QPinchGesture_setStartCenterPoint},
    {sipName_setTotalChangeFlags, meth_QPinchGesture_setTotalChangeFlags, METH_VARARGS, doc_QPinchGesture_setTotalChangeFlags},
    {sipName_setTotalRotationAngle, meth_QPinchGesture_setTotalRotationAngle, METH_VARARGS, doc_QPinchGesture_setTotalRotationAngle},
    {sipName_setTotalScaleFactor, meth_QPinchGesture_setTotalScaleFactor, METH_VARARGS, doc_QPinchGesture_setTotalScaleFactor},
    {sipName_startCenterPoint, meth_QPinchGesture_startCenterPoint, METH_VARARGS, doc_QPinchGesture_startCenterPoint},
    {sipName_totalChangeFlags, meth_QPinchGesture_totalChangeFlags, METH_VARARGS, doc_QPinchGesture_totalChangeFlags},
    {sipName_totalRotationAngle, meth_QPinchGesture_totalRotationAngle, METH_VARARGS, doc_QPinchGesture_totalRotationAngle},
    {sipName_totalScaleFactor, meth_QPinchGesture_totalScaleFactor, METH_VARARGS, doc_QPinchGesture_totalScaleFactor}
};

static sipEnumMemberDef enummembers_QPinchGesture[] = {
    {sipName_CenterPointChanged, static_cast<int>( ::QPinchGesture::CenterPointChanged), 246},
    {sipName_RotationAngleChanged, static_cast<int>( ::QPinchGesture::RotationAngleChanged), 246},
    {sipName_ScaleFactorChanged, static_cast<int>( ::QPinchGesture::ScaleFactorChanged), 246},
};

PyDoc_STRVAR(doc_QPinchGesture, "\1QPinchGesture(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QPinchGesture = {
    & ::QPinchGesture::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QPinchGesture = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPinchGesture,
        SIP_NULLPTR,
        &plugin_QPinchGesture
    },
    {
        sipNameNr_QPinchGesture,
        {0, 0, 1},
        22, methods_QPinchGesture,
        3, enummembers_QPinchGesture,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPinchGesture,
    -1,
    -1,
    supers_QPinchGesture,
    SIP_NULLPTR,
    init_type_QPinchGesture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPinchGesture,
    SIP_NULLPTR,
    array_QPinchGesture,
    SIP_NULLPTR,
    release_QPinchGesture,
    cast_QPinchGesture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
