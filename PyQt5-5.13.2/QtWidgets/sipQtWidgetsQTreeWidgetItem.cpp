/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"

#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"


class sipQTreeWidgetItem : public  ::QTreeWidgetItem
{
public:
    sipQTreeWidgetItem(int);
    sipQTreeWidgetItem(const  ::QStringList&,int);
    sipQTreeWidgetItem( ::QTreeWidget*,int);
    sipQTreeWidgetItem( ::QTreeWidget*,const  ::QStringList&,int);
    sipQTreeWidgetItem( ::QTreeWidget*, ::QTreeWidgetItem*,int);
    sipQTreeWidgetItem( ::QTreeWidgetItem*,int);
    sipQTreeWidgetItem( ::QTreeWidgetItem*,const  ::QStringList&,int);
    sipQTreeWidgetItem( ::QTreeWidgetItem*, ::QTreeWidgetItem*,int);
    sipQTreeWidgetItem(const  ::QTreeWidgetItem&);
    virtual ~sipQTreeWidgetItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void write( ::QDataStream&) const SIP_OVERRIDE;
    void read( ::QDataStream&) SIP_OVERRIDE;
    bool operator<(const  ::QTreeWidgetItem&) const SIP_OVERRIDE;
    void setData(int,int,const  ::QVariant&) SIP_OVERRIDE;
     ::QVariant data(int,int) const SIP_OVERRIDE;
     ::QTreeWidgetItem* clone() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidgetItem(const sipQTreeWidgetItem &);
    sipQTreeWidgetItem &operator = (const sipQTreeWidgetItem &);

    char sipPyMethods[6];
};

sipQTreeWidgetItem::sipQTreeWidgetItem(int a0):  ::QTreeWidgetItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const  ::QStringList& a0,int a1):  ::QTreeWidgetItem(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidget*a0,int a1):  ::QTreeWidgetItem(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidget*a0,const  ::QStringList& a1,int a2):  ::QTreeWidgetItem(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidget*a0, ::QTreeWidgetItem*a1,int a2):  ::QTreeWidgetItem(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidgetItem*a0,int a1):  ::QTreeWidgetItem(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidgetItem*a0,const  ::QStringList& a1,int a2):  ::QTreeWidgetItem(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem( ::QTreeWidgetItem*a0, ::QTreeWidgetItem*a1,int a2):  ::QTreeWidgetItem(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const  ::QTreeWidgetItem& a0):  ::QTreeWidgetItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::~sipQTreeWidgetItem()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQTreeWidgetItem::write( ::QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_write);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_write);
#endif

    if (!sipMeth)
    {
         ::QTreeWidgetItem::write(a0);
        return;
    }

    extern void sipVH_QtWidgets_179(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtWidgets_179(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeWidgetItem::read( ::QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_read);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_read);
#endif

    if (!sipMeth)
    {
         ::QTreeWidgetItem::read(a0);
        return;
    }

    extern void sipVH_QtWidgets_179(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtWidgets_179(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidgetItem::operator<(const  ::QTreeWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName___lt__);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName___lt__);
#endif

    if (!sipMeth)
        return  ::QTreeWidgetItem::operator<(a0);

    extern bool sipVH_QtWidgets_212(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTreeWidgetItem&);

    return sipVH_QtWidgets_212(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeWidgetItem::setData(int a0,int a1,const  ::QVariant& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_setData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_setData);
#endif

    if (!sipMeth)
    {
         ::QTreeWidgetItem::setData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_211(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QVariant&);

    sipVH_QtWidgets_211(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQTreeWidgetItem::data(int a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, SIP_NULLPTR, sipName_data);
#endif

    if (!sipMeth)
        return  ::QTreeWidgetItem::data(a0,a1);

    extern  ::QVariant sipVH_QtWidgets_210(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH_QtWidgets_210(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QTreeWidgetItem* sipQTreeWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_clone);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_clone);
#endif

    if (!sipMeth)
        return  ::QTreeWidgetItem::clone();

    extern  ::QTreeWidgetItem* sipVH_QtWidgets_209(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_209(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTreeWidgetItem_clone, "clone(self) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
             ::QTreeWidgetItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeWidgetItem::clone() : sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QTreeWidgetItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_clone, doc_QTreeWidgetItem_clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_treeWidget, "treeWidget(self) -> QTreeWidget");

extern "C" {static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
             ::QTreeWidget*sipRes;

            sipRes = sipCpp->treeWidget();

            return sipConvertFromType(sipRes,sipType_QTreeWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_treeWidget, doc_QTreeWidgetItem_treeWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_flags, "flags(self) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QTreeWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_flags, doc_QTreeWidgetItem_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_text, "text(self, int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_text, doc_QTreeWidgetItem_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_icon, "icon(self, int) -> QIcon");

extern "C" {static PyObject *meth_QTreeWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon(a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_icon, doc_QTreeWidgetItem_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_statusTip, "statusTip(self, int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->statusTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_statusTip, doc_QTreeWidgetItem_statusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_toolTip, "toolTip(self, int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_toolTip, doc_QTreeWidgetItem_toolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_whatsThis, "whatsThis(self, int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->whatsThis(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_whatsThis, doc_QTreeWidgetItem_whatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_font, "font(self, int) -> QFont");

extern "C" {static PyObject *meth_QTreeWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font(a0));

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_font, doc_QTreeWidgetItem_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_textAlignment, "textAlignment(self, int) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->textAlignment(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_textAlignment, doc_QTreeWidgetItem_textAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setTextAlignment, "setTextAlignment(self, int, int)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
            sipCpp->setTextAlignment(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setTextAlignment, doc_QTreeWidgetItem_setTextAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_checkState, "checkState(self, int) -> Qt.CheckState");

extern "C" {static PyObject *meth_QTreeWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::Qt::CheckState sipRes;

            sipRes = sipCpp->checkState(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CheckState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_checkState, doc_QTreeWidgetItem_checkState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setCheckState, "setCheckState(self, int, Qt.CheckState)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::CheckState a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_CheckState, &a1))
        {
            sipCpp->setCheckState(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setCheckState, doc_QTreeWidgetItem_setCheckState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_data, "data(self, int, int) -> Any");

extern "C" {static PyObject *meth_QTreeWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTreeWidgetItem::data(a0,a1) : sipCpp->data(a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_data, doc_QTreeWidgetItem_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setData, "setData(self, int, int, Any)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1, sipType_QVariant, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeWidgetItem::setData(a0,a1,*a2) : sipCpp->setData(a0,a1,*a2));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setData, doc_QTreeWidgetItem_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_read, "read(self, QDataStream)");

extern "C" {static PyObject *meth_QTreeWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTreeWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_read, doc_QTreeWidgetItem_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_write, "write(self, QDataStream)");

extern "C" {static PyObject *meth_QTreeWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTreeWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_write, doc_QTreeWidgetItem_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_parent, "parent(self) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
             ::QTreeWidgetItem*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_parent, doc_QTreeWidgetItem_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_child, "child(self, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_child(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QTreeWidgetItem*sipRes;

            sipRes = sipCpp->child(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_child, doc_QTreeWidgetItem_child);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_childCount, "childCount(self) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_childCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->childCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childCount, doc_QTreeWidgetItem_childCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_columnCount, doc_QTreeWidgetItem_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_addChild, "addChild(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_addChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem* a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->addChild(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChild, doc_QTreeWidgetItem_addChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_insertChild, "insertChild(self, int, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeWidgetItem* a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            sipCpp->insertChild(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChild, doc_QTreeWidgetItem_insertChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_takeChild, "takeChild(self, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QTreeWidgetItem*sipRes;

            sipRes = sipCpp->takeChild(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChild, doc_QTreeWidgetItem_takeChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_type, "type(self) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_type, doc_QTreeWidgetItem_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFlags, "setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag])");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFlags, doc_QTreeWidgetItem_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setText, "setText(self, int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setText(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setText, doc_QTreeWidgetItem_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setIcon, "setIcon(self, int, QIcon)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QIcon* a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            sipCpp->setIcon(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setIcon, doc_QTreeWidgetItem_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setStatusTip, "setStatusTip(self, int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setStatusTip(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setStatusTip, doc_QTreeWidgetItem_setStatusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setToolTip, "setToolTip(self, int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setToolTip(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setToolTip, doc_QTreeWidgetItem_setToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setWhatsThis, "setWhatsThis(self, int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setWhatsThis(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setWhatsThis, doc_QTreeWidgetItem_setWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFont, "setFont(self, int, QFont)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QFont* a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QFont, &a1))
        {
            sipCpp->setFont(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFont, doc_QTreeWidgetItem_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_indexOfChild, "indexOfChild(self, QTreeWidgetItem) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem* a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfChild(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_indexOfChild, doc_QTreeWidgetItem_indexOfChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_sizeHint, "sizeHint(self, int) -> QSize");

extern "C" {static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizeHint(a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sizeHint, doc_QTreeWidgetItem_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setSizeHint, "setSizeHint(self, int, QSize)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QSize* a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setSizeHint(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSizeHint, doc_QTreeWidgetItem_setSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_addChildren, "addChildren(self, Iterable[QTreeWidgetItem])");

extern "C" {static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTreeWidgetItem*>* a0;
        int a0State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            sipCpp->addChildren(*a0);
            sipReleaseType(const_cast<QList< ::QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChildren, doc_QTreeWidgetItem_addChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_insertChildren, "insertChildren(self, int, Iterable[QTreeWidgetItem])");

extern "C" {static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QTreeWidgetItem*>* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            sipCpp->insertChildren(a0,*a1);
            sipReleaseType(const_cast<QList< ::QTreeWidgetItem*> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChildren, doc_QTreeWidgetItem_insertChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_takeChildren, "takeChildren(self) -> List[QTreeWidgetItem]");

extern "C" {static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QList< ::QTreeWidgetItem*>*sipRes;

            sipRes = new QList< ::QTreeWidgetItem*>(sipCpp->takeChildren());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChildren, doc_QTreeWidgetItem_takeChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_background, "background(self, int) -> QBrush");

extern "C" {static PyObject *meth_QTreeWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->background(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_background, doc_QTreeWidgetItem_background);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setBackground, "setBackground(self, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setBackground(a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setBackground, doc_QTreeWidgetItem_setBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_foreground, "foreground(self, int) -> QBrush");

extern "C" {static PyObject *meth_QTreeWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->foreground(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_foreground, doc_QTreeWidgetItem_foreground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setForeground, "setForeground(self, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setForeground(a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setForeground, doc_QTreeWidgetItem_setForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_sortChildren, "sortChildren(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::SortOrder a1;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortChildren(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sortChildren, doc_QTreeWidgetItem_sortChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setSelected, "setSelected(self, bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setSelected(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSelected, doc_QTreeWidgetItem_setSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isSelected, "isSelected(self) -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isSelected, doc_QTreeWidgetItem_isSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setHidden, "setHidden(self, bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setHidden, doc_QTreeWidgetItem_setHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isHidden, "isHidden(self) -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isHidden, doc_QTreeWidgetItem_isHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setExpanded, "setExpanded(self, bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setExpanded(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setExpanded, doc_QTreeWidgetItem_setExpanded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isExpanded, "isExpanded(self) -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExpanded();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isExpanded, doc_QTreeWidgetItem_isExpanded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setChildIndicatorPolicy, "setChildIndicatorPolicy(self, QTreeWidgetItem.ChildIndicatorPolicy)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem::ChildIndicatorPolicy a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem_ChildIndicatorPolicy, &a0))
        {
            sipCpp->setChildIndicatorPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setChildIndicatorPolicy, doc_QTreeWidgetItem_setChildIndicatorPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_childIndicatorPolicy, "childIndicatorPolicy(self) -> QTreeWidgetItem.ChildIndicatorPolicy");

extern "C" {static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
             ::QTreeWidgetItem::ChildIndicatorPolicy sipRes;

            sipRes = sipCpp->childIndicatorPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTreeWidgetItem_ChildIndicatorPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childIndicatorPolicy, doc_QTreeWidgetItem_childIndicatorPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_removeChild, "removeChild(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem* a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->removeChild(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_removeChild, doc_QTreeWidgetItem_removeChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFirstColumnSpanned, "setFirstColumnSpanned(self, bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setFirstColumnSpanned(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFirstColumnSpanned, doc_QTreeWidgetItem_setFirstColumnSpanned);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isFirstColumnSpanned, "isFirstColumnSpanned(self) -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstColumnSpanned();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isFirstColumnSpanned, doc_QTreeWidgetItem_isFirstColumnSpanned);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setDisabled, "setDisabled(self, bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setDisabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setDisabled, doc_QTreeWidgetItem_setDisabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isDisabled, "isDisabled(self) -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isDisabled, doc_QTreeWidgetItem_isDisabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_emitDataChanged, "emitDataChanged(self)");

extern "C" {static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            sipCpp->emitDataChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_emitDataChanged, doc_QTreeWidgetItem_emitDataChanged);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTreeWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTreeWidgetItem *sipCpp = reinterpret_cast< ::QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QTreeWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets, ge_slot, sipType_QTreeWidgetItem, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTreeWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTreeWidgetItem *sipCpp = reinterpret_cast< ::QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTreeWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets, lt_slot, sipType_QTreeWidgetItem, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidgetItem(void *, int);}
static void release_QTreeWidgetItem(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast< ::QTreeWidgetItem *>(sipCppV);
}


extern "C" {static void dealloc_QTreeWidgetItem(sipSimpleWrapper *);}
static void dealloc_QTreeWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTreeWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTreeWidgetItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTreeWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidgetItem *sipCpp = SIP_NULLPTR;

    {
        int a0 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new sipQTreeWidgetItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
        int a1 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QStringList,&a0, &a0State, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(*a0,a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidget* a0;
        int a1 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidget, &a0, sipOwner, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidget* a0;
        const  ::QStringList* a1;
        int a1State = 0;
        int a2 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidget* a0;
         ::QTreeWidgetItem* a1;
        int a2 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidgetItem* a0;
        int a1 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidgetItem, &a0, sipOwner, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidgetItem* a0;
        const  ::QStringList* a1;
        int a1State = 0;
        int a2 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QTreeWidgetItem* a0;
         ::QTreeWidgetItem* a1;
        int a2 =  ::QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTreeWidgetItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTreeWidgetItem, &a0))
        {
            sipCpp = new sipQTreeWidgetItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTreeWidgetItem[] = {
    {(void *)slot_QTreeWidgetItem___ge__, ge_slot},
    {(void *)slot_QTreeWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTreeWidgetItem[] = {
    {sipName_addChild, meth_QTreeWidgetItem_addChild, METH_VARARGS, doc_QTreeWidgetItem_addChild},
    {sipName_addChildren, meth_QTreeWidgetItem_addChildren, METH_VARARGS, doc_QTreeWidgetItem_addChildren},
    {sipName_background, meth_QTreeWidgetItem_background, METH_VARARGS, doc_QTreeWidgetItem_background},
    {sipName_checkState, meth_QTreeWidgetItem_checkState, METH_VARARGS, doc_QTreeWidgetItem_checkState},
    {sipName_child, meth_QTreeWidgetItem_child, METH_VARARGS, doc_QTreeWidgetItem_child},
    {sipName_childCount, meth_QTreeWidgetItem_childCount, METH_VARARGS, doc_QTreeWidgetItem_childCount},
    {sipName_childIndicatorPolicy, meth_QTreeWidgetItem_childIndicatorPolicy, METH_VARARGS, doc_QTreeWidgetItem_childIndicatorPolicy},
    {sipName_clone, meth_QTreeWidgetItem_clone, METH_VARARGS, doc_QTreeWidgetItem_clone},
    {sipName_columnCount, meth_QTreeWidgetItem_columnCount, METH_VARARGS, doc_QTreeWidgetItem_columnCount},
    {sipName_data, meth_QTreeWidgetItem_data, METH_VARARGS, doc_QTreeWidgetItem_data},
    {sipName_emitDataChanged, meth_QTreeWidgetItem_emitDataChanged, METH_VARARGS, doc_QTreeWidgetItem_emitDataChanged},
    {sipName_flags, meth_QTreeWidgetItem_flags, METH_VARARGS, doc_QTreeWidgetItem_flags},
    {sipName_font, meth_QTreeWidgetItem_font, METH_VARARGS, doc_QTreeWidgetItem_font},
    {sipName_foreground, meth_QTreeWidgetItem_foreground, METH_VARARGS, doc_QTreeWidgetItem_foreground},
    {sipName_icon, meth_QTreeWidgetItem_icon, METH_VARARGS, doc_QTreeWidgetItem_icon},
    {sipName_indexOfChild, meth_QTreeWidgetItem_indexOfChild, METH_VARARGS, doc_QTreeWidgetItem_indexOfChild},
    {sipName_insertChild, meth_QTreeWidgetItem_insertChild, METH_VARARGS, doc_QTreeWidgetItem_insertChild},
    {sipName_insertChildren, meth_QTreeWidgetItem_insertChildren, METH_VARARGS, doc_QTreeWidgetItem_insertChildren},
    {sipName_isDisabled, meth_QTreeWidgetItem_isDisabled, METH_VARARGS, doc_QTreeWidgetItem_isDisabled},
    {sipName_isExpanded, meth_QTreeWidgetItem_isExpanded, METH_VARARGS, doc_QTreeWidgetItem_isExpanded},
    {sipName_isFirstColumnSpanned, meth_QTreeWidgetItem_isFirstColumnSpanned, METH_VARARGS, doc_QTreeWidgetItem_isFirstColumnSpanned},
    {sipName_isHidden, meth_QTreeWidgetItem_isHidden, METH_VARARGS, doc_QTreeWidgetItem_isHidden},
    {sipName_isSelected, meth_QTreeWidgetItem_isSelected, METH_VARARGS, doc_QTreeWidgetItem_isSelected},
    {sipName_parent, meth_QTreeWidgetItem_parent, METH_VARARGS, doc_QTreeWidgetItem_parent},
    {sipName_read, meth_QTreeWidgetItem_read, METH_VARARGS, doc_QTreeWidgetItem_read},
    {sipName_removeChild, meth_QTreeWidgetItem_removeChild, METH_VARARGS, doc_QTreeWidgetItem_removeChild},
    {sipName_setBackground, meth_QTreeWidgetItem_setBackground, METH_VARARGS, doc_QTreeWidgetItem_setBackground},
    {sipName_setCheckState, meth_QTreeWidgetItem_setCheckState, METH_VARARGS, doc_QTreeWidgetItem_setCheckState},
    {sipName_setChildIndicatorPolicy, meth_QTreeWidgetItem_setChildIndicatorPolicy, METH_VARARGS, doc_QTreeWidgetItem_setChildIndicatorPolicy},
    {sipName_setData, meth_QTreeWidgetItem_setData, METH_VARARGS, doc_QTreeWidgetItem_setData},
    {sipName_setDisabled, meth_QTreeWidgetItem_setDisabled, METH_VARARGS, doc_QTreeWidgetItem_setDisabled},
    {sipName_setExpanded, meth_QTreeWidgetItem_setExpanded, METH_VARARGS, doc_QTreeWidgetItem_setExpanded},
    {sipName_setFirstColumnSpanned, meth_QTreeWidgetItem_setFirstColumnSpanned, METH_VARARGS, doc_QTreeWidgetItem_setFirstColumnSpanned},
    {sipName_setFlags, meth_QTreeWidgetItem_setFlags, METH_VARARGS, doc_QTreeWidgetItem_setFlags},
    {sipName_setFont, meth_QTreeWidgetItem_setFont, METH_VARARGS, doc_QTreeWidgetItem_setFont},
    {sipName_setForeground, meth_QTreeWidgetItem_setForeground, METH_VARARGS, doc_QTreeWidgetItem_setForeground},
    {sipName_setHidden, meth_QTreeWidgetItem_setHidden, METH_VARARGS, doc_QTreeWidgetItem_setHidden},
    {sipName_setIcon, meth_QTreeWidgetItem_setIcon, METH_VARARGS, doc_QTreeWidgetItem_setIcon},
    {sipName_setSelected, meth_QTreeWidgetItem_setSelected, METH_VARARGS, doc_QTreeWidgetItem_setSelected},
    {sipName_setSizeHint, meth_QTreeWidgetItem_setSizeHint, METH_VARARGS, doc_QTreeWidgetItem_setSizeHint},
    {sipName_setStatusTip, meth_QTreeWidgetItem_setStatusTip, METH_VARARGS, doc_QTreeWidgetItem_setStatusTip},
    {sipName_setText, meth_QTreeWidgetItem_setText, METH_VARARGS, doc_QTreeWidgetItem_setText},
    {sipName_setTextAlignment, meth_QTreeWidgetItem_setTextAlignment, METH_VARARGS, doc_QTreeWidgetItem_setTextAlignment},
    {sipName_setToolTip, meth_QTreeWidgetItem_setToolTip, METH_VARARGS, doc_QTreeWidgetItem_setToolTip},
    {sipName_setWhatsThis, meth_QTreeWidgetItem_setWhatsThis, METH_VARARGS, doc_QTreeWidgetItem_setWhatsThis},
    {sipName_sizeHint, meth_QTreeWidgetItem_sizeHint, METH_VARARGS, doc_QTreeWidgetItem_sizeHint},
    {sipName_sortChildren, meth_QTreeWidgetItem_sortChildren, METH_VARARGS, doc_QTreeWidgetItem_sortChildren},
    {sipName_statusTip, meth_QTreeWidgetItem_statusTip, METH_VARARGS, doc_QTreeWidgetItem_statusTip},
    {sipName_takeChild, meth_QTreeWidgetItem_takeChild, METH_VARARGS, doc_QTreeWidgetItem_takeChild},
    {sipName_takeChildren, meth_QTreeWidgetItem_takeChildren, METH_VARARGS, doc_QTreeWidgetItem_takeChildren},
    {sipName_text, meth_QTreeWidgetItem_text, METH_VARARGS, doc_QTreeWidgetItem_text},
    {sipName_textAlignment, meth_QTreeWidgetItem_textAlignment, METH_VARARGS, doc_QTreeWidgetItem_textAlignment},
    {sipName_toolTip, meth_QTreeWidgetItem_toolTip, METH_VARARGS, doc_QTreeWidgetItem_toolTip},
    {sipName_treeWidget, meth_QTreeWidgetItem_treeWidget, METH_VARARGS, doc_QTreeWidgetItem_treeWidget},
    {sipName_type, meth_QTreeWidgetItem_type, METH_VARARGS, doc_QTreeWidgetItem_type},
    {sipName_whatsThis, meth_QTreeWidgetItem_whatsThis, METH_VARARGS, doc_QTreeWidgetItem_whatsThis},
    {sipName_write, meth_QTreeWidgetItem_write, METH_VARARGS, doc_QTreeWidgetItem_write}
};

static sipEnumMemberDef enummembers_QTreeWidgetItem[] = {
    {sipName_DontShowIndicator, static_cast<int>( ::QTreeWidgetItem::DontShowIndicator), 447},
    {sipName_DontShowIndicatorWhenChildless, static_cast<int>( ::QTreeWidgetItem::DontShowIndicatorWhenChildless), 447},
    {sipName_ShowIndicator, static_cast<int>( ::QTreeWidgetItem::ShowIndicator), 447},
    {sipName_Type, static_cast<int>( ::QTreeWidgetItem::Type), 448},
    {sipName_UserType, static_cast<int>( ::QTreeWidgetItem::UserType), 448},
};

PyDoc_STRVAR(doc_QTreeWidgetItem, "\1QTreeWidgetItem(type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(Iterable[str], type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidget, type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidget, Iterable[str], type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidget, QTreeWidgetItem, type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidgetItem, type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidgetItem, Iterable[str], type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidgetItem, QTreeWidgetItem, type: int = QTreeWidgetItem.Type)\n"
"QTreeWidgetItem(QTreeWidgetItem)");


static pyqt5ClassPluginDef plugin_QTreeWidgetItem = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTreeWidgetItem = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidgetItem,
        SIP_NULLPTR,
        &plugin_QTreeWidgetItem
    },
    {
        sipNameNr_QTreeWidgetItem,
        {0, 0, 1},
        57, methods_QTreeWidgetItem,
        5, enummembers_QTreeWidgetItem,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTreeWidgetItem,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QTreeWidgetItem,
    init_type_QTreeWidgetItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTreeWidgetItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTreeWidgetItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
