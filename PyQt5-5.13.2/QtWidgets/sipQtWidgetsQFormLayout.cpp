/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qformlayout.sip"
#include <qformlayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qformlayout.sip"
#include <qformlayout.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qformlayout.sip"
#include <qformlayout.h>
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 82 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 88 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 94 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 97 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 100 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 103 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 106 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 109 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 112 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 115 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 118 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFormLayout.cpp"


class sipQFormLayout : public  ::QFormLayout
{
public:
    sipQFormLayout( ::QWidget*);
    virtual ~sipQFormLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QSizePolicy::ControlTypes controlTypes() const SIP_OVERRIDE;
     ::QSpacerItem* spacerItem() SIP_OVERRIDE;
     ::QLayout* layout() SIP_OVERRIDE;
     ::QWidget* widget() SIP_OVERRIDE;
    void invalidate() SIP_OVERRIDE;
    int minimumHeightForWidth(int) const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool isEmpty() const SIP_OVERRIDE;
     ::QRect geometry() const SIP_OVERRIDE;
    void setGeometry(const  ::QRect&) SIP_OVERRIDE;
     ::Qt::Orientations expandingDirections() const SIP_OVERRIDE;
     ::QSize maximumSize() const SIP_OVERRIDE;
     ::QSize minimumSize() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void addItem( ::QLayoutItem*) SIP_OVERRIDE;
     ::QLayoutItem* itemAt(int) const SIP_OVERRIDE;
     ::QLayoutItem* takeAt(int) SIP_OVERRIDE;
    int indexOf( ::QWidget*) const SIP_OVERRIDE;
    int count() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFormLayout(const sipQFormLayout &);
    sipQFormLayout &operator = (const sipQFormLayout &);

    char sipPyMethods[27];
};

sipQFormLayout::sipQFormLayout( ::QWidget*a0):  ::QFormLayout(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFormLayout::~sipQFormLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFormLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QFormLayout);

    return  ::QFormLayout::metaObject();
}

int sipQFormLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFormLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QFormLayout,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQFormLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QFormLayout, _clname, &sipCpp) ? sipCpp :  ::QFormLayout::qt_metacast(_clname));
}

void sipQFormLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFormLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFormLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFormLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFormLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQFormLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QFormLayout::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQFormLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QFormLayout::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSizePolicy::ControlTypes sipQFormLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_controlTypes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_controlTypes);
#endif

    if (!sipMeth)
        return  ::QFormLayout::controlTypes();

    extern  ::QSizePolicy::ControlTypes sipVH_QtWidgets_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_81(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSpacerItem* sipQFormLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_spacerItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_spacerItem);
#endif

    if (!sipMeth)
        return  ::QFormLayout::spacerItem();

    extern  ::QSpacerItem* sipVH_QtWidgets_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_80(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QLayout* sipQFormLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_layout);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_layout);
#endif

    if (!sipMeth)
        return  ::QFormLayout::layout();

    extern  ::QLayout* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QWidget* sipQFormLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_widget);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_widget);
#endif

    if (!sipMeth)
        return  ::QFormLayout::widget();

    extern  ::QWidget* sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_78(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFormLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_invalidate);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_invalidate);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::invalidate();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQFormLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_minimumHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QFormLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFormLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QFormLayout::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQFormLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QFormLayout::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQFormLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isEmpty);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_isEmpty);
#endif

    if (!sipMeth)
        return  ::QFormLayout::isEmpty();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRect sipQFormLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_geometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_geometry);
#endif

    if (!sipMeth)
        return  ::QFormLayout::geometry();

    extern  ::QRect sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_77(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFormLayout::setGeometry(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_setGeometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_setGeometry);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtWidgets_76(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::Qt::Orientations sipQFormLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_expandingDirections);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_expandingDirections);
#endif

    if (!sipMeth)
        return  ::QFormLayout::expandingDirections();

    extern  ::Qt::Orientations sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_75(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQFormLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_maximumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_maximumSize);
#endif

    if (!sipMeth)
        return  ::QFormLayout::maximumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQFormLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[20]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[20]), sipPySelf, SIP_NULLPTR, sipName_minimumSize);
#endif

    if (!sipMeth)
        return  ::QFormLayout::minimumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQFormLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QFormLayout::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFormLayout::addItem( ::QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_addItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_addItem);
#endif

    if (!sipMeth)
    {
         ::QFormLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLayoutItem*);

    sipVH_QtWidgets_82(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQFormLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_itemAt);
#endif

    if (!sipMeth)
        return  ::QFormLayout::itemAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQFormLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_takeAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_takeAt);
#endif

    if (!sipMeth)
        return  ::QFormLayout::takeAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFormLayout::indexOf( ::QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[25]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_indexOf);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[25]), sipPySelf, SIP_NULLPTR, sipName_indexOf);
#endif

    if (!sipMeth)
        return  ::QFormLayout::indexOf(a0);

    extern int sipVH_QtWidgets_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    return sipVH_QtWidgets_85(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFormLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_count);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), sipPySelf, SIP_NULLPTR, sipName_count);
#endif

    if (!sipMeth)
        return  ::QFormLayout::count();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QFormLayout_setFieldGrowthPolicy, "setFieldGrowthPolicy(self, QFormLayout.FieldGrowthPolicy)");

extern "C" {static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFormLayout::FieldGrowthPolicy a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_FieldGrowthPolicy, &a0))
        {
            sipCpp->setFieldGrowthPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFieldGrowthPolicy, doc_QFormLayout_setFieldGrowthPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_fieldGrowthPolicy, "fieldGrowthPolicy(self) -> QFormLayout.FieldGrowthPolicy");

extern "C" {static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::QFormLayout::FieldGrowthPolicy sipRes;

            sipRes = sipCpp->fieldGrowthPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFormLayout_FieldGrowthPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_fieldGrowthPolicy, doc_QFormLayout_fieldGrowthPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setRowWrapPolicy, "setRowWrapPolicy(self, QFormLayout.RowWrapPolicy)");

extern "C" {static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFormLayout::RowWrapPolicy a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_RowWrapPolicy, &a0))
        {
            sipCpp->setRowWrapPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setRowWrapPolicy, doc_QFormLayout_setRowWrapPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_rowWrapPolicy, "rowWrapPolicy(self) -> QFormLayout.RowWrapPolicy");

extern "C" {static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::QFormLayout::RowWrapPolicy sipRes;

            sipRes = sipCpp->rowWrapPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFormLayout_RowWrapPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowWrapPolicy, doc_QFormLayout_rowWrapPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setLabelAlignment, "setLabelAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setLabelAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLabelAlignment, doc_QFormLayout_setLabelAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_labelAlignment, "labelAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QFormLayout_labelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->labelAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelAlignment, doc_QFormLayout_labelAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setFormAlignment, "setFormAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QFormLayout_setFormAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFormAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setFormAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFormAlignment, doc_QFormLayout_setFormAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_formAlignment, "formAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QFormLayout_formAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_formAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->formAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_formAlignment, doc_QFormLayout_formAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setHorizontalSpacing, "setHorizontalSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setHorizontalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setHorizontalSpacing, doc_QFormLayout_setHorizontalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_horizontalSpacing, "horizontalSpacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->horizontalSpacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_horizontalSpacing, doc_QFormLayout_horizontalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setVerticalSpacing, "setVerticalSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setVerticalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setVerticalSpacing, doc_QFormLayout_setVerticalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_verticalSpacing, "verticalSpacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_verticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_verticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->verticalSpacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_verticalSpacing, doc_QFormLayout_verticalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_spacing, doc_QFormLayout_spacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setSpacing, doc_QFormLayout_setSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_addRow, "addRow(self, QWidget, QWidget)\n"
"addRow(self, QWidget, QLayout)\n"
"addRow(self, str, QWidget)\n"
"addRow(self, str, QLayout)\n"
"addRow(self, QWidget)\n"
"addRow(self, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_addRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QWidget* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QWidget, &a1))
        {
            sipCpp->addRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
         ::QLayout* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QLayout, &a1))
        {
            sipCpp->addRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWidget, &a1))
        {
            sipCpp->addRow(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLayout* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLayout, &a1))
        {
            sipCpp->addRow(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->addRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QLayout* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->addRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addRow, doc_QFormLayout_addRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_insertRow, "insertRow(self, int, QWidget, QWidget)\n"
"insertRow(self, int, QWidget, QLayout)\n"
"insertRow(self, int, str, QWidget)\n"
"insertRow(self, int, str, QLayout)\n"
"insertRow(self, int, QWidget)\n"
"insertRow(self, int, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWidget* a1;
         ::QWidget* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QWidget, &a2))
        {
            sipCpp->insertRow(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QWidget* a1;
         ::QLayout* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QLayout, &a2))
        {
            sipCpp->insertRow(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWidget* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QWidget, &a2))
        {
            sipCpp->insertRow(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QLayout* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QLayout, &a2))
        {
            sipCpp->insertRow(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QWidget* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QLayout* a1;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QLayout, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_insertRow, doc_QFormLayout_insertRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setItem, "setItem(self, int, QFormLayout.ItemRole, QLayoutItem)");

extern "C" {static PyObject *meth_QFormLayout_setItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout::ItemRole a1;
         ::QLayoutItem* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayoutItem, &a2))
        {
            sipCpp->setItem(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setItem, doc_QFormLayout_setItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setWidget, "setWidget(self, int, QFormLayout.ItemRole, QWidget)");

extern "C" {static PyObject *meth_QFormLayout_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout::ItemRole a1;
         ::QWidget* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QWidget, &a2))
        {
            sipCpp->setWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setWidget, doc_QFormLayout_setWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setLayout, "setLayout(self, int, QFormLayout.ItemRole, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_setLayout(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout::ItemRole a1;
         ::QLayout* a2;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayout, &a2))
        {
            sipCpp->setLayout(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLayout, doc_QFormLayout_setLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_itemAt, "itemAt(self, int, QFormLayout.ItemRole) -> QLayoutItem\n"
"itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QFormLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QFormLayout::ItemRole a1;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1))
        {
             ::QLayoutItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFormLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_itemAt, doc_QFormLayout_itemAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_getItemPosition, "getItemPosition(self, int) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getItemPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getItemPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QFormLayout::ItemRole a2;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->getItemPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getItemPosition, doc_QFormLayout_getItemPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_getWidgetPosition, "getWidgetPosition(self, QWidget) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        int a1;
         ::QFormLayout::ItemRole a2;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->getWidgetPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getWidgetPosition, doc_QFormLayout_getWidgetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_getLayoutPosition, "getLayoutPosition(self, QLayout) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLayout* a0;
        int a1;
         ::QFormLayout::ItemRole a2;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->getLayoutPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getLayoutPosition, doc_QFormLayout_getLayoutPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_labelForField, "labelForField(self, QWidget) -> QWidget\n"
"labelForField(self, QLayout) -> QWidget");

extern "C" {static PyObject *meth_QFormLayout_labelForField(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelForField(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->labelForField(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    {
         ::QLayout* a0;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->labelForField(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelForField, doc_QFormLayout_labelForField);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_addItem, "addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QFormLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLayoutItem* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFormLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addItem, doc_QFormLayout_addItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QFormLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFormLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_takeAt, doc_QFormLayout_takeAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QFormLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFormLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setGeometry, doc_QFormLayout_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QFormLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QFormLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_minimumSize, doc_QFormLayout_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QFormLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QFormLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_sizeHint, doc_QFormLayout_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QFormLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QFormLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_invalidate, doc_QFormLayout_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFormLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_hasHeightForWidth, doc_QFormLayout_hasHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QFormLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFormLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_heightForWidth, doc_QFormLayout_heightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QFormLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((sipSelfWasArg ? sipCpp-> ::QFormLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_expandingDirections, doc_QFormLayout_expandingDirections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFormLayout::count() : sipCpp->count());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_count, doc_QFormLayout_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_rowCount, "rowCount(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowCount, doc_QFormLayout_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_removeRow, "removeRow(self, int)\n"
"removeRow(self, QWidget)\n"
"removeRow(self, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QLayout* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_removeRow, doc_QFormLayout_removeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFormLayout_takeRow, "takeRow(self, int) -> QFormLayout.TakeRowResult\n"
"takeRow(self, QWidget) -> QFormLayout.TakeRowResult\n"
"takeRow(self, QLayout) -> QFormLayout.TakeRowResult");

extern "C" {static PyObject *meth_QFormLayout_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
             ::QFormLayout::TakeRowResult*sipRes;

            sipRes = new  ::QFormLayout::TakeRowResult(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QFormLayout_TakeRowResult,SIP_NULLPTR);
        }
    }

    {
         ::QWidget* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
             ::QFormLayout::TakeRowResult*sipRes;

            sipRes = new  ::QFormLayout::TakeRowResult(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QFormLayout_TakeRowResult,SIP_NULLPTR);
        }
    }

    {
         ::QLayout* a0;
         ::QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
             ::QFormLayout::TakeRowResult*sipRes;

            sipRes = new  ::QFormLayout::TakeRowResult(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QFormLayout_TakeRowResult,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_takeRow, doc_QFormLayout_takeRow);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFormLayout(void *, const sipTypeDef *);}
static void *cast_QFormLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFormLayout *sipCpp = reinterpret_cast< ::QFormLayout *>(sipCppV);

    if (targetType == sipType_QLayout)
        return static_cast< ::QLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QLayoutItem)
        return static_cast< ::QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFormLayout(void *, int);}
static void release_QFormLayout(void *sipCppV, int)
{
     ::QFormLayout *sipCpp = reinterpret_cast< ::QFormLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QFormLayout(Py_ssize_t);}
static void *array_QFormLayout(Py_ssize_t sipNrElem)
{
    return new  ::QFormLayout[sipNrElem];
}


extern "C" {static void dealloc_QFormLayout(sipSimpleWrapper *);}
static void dealloc_QFormLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFormLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFormLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFormLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFormLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFormLayout *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQFormLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFormLayout[] = {{188, 255, 1}};


static PyMethodDef methods_QFormLayout[] = {
    {sipName_addItem, meth_QFormLayout_addItem, METH_VARARGS, doc_QFormLayout_addItem},
    {sipName_addRow, meth_QFormLayout_addRow, METH_VARARGS, doc_QFormLayout_addRow},
    {sipName_count, meth_QFormLayout_count, METH_VARARGS, doc_QFormLayout_count},
    {sipName_expandingDirections, meth_QFormLayout_expandingDirections, METH_VARARGS, doc_QFormLayout_expandingDirections},
    {sipName_fieldGrowthPolicy, meth_QFormLayout_fieldGrowthPolicy, METH_VARARGS, doc_QFormLayout_fieldGrowthPolicy},
    {sipName_formAlignment, meth_QFormLayout_formAlignment, METH_VARARGS, doc_QFormLayout_formAlignment},
    {sipName_getItemPosition, meth_QFormLayout_getItemPosition, METH_VARARGS, doc_QFormLayout_getItemPosition},
    {sipName_getLayoutPosition, meth_QFormLayout_getLayoutPosition, METH_VARARGS, doc_QFormLayout_getLayoutPosition},
    {sipName_getWidgetPosition, meth_QFormLayout_getWidgetPosition, METH_VARARGS, doc_QFormLayout_getWidgetPosition},
    {sipName_hasHeightForWidth, meth_QFormLayout_hasHeightForWidth, METH_VARARGS, doc_QFormLayout_hasHeightForWidth},
    {sipName_heightForWidth, meth_QFormLayout_heightForWidth, METH_VARARGS, doc_QFormLayout_heightForWidth},
    {sipName_horizontalSpacing, meth_QFormLayout_horizontalSpacing, METH_VARARGS, doc_QFormLayout_horizontalSpacing},
    {sipName_insertRow, meth_QFormLayout_insertRow, METH_VARARGS, doc_QFormLayout_insertRow},
    {sipName_invalidate, meth_QFormLayout_invalidate, METH_VARARGS, doc_QFormLayout_invalidate},
    {sipName_itemAt, meth_QFormLayout_itemAt, METH_VARARGS, doc_QFormLayout_itemAt},
    {sipName_labelAlignment, meth_QFormLayout_labelAlignment, METH_VARARGS, doc_QFormLayout_labelAlignment},
    {sipName_labelForField, meth_QFormLayout_labelForField, METH_VARARGS, doc_QFormLayout_labelForField},
    {sipName_minimumSize, meth_QFormLayout_minimumSize, METH_VARARGS, doc_QFormLayout_minimumSize},
    {sipName_removeRow, meth_QFormLayout_removeRow, METH_VARARGS, doc_QFormLayout_removeRow},
    {sipName_rowCount, meth_QFormLayout_rowCount, METH_VARARGS, doc_QFormLayout_rowCount},
    {sipName_rowWrapPolicy, meth_QFormLayout_rowWrapPolicy, METH_VARARGS, doc_QFormLayout_rowWrapPolicy},
    {sipName_setFieldGrowthPolicy, meth_QFormLayout_setFieldGrowthPolicy, METH_VARARGS, doc_QFormLayout_setFieldGrowthPolicy},
    {sipName_setFormAlignment, meth_QFormLayout_setFormAlignment, METH_VARARGS, doc_QFormLayout_setFormAlignment},
    {sipName_setGeometry, meth_QFormLayout_setGeometry, METH_VARARGS, doc_QFormLayout_setGeometry},
    {sipName_setHorizontalSpacing, meth_QFormLayout_setHorizontalSpacing, METH_VARARGS, doc_QFormLayout_setHorizontalSpacing},
    {sipName_setItem, meth_QFormLayout_setItem, METH_VARARGS, doc_QFormLayout_setItem},
    {sipName_setLabelAlignment, meth_QFormLayout_setLabelAlignment, METH_VARARGS, doc_QFormLayout_setLabelAlignment},
    {sipName_setLayout, meth_QFormLayout_setLayout, METH_VARARGS, doc_QFormLayout_setLayout},
    {sipName_setRowWrapPolicy, meth_QFormLayout_setRowWrapPolicy, METH_VARARGS, doc_QFormLayout_setRowWrapPolicy},
    {sipName_setSpacing, meth_QFormLayout_setSpacing, METH_VARARGS, doc_QFormLayout_setSpacing},
    {sipName_setVerticalSpacing, meth_QFormLayout_setVerticalSpacing, METH_VARARGS, doc_QFormLayout_setVerticalSpacing},
    {sipName_setWidget, meth_QFormLayout_setWidget, METH_VARARGS, doc_QFormLayout_setWidget},
    {sipName_sizeHint, meth_QFormLayout_sizeHint, METH_VARARGS, doc_QFormLayout_sizeHint},
    {sipName_spacing, meth_QFormLayout_spacing, METH_VARARGS, doc_QFormLayout_spacing},
    {sipName_takeAt, meth_QFormLayout_takeAt, METH_VARARGS, doc_QFormLayout_takeAt},
    {sipName_takeRow, meth_QFormLayout_takeRow, METH_VARARGS, doc_QFormLayout_takeRow},
    {sipName_verticalSpacing, meth_QFormLayout_verticalSpacing, METH_VARARGS, doc_QFormLayout_verticalSpacing}
};

static sipEnumMemberDef enummembers_QFormLayout[] = {
    {sipName_AllNonFixedFieldsGrow, static_cast<int>( ::QFormLayout::AllNonFixedFieldsGrow), 96},
    {sipName_DontWrapRows, static_cast<int>( ::QFormLayout::DontWrapRows), 98},
    {sipName_ExpandingFieldsGrow, static_cast<int>( ::QFormLayout::ExpandingFieldsGrow), 96},
    {sipName_FieldRole, static_cast<int>( ::QFormLayout::FieldRole), 97},
    {sipName_FieldsStayAtSizeHint, static_cast<int>( ::QFormLayout::FieldsStayAtSizeHint), 96},
    {sipName_LabelRole, static_cast<int>( ::QFormLayout::LabelRole), 97},
    {sipName_SpanningRole, static_cast<int>( ::QFormLayout::SpanningRole), 97},
    {sipName_WrapAllRows, static_cast<int>( ::QFormLayout::WrapAllRows), 98},
    {sipName_WrapLongRows, static_cast<int>( ::QFormLayout::WrapLongRows), 98},
};

PyDoc_STRVAR(doc_QFormLayout, "\1QFormLayout(parent: QWidget = None)");


static pyqt5ClassPluginDef plugin_QFormLayout = {
    & ::QFormLayout::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QFormLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFormLayout,
        SIP_NULLPTR,
        &plugin_QFormLayout
    },
    {
        sipNameNr_QFormLayout,
        {0, 0, 1},
        37, methods_QFormLayout,
        9, enummembers_QFormLayout,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFormLayout,
    -1,
    -1,
    supers_QFormLayout,
    SIP_NULLPTR,
    init_type_QFormLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFormLayout,
    SIP_NULLPTR,
    array_QFormLayout,
    SIP_NULLPTR,
    release_QFormLayout,
    cast_QFormLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
