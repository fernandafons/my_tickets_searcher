/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qundostack.sip"
#include <qundostack.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qundostack.sip"
#include <qundostack.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"


class sipQUndoStack : public  ::QUndoStack
{
public:
    sipQUndoStack( ::QObject*);
    virtual ~sipQUndoStack();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQUndoStack(const sipQUndoStack &);
    sipQUndoStack &operator = (const sipQUndoStack &);

    char sipPyMethods[7];
};

sipQUndoStack::sipQUndoStack( ::QObject*a0):  ::QUndoStack(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUndoStack::~sipQUndoStack()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQUndoStack::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QUndoStack);

    return  ::QUndoStack::metaObject();
}

int sipQUndoStack::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QUndoStack::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QUndoStack,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQUndoStack::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QUndoStack, _clname, &sipCpp) ? sipCpp :  ::QUndoStack::qt_metacast(_clname));
}

bool sipQUndoStack::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QUndoStack::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQUndoStack::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QUndoStack::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQUndoStack::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QUndoStack::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoStack::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QUndoStack::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoStack::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QUndoStack::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoStack::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QUndoStack::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQUndoStack::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QUndoStack::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QUndoStack_clear, "clear(self)");

extern "C" {static PyObject *meth_QUndoStack_clear(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_clear, doc_QUndoStack_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_push, "push(self, QUndoCommand)");

extern "C" {static PyObject *meth_QUndoStack_push(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_push(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoCommand* a0;
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QUndoStack, &sipCpp, sipType_QUndoCommand, &a0))
        {
            sipCpp->push(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_push, doc_QUndoStack_push);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_canUndo, "canUndo(self) -> bool");

extern "C" {static PyObject *meth_QUndoStack_canUndo(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_canUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canUndo();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_canUndo, doc_QUndoStack_canUndo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_canRedo, "canRedo(self) -> bool");

extern "C" {static PyObject *meth_QUndoStack_canRedo(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_canRedo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canRedo();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_canRedo, doc_QUndoStack_canRedo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_undoText, "undoText(self) -> str");

extern "C" {static PyObject *meth_QUndoStack_undoText(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_undoText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->undoText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_undoText, doc_QUndoStack_undoText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_redoText, "redoText(self) -> str");

extern "C" {static PyObject *meth_QUndoStack_redoText(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_redoText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->redoText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_redoText, doc_QUndoStack_redoText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_count, "count(self) -> int");

extern "C" {static PyObject *meth_QUndoStack_count(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_count, doc_QUndoStack_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_index, "index(self) -> int");

extern "C" {static PyObject *meth_QUndoStack_index(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->index();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_index, doc_QUndoStack_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_text, "text(self, int) -> str");

extern "C" {static PyObject *meth_QUndoStack_text(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUndoStack, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_text, doc_QUndoStack_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_createUndoAction, "createUndoAction(self, QObject, prefix: str = '') -> QAction");

extern "C" {static PyObject *meth_QUndoStack_createUndoAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_createUndoAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
        const  ::QUndoStack *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|J1", &sipSelf, sipType_QUndoStack, &sipCpp, sipType_QObject, &a0, &sipOwner, sipType_QString,&a1, &a1State))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->createUndoAction(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAction,(PyObject *)sipOwner);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_createUndoAction, doc_QUndoStack_createUndoAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_createRedoAction, "createRedoAction(self, QObject, prefix: str = '') -> QAction");

extern "C" {static PyObject *meth_QUndoStack_createRedoAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_createRedoAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
        const  ::QUndoStack *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|J1", &sipSelf, sipType_QUndoStack, &sipCpp, sipType_QObject, &a0, &sipOwner, sipType_QString,&a1, &a1State))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->createRedoAction(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAction,(PyObject *)sipOwner);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_createRedoAction, doc_QUndoStack_createRedoAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QUndoStack_isActive(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_isActive, doc_QUndoStack_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_isClean, "isClean(self) -> bool");

extern "C" {static PyObject *meth_QUndoStack_isClean(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_isClean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClean();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_isClean, doc_QUndoStack_isClean);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_cleanIndex, "cleanIndex(self) -> int");

extern "C" {static PyObject *meth_QUndoStack_cleanIndex(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_cleanIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cleanIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_cleanIndex, doc_QUndoStack_cleanIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_beginMacro, "beginMacro(self, str)");

extern "C" {static PyObject *meth_QUndoStack_beginMacro(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_beginMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUndoStack, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->beginMacro(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_beginMacro, doc_QUndoStack_beginMacro);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_endMacro, "endMacro(self)");

extern "C" {static PyObject *meth_QUndoStack_endMacro(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_endMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->endMacro();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_endMacro, doc_QUndoStack_endMacro);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_redo, "redo(self)");

extern "C" {static PyObject *meth_QUndoStack_redo(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_redo, doc_QUndoStack_redo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_setActive, "setActive(self, active: bool = True)");

extern "C" {static PyObject *meth_QUndoStack_setActive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_setActive(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::QUndoStack *sipCpp;

        static const char *sipKwdList[] = {
            sipName_active,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QUndoStack, &sipCpp, &a0))
        {
            sipCpp->setActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_setActive, doc_QUndoStack_setActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_setClean, "setClean(self)");

extern "C" {static PyObject *meth_QUndoStack_setClean(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_setClean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->setClean();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_setClean, doc_QUndoStack_setClean);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_setIndex, "setIndex(self, int)");

extern "C" {static PyObject *meth_QUndoStack_setIndex(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_setIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUndoStack, &sipCpp, &a0))
        {
            sipCpp->setIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_setIndex, doc_QUndoStack_setIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_undo, "undo(self)");

extern "C" {static PyObject *meth_QUndoStack_undo(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_undo, doc_QUndoStack_undo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_resetClean, "resetClean(self)");

extern "C" {static PyObject *meth_QUndoStack_resetClean(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_resetClean(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            sipCpp->resetClean();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_resetClean, doc_QUndoStack_resetClean);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_setUndoLimit, "setUndoLimit(self, int)");

extern "C" {static PyObject *meth_QUndoStack_setUndoLimit(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_setUndoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUndoStack, &sipCpp, &a0))
        {
            sipCpp->setUndoLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_setUndoLimit, doc_QUndoStack_setUndoLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_undoLimit, "undoLimit(self) -> int");

extern "C" {static PyObject *meth_QUndoStack_undoLimit(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_undoLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUndoStack, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->undoLimit();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_undoLimit, doc_QUndoStack_undoLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUndoStack_command, "command(self, int) -> QUndoCommand");

extern "C" {static PyObject *meth_QUndoStack_command(PyObject *, PyObject *);}
static PyObject *meth_QUndoStack_command(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QUndoStack *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUndoStack, &sipCpp, &a0))
        {
            const  ::QUndoCommand*sipRes;

            sipRes = sipCpp->command(a0);

            return sipConvertFromType(const_cast< ::QUndoCommand *>(sipRes),sipType_QUndoCommand,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QUndoStack, sipName_command, doc_QUndoStack_command);

    return SIP_NULLPTR;
}


extern "C" {static Py_ssize_t slot_QUndoStack___len__(PyObject *);}
static Py_ssize_t slot_QUndoStack___len__(PyObject *sipSelf)
{
     ::QUndoStack *sipCpp = reinterpret_cast< ::QUndoStack *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUndoStack));

    if (!sipCpp)
        return 0;


    {
        {
            Py_ssize_t sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (Py_ssize_t)sipCpp->count();
#line 1034 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQUndoStack.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QUndoStack(void *, const sipTypeDef *);}
static void *cast_QUndoStack(void *sipCppV, const sipTypeDef *targetType)
{
     ::QUndoStack *sipCpp = reinterpret_cast< ::QUndoStack *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUndoStack(void *, int);}
static void release_QUndoStack(void *sipCppV, int)
{
     ::QUndoStack *sipCpp = reinterpret_cast< ::QUndoStack *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QUndoStack(Py_ssize_t);}
static void *array_QUndoStack(Py_ssize_t sipNrElem)
{
    return new  ::QUndoStack[sipNrElem];
}


extern "C" {static void dealloc_QUndoStack(sipSimpleWrapper *);}
static void dealloc_QUndoStack(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQUndoStack *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUndoStack(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QUndoStack(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUndoStack(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQUndoStack *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQUndoStack(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QUndoStack[] = {{32, 0, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QUndoStack[] = {
    {(void *)slot_QUndoStack___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUndoStack[] = {
    {sipName_beginMacro, meth_QUndoStack_beginMacro, METH_VARARGS, doc_QUndoStack_beginMacro},
    {sipName_canRedo, meth_QUndoStack_canRedo, METH_VARARGS, doc_QUndoStack_canRedo},
    {sipName_canUndo, meth_QUndoStack_canUndo, METH_VARARGS, doc_QUndoStack_canUndo},
    {sipName_cleanIndex, meth_QUndoStack_cleanIndex, METH_VARARGS, doc_QUndoStack_cleanIndex},
    {sipName_clear, meth_QUndoStack_clear, METH_VARARGS, doc_QUndoStack_clear},
    {sipName_command, meth_QUndoStack_command, METH_VARARGS, doc_QUndoStack_command},
    {sipName_count, meth_QUndoStack_count, METH_VARARGS, doc_QUndoStack_count},
    {sipName_createRedoAction, SIP_MLMETH_CAST(meth_QUndoStack_createRedoAction), METH_VARARGS|METH_KEYWORDS, doc_QUndoStack_createRedoAction},
    {sipName_createUndoAction, SIP_MLMETH_CAST(meth_QUndoStack_createUndoAction), METH_VARARGS|METH_KEYWORDS, doc_QUndoStack_createUndoAction},
    {sipName_endMacro, meth_QUndoStack_endMacro, METH_VARARGS, doc_QUndoStack_endMacro},
    {sipName_index, meth_QUndoStack_index, METH_VARARGS, doc_QUndoStack_index},
    {sipName_isActive, meth_QUndoStack_isActive, METH_VARARGS, doc_QUndoStack_isActive},
    {sipName_isClean, meth_QUndoStack_isClean, METH_VARARGS, doc_QUndoStack_isClean},
    {sipName_push, meth_QUndoStack_push, METH_VARARGS, doc_QUndoStack_push},
    {sipName_redo, meth_QUndoStack_redo, METH_VARARGS, doc_QUndoStack_redo},
    {sipName_redoText, meth_QUndoStack_redoText, METH_VARARGS, doc_QUndoStack_redoText},
    {sipName_resetClean, meth_QUndoStack_resetClean, METH_VARARGS, doc_QUndoStack_resetClean},
    {sipName_setActive, SIP_MLMETH_CAST(meth_QUndoStack_setActive), METH_VARARGS|METH_KEYWORDS, doc_QUndoStack_setActive},
    {sipName_setClean, meth_QUndoStack_setClean, METH_VARARGS, doc_QUndoStack_setClean},
    {sipName_setIndex, meth_QUndoStack_setIndex, METH_VARARGS, doc_QUndoStack_setIndex},
    {sipName_setUndoLimit, meth_QUndoStack_setUndoLimit, METH_VARARGS, doc_QUndoStack_setUndoLimit},
    {sipName_text, meth_QUndoStack_text, METH_VARARGS, doc_QUndoStack_text},
    {sipName_undo, meth_QUndoStack_undo, METH_VARARGS, doc_QUndoStack_undo},
    {sipName_undoLimit, meth_QUndoStack_undoLimit, METH_VARARGS, doc_QUndoStack_undoLimit},
    {sipName_undoText, meth_QUndoStack_undoText, METH_VARARGS, doc_QUndoStack_undoText}
};

PyDoc_STRVAR(doc_QUndoStack, "\1QUndoStack(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QUndoStack[] = {
    {"undoTextChanged(QString)", "\1undoTextChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"redoTextChanged(QString)", "\1redoTextChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"indexChanged(int)", "\1indexChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"cleanChanged(bool)", "\1cleanChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"canUndoChanged(bool)", "\1canUndoChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"canRedoChanged(bool)", "\1canRedoChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QUndoStack = {
    & ::QUndoStack::staticMetaObject,
    0,
    signals_QUndoStack,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QUndoStack = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUndoStack,
        SIP_NULLPTR,
        &plugin_QUndoStack
    },
    {
        sipNameNr_QUndoStack,
        {0, 0, 1},
        25, methods_QUndoStack,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUndoStack,
    -1,
    -1,
    supers_QUndoStack,
    slots_QUndoStack,
    init_type_QUndoStack,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QUndoStack,
    SIP_NULLPTR,
    array_QUndoStack,
    SIP_NULLPTR,
    release_QUndoStack,
    cast_QUndoStack,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
