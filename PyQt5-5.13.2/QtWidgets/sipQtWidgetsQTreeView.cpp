/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtreeview.sip"
#include <qtreeview.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 147 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 560 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 208 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 237 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 240 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 243 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 246 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 249 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 252 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 255 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 258 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 264 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 269 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 272 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 275 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 278 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 281 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 284 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 287 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 290 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 293 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 296 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTreeView.cpp"


class sipQTreeView : public  ::QTreeView
{
public:
    sipQTreeView( ::QWidget*);
    virtual ~sipQTreeView();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void drawBranches( ::QPainter*,const  ::QRect&,const  ::QModelIndex&) const SIP_OVERRIDE;
    void drawRow( ::QPainter*,const  ::QStyleOptionViewItem&,const  ::QModelIndex&) const SIP_OVERRIDE;
    void setupViewport( ::QWidget*) SIP_OVERRIDE;
    void scrollContentsBy(int,int) SIP_OVERRIDE;
    bool viewportEvent( ::QEvent*) SIP_OVERRIDE;
     ::QSize viewportSizeHint() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void setModel( ::QAbstractItemModel*) SIP_OVERRIDE;
    void setSelectionModel( ::QItemSelectionModel*) SIP_OVERRIDE;
    void keyboardSearch(const  ::QString&) SIP_OVERRIDE;
     ::QRect visualRect(const  ::QModelIndex&) const SIP_OVERRIDE;
    void scrollTo(const  ::QModelIndex&, ::QAbstractItemView::ScrollHint) SIP_OVERRIDE;
     ::QModelIndex indexAt(const  ::QPoint&) const SIP_OVERRIDE;
    int sizeHintForRow(int) const SIP_OVERRIDE;
    int sizeHintForColumn(int) const SIP_OVERRIDE;
    void reset() SIP_OVERRIDE;
    void setRootIndex(const  ::QModelIndex&) SIP_OVERRIDE;
    void selectAll() SIP_OVERRIDE;
    void dataChanged(const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&) SIP_OVERRIDE;
    void rowsInserted(const  ::QModelIndex&,int,int) SIP_OVERRIDE;
    void rowsAboutToBeRemoved(const  ::QModelIndex&,int,int) SIP_OVERRIDE;
    void selectionChanged(const  ::QItemSelection&,const  ::QItemSelection&) SIP_OVERRIDE;
    void currentChanged(const  ::QModelIndex&,const  ::QModelIndex&) SIP_OVERRIDE;
    void updateEditorData() SIP_OVERRIDE;
    void updateEditorGeometries() SIP_OVERRIDE;
    void updateGeometries() SIP_OVERRIDE;
    void verticalScrollbarAction(int) SIP_OVERRIDE;
    void horizontalScrollbarAction(int) SIP_OVERRIDE;
    void verticalScrollbarValueChanged(int) SIP_OVERRIDE;
    void horizontalScrollbarValueChanged(int) SIP_OVERRIDE;
    void closeEditor( ::QWidget*, ::QAbstractItemDelegate::EndEditHint) SIP_OVERRIDE;
    void commitData( ::QWidget*) SIP_OVERRIDE;
    void editorDestroyed( ::QObject*) SIP_OVERRIDE;
     ::QModelIndex moveCursor( ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers) SIP_OVERRIDE;
    int horizontalOffset() const SIP_OVERRIDE;
    int verticalOffset() const SIP_OVERRIDE;
    bool isIndexHidden(const  ::QModelIndex&) const SIP_OVERRIDE;
    void setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
     ::QRegion visualRegionForSelection(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QModelIndexList selectedIndexes() const SIP_OVERRIDE;
    bool edit(const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*) SIP_OVERRIDE;
     ::QItemSelectionModel::SelectionFlags selectionCommand(const  ::QModelIndex&,const  ::QEvent*) const SIP_OVERRIDE;
    void startDrag( ::Qt::DropActions) SIP_OVERRIDE;
     ::QStyleOptionViewItem viewOptions() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeView(const sipQTreeView &);
    sipQTreeView &operator = (const sipQTreeView &);

    char sipPyMethods[89];
};

sipQTreeView::sipQTreeView( ::QWidget*a0):  ::QTreeView(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeView::~sipQTreeView()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTreeView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTreeView);

    return  ::QTreeView::metaObject();
}

int sipQTreeView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTreeView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTreeView,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQTreeView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTreeView, _clname, &sipCpp) ? sipCpp :  ::QTreeView::qt_metacast(_clname));
}

void sipQTreeView::drawBranches( ::QPainter*a0,const  ::QRect& a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawBranches);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_drawBranches);
#endif

    if (!sipMeth)
    {
         ::QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_208(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,const  ::QModelIndex&);

    sipVH_QtWidgets_208(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::drawRow( ::QPainter*a0,const  ::QStyleOptionViewItem& a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_drawRow);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_drawRow);
#endif

    if (!sipMeth)
    {
         ::QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QStyleOptionViewItem&,const  ::QModelIndex&);

    sipVH_QtWidgets_38(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_setupViewport);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_setupViewport);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);
#endif

    if (!sipMeth)
    {
         ::QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_viewportEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_viewportEvent);
#endif

    if (!sipMeth)
        return  ::QTreeView::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTreeView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewportSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_viewportSizeHint);
#endif

    if (!sipMeth)
        return  ::QTreeView::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QTreeView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQTreeView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QTreeView::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTreeView::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QTreeView::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTreeView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QTreeView::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTreeView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QTreeView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQTreeView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QTreeView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTreeView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QTreeView::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTreeView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[39]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[39]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QTreeView::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQTreeView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QTreeView::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTreeView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[42]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[42]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QTreeView::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQTreeView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[43]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[43]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QTreeView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTreeView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QTreeView::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QTreeView::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTreeView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QTreeView::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QTreeView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QTreeView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QTreeView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_setModel);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], sipPySelf, SIP_NULLPTR, sipName_setModel);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtWidgets_48(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelectionModel( ::QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_setSelectionModel);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], sipPySelf, SIP_NULLPTR, sipName_setSelectionModel);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QItemSelectionModel*);

    sipVH_QtWidgets_49(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyboardSearch(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[54], &sipPySelf, SIP_NULLPTR, sipName_keyboardSearch);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[54], sipPySelf, SIP_NULLPTR, sipName_keyboardSearch);
#endif

    if (!sipMeth)
    {
         ::QTreeView::keyboardSearch(a0);
        return;
    }

    extern void sipVH_QtWidgets_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtWidgets_50(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRect sipQTreeView::visualRect(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[55]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_visualRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[55]), sipPySelf, SIP_NULLPTR, sipName_visualRect);
#endif

    if (!sipMeth)
        return  ::QTreeView::visualRect(a0);

    extern  ::QRect sipVH_QtWidgets_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_51(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::scrollTo(const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[56], &sipPySelf, SIP_NULLPTR, sipName_scrollTo);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[56], sipPySelf, SIP_NULLPTR, sipName_scrollTo);
#endif

    if (!sipMeth)
    {
         ::QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_52(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQTreeView::indexAt(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[57]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_indexAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[57]), sipPySelf, SIP_NULLPTR, sipName_indexAt);
#endif

    if (!sipMeth)
        return  ::QTreeView::indexAt(a0);

    extern  ::QModelIndex sipVH_QtWidgets_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtWidgets_53(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTreeView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[58]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHintForRow);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[58]), sipPySelf, SIP_NULLPTR, sipName_sizeHintForRow);
#endif

    if (!sipMeth)
        return  ::QTreeView::sizeHintForRow(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTreeView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[59]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHintForColumn);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[59]), sipPySelf, SIP_NULLPTR, sipName_sizeHintForColumn);
#endif

    if (!sipMeth)
        return  ::QTreeView::sizeHintForColumn(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[60], &sipPySelf, SIP_NULLPTR, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[60], sipPySelf, SIP_NULLPTR, sipName_reset);
#endif

    if (!sipMeth)
    {
         ::QTreeView::reset();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::setRootIndex(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[61], &sipPySelf, SIP_NULLPTR, sipName_setRootIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[61], sipPySelf, SIP_NULLPTR, sipName_setRootIndex);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setRootIndex(a0);
        return;
    }

    extern void sipVH_QtWidgets_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtWidgets_54(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[62], &sipPySelf, SIP_NULLPTR, sipName_selectAll);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[62], sipPySelf, SIP_NULLPTR, sipName_selectAll);
#endif

    if (!sipMeth)
    {
         ::QTreeView::selectAll();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::dataChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[63], &sipPySelf, SIP_NULLPTR, sipName_dataChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[63], sipPySelf, SIP_NULLPTR, sipName_dataChanged);
#endif

    if (!sipMeth)
    {
         ::QTreeView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);

    sipVH_QtWidgets_55(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::rowsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[64], &sipPySelf, SIP_NULLPTR, sipName_rowsInserted);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[64], sipPySelf, SIP_NULLPTR, sipName_rowsInserted);
#endif

    if (!sipMeth)
    {
         ::QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::rowsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[65], &sipPySelf, SIP_NULLPTR, sipName_rowsAboutToBeRemoved);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[65], sipPySelf, SIP_NULLPTR, sipName_rowsAboutToBeRemoved);
#endif

    if (!sipMeth)
    {
         ::QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::selectionChanged(const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[66], &sipPySelf, SIP_NULLPTR, sipName_selectionChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[66], sipPySelf, SIP_NULLPTR, sipName_selectionChanged);
#endif

    if (!sipMeth)
    {
         ::QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&,const  ::QItemSelection&);

    sipVH_QtWidgets_57(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::currentChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[67], &sipPySelf, SIP_NULLPTR, sipName_currentChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[67], sipPySelf, SIP_NULLPTR, sipName_currentChanged);
#endif

    if (!sipMeth)
    {
         ::QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtWidgets_58(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[68], &sipPySelf, SIP_NULLPTR, sipName_updateEditorData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[68], sipPySelf, SIP_NULLPTR, sipName_updateEditorData);
#endif

    if (!sipMeth)
    {
         ::QTreeView::updateEditorData();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[69], &sipPySelf, SIP_NULLPTR, sipName_updateEditorGeometries);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[69], sipPySelf, SIP_NULLPTR, sipName_updateEditorGeometries);
#endif

    if (!sipMeth)
    {
         ::QTreeView::updateEditorGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[70], &sipPySelf, SIP_NULLPTR, sipName_updateGeometries);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[70], sipPySelf, SIP_NULLPTR, sipName_updateGeometries);
#endif

    if (!sipMeth)
    {
         ::QTreeView::updateGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTreeView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[71], &sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarAction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[71], sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarAction);
#endif

    if (!sipMeth)
    {
         ::QTreeView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[72], &sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarAction);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[72], sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarAction);
#endif

    if (!sipMeth)
    {
         ::QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[73], &sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarValueChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[73], sipPySelf, SIP_NULLPTR, sipName_verticalScrollbarValueChanged);
#endif

    if (!sipMeth)
    {
         ::QTreeView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[74], &sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarValueChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[74], sipPySelf, SIP_NULLPTR, sipName_horizontalScrollbarValueChanged);
#endif

    if (!sipMeth)
    {
         ::QTreeView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEditor( ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[75], &sipPySelf, SIP_NULLPTR, sipName_closeEditor);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[75], sipPySelf, SIP_NULLPTR, sipName_closeEditor);
#endif

    if (!sipMeth)
    {
         ::QTreeView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*, ::QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_60(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::commitData( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[76], &sipPySelf, SIP_NULLPTR, sipName_commitData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[76], sipPySelf, SIP_NULLPTR, sipName_commitData);
#endif

    if (!sipMeth)
    {
         ::QTreeView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::editorDestroyed( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[77], &sipPySelf, SIP_NULLPTR, sipName_editorDestroyed);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[77], sipPySelf, SIP_NULLPTR, sipName_editorDestroyed);
#endif

    if (!sipMeth)
    {
         ::QTreeView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtWidgets_61(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQTreeView::moveCursor( ::QAbstractItemView::CursorAction a0, ::Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[78], &sipPySelf, SIP_NULLPTR, sipName_moveCursor);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[78], sipPySelf, SIP_NULLPTR, sipName_moveCursor);
#endif

    if (!sipMeth)
        return  ::QTreeView::moveCursor(a0,a1);

    extern  ::QModelIndex sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);

    return sipVH_QtWidgets_62(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

int sipQTreeView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[79]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_horizontalOffset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[79]), sipPySelf, SIP_NULLPTR, sipName_horizontalOffset);
#endif

    if (!sipMeth)
        return  ::QTreeView::horizontalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTreeView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[80]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_verticalOffset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[80]), sipPySelf, SIP_NULLPTR, sipName_verticalOffset);
#endif

    if (!sipMeth)
        return  ::QTreeView::verticalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTreeView::isIndexHidden(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[81]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isIndexHidden);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[81]), sipPySelf, SIP_NULLPTR, sipName_isIndexHidden);
#endif

    if (!sipMeth)
        return  ::QTreeView::isIndexHidden(a0);

    extern bool sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_63(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[82], &sipPySelf, SIP_NULLPTR, sipName_setSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[82], sipPySelf, SIP_NULLPTR, sipName_setSelection);
#endif

    if (!sipMeth)
    {
         ::QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_64(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QRegion sipQTreeView::visualRegionForSelection(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[83]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_visualRegionForSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[83]), sipPySelf, SIP_NULLPTR, sipName_visualRegionForSelection);
#endif

    if (!sipMeth)
        return  ::QTreeView::visualRegionForSelection(a0);

    extern  ::QRegion sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtWidgets_65(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQTreeView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[84]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_selectedIndexes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[84]), sipPySelf, SIP_NULLPTR, sipName_selectedIndexes);
#endif

    if (!sipMeth)
        return  ::QTreeView::selectedIndexes();

    extern  ::QModelIndexList sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_66(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTreeView::edit(const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[85], &sipPySelf, SIP_NULLPTR, sipName_edit);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[85], sipPySelf, SIP_NULLPTR, sipName_edit);
#endif

    if (!sipMeth)
        return  ::QTreeView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);

    return sipVH_QtWidgets_67(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QItemSelectionModel::SelectionFlags sipQTreeView::selectionCommand(const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[86]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_selectionCommand);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[86]), sipPySelf, SIP_NULLPTR, sipName_selectionCommand);
#endif

    if (!sipMeth)
        return  ::QTreeView::selectionCommand(a0,a1);

    extern  ::QItemSelectionModel::SelectionFlags sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QEvent*);

    return sipVH_QtWidgets_68(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::startDrag( ::Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[87], &sipPySelf, SIP_NULLPTR, sipName_startDrag);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[87], sipPySelf, SIP_NULLPTR, sipName_startDrag);
#endif

    if (!sipMeth)
    {
         ::QTreeView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::DropActions);

    sipVH_QtWidgets_69(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QStyleOptionViewItem sipQTreeView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[88]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewOptions);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[88]), sipPySelf, SIP_NULLPTR, sipName_viewOptions);
#endif

    if (!sipMeth)
        return  ::QTreeView::viewOptions();

    extern  ::QStyleOptionViewItem sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_70(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTreeView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QTreeView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -51, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setModel, doc_QTreeView_setModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIndex, doc_QTreeView_setRootIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setSelectionModel, "setSelectionModel(self, QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel* a0;
        PyObject *a0Keep;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -52, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelectionModel, doc_QTreeView_setSelectionModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_header, "header(self) -> QHeaderView");

extern "C" {static PyObject *meth_QTreeView_header(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
             ::QHeaderView*sipRes;

            sipRes = sipCpp->header();

            return sipConvertFromType(sipRes,sipType_QHeaderView,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_header, doc_QTreeView_header);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setHeader, "setHeader(self, QHeaderView)");

extern "C" {static PyObject *meth_QTreeView_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHeaderView* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QHeaderView, &a0))
        {
            sipCpp->setHeader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeader, doc_QTreeView_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_indentation, "indentation(self) -> int");

extern "C" {static PyObject *meth_QTreeView_indentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indentation();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indentation, doc_QTreeView_indentation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setIndentation, "setIndentation(self, int)");

extern "C" {static PyObject *meth_QTreeView_setIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setIndentation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setIndentation, doc_QTreeView_setIndentation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_rootIsDecorated, "rootIsDecorated(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_rootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rootIsDecorated();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rootIsDecorated, doc_QTreeView_rootIsDecorated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setRootIsDecorated, "setRootIsDecorated(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setRootIsDecorated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIsDecorated, doc_QTreeView_setRootIsDecorated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_uniformRowHeights, "uniformRowHeights(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_uniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_uniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->uniformRowHeights();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_uniformRowHeights, doc_QTreeView_uniformRowHeights);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setUniformRowHeights, "setUniformRowHeights(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setUniformRowHeights(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setUniformRowHeights, doc_QTreeView_setUniformRowHeights);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_itemsExpandable, "itemsExpandable(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_itemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_itemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->itemsExpandable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_itemsExpandable, doc_QTreeView_itemsExpandable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setItemsExpandable, "setItemsExpandable(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setItemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setItemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setItemsExpandable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setItemsExpandable, doc_QTreeView_setItemsExpandable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnViewportPosition, "columnViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnViewportPosition(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnViewportPosition, doc_QTreeView_columnViewportPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnWidth, "columnWidth(self, int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnWidth(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnWidth, doc_QTreeView_columnWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnAt, "columnAt(self, int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnAt(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnAt, doc_QTreeView_columnAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isColumnHidden, "isColumnHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QTreeView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isColumnHidden, doc_QTreeView_isColumnHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setColumnHidden, "setColumnHidden(self, int, bool)");

extern "C" {static PyObject *meth_QTreeView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnHidden, doc_QTreeView_setColumnHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isRowHidden, "isRowHidden(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isRowHidden(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isRowHidden, doc_QTreeView_isRowHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setRowHidden, "setRowHidden(self, int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        bool a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            sipCpp->setRowHidden(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRowHidden, doc_QTreeView_setRowHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isExpanded, "isExpanded(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isExpanded(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isExpanded, doc_QTreeView_isExpanded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setExpanded, "setExpanded(self, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        bool a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            sipCpp->setExpanded(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpanded, doc_QTreeView_setExpanded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_keyboardSearch, "keyboardSearch(self, str)");

extern "C" {static PyObject *meth_QTreeView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyboardSearch, doc_QTreeView_keyboardSearch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QTreeView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QTreeView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRect, doc_QTreeView_visualRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_scrollTo, "scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
         ::QTreeView *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollTo, doc_QTreeView_scrollTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPoint* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPoint, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QTreeView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAt, doc_QTreeView_indexAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_indexAbove, "indexAbove(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->indexAbove(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAbove, doc_QTreeView_indexAbove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_indexBelow, "indexBelow(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->indexBelow(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexBelow, doc_QTreeView_indexBelow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_reset, "reset(self)");

extern "C" {static PyObject *meth_QTreeView_reset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reset, doc_QTreeView_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QTreeView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;
         ::QTreeView *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::dataChanged(*a0,*a1,*a2) : sipCpp->dataChanged(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dataChanged, doc_QTreeView_dataChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_hideColumn, "hideColumn(self, int)");

extern "C" {static PyObject *meth_QTreeView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->hideColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_hideColumn, doc_QTreeView_hideColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_showColumn, "showColumn(self, int)");

extern "C" {static PyObject *meth_QTreeView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->showColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_showColumn, doc_QTreeView_showColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_expand, "expand(self, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_expand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->expand(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expand, doc_QTreeView_expand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_expandAll, "expandAll(self)");

extern "C" {static PyObject *meth_QTreeView_expandAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->expandAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandAll, doc_QTreeView_expandAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_collapse, "collapse(self, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_collapse(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->collapse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapse, doc_QTreeView_collapse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_collapseAll, "collapseAll(self)");

extern "C" {static PyObject *meth_QTreeView_collapseAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapseAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->collapseAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapseAll, doc_QTreeView_collapseAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_resizeColumnToContents, "resizeColumnToContents(self, int)");

extern "C" {static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->resizeColumnToContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resizeColumnToContents, doc_QTreeView_resizeColumnToContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QTreeView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::selectAll() : sipCpp->selectAll());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectAll, doc_QTreeView_selectAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnResized, "columnResized(self, int, int, int)");

extern "C" {static PyObject *meth_QTreeView_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->columnResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnResized, doc_QTreeView_columnResized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnCountChanged, "columnCountChanged(self, int, int)");

extern "C" {static PyObject *meth_QTreeView_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->columnCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnCountChanged, doc_QTreeView_columnCountChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_columnMoved, "columnMoved(self)");

extern "C" {static PyObject *meth_QTreeView_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->columnMoved();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnMoved, doc_QTreeView_columnMoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_reexpand, "reexpand(self)");

extern "C" {static PyObject *meth_QTreeView_reexpand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reexpand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->reexpand();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reexpand, doc_QTreeView_reexpand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_rowsRemoved, "rowsRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->rowsRemoved(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsRemoved, doc_QTreeView_rowsRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QTreeView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollContentsBy, doc_QTreeView_scrollContentsBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsInserted, doc_QTreeView_rowsInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_rowsAboutToBeRemoved, "rowsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsAboutToBeRemoved, doc_QTreeView_rowsAboutToBeRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemView::CursorAction a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QTreeView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_moveCursor, doc_QTreeView_moveCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QTreeView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeView::horizontalOffset() : sipCpp->horizontalOffset());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalOffset, doc_QTreeView_horizontalOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QTreeView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeView::verticalOffset() : sipCpp->verticalOffset());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_verticalOffset, doc_QTreeView_verticalOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QTreeView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelection, doc_QTreeView_setSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((sipSelfWasArg ? sipCpp-> ::QTreeView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRegionForSelection, doc_QTreeView_visualRegionForSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_selectedIndexes, "selectedIndexes(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QTreeView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QTreeView::selectedIndexes() : sipCpp->selectedIndexes()));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectedIndexes, doc_QTreeView_selectedIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTreeView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_paintEvent, doc_QTreeView_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTreeView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_timerEvent, doc_QTreeView_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseReleaseEvent, doc_QTreeView_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_drawRow, "drawRow(self, QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawRow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QStyleOptionViewItem* a1;
        const  ::QModelIndex* a2;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::drawRow(a0,*a1,*a2) : sipCpp->drawRow(a0,*a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawRow, doc_QTreeView_drawRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_drawBranches, "drawBranches(self, QPainter, QRect, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawBranches(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawBranches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        const  ::QModelIndex* a2;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::drawBranches(a0,*a1,*a2) : sipCpp->drawBranches(a0,*a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawBranches, doc_QTreeView_drawBranches);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_drawTree, "drawTree(self, QPainter, QRegion)");

extern "C" {static PyObject *meth_QTreeView_drawTree(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawTree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QRegion* a1;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRegion, &a1))
        {
            sipCpp->drawTree(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawTree, doc_QTreeView_drawTree);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mousePressEvent, doc_QTreeView_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseMoveEvent, doc_QTreeView_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseDoubleClickEvent, doc_QTreeView_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTreeView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyPressEvent, doc_QTreeView_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QTreeView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::updateGeometries() : sipCpp->updateGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateGeometries, doc_QTreeView_updateGeometries);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_sizeHintForColumn, "sizeHintForColumn(self, int) -> int");

extern "C" {static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sizeHintForColumn, doc_QTreeView_sizeHintForColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_indexRowSizeHint, "indexRowSizeHint(self, QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexRowSizeHint(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexRowSizeHint, doc_QTreeView_indexRowSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_horizontalScrollbarAction, "horizontalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalScrollbarAction, doc_QTreeView_horizontalScrollbarAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isIndexHidden, doc_QTreeView_isIndexHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setColumnWidth, "setColumnWidth(self, int, int)");

extern "C" {static PyObject *meth_QTreeView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnWidth(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnWidth, doc_QTreeView_setColumnWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setSortingEnabled, "setSortingEnabled(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setSortingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSortingEnabled, doc_QTreeView_setSortingEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isSortingEnabled, "isSortingEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isSortingEnabled, doc_QTreeView_isSortingEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setAnimated, "setAnimated(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAnimated, doc_QTreeView_setAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isAnimated, "isAnimated(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isAnimated, doc_QTreeView_isAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setAllColumnsShowFocus, "setAllColumnsShowFocus(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAllColumnsShowFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAllColumnsShowFocus, doc_QTreeView_setAllColumnsShowFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_allColumnsShowFocus, "allColumnsShowFocus(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allColumnsShowFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_allColumnsShowFocus, doc_QTreeView_allColumnsShowFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_sortByColumn, "sortByColumn(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::SortOrder a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortByColumn(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sortByColumn, doc_QTreeView_sortByColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_autoExpandDelay, "autoExpandDelay(self) -> int");

extern "C" {static PyObject *meth_QTreeView_autoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_autoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoExpandDelay();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_autoExpandDelay, doc_QTreeView_autoExpandDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setAutoExpandDelay, "setAutoExpandDelay(self, int)");

extern "C" {static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAutoExpandDelay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAutoExpandDelay, doc_QTreeView_setAutoExpandDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isFirstColumnSpanned, "isFirstColumnSpanned(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstColumnSpanned(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isFirstColumnSpanned, doc_QTreeView_isFirstColumnSpanned);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setFirstColumnSpanned, "setFirstColumnSpanned(self, int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        bool a2;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            sipCpp->setFirstColumnSpanned(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setFirstColumnSpanned, doc_QTreeView_setFirstColumnSpanned);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setWordWrap, "setWordWrap(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setWordWrap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setWordWrap, doc_QTreeView_setWordWrap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_wordWrap, "wordWrap(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wordWrap();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_wordWrap, doc_QTreeView_wordWrap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_expandToDepth, "expandToDepth(self, int)");

extern "C" {static PyObject *meth_QTreeView_expandToDepth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandToDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->expandToDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandToDepth, doc_QTreeView_expandToDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QTreeView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dragMoveEvent, doc_QTreeView_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTreeView::viewportEvent(a0) : sipCpp->viewportEvent(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewportEvent, doc_QTreeView_viewportEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_rowHeight, "rowHeight(self, QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowHeight(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowHeight, doc_QTreeView_rowHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTreeView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectionChanged, doc_QTreeView_selectionChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QTreeView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_currentChanged, doc_QTreeView_currentChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_expandsOnDoubleClick, "expandsOnDoubleClick(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->expandsOnDoubleClick();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandsOnDoubleClick, doc_QTreeView_expandsOnDoubleClick);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setExpandsOnDoubleClick, "setExpandsOnDoubleClick(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setExpandsOnDoubleClick(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpandsOnDoubleClick, doc_QTreeView_setExpandsOnDoubleClick);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_isHeaderHidden, "isHeaderHidden(self) -> bool");

extern "C" {static PyObject *meth_QTreeView_isHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHeaderHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isHeaderHidden, doc_QTreeView_isHeaderHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setHeaderHidden, "setHeaderHidden(self, bool)");

extern "C" {static PyObject *meth_QTreeView_setHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setHeaderHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeaderHidden, doc_QTreeView_setHeaderHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_setTreePosition, "setTreePosition(self, int)");

extern "C" {static PyObject *meth_QTreeView_setTreePosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setTreePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setTreePosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setTreePosition, doc_QTreeView_setTreePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_treePosition, "treePosition(self) -> int");

extern "C" {static PyObject *meth_QTreeView_treePosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_treePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->treePosition();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_treePosition, doc_QTreeView_treePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_viewportSizeHint, "viewportSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTreeView_viewportSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTreeView::viewportSizeHint() : sipCpp->viewportSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewportSizeHint, doc_QTreeView_viewportSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTreeView_resetIndentation, "resetIndentation(self)");

extern "C" {static PyObject *meth_QTreeView_resetIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resetIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->resetIndentation();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resetIndentation, doc_QTreeView_resetIndentation);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTreeView(void *, const sipTypeDef *);}
static void *cast_QTreeView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTreeView *sipCpp = reinterpret_cast< ::QTreeView *>(sipCppV);

    if (targetType == sipType_QAbstractItemView)
        return static_cast< ::QAbstractItemView *>(sipCpp);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeView(void *, int);}
static void release_QTreeView(void *sipCppV, int)
{
     ::QTreeView *sipCpp = reinterpret_cast< ::QTreeView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QTreeView(Py_ssize_t);}
static void *array_QTreeView(Py_ssize_t sipNrElem)
{
    return new  ::QTreeView[sipNrElem];
}


extern "C" {static void dealloc_QTreeView(sipSimpleWrapper *);}
static void dealloc_QTreeView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTreeView *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTreeView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTreeView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeView *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTreeView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeView[] = {{4, 255, 1}};


static PyMethodDef methods_QTreeView[] = {
    {sipName_allColumnsShowFocus, meth_QTreeView_allColumnsShowFocus, METH_VARARGS, doc_QTreeView_allColumnsShowFocus},
    {sipName_autoExpandDelay, meth_QTreeView_autoExpandDelay, METH_VARARGS, doc_QTreeView_autoExpandDelay},
    {sipName_collapse, meth_QTreeView_collapse, METH_VARARGS, doc_QTreeView_collapse},
    {sipName_collapseAll, meth_QTreeView_collapseAll, METH_VARARGS, doc_QTreeView_collapseAll},
    {sipName_columnAt, meth_QTreeView_columnAt, METH_VARARGS, doc_QTreeView_columnAt},
    {sipName_columnCountChanged, meth_QTreeView_columnCountChanged, METH_VARARGS, doc_QTreeView_columnCountChanged},
    {sipName_columnMoved, meth_QTreeView_columnMoved, METH_VARARGS, doc_QTreeView_columnMoved},
    {sipName_columnResized, meth_QTreeView_columnResized, METH_VARARGS, doc_QTreeView_columnResized},
    {sipName_columnViewportPosition, meth_QTreeView_columnViewportPosition, METH_VARARGS, doc_QTreeView_columnViewportPosition},
    {sipName_columnWidth, meth_QTreeView_columnWidth, METH_VARARGS, doc_QTreeView_columnWidth},
    {sipName_currentChanged, meth_QTreeView_currentChanged, METH_VARARGS, doc_QTreeView_currentChanged},
    {sipName_dataChanged, SIP_MLMETH_CAST(meth_QTreeView_dataChanged), METH_VARARGS|METH_KEYWORDS, doc_QTreeView_dataChanged},
    {sipName_dragMoveEvent, meth_QTreeView_dragMoveEvent, METH_VARARGS, doc_QTreeView_dragMoveEvent},
    {sipName_drawBranches, meth_QTreeView_drawBranches, METH_VARARGS, doc_QTreeView_drawBranches},
    {sipName_drawRow, meth_QTreeView_drawRow, METH_VARARGS, doc_QTreeView_drawRow},
    {sipName_drawTree, meth_QTreeView_drawTree, METH_VARARGS, doc_QTreeView_drawTree},
    {sipName_expand, meth_QTreeView_expand, METH_VARARGS, doc_QTreeView_expand},
    {sipName_expandAll, meth_QTreeView_expandAll, METH_VARARGS, doc_QTreeView_expandAll},
    {sipName_expandToDepth, meth_QTreeView_expandToDepth, METH_VARARGS, doc_QTreeView_expandToDepth},
    {sipName_expandsOnDoubleClick, meth_QTreeView_expandsOnDoubleClick, METH_VARARGS, doc_QTreeView_expandsOnDoubleClick},
    {sipName_header, meth_QTreeView_header, METH_VARARGS, doc_QTreeView_header},
    {sipName_hideColumn, meth_QTreeView_hideColumn, METH_VARARGS, doc_QTreeView_hideColumn},
    {sipName_horizontalOffset, meth_QTreeView_horizontalOffset, METH_VARARGS, doc_QTreeView_horizontalOffset},
    {sipName_horizontalScrollbarAction, meth_QTreeView_horizontalScrollbarAction, METH_VARARGS, doc_QTreeView_horizontalScrollbarAction},
    {sipName_indentation, meth_QTreeView_indentation, METH_VARARGS, doc_QTreeView_indentation},
    {sipName_indexAbove, meth_QTreeView_indexAbove, METH_VARARGS, doc_QTreeView_indexAbove},
    {sipName_indexAt, meth_QTreeView_indexAt, METH_VARARGS, doc_QTreeView_indexAt},
    {sipName_indexBelow, meth_QTreeView_indexBelow, METH_VARARGS, doc_QTreeView_indexBelow},
    {sipName_indexRowSizeHint, meth_QTreeView_indexRowSizeHint, METH_VARARGS, doc_QTreeView_indexRowSizeHint},
    {sipName_isAnimated, meth_QTreeView_isAnimated, METH_VARARGS, doc_QTreeView_isAnimated},
    {sipName_isColumnHidden, meth_QTreeView_isColumnHidden, METH_VARARGS, doc_QTreeView_isColumnHidden},
    {sipName_isExpanded, meth_QTreeView_isExpanded, METH_VARARGS, doc_QTreeView_isExpanded},
    {sipName_isFirstColumnSpanned, meth_QTreeView_isFirstColumnSpanned, METH_VARARGS, doc_QTreeView_isFirstColumnSpanned},
    {sipName_isHeaderHidden, meth_QTreeView_isHeaderHidden, METH_VARARGS, doc_QTreeView_isHeaderHidden},
    {sipName_isIndexHidden, meth_QTreeView_isIndexHidden, METH_VARARGS, doc_QTreeView_isIndexHidden},
    {sipName_isRowHidden, meth_QTreeView_isRowHidden, METH_VARARGS, doc_QTreeView_isRowHidden},
    {sipName_isSortingEnabled, meth_QTreeView_isSortingEnabled, METH_VARARGS, doc_QTreeView_isSortingEnabled},
    {sipName_itemsExpandable, meth_QTreeView_itemsExpandable, METH_VARARGS, doc_QTreeView_itemsExpandable},
    {sipName_keyPressEvent, meth_QTreeView_keyPressEvent, METH_VARARGS, doc_QTreeView_keyPressEvent},
    {sipName_keyboardSearch, meth_QTreeView_keyboardSearch, METH_VARARGS, doc_QTreeView_keyboardSearch},
    {sipName_mouseDoubleClickEvent, meth_QTreeView_mouseDoubleClickEvent, METH_VARARGS, doc_QTreeView_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QTreeView_mouseMoveEvent, METH_VARARGS, doc_QTreeView_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QTreeView_mousePressEvent, METH_VARARGS, doc_QTreeView_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QTreeView_mouseReleaseEvent, METH_VARARGS, doc_QTreeView_mouseReleaseEvent},
    {sipName_moveCursor, meth_QTreeView_moveCursor, METH_VARARGS, doc_QTreeView_moveCursor},
    {sipName_paintEvent, meth_QTreeView_paintEvent, METH_VARARGS, doc_QTreeView_paintEvent},
    {sipName_reexpand, meth_QTreeView_reexpand, METH_VARARGS, doc_QTreeView_reexpand},
    {sipName_reset, meth_QTreeView_reset, METH_VARARGS, doc_QTreeView_reset},
    {sipName_resetIndentation, meth_QTreeView_resetIndentation, METH_VARARGS, doc_QTreeView_resetIndentation},
    {sipName_resizeColumnToContents, meth_QTreeView_resizeColumnToContents, METH_VARARGS, doc_QTreeView_resizeColumnToContents},
    {sipName_rootIsDecorated, meth_QTreeView_rootIsDecorated, METH_VARARGS, doc_QTreeView_rootIsDecorated},
    {sipName_rowHeight, meth_QTreeView_rowHeight, METH_VARARGS, doc_QTreeView_rowHeight},
    {sipName_rowsAboutToBeRemoved, meth_QTreeView_rowsAboutToBeRemoved, METH_VARARGS, doc_QTreeView_rowsAboutToBeRemoved},
    {sipName_rowsInserted, meth_QTreeView_rowsInserted, METH_VARARGS, doc_QTreeView_rowsInserted},
    {sipName_rowsRemoved, meth_QTreeView_rowsRemoved, METH_VARARGS, doc_QTreeView_rowsRemoved},
    {sipName_scrollContentsBy, meth_QTreeView_scrollContentsBy, METH_VARARGS, doc_QTreeView_scrollContentsBy},
    {sipName_scrollTo, SIP_MLMETH_CAST(meth_QTreeView_scrollTo), METH_VARARGS|METH_KEYWORDS, doc_QTreeView_scrollTo},
    {sipName_selectAll, meth_QTreeView_selectAll, METH_VARARGS, doc_QTreeView_selectAll},
    {sipName_selectedIndexes, meth_QTreeView_selectedIndexes, METH_VARARGS, doc_QTreeView_selectedIndexes},
    {sipName_selectionChanged, meth_QTreeView_selectionChanged, METH_VARARGS, doc_QTreeView_selectionChanged},
    {sipName_setAllColumnsShowFocus, meth_QTreeView_setAllColumnsShowFocus, METH_VARARGS, doc_QTreeView_setAllColumnsShowFocus},
    {sipName_setAnimated, meth_QTreeView_setAnimated, METH_VARARGS, doc_QTreeView_setAnimated},
    {sipName_setAutoExpandDelay, meth_QTreeView_setAutoExpandDelay, METH_VARARGS, doc_QTreeView_setAutoExpandDelay},
    {sipName_setColumnHidden, meth_QTreeView_setColumnHidden, METH_VARARGS, doc_QTreeView_setColumnHidden},
    {sipName_setColumnWidth, meth_QTreeView_setColumnWidth, METH_VARARGS, doc_QTreeView_setColumnWidth},
    {sipName_setExpanded, meth_QTreeView_setExpanded, METH_VARARGS, doc_QTreeView_setExpanded},
    {sipName_setExpandsOnDoubleClick, meth_QTreeView_setExpandsOnDoubleClick, METH_VARARGS, doc_QTreeView_setExpandsOnDoubleClick},
    {sipName_setFirstColumnSpanned, meth_QTreeView_setFirstColumnSpanned, METH_VARARGS, doc_QTreeView_setFirstColumnSpanned},
    {sipName_setHeader, meth_QTreeView_setHeader, METH_VARARGS, doc_QTreeView_setHeader},
    {sipName_setHeaderHidden, meth_QTreeView_setHeaderHidden, METH_VARARGS, doc_QTreeView_setHeaderHidden},
    {sipName_setIndentation, meth_QTreeView_setIndentation, METH_VARARGS, doc_QTreeView_setIndentation},
    {sipName_setItemsExpandable, meth_QTreeView_setItemsExpandable, METH_VARARGS, doc_QTreeView_setItemsExpandable},
    {sipName_setModel, meth_QTreeView_setModel, METH_VARARGS, doc_QTreeView_setModel},
    {sipName_setRootIndex, meth_QTreeView_setRootIndex, METH_VARARGS, doc_QTreeView_setRootIndex},
    {sipName_setRootIsDecorated, meth_QTreeView_setRootIsDecorated, METH_VARARGS, doc_QTreeView_setRootIsDecorated},
    {sipName_setRowHidden, meth_QTreeView_setRowHidden, METH_VARARGS, doc_QTreeView_setRowHidden},
    {sipName_setSelection, meth_QTreeView_setSelection, METH_VARARGS, doc_QTreeView_setSelection},
    {sipName_setSelectionModel, meth_QTreeView_setSelectionModel, METH_VARARGS, doc_QTreeView_setSelectionModel},
    {sipName_setSortingEnabled, meth_QTreeView_setSortingEnabled, METH_VARARGS, doc_QTreeView_setSortingEnabled},
    {sipName_setTreePosition, meth_QTreeView_setTreePosition, METH_VARARGS, doc_QTreeView_setTreePosition},
    {sipName_setUniformRowHeights, meth_QTreeView_setUniformRowHeights, METH_VARARGS, doc_QTreeView_setUniformRowHeights},
    {sipName_setWordWrap, meth_QTreeView_setWordWrap, METH_VARARGS, doc_QTreeView_setWordWrap},
    {sipName_showColumn, meth_QTreeView_showColumn, METH_VARARGS, doc_QTreeView_showColumn},
    {sipName_sizeHintForColumn, meth_QTreeView_sizeHintForColumn, METH_VARARGS, doc_QTreeView_sizeHintForColumn},
    {sipName_sortByColumn, meth_QTreeView_sortByColumn, METH_VARARGS, doc_QTreeView_sortByColumn},
    {sipName_timerEvent, meth_QTreeView_timerEvent, METH_VARARGS, doc_QTreeView_timerEvent},
    {sipName_treePosition, meth_QTreeView_treePosition, METH_VARARGS, doc_QTreeView_treePosition},
    {sipName_uniformRowHeights, meth_QTreeView_uniformRowHeights, METH_VARARGS, doc_QTreeView_uniformRowHeights},
    {sipName_updateGeometries, meth_QTreeView_updateGeometries, METH_VARARGS, doc_QTreeView_updateGeometries},
    {sipName_verticalOffset, meth_QTreeView_verticalOffset, METH_VARARGS, doc_QTreeView_verticalOffset},
    {sipName_viewportEvent, meth_QTreeView_viewportEvent, METH_VARARGS, doc_QTreeView_viewportEvent},
    {sipName_viewportSizeHint, meth_QTreeView_viewportSizeHint, METH_VARARGS, doc_QTreeView_viewportSizeHint},
    {sipName_visualRect, meth_QTreeView_visualRect, METH_VARARGS, doc_QTreeView_visualRect},
    {sipName_visualRegionForSelection, meth_QTreeView_visualRegionForSelection, METH_VARARGS, doc_QTreeView_visualRegionForSelection},
    {sipName_wordWrap, meth_QTreeView_wordWrap, METH_VARARGS, doc_QTreeView_wordWrap}
};

PyDoc_STRVAR(doc_QTreeView, "\1QTreeView(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTreeView[] = {
    {"collapsed(QModelIndex)", "\1collapsed(self, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"expanded(QModelIndex)", "\1expanded(self, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTreeView = {
    & ::QTreeView::staticMetaObject,
    0,
    signals_QTreeView,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTreeView = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTreeView,
        SIP_NULLPTR,
        &plugin_QTreeView
    },
    {
        sipNameNr_QTreeView,
        {0, 0, 1},
        95, methods_QTreeView,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTreeView,
    -1,
    -1,
    supers_QTreeView,
    SIP_NULLPTR,
    init_type_QTreeView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTreeView,
    SIP_NULLPTR,
    array_QTreeView,
    SIP_NULLPTR,
    release_QTreeView,
    cast_QTreeView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
