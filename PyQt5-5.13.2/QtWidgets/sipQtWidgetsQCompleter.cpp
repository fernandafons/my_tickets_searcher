/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qcompleter.sip"
#include <qcompleter.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQCompleter.cpp"


class sipQCompleter : public  ::QCompleter
{
public:
    sipQCompleter( ::QObject*);
    sipQCompleter( ::QAbstractItemModel*, ::QObject*);
    sipQCompleter(const  ::QStringList&, ::QObject*);
    virtual ~sipQCompleter();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QStringList splitPath(const  ::QString&) const SIP_OVERRIDE;
     ::QString pathFromIndex(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCompleter(const sipQCompleter &);
    sipQCompleter &operator = (const sipQCompleter &);

    char sipPyMethods[9];
};

sipQCompleter::sipQCompleter( ::QObject*a0):  ::QCompleter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter( ::QAbstractItemModel*a0, ::QObject*a1):  ::QCompleter(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter(const  ::QStringList& a0, ::QObject*a1):  ::QCompleter(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::~sipQCompleter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQCompleter::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QCompleter);

    return  ::QCompleter::metaObject();
}

int sipQCompleter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCompleter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QCompleter,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQCompleter::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QCompleter, _clname, &sipCpp) ? sipCpp :  ::QCompleter::qt_metacast(_clname));
}

 ::QStringList sipQCompleter::splitPath(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_splitPath);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_splitPath);
#endif

    if (!sipMeth)
        return  ::QCompleter::splitPath(a0);

    extern  ::QStringList sipVH_QtWidgets_109(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtWidgets_109(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QString sipQCompleter::pathFromIndex(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_pathFromIndex);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_pathFromIndex);
#endif

    if (!sipMeth)
        return  ::QCompleter::pathFromIndex(a0);

    extern  ::QString sipVH_QtWidgets_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_108(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCompleter::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QCompleter::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCompleter::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QCompleter::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQCompleter::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QCompleter::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCompleter::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QCompleter::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCompleter::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QCompleter::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCompleter::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QCompleter::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCompleter::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QCompleter::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QCompleter_setWidget, "setWidget(self, QWidget)");

extern "C" {static PyObject *meth_QCompleter_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWidget, doc_QCompleter_setWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_widget, "widget(self) -> QWidget");

extern "C" {static PyObject *meth_QCompleter_widget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->widget();

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_widget, doc_QCompleter_widget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QCompleter_setModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QCompleter, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            sipKeepReference(sipSelf, -15, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModel, doc_QCompleter_setModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QCompleter_model(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_model, doc_QCompleter_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionMode, "setCompletionMode(self, QCompleter.CompletionMode)");

extern "C" {static PyObject *meth_QCompleter_setCompletionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCompleter::CompletionMode a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_CompletionMode, &a0))
        {
            sipCpp->setCompletionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionMode, doc_QCompleter_setCompletionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionMode, "completionMode(self) -> QCompleter.CompletionMode");

extern "C" {static PyObject *meth_QCompleter_completionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QCompleter::CompletionMode sipRes;

            sipRes = sipCpp->completionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCompleter_CompletionMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionMode, doc_QCompleter_completionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_popup, "popup(self) -> QAbstractItemView");

extern "C" {static PyObject *meth_QCompleter_popup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_popup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QAbstractItemView*sipRes;

            sipRes = sipCpp->popup();

            return sipConvertFromType(sipRes,sipType_QAbstractItemView,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_popup, doc_QCompleter_popup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setPopup, "setPopup(self, QAbstractItemView)");

extern "C" {static PyObject *meth_QCompleter_setPopup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemView* a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QAbstractItemView, &a0))
        {
            sipCpp->setPopup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setPopup, doc_QCompleter_setPopup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCaseSensitivity, "setCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCaseSensitivity, doc_QCompleter_setCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_caseSensitivity, "caseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QCompleter_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->caseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_caseSensitivity, doc_QCompleter_caseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setModelSorting, "setModelSorting(self, QCompleter.ModelSorting)");

extern "C" {static PyObject *meth_QCompleter_setModelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCompleter::ModelSorting a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_ModelSorting, &a0))
        {
            sipCpp->setModelSorting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModelSorting, doc_QCompleter_setModelSorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_modelSorting, "modelSorting(self) -> QCompleter.ModelSorting");

extern "C" {static PyObject *meth_QCompleter_modelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_modelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QCompleter::ModelSorting sipRes;

            sipRes = sipCpp->modelSorting();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCompleter_ModelSorting);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_modelSorting, doc_QCompleter_modelSorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionColumn, "setCompletionColumn(self, int)");

extern "C" {static PyObject *meth_QCompleter_setCompletionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setCompletionColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionColumn, doc_QCompleter_setCompletionColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionColumn, "completionColumn(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionColumn();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionColumn, doc_QCompleter_completionColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionRole, "setCompletionRole(self, int)");

extern "C" {static PyObject *meth_QCompleter_setCompletionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setCompletionRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionRole, doc_QCompleter_setCompletionRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionRole, "completionRole(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionRole();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionRole, doc_QCompleter_completionRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionCount, "completionCount(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionCount(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionCount, doc_QCompleter_completionCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCurrentRow, "setCurrentRow(self, int) -> bool");

extern "C" {static PyObject *meth_QCompleter_setCurrentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCurrentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setCurrentRow(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCurrentRow, doc_QCompleter_setCurrentRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_currentRow, "currentRow(self) -> int");

extern "C" {static PyObject *meth_QCompleter_currentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentRow();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentRow, doc_QCompleter_currentRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QCompleter_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentIndex, doc_QCompleter_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_currentCompletion, "currentCompletion(self) -> str");

extern "C" {static PyObject *meth_QCompleter_currentCompletion(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->currentCompletion());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentCompletion, doc_QCompleter_currentCompletion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionModel, "completionModel(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QCompleter_completionModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->completionModel();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionModel, doc_QCompleter_completionModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_completionPrefix, "completionPrefix(self) -> str");

extern "C" {static PyObject *meth_QCompleter_completionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->completionPrefix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionPrefix, doc_QCompleter_completionPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_pathFromIndex, "pathFromIndex(self, QModelIndex) -> str");

extern "C" {static PyObject *meth_QCompleter_pathFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_pathFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QCompleter::pathFromIndex(*a0) : sipCpp->pathFromIndex(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_pathFromIndex, doc_QCompleter_pathFromIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_splitPath, "splitPath(self, str) -> List[str]");

extern "C" {static PyObject *meth_QCompleter_splitPath(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_splitPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QCompleter::splitPath(*a0) : sipCpp->splitPath(*a0)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_splitPath, doc_QCompleter_splitPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_wrapAround, "wrapAround(self) -> bool");

extern "C" {static PyObject *meth_QCompleter_wrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_wrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wrapAround();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_wrapAround, doc_QCompleter_wrapAround);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_complete, "complete(self, rect: QRect = QRect())");

extern "C" {static PyObject *meth_QCompleter_complete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCompleter_complete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect& a0def = QRect();
        const  ::QRect* a0 = &a0def;
         ::QCompleter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->complete(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_complete, doc_QCompleter_complete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionPrefix, "setCompletionPrefix(self, str)");

extern "C" {static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCompletionPrefix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionPrefix, doc_QCompleter_setCompletionPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setWrapAround, "setWrapAround(self, bool)");

extern "C" {static PyObject *meth_QCompleter_setWrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setWrapAround(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWrapAround, doc_QCompleter_setWrapAround);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCompleter_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QCompleter::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_eventFilter, doc_QCompleter_eventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCompleter_event(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QCompleter::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_event, doc_QCompleter_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_maxVisibleItems, "maxVisibleItems(self) -> int");

extern "C" {static PyObject *meth_QCompleter_maxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_maxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxVisibleItems();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_maxVisibleItems, doc_QCompleter_maxVisibleItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setMaxVisibleItems, "setMaxVisibleItems(self, int)");

extern "C" {static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setMaxVisibleItems(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setMaxVisibleItems, doc_QCompleter_setMaxVisibleItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_setFilterMode, "setFilterMode(self, Union[Qt.MatchFlags, Qt.MatchFlag])");

extern "C" {static PyObject *meth_QCompleter_setFilterMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setFilterMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MatchFlags* a0;
        int a0State = 0;
         ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_Qt_MatchFlags, &a0, &a0State))
        {
            sipCpp->setFilterMode(*a0);
            sipReleaseType(a0,sipType_Qt_MatchFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setFilterMode, doc_QCompleter_setFilterMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCompleter_filterMode, "filterMode(self) -> Qt.MatchFlags");

extern "C" {static PyObject *meth_QCompleter_filterMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_filterMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags(sipCpp->filterMode());

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_filterMode, doc_QCompleter_filterMode);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCompleter(void *, const sipTypeDef *);}
static void *cast_QCompleter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCompleter *sipCpp = reinterpret_cast< ::QCompleter *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCompleter(void *, int);}
static void release_QCompleter(void *sipCppV, int)
{
     ::QCompleter *sipCpp = reinterpret_cast< ::QCompleter *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QCompleter(Py_ssize_t);}
static void *array_QCompleter(Py_ssize_t sipNrElem)
{
    return new  ::QCompleter[sipNrElem];
}


extern "C" {static void dealloc_QCompleter(sipSimpleWrapper *);}
static void dealloc_QCompleter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCompleter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCompleter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCompleter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCompleter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCompleter *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQCompleter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QAbstractItemModel* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCompleter(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCompleter(*a0,a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCompleter[] = {{32, 0, 1}};


static PyMethodDef methods_QCompleter[] = {
    {sipName_caseSensitivity, meth_QCompleter_caseSensitivity, METH_VARARGS, doc_QCompleter_caseSensitivity},
    {sipName_complete, SIP_MLMETH_CAST(meth_QCompleter_complete), METH_VARARGS|METH_KEYWORDS, doc_QCompleter_complete},
    {sipName_completionColumn, meth_QCompleter_completionColumn, METH_VARARGS, doc_QCompleter_completionColumn},
    {sipName_completionCount, meth_QCompleter_completionCount, METH_VARARGS, doc_QCompleter_completionCount},
    {sipName_completionMode, meth_QCompleter_completionMode, METH_VARARGS, doc_QCompleter_completionMode},
    {sipName_completionModel, meth_QCompleter_completionModel, METH_VARARGS, doc_QCompleter_completionModel},
    {sipName_completionPrefix, meth_QCompleter_completionPrefix, METH_VARARGS, doc_QCompleter_completionPrefix},
    {sipName_completionRole, meth_QCompleter_completionRole, METH_VARARGS, doc_QCompleter_completionRole},
    {sipName_currentCompletion, meth_QCompleter_currentCompletion, METH_VARARGS, doc_QCompleter_currentCompletion},
    {sipName_currentIndex, meth_QCompleter_currentIndex, METH_VARARGS, doc_QCompleter_currentIndex},
    {sipName_currentRow, meth_QCompleter_currentRow, METH_VARARGS, doc_QCompleter_currentRow},
    {sipName_event, meth_QCompleter_event, METH_VARARGS, doc_QCompleter_event},
    {sipName_eventFilter, meth_QCompleter_eventFilter, METH_VARARGS, doc_QCompleter_eventFilter},
    {sipName_filterMode, meth_QCompleter_filterMode, METH_VARARGS, doc_QCompleter_filterMode},
    {sipName_maxVisibleItems, meth_QCompleter_maxVisibleItems, METH_VARARGS, doc_QCompleter_maxVisibleItems},
    {sipName_model, meth_QCompleter_model, METH_VARARGS, doc_QCompleter_model},
    {sipName_modelSorting, meth_QCompleter_modelSorting, METH_VARARGS, doc_QCompleter_modelSorting},
    {sipName_pathFromIndex, meth_QCompleter_pathFromIndex, METH_VARARGS, doc_QCompleter_pathFromIndex},
    {sipName_popup, meth_QCompleter_popup, METH_VARARGS, doc_QCompleter_popup},
    {sipName_setCaseSensitivity, meth_QCompleter_setCaseSensitivity, METH_VARARGS, doc_QCompleter_setCaseSensitivity},
    {sipName_setCompletionColumn, meth_QCompleter_setCompletionColumn, METH_VARARGS, doc_QCompleter_setCompletionColumn},
    {sipName_setCompletionMode, meth_QCompleter_setCompletionMode, METH_VARARGS, doc_QCompleter_setCompletionMode},
    {sipName_setCompletionPrefix, meth_QCompleter_setCompletionPrefix, METH_VARARGS, doc_QCompleter_setCompletionPrefix},
    {sipName_setCompletionRole, meth_QCompleter_setCompletionRole, METH_VARARGS, doc_QCompleter_setCompletionRole},
    {sipName_setCurrentRow, meth_QCompleter_setCurrentRow, METH_VARARGS, doc_QCompleter_setCurrentRow},
    {sipName_setFilterMode, meth_QCompleter_setFilterMode, METH_VARARGS, doc_QCompleter_setFilterMode},
    {sipName_setMaxVisibleItems, meth_QCompleter_setMaxVisibleItems, METH_VARARGS, doc_QCompleter_setMaxVisibleItems},
    {sipName_setModel, meth_QCompleter_setModel, METH_VARARGS, doc_QCompleter_setModel},
    {sipName_setModelSorting, meth_QCompleter_setModelSorting, METH_VARARGS, doc_QCompleter_setModelSorting},
    {sipName_setPopup, meth_QCompleter_setPopup, METH_VARARGS, doc_QCompleter_setPopup},
    {sipName_setWidget, meth_QCompleter_setWidget, METH_VARARGS, doc_QCompleter_setWidget},
    {sipName_setWrapAround, meth_QCompleter_setWrapAround, METH_VARARGS, doc_QCompleter_setWrapAround},
    {sipName_splitPath, meth_QCompleter_splitPath, METH_VARARGS, doc_QCompleter_splitPath},
    {sipName_widget, meth_QCompleter_widget, METH_VARARGS, doc_QCompleter_widget},
    {sipName_wrapAround, meth_QCompleter_wrapAround, METH_VARARGS, doc_QCompleter_wrapAround}
};

static sipEnumMemberDef enummembers_QCompleter[] = {
    {sipName_CaseInsensitivelySortedModel, static_cast<int>( ::QCompleter::CaseInsensitivelySortedModel), 52},
    {sipName_CaseSensitivelySortedModel, static_cast<int>( ::QCompleter::CaseSensitivelySortedModel), 52},
    {sipName_InlineCompletion, static_cast<int>( ::QCompleter::InlineCompletion), 51},
    {sipName_PopupCompletion, static_cast<int>( ::QCompleter::PopupCompletion), 51},
    {sipName_UnfilteredPopupCompletion, static_cast<int>( ::QCompleter::UnfilteredPopupCompletion), 51},
    {sipName_UnsortedModel, static_cast<int>( ::QCompleter::UnsortedModel), 52},
};

PyDoc_STRVAR(doc_QCompleter, "\1QCompleter(parent: QObject = None)\n"
"QCompleter(QAbstractItemModel, parent: QObject = None)\n"
"QCompleter(Iterable[str], parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCompleter[] = {
    {"highlighted(QString)", "\1highlighted(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"highlighted(QModelIndex)", "\1highlighted(self, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"activated(QString)", "\1activated(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"activated(QModelIndex)", "\1activated(self, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QCompleter = {
    & ::QCompleter::staticMetaObject,
    0,
    signals_QCompleter,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QCompleter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCompleter,
        SIP_NULLPTR,
        &plugin_QCompleter
    },
    {
        sipNameNr_QCompleter,
        {0, 0, 1},
        35, methods_QCompleter,
        6, enummembers_QCompleter,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCompleter,
    -1,
    -1,
    supers_QCompleter,
    SIP_NULLPTR,
    init_type_QCompleter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QCompleter,
    SIP_NULLPTR,
    array_QCompleter,
    SIP_NULLPTR,
    release_QCompleter,
    cast_QCompleter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
