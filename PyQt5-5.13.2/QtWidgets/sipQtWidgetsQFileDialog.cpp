/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
#include <qfiledialog.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
#include <qfiledialog.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qabstractproxymodel.sip"
#include <qabstractproxymodel.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 222 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 228 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 257 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 263 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"


class sipQFileDialog : public  ::QFileDialog
{
public:
    sipQFileDialog( ::QWidget*, ::Qt::WindowFlags);
    sipQFileDialog( ::QWidget*,const  ::QString&,const  ::QString&,const  ::QString&);
    virtual ~sipQFileDialog();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    int exec() SIP_OVERRIDE;
    void done(int) SIP_OVERRIDE;
    void accept() SIP_OVERRIDE;
    void reject() SIP_OVERRIDE;
    void open() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileDialog(const sipQFileDialog &);
    sipQFileDialog &operator = (const sipQFileDialog &);

    char sipPyMethods[52];
};

sipQFileDialog::sipQFileDialog( ::QWidget*a0, ::Qt::WindowFlags a1):  ::QFileDialog(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::sipQFileDialog( ::QWidget*a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3):  ::QFileDialog(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::~sipQFileDialog()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFileDialog::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QFileDialog);

    return  ::QFileDialog::metaObject();
}

int sipQFileDialog::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFileDialog::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QFileDialog,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQFileDialog::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QFileDialog, _clname, &sipCpp) ? sipCpp :  ::QFileDialog::qt_metacast(_clname));
}

void sipQFileDialog::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQFileDialog::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QFileDialog::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQFileDialog::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QFileDialog::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileDialog::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QFileDialog::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQFileDialog::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QFileDialog::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQFileDialog::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QFileDialog::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFileDialog::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QFileDialog::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQFileDialog::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QFileDialog::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQFileDialog::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QFileDialog::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFileDialog::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFileDialog::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QFileDialog::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQFileDialog::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[37]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[37]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QFileDialog::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQFileDialog::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QFileDialog::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QFileDialog::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QFileDialog::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQFileDialog::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQFileDialog::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_exec_);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_exec_);
#endif

    if (!sipMeth)
        return  ::QFileDialog::exec();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFileDialog::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_done);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_done);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::done(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_accept);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_accept);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::accept();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFileDialog::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_reject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], sipPySelf, SIP_NULLPTR, sipName_reject);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::reject();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQFileDialog::open()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_open);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], sipPySelf, SIP_NULLPTR, sipName_open);
#endif

    if (!sipMeth)
    {
         ::QFileDialog::open();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QFileDialog_setDirectory, "setDirectory(self, str)\n"
"setDirectory(self, QDir)");

extern "C" {static PyObject *meth_QFileDialog_setDirectory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDirectory(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QDir* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir, &a0))
        {
            sipCpp->setDirectory(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDirectory, doc_QFileDialog_setDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_directory, "directory(self) -> QDir");

extern "C" {static PyObject *meth_QFileDialog_directory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_directory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir(sipCpp->directory());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_directory, doc_QFileDialog_directory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectFile, "selectFile(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectFile(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectFile, doc_QFileDialog_selectFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectedFiles, "selectedFiles(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_selectedFiles(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->selectedFiles());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedFiles, doc_QFileDialog_selectedFiles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setViewMode, "setViewMode(self, QFileDialog.ViewMode)");

extern "C" {static PyObject *meth_QFileDialog_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::ViewMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_ViewMode, &a0))
        {
            sipCpp->setViewMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setViewMode, doc_QFileDialog_setViewMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_viewMode, "viewMode(self) -> QFileDialog.ViewMode");

extern "C" {static PyObject *meth_QFileDialog_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::ViewMode sipRes;

            sipRes = sipCpp->viewMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFileDialog_ViewMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_viewMode, doc_QFileDialog_viewMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setFileMode, "setFileMode(self, QFileDialog.FileMode)");

extern "C" {static PyObject *meth_QFileDialog_setFileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::FileMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_FileMode, &a0))
        {
            sipCpp->setFileMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFileMode, doc_QFileDialog_setFileMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_fileMode, "fileMode(self) -> QFileDialog.FileMode");

extern "C" {static PyObject *meth_QFileDialog_fileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_fileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::FileMode sipRes;

            sipRes = sipCpp->fileMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFileDialog_FileMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_fileMode, doc_QFileDialog_fileMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setAcceptMode, "setAcceptMode(self, QFileDialog.AcceptMode)");

extern "C" {static PyObject *meth_QFileDialog_setAcceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setAcceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::AcceptMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_AcceptMode, &a0))
        {
            sipCpp->setAcceptMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setAcceptMode, doc_QFileDialog_setAcceptMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_acceptMode, "acceptMode(self) -> QFileDialog.AcceptMode");

extern "C" {static PyObject *meth_QFileDialog_acceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_acceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::AcceptMode sipRes;

            sipRes = sipCpp->acceptMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFileDialog_AcceptMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_acceptMode, doc_QFileDialog_acceptMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setDefaultSuffix, "setDefaultSuffix(self, str)");

extern "C" {static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDefaultSuffix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDefaultSuffix, doc_QFileDialog_setDefaultSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_defaultSuffix, "defaultSuffix(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_defaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_defaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->defaultSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_defaultSuffix, doc_QFileDialog_defaultSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setHistory, "setHistory(self, Iterable[str])");

extern "C" {static PyObject *meth_QFileDialog_setHistory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setHistory(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setHistory, doc_QFileDialog_setHistory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_history, "history(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_history(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->history());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_history, doc_QFileDialog_history);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setItemDelegate, "setItemDelegate(self, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QFileDialog_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemDelegate* a0;
        PyObject *a0Keep;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            sipCpp->setItemDelegate(a0);

            sipKeepReference(sipSelf, -19, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setItemDelegate, doc_QFileDialog_setItemDelegate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_itemDelegate, "itemDelegate(self) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QFileDialog_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate();

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_itemDelegate, doc_QFileDialog_itemDelegate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setIconProvider, "setIconProvider(self, QFileIconProvider)");

extern "C" {static PyObject *meth_QFileDialog_setIconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setIconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileIconProvider* a0;
        PyObject *a0Keep;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QFileIconProvider, &a0))
        {
            sipCpp->setIconProvider(a0);

            sipKeepReference(sipSelf, -20, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setIconProvider, doc_QFileDialog_setIconProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_iconProvider, "iconProvider(self) -> QFileIconProvider");

extern "C" {static PyObject *meth_QFileDialog_iconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_iconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileIconProvider*sipRes;

            sipRes = sipCpp->iconProvider();

            return sipConvertFromType(sipRes,sipType_QFileIconProvider,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_iconProvider, doc_QFileDialog_iconProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setLabelText, "setLabelText(self, QFileDialog.DialogLabel, str)");

extern "C" {static PyObject *meth_QFileDialog_setLabelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setLabelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::DialogLabel a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setLabelText(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setLabelText, doc_QFileDialog_setLabelText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_labelText, "labelText(self, QFileDialog.DialogLabel) -> str");

extern "C" {static PyObject *meth_QFileDialog_labelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_labelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::DialogLabel a0;
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->labelText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_labelText, doc_QFileDialog_labelText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getExistingDirectory, "getExistingDirectory(parent: QWidget = None, caption: str = '', directory: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = QFileDialog.ShowDirsOnly) -> str");

extern "C" {static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QFileDialog::Options a3def = QFileDialog::ShowDirsOnly;
         ::QFileDialog::Options* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QFileDialog_Options, &a3, &a3State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QFileDialog::getExistingDirectory(a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QFileDialog_Options,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getExistingDirectory, doc_QFileDialog_getExistingDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getExistingDirectoryUrl, "getExistingDirectoryUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), options: Union[QFileDialog.Options, QFileDialog.Option] = QFileDialog.ShowDirsOnly, supportedSchemes: Iterable[str] = []) -> QUrl");

extern "C" {static PyObject *meth_QFileDialog_getExistingDirectoryUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getExistingDirectoryUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
         ::QFileDialog::Options a3def = QFileDialog::ShowDirsOnly;
         ::QFileDialog::Options* a3 = &a3def;
        int a3State = 0;
        const  ::QStringList& a4def = QStringList();
        const  ::QStringList* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J9J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QUrl, &a2, sipType_QFileDialog_Options, &a3, &a3State, sipType_QStringList,&a4, &a4State))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl( ::QFileDialog::getExistingDirectoryUrl(a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a3,sipType_QFileDialog_Options,a3State);
            sipReleaseType(const_cast< ::QStringList *>(a4),sipType_QStringList,a4State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getExistingDirectoryUrl, doc_QFileDialog_getExistingDirectoryUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileName, "getOpenFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[str, str]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getOpenFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 2249 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileName, doc_QFileDialog_getOpenFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileNames, "getOpenFileNames(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[List[str], str]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QStringList *names;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        names = new QStringList(QFileDialog::getOpenFileNames(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *names_obj = sipConvertFromNewType(names, sipType_QStringList, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (names_obj && filter_obj)
            sipRes = PyTuple_Pack(2, names_obj, filter_obj);
        
        Py_XDECREF(names_obj);
        Py_XDECREF(filter_obj);
#line 2323 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileNames, doc_QFileDialog_getOpenFileNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileName, "getSaveFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[str, str]");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getSaveFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 2397 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileName, doc_QFileDialog_getSaveFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_done, "done(self, int)");

extern "C" {static PyObject *meth_QFileDialog_done(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_done(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::done(a0) : sipCpp->done(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_done, doc_QFileDialog_done);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_accept, "accept(self)");

extern "C" {static PyObject *meth_QFileDialog_accept(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::accept() : sipCpp->accept());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_accept, doc_QFileDialog_accept);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QFileDialog_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_changeEvent, doc_QFileDialog_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setSidebarUrls, "setSidebarUrls(self, Iterable[QUrl])");

extern "C" {static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->setSidebarUrls(*a0);
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setSidebarUrls, doc_QFileDialog_setSidebarUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_sidebarUrls, "sidebarUrls(self) -> List[QUrl]");

extern "C" {static PyObject *meth_QFileDialog_sidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_sidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QList< ::QUrl>*sipRes;

            sipRes = new QList< ::QUrl>(sipCpp->sidebarUrls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_sidebarUrls, doc_QFileDialog_sidebarUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_saveState, "saveState(self) -> QByteArray");

extern "C" {static PyObject *meth_QFileDialog_saveState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->saveState());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_saveState, doc_QFileDialog_saveState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QFileDialog_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_restoreState, doc_QFileDialog_restoreState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setProxyModel, "setProxyModel(self, QAbstractProxyModel)");

extern "C" {static PyObject *meth_QFileDialog_setProxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setProxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractProxyModel* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QAbstractProxyModel, &a0))
        {
            sipCpp->setProxyModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setProxyModel, doc_QFileDialog_setProxyModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_proxyModel, "proxyModel(self) -> QAbstractProxyModel");

extern "C" {static PyObject *meth_QFileDialog_proxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_proxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QAbstractProxyModel*sipRes;

            sipRes = sipCpp->proxyModel();

            return sipConvertFromType(sipRes,sipType_QAbstractProxyModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_proxyModel, doc_QFileDialog_proxyModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilter, "setNameFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_setNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNameFilter(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilter, doc_QFileDialog_setNameFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilters, "setNameFilters(self, Iterable[str])");

extern "C" {static PyObject *meth_QFileDialog_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setNameFilters(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilters, doc_QFileDialog_setNameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_nameFilters, "nameFilters(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->nameFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_nameFilters, doc_QFileDialog_nameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectNameFilter, "selectNameFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectNameFilter(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectNameFilter, doc_QFileDialog_selectNameFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectedNameFilter, "selectedNameFilter(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedNameFilter());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedNameFilter, doc_QFileDialog_selectedNameFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_filter, "filter(self) -> QDir.Filters");

extern "C" {static PyObject *meth_QFileDialog_filter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters(sipCpp->filter());

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_filter, doc_QFileDialog_filter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setFilter, "setFilter(self, Union[QDir.Filters, QDir.Filter])");

extern "C" {static PyObject *meth_QFileDialog_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            sipCpp->setFilter(*a0);
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFilter, doc_QFileDialog_setFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setOption, "setOption(self, QFileDialog.Option, on: bool = True)");

extern "C" {static PyObject *meth_QFileDialog_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::Option a0;
        bool a1 = 1;
         ::QFileDialog *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOption, doc_QFileDialog_setOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_testOption, "testOption(self, QFileDialog.Option) -> bool");

extern "C" {static PyObject *meth_QFileDialog_testOption(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::Option a0;
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_testOption, doc_QFileDialog_testOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setOptions, "setOptions(self, Union[QFileDialog.Options, QFileDialog.Option])");

extern "C" {static PyObject *meth_QFileDialog_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDialog::Options* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Options, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QFileDialog_Options,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOptions, doc_QFileDialog_setOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_options, "options(self) -> QFileDialog.Options");

extern "C" {static PyObject *meth_QFileDialog_options(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::Options*sipRes;

            sipRes = new  ::QFileDialog::Options(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QFileDialog_Options,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_options, doc_QFileDialog_options);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_open, "open(self)\n"
"open(self, PYQT_SLOT)");

extern "C" {static PyObject *meth_QFileDialog_open(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::open() : sipCpp->open());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtwidgets_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 3021 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_open, doc_QFileDialog_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setVisible, doc_QFileDialog_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setDirectoryUrl, "setDirectoryUrl(self, QUrl)");

extern "C" {static PyObject *meth_QFileDialog_setDirectoryUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDirectoryUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setDirectoryUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDirectoryUrl, doc_QFileDialog_setDirectoryUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_directoryUrl, "directoryUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QFileDialog_directoryUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_directoryUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->directoryUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_directoryUrl, doc_QFileDialog_directoryUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectUrl, "selectUrl(self, QUrl)");

extern "C" {static PyObject *meth_QFileDialog_selectUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->selectUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectUrl, doc_QFileDialog_selectUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectedUrls, "selectedUrls(self) -> List[QUrl]");

extern "C" {static PyObject *meth_QFileDialog_selectedUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QList< ::QUrl>*sipRes;

            sipRes = new QList< ::QUrl>(sipCpp->selectedUrls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedUrls, doc_QFileDialog_selectedUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setMimeTypeFilters, "setMimeTypeFilters(self, Iterable[str])");

extern "C" {static PyObject *meth_QFileDialog_setMimeTypeFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setMimeTypeFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setMimeTypeFilters(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setMimeTypeFilters, doc_QFileDialog_setMimeTypeFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_mimeTypeFilters, "mimeTypeFilters(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_mimeTypeFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mimeTypeFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->mimeTypeFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mimeTypeFilters, doc_QFileDialog_mimeTypeFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectMimeTypeFilter, "selectMimeTypeFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectMimeTypeFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectMimeTypeFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectMimeTypeFilter(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectMimeTypeFilter, doc_QFileDialog_selectMimeTypeFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileUrl, "getOpenFileUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[QUrl, str]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const  ::QStringList& a6def = QStringList();
        const  ::QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J9J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QUrl, &a2, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 255 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QUrl *url;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url = new QUrl(QFileDialog::getOpenFileUrl(a0, *a1, *a2, *a3, filter, *a5, *a6));
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_obj, filter_obj);
        
        Py_XDECREF(url_obj);
        Py_XDECREF(filter_obj);
#line 3323 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast< ::QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileUrl, doc_QFileDialog_getOpenFileUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileUrls, "getOpenFileUrls(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[List[QUrl], str]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileUrls(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileUrls(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const  ::QStringList& a6def = QStringList();
        const  ::QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J9J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QUrl, &a2, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 278 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QList<QUrl> url_list;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url_list = QFileDialog::getOpenFileUrls(a0, *a1, *a2, *a3, filter, *a5, *a6);
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_list_obj = PyList_New(url_list.size());
        
        if (url_list_obj)
        {
            for (int i = 0; i < url_list.size(); ++i)
            {
                QUrl *url = new QUrl(url_list.at(i));
                PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
                
                if (!url_obj)
                {
                    delete url;
                    Py_DECREF(url_list_obj);
                    url_list_obj = 0;
                    break;
                }
                
                PyList_SetItem(url_list_obj, i, url_obj);
            }
        }
        
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_list_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_list_obj, filter_obj);
        
        Py_XDECREF(url_list_obj);
        Py_XDECREF(filter_obj);
#line 3420 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast< ::QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileUrls, doc_QFileDialog_getOpenFileUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileUrl, "getSaveFileUrl(parent: QWidget = None, caption: str = '', directory: QUrl = QUrl(), filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0, supportedSchemes: Iterable[str] = []) -> Tuple[QUrl, str]");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const  ::QStringList& a6def = QStringList();
        const  ::QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8J1J9J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QUrl, &a2, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 321 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qfiledialog.sip"
        QUrl *url;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url = new QUrl(QFileDialog::getSaveFileUrl(a0, *a1, *a2, *a3, filter, *a5, *a6));
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_obj, filter_obj);
        
        Py_XDECREF(url_obj);
        Py_XDECREF(filter_obj);
#line 3497 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast< ::QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileUrl, doc_QFileDialog_getSaveFileUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_setSupportedSchemes, "setSupportedSchemes(self, Iterable[str])");

extern "C" {static PyObject *meth_QFileDialog_setSupportedSchemes(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setSupportedSchemes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setSupportedSchemes(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setSupportedSchemes, doc_QFileDialog_setSupportedSchemes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_supportedSchemes, "supportedSchemes(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_supportedSchemes(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_supportedSchemes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->supportedSchemes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_supportedSchemes, doc_QFileDialog_supportedSchemes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDialog_selectedMimeTypeFilter, "selectedMimeTypeFilter(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_selectedMimeTypeFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedMimeTypeFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedMimeTypeFilter());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedMimeTypeFilter, doc_QFileDialog_selectedMimeTypeFilter);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileDialog(void *, const sipTypeDef *);}
static void *cast_QFileDialog(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileDialog *sipCpp = reinterpret_cast< ::QFileDialog *>(sipCppV);

    if (targetType == sipType_QDialog)
        return static_cast< ::QDialog *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDialog(void *, int);}
static void release_QFileDialog(void *sipCppV, int)
{
     ::QFileDialog *sipCpp = reinterpret_cast< ::QFileDialog *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QFileDialog(Py_ssize_t);}
static void *array_QFileDialog(Py_ssize_t sipNrElem)
{
    return new  ::QFileDialog[sipNrElem];
}


extern "C" {static void dealloc_QFileDialog(sipSimpleWrapper *);}
static void dealloc_QFileDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFileDialog *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDialog(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFileDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileDialog *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::WindowFlags* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQFileDialog(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1J1J1", sipType_QWidget, &a0, sipOwner, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            sipCpp = new sipQFileDialog(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileDialog[] = {{61, 255, 1}};


static PyMethodDef methods_QFileDialog[] = {
    {sipName_accept, meth_QFileDialog_accept, METH_VARARGS, doc_QFileDialog_accept},
    {sipName_acceptMode, meth_QFileDialog_acceptMode, METH_VARARGS, doc_QFileDialog_acceptMode},
    {sipName_changeEvent, meth_QFileDialog_changeEvent, METH_VARARGS, doc_QFileDialog_changeEvent},
    {sipName_defaultSuffix, meth_QFileDialog_defaultSuffix, METH_VARARGS, doc_QFileDialog_defaultSuffix},
    {sipName_directory, meth_QFileDialog_directory, METH_VARARGS, doc_QFileDialog_directory},
    {sipName_directoryUrl, meth_QFileDialog_directoryUrl, METH_VARARGS, doc_QFileDialog_directoryUrl},
    {sipName_done, meth_QFileDialog_done, METH_VARARGS, doc_QFileDialog_done},
    {sipName_fileMode, meth_QFileDialog_fileMode, METH_VARARGS, doc_QFileDialog_fileMode},
    {sipName_filter, meth_QFileDialog_filter, METH_VARARGS, doc_QFileDialog_filter},
    {sipName_getExistingDirectory, SIP_MLMETH_CAST(meth_QFileDialog_getExistingDirectory), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getExistingDirectory},
    {sipName_getExistingDirectoryUrl, SIP_MLMETH_CAST(meth_QFileDialog_getExistingDirectoryUrl), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getExistingDirectoryUrl},
    {sipName_getOpenFileName, SIP_MLMETH_CAST(meth_QFileDialog_getOpenFileName), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getOpenFileName},
    {sipName_getOpenFileNames, SIP_MLMETH_CAST(meth_QFileDialog_getOpenFileNames), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getOpenFileNames},
    {sipName_getOpenFileUrl, SIP_MLMETH_CAST(meth_QFileDialog_getOpenFileUrl), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getOpenFileUrl},
    {sipName_getOpenFileUrls, SIP_MLMETH_CAST(meth_QFileDialog_getOpenFileUrls), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getOpenFileUrls},
    {sipName_getSaveFileName, SIP_MLMETH_CAST(meth_QFileDialog_getSaveFileName), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getSaveFileName},
    {sipName_getSaveFileUrl, SIP_MLMETH_CAST(meth_QFileDialog_getSaveFileUrl), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_getSaveFileUrl},
    {sipName_history, meth_QFileDialog_history, METH_VARARGS, doc_QFileDialog_history},
    {sipName_iconProvider, meth_QFileDialog_iconProvider, METH_VARARGS, doc_QFileDialog_iconProvider},
    {sipName_itemDelegate, meth_QFileDialog_itemDelegate, METH_VARARGS, doc_QFileDialog_itemDelegate},
    {sipName_labelText, meth_QFileDialog_labelText, METH_VARARGS, doc_QFileDialog_labelText},
    {sipName_mimeTypeFilters, meth_QFileDialog_mimeTypeFilters, METH_VARARGS, doc_QFileDialog_mimeTypeFilters},
    {sipName_nameFilters, meth_QFileDialog_nameFilters, METH_VARARGS, doc_QFileDialog_nameFilters},
    {sipName_open, meth_QFileDialog_open, METH_VARARGS, doc_QFileDialog_open},
    {sipName_options, meth_QFileDialog_options, METH_VARARGS, doc_QFileDialog_options},
    {sipName_proxyModel, meth_QFileDialog_proxyModel, METH_VARARGS, doc_QFileDialog_proxyModel},
    {sipName_restoreState, meth_QFileDialog_restoreState, METH_VARARGS, doc_QFileDialog_restoreState},
    {sipName_saveState, meth_QFileDialog_saveState, METH_VARARGS, doc_QFileDialog_saveState},
    {sipName_selectFile, meth_QFileDialog_selectFile, METH_VARARGS, doc_QFileDialog_selectFile},
    {sipName_selectMimeTypeFilter, meth_QFileDialog_selectMimeTypeFilter, METH_VARARGS, doc_QFileDialog_selectMimeTypeFilter},
    {sipName_selectNameFilter, meth_QFileDialog_selectNameFilter, METH_VARARGS, doc_QFileDialog_selectNameFilter},
    {sipName_selectUrl, meth_QFileDialog_selectUrl, METH_VARARGS, doc_QFileDialog_selectUrl},
    {sipName_selectedFiles, meth_QFileDialog_selectedFiles, METH_VARARGS, doc_QFileDialog_selectedFiles},
    {sipName_selectedMimeTypeFilter, meth_QFileDialog_selectedMimeTypeFilter, METH_VARARGS, doc_QFileDialog_selectedMimeTypeFilter},
    {sipName_selectedNameFilter, meth_QFileDialog_selectedNameFilter, METH_VARARGS, doc_QFileDialog_selectedNameFilter},
    {sipName_selectedUrls, meth_QFileDialog_selectedUrls, METH_VARARGS, doc_QFileDialog_selectedUrls},
    {sipName_setAcceptMode, meth_QFileDialog_setAcceptMode, METH_VARARGS, doc_QFileDialog_setAcceptMode},
    {sipName_setDefaultSuffix, meth_QFileDialog_setDefaultSuffix, METH_VARARGS, doc_QFileDialog_setDefaultSuffix},
    {sipName_setDirectory, meth_QFileDialog_setDirectory, METH_VARARGS, doc_QFileDialog_setDirectory},
    {sipName_setDirectoryUrl, meth_QFileDialog_setDirectoryUrl, METH_VARARGS, doc_QFileDialog_setDirectoryUrl},
    {sipName_setFileMode, meth_QFileDialog_setFileMode, METH_VARARGS, doc_QFileDialog_setFileMode},
    {sipName_setFilter, meth_QFileDialog_setFilter, METH_VARARGS, doc_QFileDialog_setFilter},
    {sipName_setHistory, meth_QFileDialog_setHistory, METH_VARARGS, doc_QFileDialog_setHistory},
    {sipName_setIconProvider, meth_QFileDialog_setIconProvider, METH_VARARGS, doc_QFileDialog_setIconProvider},
    {sipName_setItemDelegate, meth_QFileDialog_setItemDelegate, METH_VARARGS, doc_QFileDialog_setItemDelegate},
    {sipName_setLabelText, meth_QFileDialog_setLabelText, METH_VARARGS, doc_QFileDialog_setLabelText},
    {sipName_setMimeTypeFilters, meth_QFileDialog_setMimeTypeFilters, METH_VARARGS, doc_QFileDialog_setMimeTypeFilters},
    {sipName_setNameFilter, meth_QFileDialog_setNameFilter, METH_VARARGS, doc_QFileDialog_setNameFilter},
    {sipName_setNameFilters, meth_QFileDialog_setNameFilters, METH_VARARGS, doc_QFileDialog_setNameFilters},
    {sipName_setOption, SIP_MLMETH_CAST(meth_QFileDialog_setOption), METH_VARARGS|METH_KEYWORDS, doc_QFileDialog_setOption},
    {sipName_setOptions, meth_QFileDialog_setOptions, METH_VARARGS, doc_QFileDialog_setOptions},
    {sipName_setProxyModel, meth_QFileDialog_setProxyModel, METH_VARARGS, doc_QFileDialog_setProxyModel},
    {sipName_setSidebarUrls, meth_QFileDialog_setSidebarUrls, METH_VARARGS, doc_QFileDialog_setSidebarUrls},
    {sipName_setSupportedSchemes, meth_QFileDialog_setSupportedSchemes, METH_VARARGS, doc_QFileDialog_setSupportedSchemes},
    {sipName_setViewMode, meth_QFileDialog_setViewMode, METH_VARARGS, doc_QFileDialog_setViewMode},
    {sipName_setVisible, meth_QFileDialog_setVisible, METH_VARARGS, doc_QFileDialog_setVisible},
    {sipName_sidebarUrls, meth_QFileDialog_sidebarUrls, METH_VARARGS, doc_QFileDialog_sidebarUrls},
    {sipName_supportedSchemes, meth_QFileDialog_supportedSchemes, METH_VARARGS, doc_QFileDialog_supportedSchemes},
    {sipName_testOption, meth_QFileDialog_testOption, METH_VARARGS, doc_QFileDialog_testOption},
    {sipName_viewMode, meth_QFileDialog_viewMode, METH_VARARGS, doc_QFileDialog_viewMode}
};

static sipEnumMemberDef enummembers_QFileDialog[] = {
    {sipName_Accept, static_cast<int>( ::QFileDialog::Accept), 77},
    {sipName_AcceptOpen, static_cast<int>( ::QFileDialog::AcceptOpen), 76},
    {sipName_AcceptSave, static_cast<int>( ::QFileDialog::AcceptSave), 76},
    {sipName_AnyFile, static_cast<int>( ::QFileDialog::AnyFile), 78},
    {sipName_Detail, static_cast<int>( ::QFileDialog::Detail), 81},
    {sipName_Directory, static_cast<int>( ::QFileDialog::Directory), 78},
    {sipName_DirectoryOnly, static_cast<int>( ::QFileDialog::DirectoryOnly), 78},
    {sipName_DontConfirmOverwrite, static_cast<int>( ::QFileDialog::DontConfirmOverwrite), 79},
    {sipName_DontResolveSymlinks, static_cast<int>( ::QFileDialog::DontResolveSymlinks), 79},
    {sipName_DontUseCustomDirectoryIcons, static_cast<int>( ::QFileDialog::DontUseCustomDirectoryIcons), 79},
    {sipName_DontUseNativeDialog, static_cast<int>( ::QFileDialog::DontUseNativeDialog), 79},
    {sipName_DontUseSheet, static_cast<int>( ::QFileDialog::DontUseSheet), 79},
    {sipName_ExistingFile, static_cast<int>( ::QFileDialog::ExistingFile), 78},
    {sipName_ExistingFiles, static_cast<int>( ::QFileDialog::ExistingFiles), 78},
    {sipName_FileName, static_cast<int>( ::QFileDialog::FileName), 77},
    {sipName_FileType, static_cast<int>( ::QFileDialog::FileType), 77},
    {sipName_HideNameFilterDetails, static_cast<int>( ::QFileDialog::HideNameFilterDetails), 79},
    {sipName_List, static_cast<int>( ::QFileDialog::List), 81},
    {sipName_LookIn, static_cast<int>( ::QFileDialog::LookIn), 77},
    {sipName_ReadOnly, static_cast<int>( ::QFileDialog::ReadOnly), 79},
    {sipName_Reject, static_cast<int>( ::QFileDialog::Reject), 77},
    {sipName_ShowDirsOnly, static_cast<int>( ::QFileDialog::ShowDirsOnly), 79},
};

PyDoc_STRVAR(doc_QFileDialog, "\1QFileDialog(QWidget, Union[Qt.WindowFlags, Qt.WindowType])\n"
"QFileDialog(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '')");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QFileDialog[] = {
    {"directoryUrlEntered(QUrl)", "\1directoryUrlEntered(self, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentUrlChanged(QUrl)", "\1currentUrlChanged(self, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {"urlsSelected(QList<QUrl>)", "\1urlsSelected(self, Iterable[QUrl])", SIP_NULLPTR, SIP_NULLPTR},
    {"urlSelected(QUrl)", "\1urlSelected(self, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {"fileSelected(QString)", "\1fileSelected(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"filterSelected(QString)", "\1filterSelected(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"filesSelected(QStringList)", "\1filesSelected(self, Iterable[str])", SIP_NULLPTR, SIP_NULLPTR},
    {"directoryEntered(QString)", "\1directoryEntered(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentChanged(QString)", "\1currentChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QFileDialog = {
    & ::QFileDialog::staticMetaObject,
    0,
    signals_QFileDialog,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QFileDialog = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileDialog,
        SIP_NULLPTR,
        &plugin_QFileDialog
    },
    {
        sipNameNr_QFileDialog,
        {0, 0, 1},
        60, methods_QFileDialog,
        22, enummembers_QFileDialog,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileDialog,
    -1,
    -1,
    supers_QFileDialog,
    SIP_NULLPTR,
    init_type_QFileDialog,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFileDialog,
    SIP_NULLPTR,
    array_QFileDialog,
    SIP_NULLPTR,
    release_QFileDialog,
    cast_QFileDialog,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
