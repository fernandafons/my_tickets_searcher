/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwhatsthis.sip"
#include <qwhatsthis.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQWhatsThis.cpp"


PyDoc_STRVAR(doc_QWhatsThis_enterWhatsThisMode, "enterWhatsThisMode()");

extern "C" {static PyObject *meth_QWhatsThis_enterWhatsThisMode(PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_enterWhatsThisMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWhatsThis::enterWhatsThisMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_enterWhatsThisMode, doc_QWhatsThis_enterWhatsThisMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWhatsThis_inWhatsThisMode, "inWhatsThisMode() -> bool");

extern "C" {static PyObject *meth_QWhatsThis_inWhatsThisMode(PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_inWhatsThisMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QWhatsThis::inWhatsThisMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_inWhatsThisMode, doc_QWhatsThis_inWhatsThisMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWhatsThis_leaveWhatsThisMode, "leaveWhatsThisMode()");

extern "C" {static PyObject *meth_QWhatsThis_leaveWhatsThisMode(PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_leaveWhatsThisMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWhatsThis::leaveWhatsThisMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_leaveWhatsThisMode, doc_QWhatsThis_leaveWhatsThisMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWhatsThis_showText, "showText(QPoint, str, widget: QWidget = None)");

extern "C" {static PyObject *meth_QWhatsThis_showText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_showText(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWidget* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9J1|J8", sipType_QPoint, &a0, sipType_QString,&a1, &a1State, sipType_QWidget, &a2))
        {
             ::QWhatsThis::showText(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_showText, doc_QWhatsThis_showText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWhatsThis_hideText, "hideText()");

extern "C" {static PyObject *meth_QWhatsThis_hideText(PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_hideText(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWhatsThis::hideText();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_hideText, doc_QWhatsThis_hideText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWhatsThis_createAction, "createAction(parent: QObject = None) -> QAction");

extern "C" {static PyObject *meth_QWhatsThis_createAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWhatsThis_createAction(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|JH", sipType_QObject, &a0, &sipOwner))
        {
             ::QAction*sipRes;

            sipRes =  ::QWhatsThis::createAction(a0);

            return sipConvertFromNewType(sipRes,sipType_QAction,(PyObject *)sipOwner);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWhatsThis, sipName_createAction, doc_QWhatsThis_createAction);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWhatsThis(void *, int);}
static void release_QWhatsThis(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWhatsThis *>(sipCppV);
}


extern "C" {static void assign_QWhatsThis(void *, Py_ssize_t, void *);}
static void assign_QWhatsThis(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QWhatsThis *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QWhatsThis *>(sipSrc);
}


extern "C" {static void *copy_QWhatsThis(const void *, Py_ssize_t);}
static void *copy_QWhatsThis(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QWhatsThis(reinterpret_cast<const  ::QWhatsThis *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWhatsThis(sipSimpleWrapper *);}
static void dealloc_QWhatsThis(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWhatsThis(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWhatsThis(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWhatsThis(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWhatsThis *sipCpp = SIP_NULLPTR;

    {
        const  ::QWhatsThis* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QWhatsThis, &a0))
        {
            sipCpp = new  ::QWhatsThis(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QWhatsThis[] = {
    {sipName_createAction, SIP_MLMETH_CAST(meth_QWhatsThis_createAction), METH_VARARGS|METH_KEYWORDS, doc_QWhatsThis_createAction},
    {sipName_enterWhatsThisMode, meth_QWhatsThis_enterWhatsThisMode, METH_VARARGS, doc_QWhatsThis_enterWhatsThisMode},
    {sipName_hideText, meth_QWhatsThis_hideText, METH_VARARGS, doc_QWhatsThis_hideText},
    {sipName_inWhatsThisMode, meth_QWhatsThis_inWhatsThisMode, METH_VARARGS, doc_QWhatsThis_inWhatsThisMode},
    {sipName_leaveWhatsThisMode, meth_QWhatsThis_leaveWhatsThisMode, METH_VARARGS, doc_QWhatsThis_leaveWhatsThisMode},
    {sipName_showText, SIP_MLMETH_CAST(meth_QWhatsThis_showText), METH_VARARGS|METH_KEYWORDS, doc_QWhatsThis_showText}
};

PyDoc_STRVAR(doc_QWhatsThis, "\1QWhatsThis(QWhatsThis)");


static pyqt5ClassPluginDef plugin_QWhatsThis = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QWhatsThis = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWhatsThis,
        SIP_NULLPTR,
        &plugin_QWhatsThis
    },
    {
        sipNameNr_QWhatsThis,
        {0, 0, 1},
        6, methods_QWhatsThis,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWhatsThis,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QWhatsThis,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QWhatsThis,
    assign_QWhatsThis,
    SIP_NULLPTR,
    copy_QWhatsThis,
    release_QWhatsThis,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
