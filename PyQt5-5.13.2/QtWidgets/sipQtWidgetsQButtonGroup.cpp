/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qbuttongroup.sip"
#include <qbuttongroup.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQButtonGroup.cpp"


class sipQButtonGroup : public  ::QButtonGroup
{
public:
    sipQButtonGroup( ::QObject*);
    virtual ~sipQButtonGroup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQButtonGroup(const sipQButtonGroup &);
    sipQButtonGroup &operator = (const sipQButtonGroup &);

    char sipPyMethods[7];
};

sipQButtonGroup::sipQButtonGroup( ::QObject*a0):  ::QButtonGroup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQButtonGroup::~sipQButtonGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQButtonGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QButtonGroup);

    return  ::QButtonGroup::metaObject();
}

int sipQButtonGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QButtonGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QButtonGroup,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQButtonGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QButtonGroup, _clname, &sipCpp) ? sipCpp :  ::QButtonGroup::qt_metacast(_clname));
}

bool sipQButtonGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QButtonGroup::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQButtonGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QButtonGroup::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQButtonGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QButtonGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QButtonGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QButtonGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QButtonGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QButtonGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QButtonGroup_setExclusive, "setExclusive(self, bool)");

extern "C" {static PyObject *meth_QButtonGroup_setExclusive(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_setExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QButtonGroup, &sipCpp, &a0))
        {
            sipCpp->setExclusive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_setExclusive, doc_QButtonGroup_setExclusive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_exclusive, "exclusive(self) -> bool");

extern "C" {static PyObject *meth_QButtonGroup_exclusive(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_exclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exclusive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_exclusive, doc_QButtonGroup_exclusive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_addButton, "addButton(self, QAbstractButton, id: int = -1)");

extern "C" {static PyObject *meth_QButtonGroup_addButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_addButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        int a1 = -1;
         ::QButtonGroup *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|i", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0, &a1))
        {
            sipCpp->addButton(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_addButton, doc_QButtonGroup_addButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_removeButton, "removeButton(self, QAbstractButton)");

extern "C" {static PyObject *meth_QButtonGroup_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
         ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0))
        {
            sipCpp->removeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_removeButton, doc_QButtonGroup_removeButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_buttons, "buttons(self) -> List[QAbstractButton]");

extern "C" {static PyObject *meth_QButtonGroup_buttons(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            QList< ::QAbstractButton*>*sipRes;

            sipRes = new QList< ::QAbstractButton*>(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_buttons, doc_QButtonGroup_buttons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_button, "button(self, int) -> QAbstractButton");

extern "C" {static PyObject *meth_QButtonGroup_button(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QButtonGroup, &sipCpp, &a0))
        {
             ::QAbstractButton*sipRes;

            sipRes = sipCpp->button(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_button, doc_QButtonGroup_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_checkedButton, "checkedButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QButtonGroup_checkedButton(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_checkedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
             ::QAbstractButton*sipRes;

            sipRes = sipCpp->checkedButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_checkedButton, doc_QButtonGroup_checkedButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_setId, "setId(self, QAbstractButton, int)");

extern "C" {static PyObject *meth_QButtonGroup_setId(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_setId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        int a1;
         ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0, &a1))
        {
            sipCpp->setId(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_setId, doc_QButtonGroup_setId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_id, "id(self, QAbstractButton) -> int");

extern "C" {static PyObject *meth_QButtonGroup_id(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0))
        {
            int sipRes;

            sipRes = sipCpp->id(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_id, doc_QButtonGroup_id);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QButtonGroup_checkedId, "checkedId(self) -> int");

extern "C" {static PyObject *meth_QButtonGroup_checkedId(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_checkedId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->checkedId();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_checkedId, doc_QButtonGroup_checkedId);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QButtonGroup(void *, const sipTypeDef *);}
static void *cast_QButtonGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QButtonGroup *sipCpp = reinterpret_cast< ::QButtonGroup *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QButtonGroup(void *, int);}
static void release_QButtonGroup(void *sipCppV, int)
{
     ::QButtonGroup *sipCpp = reinterpret_cast< ::QButtonGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QButtonGroup(Py_ssize_t);}
static void *array_QButtonGroup(Py_ssize_t sipNrElem)
{
    return new  ::QButtonGroup[sipNrElem];
}


extern "C" {static void dealloc_QButtonGroup(sipSimpleWrapper *);}
static void dealloc_QButtonGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQButtonGroup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QButtonGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QButtonGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QButtonGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQButtonGroup *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQButtonGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QButtonGroup[] = {{32, 0, 1}};


static PyMethodDef methods_QButtonGroup[] = {
    {sipName_addButton, SIP_MLMETH_CAST(meth_QButtonGroup_addButton), METH_VARARGS|METH_KEYWORDS, doc_QButtonGroup_addButton},
    {sipName_button, meth_QButtonGroup_button, METH_VARARGS, doc_QButtonGroup_button},
    {sipName_buttons, meth_QButtonGroup_buttons, METH_VARARGS, doc_QButtonGroup_buttons},
    {sipName_checkedButton, meth_QButtonGroup_checkedButton, METH_VARARGS, doc_QButtonGroup_checkedButton},
    {sipName_checkedId, meth_QButtonGroup_checkedId, METH_VARARGS, doc_QButtonGroup_checkedId},
    {sipName_exclusive, meth_QButtonGroup_exclusive, METH_VARARGS, doc_QButtonGroup_exclusive},
    {sipName_id, meth_QButtonGroup_id, METH_VARARGS, doc_QButtonGroup_id},
    {sipName_removeButton, meth_QButtonGroup_removeButton, METH_VARARGS, doc_QButtonGroup_removeButton},
    {sipName_setExclusive, meth_QButtonGroup_setExclusive, METH_VARARGS, doc_QButtonGroup_setExclusive},
    {sipName_setId, meth_QButtonGroup_setId, METH_VARARGS, doc_QButtonGroup_setId}
};

PyDoc_STRVAR(doc_QButtonGroup, "\1QButtonGroup(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QButtonGroup[] = {
    {"buttonToggled(QAbstractButton*,bool)", "\1buttonToggled(self, QAbstractButton, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonToggled(int,bool)", "\1buttonToggled(self, int, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonReleased(QAbstractButton*)", "\1buttonReleased(self, QAbstractButton)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonReleased(int)", "\1buttonReleased(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonPressed(QAbstractButton*)", "\1buttonPressed(self, QAbstractButton)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonPressed(int)", "\1buttonPressed(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonClicked(QAbstractButton*)", "\1buttonClicked(self, QAbstractButton)", SIP_NULLPTR, SIP_NULLPTR},
    {"buttonClicked(int)", "\1buttonClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QButtonGroup = {
    & ::QButtonGroup::staticMetaObject,
    0,
    signals_QButtonGroup,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QButtonGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QButtonGroup,
        SIP_NULLPTR,
        &plugin_QButtonGroup
    },
    {
        sipNameNr_QButtonGroup,
        {0, 0, 1},
        10, methods_QButtonGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QButtonGroup,
    -1,
    -1,
    supers_QButtonGroup,
    SIP_NULLPTR,
    init_type_QButtonGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QButtonGroup,
    SIP_NULLPTR,
    array_QButtonGroup,
    SIP_NULLPTR,
    release_QButtonGroup,
    cast_QButtonGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
