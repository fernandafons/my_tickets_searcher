/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsSceneResizeEvent.cpp"

#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsSceneResizeEvent.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsSceneResizeEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGraphicsSceneResizeEvent.cpp"


class sipQGraphicsSceneResizeEvent : public  ::QGraphicsSceneResizeEvent
{
public:
    sipQGraphicsSceneResizeEvent();
    ~sipQGraphicsSceneResizeEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsSceneResizeEvent(const sipQGraphicsSceneResizeEvent &);
    sipQGraphicsSceneResizeEvent &operator = (const sipQGraphicsSceneResizeEvent &);
};

sipQGraphicsSceneResizeEvent::sipQGraphicsSceneResizeEvent():  ::QGraphicsSceneResizeEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQGraphicsSceneResizeEvent::~sipQGraphicsSceneResizeEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QGraphicsSceneResizeEvent_oldSize, "oldSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QGraphicsSceneResizeEvent_oldSize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneResizeEvent_oldSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGraphicsSceneResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneResizeEvent, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->oldSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsSceneResizeEvent, sipName_oldSize, doc_QGraphicsSceneResizeEvent_oldSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGraphicsSceneResizeEvent_newSize, "newSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QGraphicsSceneResizeEvent_newSize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneResizeEvent_newSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGraphicsSceneResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneResizeEvent, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->newSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGraphicsSceneResizeEvent, sipName_newSize, doc_QGraphicsSceneResizeEvent_newSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsSceneResizeEvent(void *, const sipTypeDef *);}
static void *cast_QGraphicsSceneResizeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGraphicsSceneResizeEvent *sipCpp = reinterpret_cast< ::QGraphicsSceneResizeEvent *>(sipCppV);

    if (targetType == sipType_QGraphicsSceneEvent)
        return static_cast< ::QGraphicsSceneEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsSceneResizeEvent(void *, int);}
static void release_QGraphicsSceneResizeEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsSceneResizeEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QGraphicsSceneResizeEvent *>(sipCppV);
}


extern "C" {static void *array_QGraphicsSceneResizeEvent(Py_ssize_t);}
static void *array_QGraphicsSceneResizeEvent(Py_ssize_t sipNrElem)
{
    return new  ::QGraphicsSceneResizeEvent[sipNrElem];
}


extern "C" {static void dealloc_QGraphicsSceneResizeEvent(sipSimpleWrapper *);}
static void dealloc_QGraphicsSceneResizeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGraphicsSceneResizeEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGraphicsSceneResizeEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGraphicsSceneResizeEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsSceneResizeEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGraphicsSceneResizeEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQGraphicsSceneResizeEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsSceneResizeEvent[] = {{151, 255, 1}};


static PyMethodDef methods_QGraphicsSceneResizeEvent[] = {
    {sipName_newSize, meth_QGraphicsSceneResizeEvent_newSize, METH_VARARGS, doc_QGraphicsSceneResizeEvent_newSize},
    {sipName_oldSize, meth_QGraphicsSceneResizeEvent_oldSize, METH_VARARGS, doc_QGraphicsSceneResizeEvent_oldSize}
};

PyDoc_STRVAR(doc_QGraphicsSceneResizeEvent, "\1QGraphicsSceneResizeEvent()");


static pyqt5ClassPluginDef plugin_QGraphicsSceneResizeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QGraphicsSceneResizeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsSceneResizeEvent,
        SIP_NULLPTR,
        &plugin_QGraphicsSceneResizeEvent
    },
    {
        sipNameNr_QGraphicsSceneResizeEvent,
        {0, 0, 1},
        2, methods_QGraphicsSceneResizeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGraphicsSceneResizeEvent,
    -1,
    -1,
    supers_QGraphicsSceneResizeEvent,
    SIP_NULLPTR,
    init_type_QGraphicsSceneResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGraphicsSceneResizeEvent,
    SIP_NULLPTR,
    array_QGraphicsSceneResizeEvent,
    SIP_NULLPTR,
    release_QGraphicsSceneResizeEvent,
    cast_QGraphicsSceneResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
