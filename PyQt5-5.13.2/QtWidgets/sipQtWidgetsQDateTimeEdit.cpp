/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qdatetimeedit.sip"
#include <qdatetimeedit.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 161 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qcalendarwidget.sip"
#include <qcalendarwidget.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 749 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qdatetimeedit.sip"
#include <qdatetimeedit.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 222 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 225 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 228 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 231 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 234 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 257 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 263 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 266 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 269 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQDateTimeEdit.cpp"


class sipQDateTimeEdit : public  ::QDateTimeEdit
{
public:
    sipQDateTimeEdit( ::QWidget*);
    sipQDateTimeEdit(const  ::QDateTime&, ::QWidget*);
    sipQDateTimeEdit(const  ::QDate&, ::QWidget*);
    sipQDateTimeEdit(const  ::QTime&, ::QWidget*);
    virtual ~sipQDateTimeEdit();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString textFromDateTime(const  ::QDateTime&) const SIP_OVERRIDE;
     ::QDateTime dateTimeFromText(const  ::QString&) const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    void fixup( ::QString&) const SIP_OVERRIDE;
    void stepBy(int) SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;
     ::QAbstractSpinBox::StepEnabled stepEnabled() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDateTimeEdit(const sipQDateTimeEdit &);
    sipQDateTimeEdit &operator = (const sipQDateTimeEdit &);

    char sipPyMethods[53];
};

sipQDateTimeEdit::sipQDateTimeEdit( ::QWidget*a0):  ::QDateTimeEdit(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QDateTime& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QDate& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QTime& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::~sipQDateTimeEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDateTimeEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QDateTimeEdit);

    return  ::QDateTimeEdit::metaObject();
}

int sipQDateTimeEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDateTimeEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QDateTimeEdit,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQDateTimeEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QDateTimeEdit, _clname, &sipCpp) ? sipCpp :  ::QDateTimeEdit::qt_metacast(_clname));
}

 ::QString sipQDateTimeEdit::textFromDateTime(const  ::QDateTime& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_textFromDateTime);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_textFromDateTime);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::textFromDateTime(a0);

    extern  ::QString sipVH_QtWidgets_111(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QDateTime&);

    return sipVH_QtWidgets_111(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QDateTime sipQDateTimeEdit::dateTimeFromText(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_dateTimeFromText);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_dateTimeFromText);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::dateTimeFromText(a0);

    extern  ::QDateTime sipVH_QtWidgets_110(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtWidgets_110(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQDateTimeEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQDateTimeEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDateTimeEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQDateTimeEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQDateTimeEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQDateTimeEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQDateTimeEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[35]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[35]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQDateTimeEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQDateTimeEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQDateTimeEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQDateTimeEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[39]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[39]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQDateTimeEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDateTimeEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDateTimeEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDateTimeEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQDateTimeEdit::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[48]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_validate);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[48]), sipPySelf, SIP_NULLPTR, sipName_validate);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::validate(a0,a1);

    extern  ::QValidator::State sipVH_QtWidgets_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtWidgets_72(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDateTimeEdit::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[49]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_fixup);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[49]), sipPySelf, SIP_NULLPTR, sipName_fixup);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::fixup(a0);
        return;
    }

    extern void sipVH_QtWidgets_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtWidgets_73(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_stepBy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], sipPySelf, SIP_NULLPTR, sipName_stepBy);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::stepBy(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_clear);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_clear);
#endif

    if (!sipMeth)
    {
         ::QDateTimeEdit::clear();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QAbstractSpinBox::StepEnabled sipQDateTimeEdit::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[52]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_stepEnabled);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[52]), sipPySelf, SIP_NULLPTR, sipName_stepEnabled);
#endif

    if (!sipMeth)
        return  ::QDateTimeEdit::stepEnabled();

    extern  ::QAbstractSpinBox::StepEnabled sipVH_QtWidgets_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_74(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QDateTimeEdit_dateTime, "dateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_dateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_dateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->dateTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_dateTime, doc_QDateTimeEdit_dateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_date, "date(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_date(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_date(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->date());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_date, doc_QDateTimeEdit_date);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_time, "time(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_time(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_time(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->time());

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_time, doc_QDateTimeEdit_time);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumDate, "minimumDate(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->minimumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumDate, doc_QDateTimeEdit_minimumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumDate, "setMinimumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMinimumDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumDate, doc_QDateTimeEdit_setMinimumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumDate, "clearMinimumDate(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMinimumDate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumDate, doc_QDateTimeEdit_clearMinimumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumDate, "maximumDate(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->maximumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumDate, doc_QDateTimeEdit_maximumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumDate, "setMaximumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMaximumDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumDate, doc_QDateTimeEdit_setMaximumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumDate, "clearMaximumDate(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMaximumDate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumDate, doc_QDateTimeEdit_clearMaximumDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateRange, "setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QDate* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QDate, &a1, &a1State))
        {
            sipCpp->setDateRange(*a0,*a1);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QDate *>(a1),sipType_QDate,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateRange, doc_QDateTimeEdit_setDateRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumTime, "minimumTime(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->minimumTime());

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumTime, doc_QDateTimeEdit_minimumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumTime, "setMinimumTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            sipCpp->setMinimumTime(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumTime, doc_QDateTimeEdit_setMinimumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumTime, "clearMinimumTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMinimumTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumTime, doc_QDateTimeEdit_clearMinimumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumTime, "maximumTime(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->maximumTime());

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumTime, doc_QDateTimeEdit_maximumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumTime, "setMaximumTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            sipCpp->setMaximumTime(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumTime, doc_QDateTimeEdit_setMaximumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumTime, "clearMaximumTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMaximumTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumTime, doc_QDateTimeEdit_clearMaximumTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTimeRange, "setTimeRange(self, Union[QTime, datetime.time], Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setTimeRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTimeRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
        const  ::QTime* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QTime, &a1, &a1State))
        {
            sipCpp->setTimeRange(*a0,*a1);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTimeRange, doc_QDateTimeEdit_setTimeRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_displayedSections, "displayedSections(self) -> QDateTimeEdit.Sections");

extern "C" {static PyObject *meth_QDateTimeEdit_displayedSections(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_displayedSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTimeEdit::Sections*sipRes;

            sipRes = new  ::QDateTimeEdit::Sections(sipCpp->displayedSections());

            return sipConvertFromNewType(sipRes,sipType_QDateTimeEdit_Sections,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_displayedSections, doc_QDateTimeEdit_displayedSections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_currentSection, "currentSection(self) -> QDateTimeEdit.Section");

extern "C" {static PyObject *meth_QDateTimeEdit_currentSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_currentSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTimeEdit::Section sipRes;

            sipRes = sipCpp->currentSection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDateTimeEdit_Section);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_currentSection, doc_QDateTimeEdit_currentSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCurrentSection, "setCurrentSection(self, QDateTimeEdit.Section)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCurrentSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCurrentSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit::Section a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
            sipCpp->setCurrentSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCurrentSection, doc_QDateTimeEdit_setCurrentSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionText, "sectionText(self, QDateTimeEdit.Section) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionText(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit::Section a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sectionText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionText, doc_QDateTimeEdit_sectionText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_displayFormat, "displayFormat(self) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_displayFormat(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_displayFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayFormat());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_displayFormat, doc_QDateTimeEdit_displayFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDisplayFormat, "setDisplayFormat(self, str)");

extern "C" {static PyObject *meth_QDateTimeEdit_setDisplayFormat(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDisplayFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDisplayFormat(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDisplayFormat, doc_QDateTimeEdit_setDisplayFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_calendarPopup, "calendarPopup(self) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_calendarPopup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_calendarPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->calendarPopup();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_calendarPopup, doc_QDateTimeEdit_calendarPopup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCalendarPopup, "setCalendarPopup(self, bool)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCalendarPopup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCalendarPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            sipCpp->setCalendarPopup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCalendarPopup, doc_QDateTimeEdit_setCalendarPopup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setSelectedSection, "setSelectedSection(self, QDateTimeEdit.Section)");

extern "C" {static PyObject *meth_QDateTimeEdit_setSelectedSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setSelectedSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit::Section a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
            sipCpp->setSelectedSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setSelectedSection, doc_QDateTimeEdit_setSelectedSection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QDateTimeEdit_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sizeHint, doc_QDateTimeEdit_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clear, doc_QDateTimeEdit_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_stepBy, "stepBy(self, int)");

extern "C" {static PyObject *meth_QDateTimeEdit_stepBy(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_stepBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::stepBy(a0) : sipCpp->stepBy(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_stepBy, doc_QDateTimeEdit_stepBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_event, doc_QDateTimeEdit_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionAt, "sectionAt(self, int) -> QDateTimeEdit.Section");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionAt(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
             ::QDateTimeEdit::Section sipRes;

            sipRes = sipCpp->sectionAt(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDateTimeEdit_Section);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionAt, doc_QDateTimeEdit_sectionAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_currentSectionIndex, "currentSectionIndex(self) -> int");

extern "C" {static PyObject *meth_QDateTimeEdit_currentSectionIndex(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_currentSectionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentSectionIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_currentSectionIndex, doc_QDateTimeEdit_currentSectionIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCurrentSectionIndex, "setCurrentSectionIndex(self, int)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCurrentSectionIndex(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCurrentSectionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            sipCpp->setCurrentSectionIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCurrentSectionIndex, doc_QDateTimeEdit_setCurrentSectionIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionCount, "sectionCount(self) -> int");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionCount(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sectionCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionCount, doc_QDateTimeEdit_sectionCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateTime, "setDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setDateTime(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateTime, doc_QDateTimeEdit_setDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDate, "setDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDate, doc_QDateTimeEdit_setDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTime, "setTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            sipCpp->setTime(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTime, doc_QDateTimeEdit_setTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_initStyleOption, "initStyleOption(self, QStyleOptionSpinBox)");

extern "C" {static PyObject *meth_QDateTimeEdit_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionSpinBox* a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QStyleOptionSpinBox, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_initStyleOption, doc_QDateTimeEdit_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_keyPressEvent, doc_QDateTimeEdit_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_wheelEvent, doc_QDateTimeEdit_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_focusInEvent, doc_QDateTimeEdit_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_focusNextPrevChild, doc_QDateTimeEdit_focusNextPrevChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_mousePressEvent, doc_QDateTimeEdit_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_paintEvent, doc_QDateTimeEdit_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QDateTimeEdit_validate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1i", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_validate, doc_QDateTimeEdit_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_fixup, "fixup(self, str) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_fixup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::fixup(*a0) : sipCpp->fixup(*a0));

            sipResObj = sipConvertFromType(a0,sipType_QString,SIP_NULLPTR);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_fixup, doc_QDateTimeEdit_fixup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_dateTimeFromText, "dateTimeFromText(self, str) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_dateTimeFromText(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_dateTimeFromText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::dateTimeFromText(*a0) : sipCpp->dateTimeFromText(*a0)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_dateTimeFromText, doc_QDateTimeEdit_dateTimeFromText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_textFromDateTime, "textFromDateTime(self, Union[QDateTime, datetime.datetime]) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_textFromDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_textFromDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::textFromDateTime(*a0) : sipCpp->textFromDateTime(*a0)));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_textFromDateTime, doc_QDateTimeEdit_textFromDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_stepEnabled, "stepEnabled(self) -> QAbstractSpinBox.StepEnabled");

extern "C" {static PyObject *meth_QDateTimeEdit_stepEnabled(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_stepEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QAbstractSpinBox::StepEnabled*sipRes;

            sipRes = new  ::QAbstractSpinBox::StepEnabled((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::stepEnabled() : sipCpp->stepEnabled()));

            return sipConvertFromNewType(sipRes,sipType_QAbstractSpinBox_StepEnabled,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_stepEnabled, doc_QDateTimeEdit_stepEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumDateTime, "minimumDateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->minimumDateTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumDateTime, doc_QDateTimeEdit_minimumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumDateTime, "clearMinimumDateTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMinimumDateTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumDateTime, doc_QDateTimeEdit_clearMinimumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumDateTime, "setMinimumDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setMinimumDateTime(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumDateTime, doc_QDateTimeEdit_setMinimumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumDateTime, "maximumDateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->maximumDateTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumDateTime, doc_QDateTimeEdit_maximumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumDateTime, "clearMaximumDateTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            sipCpp->clearMaximumDateTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumDateTime, doc_QDateTimeEdit_clearMaximumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumDateTime, "setMaximumDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setMaximumDateTime(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumDateTime, doc_QDateTimeEdit_setMaximumDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateTimeRange, "setDateTimeRange(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateTimeRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateTimeRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QDateTime, &a1, &a1State))
        {
            sipCpp->setDateTimeRange(*a0,*a1);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast< ::QDateTime *>(a1),sipType_QDateTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateTimeRange, doc_QDateTimeEdit_setDateTimeRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_calendarWidget, "calendarWidget(self) -> QCalendarWidget");

extern "C" {static PyObject *meth_QDateTimeEdit_calendarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_calendarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QCalendarWidget*sipRes;

            sipRes = sipCpp->calendarWidget();

            return sipConvertFromType(sipRes,sipType_QCalendarWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_calendarWidget, doc_QDateTimeEdit_calendarWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCalendarWidget, "setCalendarWidget(self, QCalendarWidget)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCalendarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCalendarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCalendarWidget* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QCalendarWidget, &a0))
        {
            sipCpp->setCalendarWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCalendarWidget, doc_QDateTimeEdit_setCalendarWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_timeSpec, "timeSpec(self) -> Qt.TimeSpec");

extern "C" {static PyObject *meth_QDateTimeEdit_timeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_timeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::Qt::TimeSpec sipRes;

            sipRes = sipCpp->timeSpec();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TimeSpec);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_timeSpec, doc_QDateTimeEdit_timeSpec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTimeSpec, "setTimeSpec(self, Qt.TimeSpec)");

extern "C" {static PyObject *meth_QDateTimeEdit_setTimeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTimeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimeSpec a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_Qt_TimeSpec, &a0))
        {
            sipCpp->setTimeSpec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTimeSpec, doc_QDateTimeEdit_setTimeSpec);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDateTimeEdit(void *, const sipTypeDef *);}
static void *cast_QDateTimeEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDateTimeEdit *sipCpp = reinterpret_cast< ::QDateTimeEdit *>(sipCppV);

    if (targetType == sipType_QAbstractSpinBox)
        return static_cast< ::QAbstractSpinBox *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDateTimeEdit(void *, int);}
static void release_QDateTimeEdit(void *sipCppV, int)
{
     ::QDateTimeEdit *sipCpp = reinterpret_cast< ::QDateTimeEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QDateTimeEdit(Py_ssize_t);}
static void *array_QDateTimeEdit(Py_ssize_t sipNrElem)
{
    return new  ::QDateTimeEdit[sipNrElem];
}


extern "C" {static void dealloc_QDateTimeEdit(sipSimpleWrapper *);}
static void dealloc_QDateTimeEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDateTimeEdit *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDateTimeEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDateTimeEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDateTimeEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDateTimeEdit *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQDateTimeEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QDateTime, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QDate, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QTime, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDateTimeEdit[] = {{20, 255, 1}};


static PyMethodDef methods_QDateTimeEdit[] = {
    {sipName_calendarPopup, meth_QDateTimeEdit_calendarPopup, METH_VARARGS, doc_QDateTimeEdit_calendarPopup},
    {sipName_calendarWidget, meth_QDateTimeEdit_calendarWidget, METH_VARARGS, doc_QDateTimeEdit_calendarWidget},
    {sipName_clear, meth_QDateTimeEdit_clear, METH_VARARGS, doc_QDateTimeEdit_clear},
    {sipName_clearMaximumDate, meth_QDateTimeEdit_clearMaximumDate, METH_VARARGS, doc_QDateTimeEdit_clearMaximumDate},
    {sipName_clearMaximumDateTime, meth_QDateTimeEdit_clearMaximumDateTime, METH_VARARGS, doc_QDateTimeEdit_clearMaximumDateTime},
    {sipName_clearMaximumTime, meth_QDateTimeEdit_clearMaximumTime, METH_VARARGS, doc_QDateTimeEdit_clearMaximumTime},
    {sipName_clearMinimumDate, meth_QDateTimeEdit_clearMinimumDate, METH_VARARGS, doc_QDateTimeEdit_clearMinimumDate},
    {sipName_clearMinimumDateTime, meth_QDateTimeEdit_clearMinimumDateTime, METH_VARARGS, doc_QDateTimeEdit_clearMinimumDateTime},
    {sipName_clearMinimumTime, meth_QDateTimeEdit_clearMinimumTime, METH_VARARGS, doc_QDateTimeEdit_clearMinimumTime},
    {sipName_currentSection, meth_QDateTimeEdit_currentSection, METH_VARARGS, doc_QDateTimeEdit_currentSection},
    {sipName_currentSectionIndex, meth_QDateTimeEdit_currentSectionIndex, METH_VARARGS, doc_QDateTimeEdit_currentSectionIndex},
    {sipName_date, meth_QDateTimeEdit_date, METH_VARARGS, doc_QDateTimeEdit_date},
    {sipName_dateTime, meth_QDateTimeEdit_dateTime, METH_VARARGS, doc_QDateTimeEdit_dateTime},
    {sipName_dateTimeFromText, meth_QDateTimeEdit_dateTimeFromText, METH_VARARGS, doc_QDateTimeEdit_dateTimeFromText},
    {sipName_displayFormat, meth_QDateTimeEdit_displayFormat, METH_VARARGS, doc_QDateTimeEdit_displayFormat},
    {sipName_displayedSections, meth_QDateTimeEdit_displayedSections, METH_VARARGS, doc_QDateTimeEdit_displayedSections},
    {sipName_event, meth_QDateTimeEdit_event, METH_VARARGS, doc_QDateTimeEdit_event},
    {sipName_fixup, meth_QDateTimeEdit_fixup, METH_VARARGS, doc_QDateTimeEdit_fixup},
    {sipName_focusInEvent, meth_QDateTimeEdit_focusInEvent, METH_VARARGS, doc_QDateTimeEdit_focusInEvent},
    {sipName_focusNextPrevChild, meth_QDateTimeEdit_focusNextPrevChild, METH_VARARGS, doc_QDateTimeEdit_focusNextPrevChild},
    {sipName_initStyleOption, meth_QDateTimeEdit_initStyleOption, METH_VARARGS, doc_QDateTimeEdit_initStyleOption},
    {sipName_keyPressEvent, meth_QDateTimeEdit_keyPressEvent, METH_VARARGS, doc_QDateTimeEdit_keyPressEvent},
    {sipName_maximumDate, meth_QDateTimeEdit_maximumDate, METH_VARARGS, doc_QDateTimeEdit_maximumDate},
    {sipName_maximumDateTime, meth_QDateTimeEdit_maximumDateTime, METH_VARARGS, doc_QDateTimeEdit_maximumDateTime},
    {sipName_maximumTime, meth_QDateTimeEdit_maximumTime, METH_VARARGS, doc_QDateTimeEdit_maximumTime},
    {sipName_minimumDate, meth_QDateTimeEdit_minimumDate, METH_VARARGS, doc_QDateTimeEdit_minimumDate},
    {sipName_minimumDateTime, meth_QDateTimeEdit_minimumDateTime, METH_VARARGS, doc_QDateTimeEdit_minimumDateTime},
    {sipName_minimumTime, meth_QDateTimeEdit_minimumTime, METH_VARARGS, doc_QDateTimeEdit_minimumTime},
    {sipName_mousePressEvent, meth_QDateTimeEdit_mousePressEvent, METH_VARARGS, doc_QDateTimeEdit_mousePressEvent},
    {sipName_paintEvent, meth_QDateTimeEdit_paintEvent, METH_VARARGS, doc_QDateTimeEdit_paintEvent},
    {sipName_sectionAt, meth_QDateTimeEdit_sectionAt, METH_VARARGS, doc_QDateTimeEdit_sectionAt},
    {sipName_sectionCount, meth_QDateTimeEdit_sectionCount, METH_VARARGS, doc_QDateTimeEdit_sectionCount},
    {sipName_sectionText, meth_QDateTimeEdit_sectionText, METH_VARARGS, doc_QDateTimeEdit_sectionText},
    {sipName_setCalendarPopup, meth_QDateTimeEdit_setCalendarPopup, METH_VARARGS, doc_QDateTimeEdit_setCalendarPopup},
    {sipName_setCalendarWidget, meth_QDateTimeEdit_setCalendarWidget, METH_VARARGS, doc_QDateTimeEdit_setCalendarWidget},
    {sipName_setCurrentSection, meth_QDateTimeEdit_setCurrentSection, METH_VARARGS, doc_QDateTimeEdit_setCurrentSection},
    {sipName_setCurrentSectionIndex, meth_QDateTimeEdit_setCurrentSectionIndex, METH_VARARGS, doc_QDateTimeEdit_setCurrentSectionIndex},
    {sipName_setDate, meth_QDateTimeEdit_setDate, METH_VARARGS, doc_QDateTimeEdit_setDate},
    {sipName_setDateRange, meth_QDateTimeEdit_setDateRange, METH_VARARGS, doc_QDateTimeEdit_setDateRange},
    {sipName_setDateTime, meth_QDateTimeEdit_setDateTime, METH_VARARGS, doc_QDateTimeEdit_setDateTime},
    {sipName_setDateTimeRange, meth_QDateTimeEdit_setDateTimeRange, METH_VARARGS, doc_QDateTimeEdit_setDateTimeRange},
    {sipName_setDisplayFormat, meth_QDateTimeEdit_setDisplayFormat, METH_VARARGS, doc_QDateTimeEdit_setDisplayFormat},
    {sipName_setMaximumDate, meth_QDateTimeEdit_setMaximumDate, METH_VARARGS, doc_QDateTimeEdit_setMaximumDate},
    {sipName_setMaximumDateTime, meth_QDateTimeEdit_setMaximumDateTime, METH_VARARGS, doc_QDateTimeEdit_setMaximumDateTime},
    {sipName_setMaximumTime, meth_QDateTimeEdit_setMaximumTime, METH_VARARGS, doc_QDateTimeEdit_setMaximumTime},
    {sipName_setMinimumDate, meth_QDateTimeEdit_setMinimumDate, METH_VARARGS, doc_QDateTimeEdit_setMinimumDate},
    {sipName_setMinimumDateTime, meth_QDateTimeEdit_setMinimumDateTime, METH_VARARGS, doc_QDateTimeEdit_setMinimumDateTime},
    {sipName_setMinimumTime, meth_QDateTimeEdit_setMinimumTime, METH_VARARGS, doc_QDateTimeEdit_setMinimumTime},
    {sipName_setSelectedSection, meth_QDateTimeEdit_setSelectedSection, METH_VARARGS, doc_QDateTimeEdit_setSelectedSection},
    {sipName_setTime, meth_QDateTimeEdit_setTime, METH_VARARGS, doc_QDateTimeEdit_setTime},
    {sipName_setTimeRange, meth_QDateTimeEdit_setTimeRange, METH_VARARGS, doc_QDateTimeEdit_setTimeRange},
    {sipName_setTimeSpec, meth_QDateTimeEdit_setTimeSpec, METH_VARARGS, doc_QDateTimeEdit_setTimeSpec},
    {sipName_sizeHint, meth_QDateTimeEdit_sizeHint, METH_VARARGS, doc_QDateTimeEdit_sizeHint},
    {sipName_stepBy, meth_QDateTimeEdit_stepBy, METH_VARARGS, doc_QDateTimeEdit_stepBy},
    {sipName_stepEnabled, meth_QDateTimeEdit_stepEnabled, METH_VARARGS, doc_QDateTimeEdit_stepEnabled},
    {sipName_textFromDateTime, meth_QDateTimeEdit_textFromDateTime, METH_VARARGS, doc_QDateTimeEdit_textFromDateTime},
    {sipName_time, meth_QDateTimeEdit_time, METH_VARARGS, doc_QDateTimeEdit_time},
    {sipName_timeSpec, meth_QDateTimeEdit_timeSpec, METH_VARARGS, doc_QDateTimeEdit_timeSpec},
    {sipName_validate, meth_QDateTimeEdit_validate, METH_VARARGS, doc_QDateTimeEdit_validate},
    {sipName_wheelEvent, meth_QDateTimeEdit_wheelEvent, METH_VARARGS, doc_QDateTimeEdit_wheelEvent}
};

static sipEnumMemberDef enummembers_QDateTimeEdit[] = {
    {sipName_AmPmSection, static_cast<int>( ::QDateTimeEdit::AmPmSection), 57},
    {sipName_DateSections_Mask, static_cast<int>( ::QDateTimeEdit::DateSections_Mask), 57},
    {sipName_DaySection, static_cast<int>( ::QDateTimeEdit::DaySection), 57},
    {sipName_HourSection, static_cast<int>( ::QDateTimeEdit::HourSection), 57},
    {sipName_MSecSection, static_cast<int>( ::QDateTimeEdit::MSecSection), 57},
    {sipName_MinuteSection, static_cast<int>( ::QDateTimeEdit::MinuteSection), 57},
    {sipName_MonthSection, static_cast<int>( ::QDateTimeEdit::MonthSection), 57},
    {sipName_NoSection, static_cast<int>( ::QDateTimeEdit::NoSection), 57},
    {sipName_SecondSection, static_cast<int>( ::QDateTimeEdit::SecondSection), 57},
    {sipName_TimeSections_Mask, static_cast<int>( ::QDateTimeEdit::TimeSections_Mask), 57},
    {sipName_YearSection, static_cast<int>( ::QDateTimeEdit::YearSection), 57},
};

PyDoc_STRVAR(doc_QDateTimeEdit, "\1QDateTimeEdit(parent: QWidget = None)\n"
"QDateTimeEdit(Union[QDateTime, datetime.datetime], parent: QWidget = None)\n"
"QDateTimeEdit(Union[QDate, datetime.date], parent: QWidget = None)\n"
"QDateTimeEdit(Union[QTime, datetime.time], parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDateTimeEdit[] = {
    {"dateChanged(QDate)", "\1dateChanged(self, Union[QDate, datetime.date])", SIP_NULLPTR, SIP_NULLPTR},
    {"timeChanged(QTime)", "\1timeChanged(self, Union[QTime, datetime.time])", SIP_NULLPTR, SIP_NULLPTR},
    {"dateTimeChanged(QDateTime)", "\1dateTimeChanged(self, Union[QDateTime, datetime.datetime])", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDateTimeEdit = {
    & ::QDateTimeEdit::staticMetaObject,
    0,
    signals_QDateTimeEdit,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QDateTimeEdit = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDateTimeEdit,
        SIP_NULLPTR,
        &plugin_QDateTimeEdit
    },
    {
        sipNameNr_QDateTimeEdit,
        {0, 0, 1},
        60, methods_QDateTimeEdit,
        11, enummembers_QDateTimeEdit,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDateTimeEdit,
    -1,
    -1,
    supers_QDateTimeEdit,
    SIP_NULLPTR,
    init_type_QDateTimeEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDateTimeEdit,
    SIP_NULLPTR,
    array_QDateTimeEdit,
    SIP_NULLPTR,
    release_QDateTimeEdit,
    cast_QDateTimeEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
