/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtabwidget.sip"
#include <qtabwidget.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtabbar.sip"
#include <qtabbar.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 243 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 209 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 212 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 215 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 218 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 221 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"


class sipQTabWidget : public  ::QTabWidget
{
public:
    sipQTabWidget( ::QWidget*);
    virtual ~sipQTabWidget();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void tabRemoved(int) SIP_OVERRIDE;
    void tabInserted(int) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabWidget(const sipQTabWidget &);
    sipQTabWidget &operator = (const sipQTabWidget &);

    char sipPyMethods[48];
};

sipQTabWidget::sipQTabWidget( ::QWidget*a0):  ::QTabWidget(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTabWidget::~sipQTabWidget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTabWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTabWidget);

    return  ::QTabWidget::metaObject();
}

int sipQTabWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTabWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTabWidget,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQTabWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTabWidget, _clname, &sipCpp) ? sipCpp :  ::QTabWidget::qt_metacast(_clname));
}

void sipQTabWidget::tabRemoved(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_tabRemoved);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_tabRemoved);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::tabRemoved(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::tabInserted(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_tabInserted);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_tabInserted);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::tabInserted(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QTabWidget::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTabWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QTabWidget::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTabWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QTabWidget::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQTabWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QTabWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTabWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QTabWidget::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTabWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTabWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QTabWidget::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQTabWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QTabWidget::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTabWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QTabWidget::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQTabWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[42]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[42]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QTabWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QTabWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QTabWidget::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTabWidget::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QTabWidget::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQTabWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QTabWidget::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTabWidget::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[47]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[47]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QTabWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTabWidget_clear, "clear(self)");

extern "C" {static PyObject *meth_QTabWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_clear, doc_QTabWidget_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_addTab, "addTab(self, QWidget, str) -> int\n"
"addTab(self, QWidget, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabWidget_addTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_addTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J1", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        const  ::QIcon* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J9J1", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_addTab, doc_QTabWidget_addTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_insertTab, "insertTab(self, int, QWidget, str) -> int\n"
"insertTab(self, int, QWidget, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabWidget_insertTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_insertTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWidget* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::QWidget* a1;
        const  ::QIcon* a2;
        const  ::QString* a3;
        int a3State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J9J1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QIcon, &a2, sipType_QString,&a3, &a3State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_insertTab, doc_QTabWidget_insertTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_removeTab, "removeTab(self, int)");

extern "C" {static PyObject *meth_QTabWidget_removeTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_removeTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->removeTab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_removeTab, doc_QTabWidget_removeTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_isTabEnabled, "isTabEnabled(self, int) -> bool");

extern "C" {static PyObject *meth_QTabWidget_isTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_isTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isTabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_isTabEnabled, doc_QTabWidget_isTabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabEnabled, "setTabEnabled(self, int, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setTabEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabEnabled, doc_QTabWidget_setTabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabText, "tabText(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabText(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabText, doc_QTabWidget_tabText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabText, "setTabText(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabText(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabText(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabText, doc_QTabWidget_setTabText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabIcon, "tabIcon(self, int) -> QIcon");

extern "C" {static PyObject *meth_QTabWidget_tabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->tabIcon(a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabIcon, doc_QTabWidget_tabIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabIcon, "setTabIcon(self, int, QIcon)");

extern "C" {static PyObject *meth_QTabWidget_setTabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QIcon* a1;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            sipCpp->setTabIcon(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabIcon, doc_QTabWidget_setTabIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabToolTip, "setTabToolTip(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabToolTip(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabToolTip, doc_QTabWidget_setTabToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabToolTip, "tabToolTip(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabToolTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabToolTip, doc_QTabWidget_tabToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabWhatsThis, "setTabWhatsThis(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabWhatsThis(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabWhatsThis, doc_QTabWidget_setTabWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabWhatsThis, "tabWhatsThis(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabWhatsThis(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabWhatsThis, doc_QTabWidget_tabWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QTabWidget_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_currentIndex, doc_QTabWidget_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_currentWidget, "currentWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_currentWidget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_currentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->currentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_currentWidget, doc_QTabWidget_currentWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_widget, "widget(self, int) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_widget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->widget(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_widget, doc_QTabWidget_widget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_indexOf, "indexOf(self, QWidget) -> int");

extern "C" {static PyObject *meth_QTabWidget_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_indexOf, doc_QTabWidget_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTabWidget_count(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_count, doc_QTabWidget_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabPosition, "tabPosition(self) -> QTabWidget.TabPosition");

extern "C" {static PyObject *meth_QTabWidget_tabPosition(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QTabWidget::TabPosition sipRes;

            sipRes = sipCpp->tabPosition();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabWidget_TabPosition);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabPosition, doc_QTabWidget_tabPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabPosition, "setTabPosition(self, QTabWidget.TabPosition)");

extern "C" {static PyObject *meth_QTabWidget_setTabPosition(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabWidget::TabPosition a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabWidget_TabPosition, &a0))
        {
            sipCpp->setTabPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabPosition, doc_QTabWidget_setTabPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabShape, "tabShape(self) -> QTabWidget.TabShape");

extern "C" {static PyObject *meth_QTabWidget_tabShape(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QTabWidget::TabShape sipRes;

            sipRes = sipCpp->tabShape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabWidget_TabShape);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabShape, doc_QTabWidget_tabShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabShape, "setTabShape(self, QTabWidget.TabShape)");

extern "C" {static PyObject *meth_QTabWidget_setTabShape(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabWidget::TabShape a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabWidget_TabShape, &a0))
        {
            sipCpp->setTabShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabShape, doc_QTabWidget_setTabShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_sizeHint, doc_QTabWidget_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabWidget::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_minimumSizeHint, doc_QTabWidget_minimumSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setCornerWidget, "setCornerWidget(self, QWidget, corner: Qt.Corner = Qt.TopRightCorner)");

extern "C" {static PyObject *meth_QTabWidget_setCornerWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCornerWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::Qt::Corner a1 = Qt::TopRightCorner;
         ::QTabWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_corner,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|E", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_Qt_Corner, &a1))
        {
            sipCpp->setCornerWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCornerWidget, doc_QTabWidget_setCornerWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_cornerWidget, "cornerWidget(self, corner: Qt.Corner = Qt.TopRightCorner) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_cornerWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_cornerWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Corner a0 = Qt::TopRightCorner;
        const  ::QTabWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_corner,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_Qt_Corner, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->cornerWidget(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_cornerWidget, doc_QTabWidget_cornerWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QTabWidget_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setCurrentIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCurrentIndex, doc_QTabWidget_setCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setCurrentWidget, "setCurrentWidget(self, QWidget)");

extern "C" {static PyObject *meth_QTabWidget_setCurrentWidget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCurrentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setCurrentWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCurrentWidget, doc_QTabWidget_setCurrentWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_initStyleOption, "initStyleOption(self, QStyleOptionTabWidgetFrame)");

extern "C" {static PyObject *meth_QTabWidget_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionTabWidgetFrame* a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QStyleOptionTabWidgetFrame, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_initStyleOption, doc_QTabWidget_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabInserted, "tabInserted(self, int)");

extern "C" {static PyObject *meth_QTabWidget_tabInserted(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::tabInserted(a0) : sipCpp->tabInserted(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabInserted, doc_QTabWidget_tabInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabRemoved, "tabRemoved(self, int)");

extern "C" {static PyObject *meth_QTabWidget_tabRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::tabRemoved(a0) : sipCpp->tabRemoved(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabRemoved, doc_QTabWidget_tabRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTabWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTabWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_event, doc_QTabWidget_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QTabWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_showEvent, doc_QTabWidget_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QTabWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_resizeEvent, doc_QTabWidget_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTabWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_keyPressEvent, doc_QTabWidget_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTabWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_paintEvent, doc_QTabWidget_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabBar, "setTabBar(self, QTabBar)");

extern "C" {static PyObject *meth_QTabWidget_setTabBar(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabBar* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ:", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabBar, &a0))
        {
            sipCpp->setTabBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabBar, doc_QTabWidget_setTabBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabBar, "tabBar(self) -> QTabBar");

extern "C" {static PyObject *meth_QTabWidget_tabBar(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QTabBar*sipRes;

            sipRes = sipCpp->tabBar();

            return sipConvertFromType(sipRes,sipType_QTabBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabBar, doc_QTabWidget_tabBar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTabWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabWidget::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_changeEvent, doc_QTabWidget_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_elideMode, "elideMode(self) -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QTabWidget_elideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_elideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::Qt::TextElideMode sipRes;

            sipRes = sipCpp->elideMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextElideMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_elideMode, doc_QTabWidget_elideMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setElideMode, "setElideMode(self, Qt.TextElideMode)");

extern "C" {static PyObject *meth_QTabWidget_setElideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextElideMode a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            sipCpp->setElideMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setElideMode, doc_QTabWidget_setElideMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_iconSize, doc_QTabWidget_iconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QTabWidget_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setIconSize, doc_QTabWidget_setIconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_usesScrollButtons, "usesScrollButtons(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_usesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_usesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->usesScrollButtons();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_usesScrollButtons, doc_QTabWidget_usesScrollButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setUsesScrollButtons, "setUsesScrollButtons(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setUsesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setUsesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setUsesScrollButtons(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setUsesScrollButtons, doc_QTabWidget_setUsesScrollButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabsClosable, "tabsClosable(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_tabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabsClosable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabsClosable, doc_QTabWidget_tabsClosable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabsClosable, "setTabsClosable(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setTabsClosable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabsClosable, doc_QTabWidget_setTabsClosable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_isMovable, "isMovable(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_isMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_isMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_isMovable, doc_QTabWidget_isMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setMovable, "setMovable(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setMovable, doc_QTabWidget_setMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_documentMode, "documentMode(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->documentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_documentMode, doc_QTabWidget_documentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setDocumentMode, "setDocumentMode(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setDocumentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setDocumentMode, doc_QTabWidget_setDocumentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QTabWidget_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTabWidget::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_heightForWidth, doc_QTabWidget_heightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTabWidget::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_hasHeightForWidth, doc_QTabWidget_hasHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_tabBarAutoHide, "tabBarAutoHide(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_tabBarAutoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabBarAutoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabBarAutoHide();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabBarAutoHide, doc_QTabWidget_tabBarAutoHide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabWidget_setTabBarAutoHide, "setTabBarAutoHide(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabBarAutoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabBarAutoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setTabBarAutoHide(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabBarAutoHide, doc_QTabWidget_setTabBarAutoHide);

    return SIP_NULLPTR;
}


extern "C" {static Py_ssize_t slot_QTabWidget___len__(PyObject *);}
static Py_ssize_t slot_QTabWidget___len__(PyObject *sipSelf)
{
     ::QTabWidget *sipCpp = reinterpret_cast< ::QTabWidget *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTabWidget));

    if (!sipCpp)
        return 0;


    {
        {
            Py_ssize_t sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (Py_ssize_t)sipCpp->count();
#line 3043 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabWidget.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTabWidget(void *, const sipTypeDef *);}
static void *cast_QTabWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTabWidget *sipCpp = reinterpret_cast< ::QTabWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabWidget(void *, int);}
static void release_QTabWidget(void *sipCppV, int)
{
     ::QTabWidget *sipCpp = reinterpret_cast< ::QTabWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QTabWidget(Py_ssize_t);}
static void *array_QTabWidget(Py_ssize_t sipNrElem)
{
    return new  ::QTabWidget[sipNrElem];
}


extern "C" {static void dealloc_QTabWidget(sipSimpleWrapper *);}
static void dealloc_QTabWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTabWidget *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTabWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTabWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTabWidget *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTabWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabWidget[] = {{458, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTabWidget[] = {
    {(void *)slot_QTabWidget___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTabWidget[] = {
    {sipName_addTab, meth_QTabWidget_addTab, METH_VARARGS, doc_QTabWidget_addTab},
    {sipName_changeEvent, meth_QTabWidget_changeEvent, METH_VARARGS, doc_QTabWidget_changeEvent},
    {sipName_clear, meth_QTabWidget_clear, METH_VARARGS, doc_QTabWidget_clear},
    {sipName_cornerWidget, SIP_MLMETH_CAST(meth_QTabWidget_cornerWidget), METH_VARARGS|METH_KEYWORDS, doc_QTabWidget_cornerWidget},
    {sipName_count, meth_QTabWidget_count, METH_VARARGS, doc_QTabWidget_count},
    {sipName_currentIndex, meth_QTabWidget_currentIndex, METH_VARARGS, doc_QTabWidget_currentIndex},
    {sipName_currentWidget, meth_QTabWidget_currentWidget, METH_VARARGS, doc_QTabWidget_currentWidget},
    {sipName_documentMode, meth_QTabWidget_documentMode, METH_VARARGS, doc_QTabWidget_documentMode},
    {sipName_elideMode, meth_QTabWidget_elideMode, METH_VARARGS, doc_QTabWidget_elideMode},
    {sipName_event, meth_QTabWidget_event, METH_VARARGS, doc_QTabWidget_event},
    {sipName_hasHeightForWidth, meth_QTabWidget_hasHeightForWidth, METH_VARARGS, doc_QTabWidget_hasHeightForWidth},
    {sipName_heightForWidth, meth_QTabWidget_heightForWidth, METH_VARARGS, doc_QTabWidget_heightForWidth},
    {sipName_iconSize, meth_QTabWidget_iconSize, METH_VARARGS, doc_QTabWidget_iconSize},
    {sipName_indexOf, meth_QTabWidget_indexOf, METH_VARARGS, doc_QTabWidget_indexOf},
    {sipName_initStyleOption, meth_QTabWidget_initStyleOption, METH_VARARGS, doc_QTabWidget_initStyleOption},
    {sipName_insertTab, meth_QTabWidget_insertTab, METH_VARARGS, doc_QTabWidget_insertTab},
    {sipName_isMovable, meth_QTabWidget_isMovable, METH_VARARGS, doc_QTabWidget_isMovable},
    {sipName_isTabEnabled, meth_QTabWidget_isTabEnabled, METH_VARARGS, doc_QTabWidget_isTabEnabled},
    {sipName_keyPressEvent, meth_QTabWidget_keyPressEvent, METH_VARARGS, doc_QTabWidget_keyPressEvent},
    {sipName_minimumSizeHint, meth_QTabWidget_minimumSizeHint, METH_VARARGS, doc_QTabWidget_minimumSizeHint},
    {sipName_paintEvent, meth_QTabWidget_paintEvent, METH_VARARGS, doc_QTabWidget_paintEvent},
    {sipName_removeTab, meth_QTabWidget_removeTab, METH_VARARGS, doc_QTabWidget_removeTab},
    {sipName_resizeEvent, meth_QTabWidget_resizeEvent, METH_VARARGS, doc_QTabWidget_resizeEvent},
    {sipName_setCornerWidget, SIP_MLMETH_CAST(meth_QTabWidget_setCornerWidget), METH_VARARGS|METH_KEYWORDS, doc_QTabWidget_setCornerWidget},
    {sipName_setCurrentIndex, meth_QTabWidget_setCurrentIndex, METH_VARARGS, doc_QTabWidget_setCurrentIndex},
    {sipName_setCurrentWidget, meth_QTabWidget_setCurrentWidget, METH_VARARGS, doc_QTabWidget_setCurrentWidget},
    {sipName_setDocumentMode, meth_QTabWidget_setDocumentMode, METH_VARARGS, doc_QTabWidget_setDocumentMode},
    {sipName_setElideMode, meth_QTabWidget_setElideMode, METH_VARARGS, doc_QTabWidget_setElideMode},
    {sipName_setIconSize, meth_QTabWidget_setIconSize, METH_VARARGS, doc_QTabWidget_setIconSize},
    {sipName_setMovable, meth_QTabWidget_setMovable, METH_VARARGS, doc_QTabWidget_setMovable},
    {sipName_setTabBar, meth_QTabWidget_setTabBar, METH_VARARGS, doc_QTabWidget_setTabBar},
    {sipName_setTabBarAutoHide, meth_QTabWidget_setTabBarAutoHide, METH_VARARGS, doc_QTabWidget_setTabBarAutoHide},
    {sipName_setTabEnabled, meth_QTabWidget_setTabEnabled, METH_VARARGS, doc_QTabWidget_setTabEnabled},
    {sipName_setTabIcon, meth_QTabWidget_setTabIcon, METH_VARARGS, doc_QTabWidget_setTabIcon},
    {sipName_setTabPosition, meth_QTabWidget_setTabPosition, METH_VARARGS, doc_QTabWidget_setTabPosition},
    {sipName_setTabShape, meth_QTabWidget_setTabShape, METH_VARARGS, doc_QTabWidget_setTabShape},
    {sipName_setTabText, meth_QTabWidget_setTabText, METH_VARARGS, doc_QTabWidget_setTabText},
    {sipName_setTabToolTip, meth_QTabWidget_setTabToolTip, METH_VARARGS, doc_QTabWidget_setTabToolTip},
    {sipName_setTabWhatsThis, meth_QTabWidget_setTabWhatsThis, METH_VARARGS, doc_QTabWidget_setTabWhatsThis},
    {sipName_setTabsClosable, meth_QTabWidget_setTabsClosable, METH_VARARGS, doc_QTabWidget_setTabsClosable},
    {sipName_setUsesScrollButtons, meth_QTabWidget_setUsesScrollButtons, METH_VARARGS, doc_QTabWidget_setUsesScrollButtons},
    {sipName_showEvent, meth_QTabWidget_showEvent, METH_VARARGS, doc_QTabWidget_showEvent},
    {sipName_sizeHint, meth_QTabWidget_sizeHint, METH_VARARGS, doc_QTabWidget_sizeHint},
    {sipName_tabBar, meth_QTabWidget_tabBar, METH_VARARGS, doc_QTabWidget_tabBar},
    {sipName_tabBarAutoHide, meth_QTabWidget_tabBarAutoHide, METH_VARARGS, doc_QTabWidget_tabBarAutoHide},
    {sipName_tabIcon, meth_QTabWidget_tabIcon, METH_VARARGS, doc_QTabWidget_tabIcon},
    {sipName_tabInserted, meth_QTabWidget_tabInserted, METH_VARARGS, doc_QTabWidget_tabInserted},
    {sipName_tabPosition, meth_QTabWidget_tabPosition, METH_VARARGS, doc_QTabWidget_tabPosition},
    {sipName_tabRemoved, meth_QTabWidget_tabRemoved, METH_VARARGS, doc_QTabWidget_tabRemoved},
    {sipName_tabShape, meth_QTabWidget_tabShape, METH_VARARGS, doc_QTabWidget_tabShape},
    {sipName_tabText, meth_QTabWidget_tabText, METH_VARARGS, doc_QTabWidget_tabText},
    {sipName_tabToolTip, meth_QTabWidget_tabToolTip, METH_VARARGS, doc_QTabWidget_tabToolTip},
    {sipName_tabWhatsThis, meth_QTabWidget_tabWhatsThis, METH_VARARGS, doc_QTabWidget_tabWhatsThis},
    {sipName_tabsClosable, meth_QTabWidget_tabsClosable, METH_VARARGS, doc_QTabWidget_tabsClosable},
    {sipName_usesScrollButtons, meth_QTabWidget_usesScrollButtons, METH_VARARGS, doc_QTabWidget_usesScrollButtons},
    {sipName_widget, meth_QTabWidget_widget, METH_VARARGS, doc_QTabWidget_widget}
};

static sipEnumMemberDef enummembers_QTabWidget[] = {
    {sipName_East, static_cast<int>( ::QTabWidget::East), 423},
    {sipName_North, static_cast<int>( ::QTabWidget::North), 423},
    {sipName_Rounded, static_cast<int>( ::QTabWidget::Rounded), 424},
    {sipName_South, static_cast<int>( ::QTabWidget::South), 423},
    {sipName_Triangular, static_cast<int>( ::QTabWidget::Triangular), 424},
    {sipName_West, static_cast<int>( ::QTabWidget::West), 423},
};

PyDoc_STRVAR(doc_QTabWidget, "\1QTabWidget(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTabWidget[] = {
    {"tabBarDoubleClicked(int)", "\1tabBarDoubleClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabBarClicked(int)", "\1tabBarClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabCloseRequested(int)", "\1tabCloseRequested(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentChanged(int)", "\1currentChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTabWidget = {
    & ::QTabWidget::staticMetaObject,
    0,
    signals_QTabWidget,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTabWidget = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTabWidget,
        SIP_NULLPTR,
        &plugin_QTabWidget
    },
    {
        sipNameNr_QTabWidget,
        {0, 0, 1},
        56, methods_QTabWidget,
        6, enummembers_QTabWidget,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTabWidget,
    -1,
    -1,
    supers_QTabWidget,
    slots_QTabWidget,
    init_type_QTabWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTabWidget,
    SIP_NULLPTR,
    array_QTabWidget,
    SIP_NULLPTR,
    release_QTabWidget,
    cast_QTabWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
