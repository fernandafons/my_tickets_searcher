/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 261 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 137 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 143 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 152 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 155 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 158 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 161 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 164 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 208 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 167 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 170 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 173 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 176 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 179 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 182 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 185 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 188 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 191 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 197 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 200 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 203 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 206 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 209 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 212 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 215 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 218 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 221 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 257 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 260 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 263 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 266 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 269 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 274 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 277 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 280 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 283 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 286 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 289 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 292 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 295 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 298 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTextEdit.cpp"


class sipQTextEdit : public  ::QTextEdit
{
public:
    sipQTextEdit( ::QWidget*);
    sipQTextEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQTextEdit();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void insertFromMimeData(const  ::QMimeData*) SIP_OVERRIDE;
    bool canInsertFromMimeData(const  ::QMimeData*) const SIP_OVERRIDE;
     ::QMimeData* createMimeDataFromSelection() const SIP_OVERRIDE;
     ::QVariant loadResource(int,const  ::QUrl&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QSize viewportSizeHint() const SIP_OVERRIDE;
    bool viewportEvent( ::QEvent*) SIP_OVERRIDE;
    void scrollContentsBy(int,int) SIP_OVERRIDE;
    void setupViewport( ::QWidget*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextEdit(const sipQTextEdit &);
    sipQTextEdit &operator = (const sipQTextEdit &);

    char sipPyMethods[54];
};

sipQTextEdit::sipQTextEdit( ::QWidget*a0):  ::QTextEdit(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::sipQTextEdit(const  ::QString& a0, ::QWidget*a1):  ::QTextEdit(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::~sipQTextEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTextEdit);

    return  ::QTextEdit::metaObject();
}

int sipQTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTextEdit,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQTextEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTextEdit, _clname, &sipCpp) ? sipCpp :  ::QTextEdit::qt_metacast(_clname));
}

void sipQTextEdit::insertFromMimeData(const  ::QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_insertFromMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_insertFromMimeData);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtWidgets_186(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    sipVH_QtWidgets_186(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::canInsertFromMimeData(const  ::QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canInsertFromMimeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_canInsertFromMimeData);
#endif

    if (!sipMeth)
        return  ::QTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtWidgets_185(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    return sipVH_QtWidgets_185(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QMimeData* sipQTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_createMimeDataFromSelection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_createMimeDataFromSelection);
#endif

    if (!sipMeth)
        return  ::QTextEdit::createMimeDataFromSelection();

    extern  ::QMimeData* sipVH_QtWidgets_184(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_184(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QVariant sipQTextEdit::loadResource(int a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_loadResource);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_loadResource);
#endif

    if (!sipMeth)
        return  ::QTextEdit::loadResource(a0,a1);

    extern  ::QVariant sipVH_QtWidgets_183(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QUrl&);

    return sipVH_QtWidgets_183(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QTextEdit::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QTextEdit::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTextEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QTextEdit::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QTextEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QTextEdit::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QTextEdit::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QTextEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QTextEdit::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQTextEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[44]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[44]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QTextEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QTextEdit::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTextEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QTextEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQTextEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[48]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[48]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QTextEdit::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTextEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[49]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[49]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTextEdit::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[50]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_viewportSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[50]), sipPySelf, SIP_NULLPTR, sipName_viewportSizeHint);
#endif

    if (!sipMeth)
        return  ::QTextEdit::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTextEdit::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_viewportEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_viewportEvent);
#endif

    if (!sipMeth)
        return  ::QTextEdit::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], sipPySelf, SIP_NULLPTR, sipName_scrollContentsBy);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextEdit::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_setupViewport);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], sipPySelf, SIP_NULLPTR, sipName_setupViewport);
#endif

    if (!sipMeth)
    {
         ::QTextEdit::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextEdit_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextEdit, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            sipCpp->setDocument(a0);

            sipKeepReference(sipSelf, -48, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocument, doc_QTextEdit_setDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_document, doc_QTextEdit_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTextCursor, "setTextCursor(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->setTextCursor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextCursor, doc_QTextEdit_setTextCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_textCursor, "textCursor(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->textCursor());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textCursor, doc_QTextEdit_textCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isReadOnly, doc_QTextEdit_isReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setReadOnly, doc_QTextEdit_setReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_fontPointSize, "fontPointSize(self) -> float");

extern "C" {static PyObject *meth_QTextEdit_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontPointSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontPointSize, doc_QTextEdit_fontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_fontFamily, "fontFamily(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fontFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontFamily, doc_QTextEdit_fontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_fontWeight, "fontWeight(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontWeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontWeight, doc_QTextEdit_fontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_fontUnderline, "fontUnderline(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontUnderline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontUnderline, doc_QTextEdit_fontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_fontItalic, "fontItalic(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontItalic();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontItalic, doc_QTextEdit_fontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_textColor, "textColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->textColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textColor, doc_QTextEdit_textColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_currentFont, "currentFont(self) -> QFont");

extern "C" {static PyObject *meth_QTextEdit_currentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->currentFont());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentFont, doc_QTextEdit_currentFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_alignment, doc_QTextEdit_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_mergeCurrentCharFormat, "mergeCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mergeCurrentCharFormat, doc_QTextEdit_mergeCurrentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentCharFormat, "setCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentCharFormat, doc_QTextEdit_setCurrentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_currentCharFormat, "currentCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->currentCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentCharFormat, doc_QTextEdit_currentCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_autoFormatting, "autoFormatting(self) -> QTextEdit.AutoFormatting");

extern "C" {static PyObject *meth_QTextEdit_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextEdit::AutoFormatting*sipRes;

            sipRes = new  ::QTextEdit::AutoFormatting(sipCpp->autoFormatting());

            return sipConvertFromNewType(sipRes,sipType_QTextEdit_AutoFormatting,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_autoFormatting, doc_QTextEdit_autoFormatting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setAutoFormatting, "setAutoFormatting(self, Union[QTextEdit.AutoFormatting, QTextEdit.AutoFormattingFlag])");

extern "C" {static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit::AutoFormatting* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_AutoFormatting, &a0, &a0State))
        {
            sipCpp->setAutoFormatting(*a0);
            sipReleaseType(a0,sipType_QTextEdit_AutoFormatting,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAutoFormatting, doc_QTextEdit_setAutoFormatting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_tabChangesFocus, "tabChangesFocus(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabChangesFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabChangesFocus, doc_QTextEdit_tabChangesFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTabChangesFocus, "setTabChangesFocus(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabChangesFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabChangesFocus, doc_QTextEdit_setTabChangesFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setDocumentTitle, "setDocumentTitle(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDocumentTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocumentTitle, doc_QTextEdit_setDocumentTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_documentTitle, "documentTitle(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->documentTitle());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_documentTitle, doc_QTextEdit_documentTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_isUndoRedoEnabled, "isUndoRedoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoRedoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isUndoRedoEnabled, doc_QTextEdit_isUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setUndoRedoEnabled, "setUndoRedoEnabled(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setUndoRedoEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setUndoRedoEnabled, doc_QTextEdit_setUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapMode, "lineWrapMode(self) -> QTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextEdit::LineWrapMode sipRes;

            sipRes = sipCpp->lineWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextEdit_LineWrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapMode, doc_QTextEdit_lineWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapMode, "setLineWrapMode(self, QTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit::LineWrapMode a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_LineWrapMode, &a0))
        {
            sipCpp->setLineWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapMode, doc_QTextEdit_setLineWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapColumnOrWidth, "lineWrapColumnOrWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineWrapColumnOrWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapColumnOrWidth, doc_QTextEdit_lineWrapColumnOrWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapColumnOrWidth, "setLineWrapColumnOrWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setLineWrapColumnOrWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapColumnOrWidth, doc_QTextEdit_setLineWrapColumnOrWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_wordWrapMode, "wordWrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            sipRes = sipCpp->wordWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextOption_WrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wordWrapMode, doc_QTextEdit_wordWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setWordWrapMode, "setWordWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::WrapMode a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            sipCpp->setWordWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setWordWrapMode, doc_QTextEdit_setWordWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_find, "find(self, str, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool\n"
"find(self, QRegExp, options: Union[QTextDocument.FindFlags, QTextDocument.FindFlag] = QTextDocument.FindFlags()) -> bool");

extern "C" {static PyObject *meth_QTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument::FindFlags a1def = QTextDocument::FindFlags();
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRegExp* a0;
         ::QTextDocument::FindFlags a1def = QTextDocument::FindFlags();
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QRegExp, &a0, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_find, doc_QTextEdit_find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toPlainText, doc_QTextEdit_toPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_toHtml, "toHtml(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toHtml());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toHtml, doc_QTextEdit_toHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_append, "append(self, str)");

extern "C" {static PyObject *meth_QTextEdit_append(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->append(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_append, doc_QTextEdit_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_ensureCursorVisible, "ensureCursorVisible(self)");

extern "C" {static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->ensureCursorVisible();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_ensureCursorVisible, doc_QTextEdit_ensureCursorVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_loadResource, "loadResource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QUrl* a1;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_loadResource, doc_QTextEdit_loadResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu\n"
"createStandardContextMenu(self, QPoint) -> QMenu");

extern "C" {static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu(*a0);

            return sipConvertFromNewType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createStandardContextMenu, doc_QTextEdit_createStandardContextMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_cursorForPosition, "cursorForPosition(self, QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->cursorForPosition(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorForPosition, doc_QTextEdit_cursorForPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_cursorRect, "cursorRect(self, QTextCursor) -> QRect\n"
"cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cursorRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorRect, doc_QTextEdit_cursorRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_anchorAt, "anchorAt(self, QPoint) -> str");

extern "C" {static PyObject *meth_QTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_anchorAt, doc_QTextEdit_anchorAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_overwriteMode, "overwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overwriteMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_overwriteMode, doc_QTextEdit_overwriteMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setOverwriteMode, "setOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setOverwriteMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setOverwriteMode, doc_QTextEdit_setOverwriteMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_tabStopWidth, "tabStopWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tabStopWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabStopWidth, doc_QTextEdit_tabStopWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTabStopWidth, "setTabStopWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabStopWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabStopWidth, doc_QTextEdit_setTabStopWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_acceptRichText, "acceptRichText(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_acceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_acceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptRichText();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_acceptRichText, doc_QTextEdit_acceptRichText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setAcceptRichText, "setAcceptRichText(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setAcceptRichText(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAcceptRichText, doc_QTextEdit_setAcceptRichText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextInteractionFlags, doc_QTextEdit_setTextInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textInteractionFlags, doc_QTextEdit_textInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCursorWidth, doc_QTextEdit_setCursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorWidth, doc_QTextEdit_cursorWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setExtraSelections, "setExtraSelections(self, Iterable[QTextEdit.ExtraSelection])");

extern "C" {static PyObject *meth_QTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextEdit::ExtraSelection>* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            sipCpp->setExtraSelections(*a0);
            sipReleaseType(const_cast<QList< ::QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setExtraSelections, doc_QTextEdit_setExtraSelections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_extraSelections, "extraSelections(self) -> List[QTextEdit.ExtraSelection]");

extern "C" {static PyObject *meth_QTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QList< ::QTextEdit::ExtraSelection>*sipRes;

            sipRes = new QList< ::QTextEdit::ExtraSelection>(sipCpp->extraSelections());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_extraSelections, doc_QTextEdit_extraSelections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_canPaste, "canPaste(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canPaste();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canPaste, doc_QTextEdit_canPaste);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_moveCursor, "moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor::MoveOperation a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|E", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            sipCpp->moveCursor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_moveCursor, doc_QTextEdit_moveCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_print_, "print_(self, QPagedPaintDevice)");

extern "C" {static PyObject *meth_QTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPagedPaintDevice* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print_, doc_QTextEdit_print_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_print, "print(self, QPagedPaintDevice)");

extern "C" {static PyObject *meth_QTextEdit_print(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPagedPaintDevice* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print, doc_QTextEdit_print);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setFontPointSize, "setFontPointSize(self, float)");

extern "C" {static PyObject *meth_QTextEdit_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontPointSize, doc_QTextEdit_setFontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setFontFamily, "setFontFamily(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFontFamily(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontFamily, doc_QTextEdit_setFontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setFontWeight, "setFontWeight(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontWeight, doc_QTextEdit_setFontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setFontUnderline, "setFontUnderline(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontUnderline, doc_QTextEdit_setFontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setFontItalic, "setFontItalic(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontItalic, doc_QTextEdit_setFontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setText, doc_QTextEdit_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTextColor, "setTextColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextEdit_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setTextColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextColor, doc_QTextEdit_setTextColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentFont, "setCurrentFont(self, QFont)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setCurrentFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentFont, doc_QTextEdit_setCurrentFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAlignment, doc_QTextEdit_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setPlainText, "setPlainText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlainText, doc_QTextEdit_setPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setHtml, "setHtml(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setHtml, doc_QTextEdit_setHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cut, doc_QTextEdit_cut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_copy, doc_QTextEdit_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paste, doc_QTextEdit_paste);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_clear, doc_QTextEdit_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_selectAll, doc_QTextEdit_selectAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_insertPlainText, "insertPlainText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertPlainText, doc_QTextEdit_insertPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_insertHtml, "insertHtml(self, str)");

extern "C" {static PyObject *meth_QTextEdit_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertHtml, doc_QTextEdit_insertHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_scrollToAnchor, "scrollToAnchor(self, str)");

extern "C" {static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->scrollToAnchor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollToAnchor, doc_QTextEdit_scrollToAnchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_redo, doc_QTextEdit_redo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_undo, doc_QTextEdit_undo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_zoomIn, "zoomIn(self, range: int = 1)");

extern "C" {static PyObject *meth_QTextEdit_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomIn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomIn, doc_QTextEdit_zoomIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_zoomOut, "zoomOut(self, range: int = 1)");

extern "C" {static PyObject *meth_QTextEdit_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomOut, doc_QTextEdit_zoomOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_event, doc_QTextEdit_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_timerEvent, doc_QTextEdit_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyPressEvent, doc_QTextEdit_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyReleaseEvent, doc_QTextEdit_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_resizeEvent, doc_QTextEdit_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paintEvent, doc_QTextEdit_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mousePressEvent, doc_QTextEdit_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseMoveEvent, doc_QTextEdit_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseReleaseEvent, doc_QTextEdit_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseDoubleClickEvent, doc_QTextEdit_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusNextPrevChild, doc_QTextEdit_focusNextPrevChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_contextMenuEvent, doc_QTextEdit_contextMenuEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragEnterEvent, doc_QTextEdit_dragEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragLeaveEvent, doc_QTextEdit_dragLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragMoveEvent, doc_QTextEdit_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dropEvent, doc_QTextEdit_dropEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusInEvent, doc_QTextEdit_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusOutEvent, doc_QTextEdit_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_showEvent, doc_QTextEdit_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_changeEvent, doc_QTextEdit_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wheelEvent, doc_QTextEdit_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_createMimeDataFromSelection, "createMimeDataFromSelection(self) -> QMimeData");

extern "C" {static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::createMimeDataFromSelection() : sipCpp->createMimeDataFromSelection());

            return sipConvertFromNewType(sipRes,sipType_QMimeData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createMimeDataFromSelection, doc_QTextEdit_createMimeDataFromSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_canInsertFromMimeData, "canInsertFromMimeData(self, QMimeData) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::canInsertFromMimeData(a0) : sipCpp->canInsertFromMimeData(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canInsertFromMimeData, doc_QTextEdit_canInsertFromMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_insertFromMimeData, "insertFromMimeData(self, QMimeData)");

extern "C" {static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::insertFromMimeData(a0) : sipCpp->insertFromMimeData(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertFromMimeData, doc_QTextEdit_insertFromMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodEvent, doc_QTextEdit_inputMethodEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any\n"
"inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any");

extern "C" {static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
         ::Qt::InputMethodQuery a0;
         ::QVariant* a1;
        int a1State = 0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->inputMethodQuery(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodQuery, doc_QTextEdit_inputMethodQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollContentsBy, doc_QTextEdit_scrollContentsBy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_textBackgroundColor, "textBackgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->textBackgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textBackgroundColor, doc_QTextEdit_textBackgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTextBackgroundColor, "setTextBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setTextBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextBackgroundColor, doc_QTextEdit_setTextBackgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setPlaceholderText, "setPlaceholderText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlaceholderText, doc_QTextEdit_setPlaceholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_placeholderText, "placeholderText(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_placeholderText, doc_QTextEdit_placeholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_tabStopDistance, "tabStopDistance(self) -> float");

extern "C" {static PyObject *meth_QTextEdit_tabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStopDistance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabStopDistance, doc_QTextEdit_tabStopDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextEdit_setTabStopDistance, "setTabStopDistance(self, float)");

extern "C" {static PyObject *meth_QTextEdit_setTabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabStopDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabStopDistance, doc_QTextEdit_setTabStopDistance);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextEdit(void *, const sipTypeDef *);}
static void *cast_QTextEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextEdit *sipCpp = reinterpret_cast< ::QTextEdit *>(sipCppV);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextEdit(void *, int);}
static void release_QTextEdit(void *sipCppV, int)
{
     ::QTextEdit *sipCpp = reinterpret_cast< ::QTextEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QTextEdit(Py_ssize_t);}
static void *array_QTextEdit(Py_ssize_t sipNrElem)
{
    return new  ::QTextEdit[sipNrElem];
}


extern "C" {static void dealloc_QTextEdit(sipSimpleWrapper *);}
static void dealloc_QTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextEdit *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextEdit *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTextEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQTextEdit(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextEdit[] = {{15, 255, 1}};


static PyMethodDef methods_QTextEdit[] = {
    {sipName_acceptRichText, meth_QTextEdit_acceptRichText, METH_VARARGS, doc_QTextEdit_acceptRichText},
    {sipName_alignment, meth_QTextEdit_alignment, METH_VARARGS, doc_QTextEdit_alignment},
    {sipName_anchorAt, meth_QTextEdit_anchorAt, METH_VARARGS, doc_QTextEdit_anchorAt},
    {sipName_append, meth_QTextEdit_append, METH_VARARGS, doc_QTextEdit_append},
    {sipName_autoFormatting, meth_QTextEdit_autoFormatting, METH_VARARGS, doc_QTextEdit_autoFormatting},
    {sipName_canInsertFromMimeData, meth_QTextEdit_canInsertFromMimeData, METH_VARARGS, doc_QTextEdit_canInsertFromMimeData},
    {sipName_canPaste, meth_QTextEdit_canPaste, METH_VARARGS, doc_QTextEdit_canPaste},
    {sipName_changeEvent, meth_QTextEdit_changeEvent, METH_VARARGS, doc_QTextEdit_changeEvent},
    {sipName_clear, meth_QTextEdit_clear, METH_VARARGS, doc_QTextEdit_clear},
    {sipName_contextMenuEvent, meth_QTextEdit_contextMenuEvent, METH_VARARGS, doc_QTextEdit_contextMenuEvent},
    {sipName_copy, meth_QTextEdit_copy, METH_VARARGS, doc_QTextEdit_copy},
    {sipName_createMimeDataFromSelection, meth_QTextEdit_createMimeDataFromSelection, METH_VARARGS, doc_QTextEdit_createMimeDataFromSelection},
    {sipName_createStandardContextMenu, meth_QTextEdit_createStandardContextMenu, METH_VARARGS, doc_QTextEdit_createStandardContextMenu},
    {sipName_currentCharFormat, meth_QTextEdit_currentCharFormat, METH_VARARGS, doc_QTextEdit_currentCharFormat},
    {sipName_currentFont, meth_QTextEdit_currentFont, METH_VARARGS, doc_QTextEdit_currentFont},
    {sipName_cursorForPosition, meth_QTextEdit_cursorForPosition, METH_VARARGS, doc_QTextEdit_cursorForPosition},
    {sipName_cursorRect, meth_QTextEdit_cursorRect, METH_VARARGS, doc_QTextEdit_cursorRect},
    {sipName_cursorWidth, meth_QTextEdit_cursorWidth, METH_VARARGS, doc_QTextEdit_cursorWidth},
    {sipName_cut, meth_QTextEdit_cut, METH_VARARGS, doc_QTextEdit_cut},
    {sipName_document, meth_QTextEdit_document, METH_VARARGS, doc_QTextEdit_document},
    {sipName_documentTitle, meth_QTextEdit_documentTitle, METH_VARARGS, doc_QTextEdit_documentTitle},
    {sipName_dragEnterEvent, meth_QTextEdit_dragEnterEvent, METH_VARARGS, doc_QTextEdit_dragEnterEvent},
    {sipName_dragLeaveEvent, meth_QTextEdit_dragLeaveEvent, METH_VARARGS, doc_QTextEdit_dragLeaveEvent},
    {sipName_dragMoveEvent, meth_QTextEdit_dragMoveEvent, METH_VARARGS, doc_QTextEdit_dragMoveEvent},
    {sipName_dropEvent, meth_QTextEdit_dropEvent, METH_VARARGS, doc_QTextEdit_dropEvent},
    {sipName_ensureCursorVisible, meth_QTextEdit_ensureCursorVisible, METH_VARARGS, doc_QTextEdit_ensureCursorVisible},
    {sipName_event, meth_QTextEdit_event, METH_VARARGS, doc_QTextEdit_event},
    {sipName_extraSelections, meth_QTextEdit_extraSelections, METH_VARARGS, doc_QTextEdit_extraSelections},
    {sipName_find, SIP_MLMETH_CAST(meth_QTextEdit_find), METH_VARARGS|METH_KEYWORDS, doc_QTextEdit_find},
    {sipName_focusInEvent, meth_QTextEdit_focusInEvent, METH_VARARGS, doc_QTextEdit_focusInEvent},
    {sipName_focusNextPrevChild, meth_QTextEdit_focusNextPrevChild, METH_VARARGS, doc_QTextEdit_focusNextPrevChild},
    {sipName_focusOutEvent, meth_QTextEdit_focusOutEvent, METH_VARARGS, doc_QTextEdit_focusOutEvent},
    {sipName_fontFamily, meth_QTextEdit_fontFamily, METH_VARARGS, doc_QTextEdit_fontFamily},
    {sipName_fontItalic, meth_QTextEdit_fontItalic, METH_VARARGS, doc_QTextEdit_fontItalic},
    {sipName_fontPointSize, meth_QTextEdit_fontPointSize, METH_VARARGS, doc_QTextEdit_fontPointSize},
    {sipName_fontUnderline, meth_QTextEdit_fontUnderline, METH_VARARGS, doc_QTextEdit_fontUnderline},
    {sipName_fontWeight, meth_QTextEdit_fontWeight, METH_VARARGS, doc_QTextEdit_fontWeight},
    {sipName_inputMethodEvent, meth_QTextEdit_inputMethodEvent, METH_VARARGS, doc_QTextEdit_inputMethodEvent},
    {sipName_inputMethodQuery, meth_QTextEdit_inputMethodQuery, METH_VARARGS, doc_QTextEdit_inputMethodQuery},
    {sipName_insertFromMimeData, meth_QTextEdit_insertFromMimeData, METH_VARARGS, doc_QTextEdit_insertFromMimeData},
    {sipName_insertHtml, meth_QTextEdit_insertHtml, METH_VARARGS, doc_QTextEdit_insertHtml},
    {sipName_insertPlainText, meth_QTextEdit_insertPlainText, METH_VARARGS, doc_QTextEdit_insertPlainText},
    {sipName_isReadOnly, meth_QTextEdit_isReadOnly, METH_VARARGS, doc_QTextEdit_isReadOnly},
    {sipName_isUndoRedoEnabled, meth_QTextEdit_isUndoRedoEnabled, METH_VARARGS, doc_QTextEdit_isUndoRedoEnabled},
    {sipName_keyPressEvent, meth_QTextEdit_keyPressEvent, METH_VARARGS, doc_QTextEdit_keyPressEvent},
    {sipName_keyReleaseEvent, meth_QTextEdit_keyReleaseEvent, METH_VARARGS, doc_QTextEdit_keyReleaseEvent},
    {sipName_lineWrapColumnOrWidth, meth_QTextEdit_lineWrapColumnOrWidth, METH_VARARGS, doc_QTextEdit_lineWrapColumnOrWidth},
    {sipName_lineWrapMode, meth_QTextEdit_lineWrapMode, METH_VARARGS, doc_QTextEdit_lineWrapMode},
    {sipName_loadResource, meth_QTextEdit_loadResource, METH_VARARGS, doc_QTextEdit_loadResource},
    {sipName_mergeCurrentCharFormat, meth_QTextEdit_mergeCurrentCharFormat, METH_VARARGS, doc_QTextEdit_mergeCurrentCharFormat},
    {sipName_mouseDoubleClickEvent, meth_QTextEdit_mouseDoubleClickEvent, METH_VARARGS, doc_QTextEdit_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QTextEdit_mouseMoveEvent, METH_VARARGS, doc_QTextEdit_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QTextEdit_mousePressEvent, METH_VARARGS, doc_QTextEdit_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QTextEdit_mouseReleaseEvent, METH_VARARGS, doc_QTextEdit_mouseReleaseEvent},
    {sipName_moveCursor, SIP_MLMETH_CAST(meth_QTextEdit_moveCursor), METH_VARARGS|METH_KEYWORDS, doc_QTextEdit_moveCursor},
    {sipName_overwriteMode, meth_QTextEdit_overwriteMode, METH_VARARGS, doc_QTextEdit_overwriteMode},
    {sipName_paintEvent, meth_QTextEdit_paintEvent, METH_VARARGS, doc_QTextEdit_paintEvent},
    {sipName_paste, meth_QTextEdit_paste, METH_VARARGS, doc_QTextEdit_paste},
    {sipName_placeholderText, meth_QTextEdit_placeholderText, METH_VARARGS, doc_QTextEdit_placeholderText},
    {sipName_print, meth_QTextEdit_print, METH_VARARGS, doc_QTextEdit_print},
    {sipName_print_, meth_QTextEdit_print_, METH_VARARGS, doc_QTextEdit_print_},
    {sipName_redo, meth_QTextEdit_redo, METH_VARARGS, doc_QTextEdit_redo},
    {sipName_resizeEvent, meth_QTextEdit_resizeEvent, METH_VARARGS, doc_QTextEdit_resizeEvent},
    {sipName_scrollContentsBy, meth_QTextEdit_scrollContentsBy, METH_VARARGS, doc_QTextEdit_scrollContentsBy},
    {sipName_scrollToAnchor, meth_QTextEdit_scrollToAnchor, METH_VARARGS, doc_QTextEdit_scrollToAnchor},
    {sipName_selectAll, meth_QTextEdit_selectAll, METH_VARARGS, doc_QTextEdit_selectAll},
    {sipName_setAcceptRichText, meth_QTextEdit_setAcceptRichText, METH_VARARGS, doc_QTextEdit_setAcceptRichText},
    {sipName_setAlignment, meth_QTextEdit_setAlignment, METH_VARARGS, doc_QTextEdit_setAlignment},
    {sipName_setAutoFormatting, meth_QTextEdit_setAutoFormatting, METH_VARARGS, doc_QTextEdit_setAutoFormatting},
    {sipName_setCurrentCharFormat, meth_QTextEdit_setCurrentCharFormat, METH_VARARGS, doc_QTextEdit_setCurrentCharFormat},
    {sipName_setCurrentFont, meth_QTextEdit_setCurrentFont, METH_VARARGS, doc_QTextEdit_setCurrentFont},
    {sipName_setCursorWidth, meth_QTextEdit_setCursorWidth, METH_VARARGS, doc_QTextEdit_setCursorWidth},
    {sipName_setDocument, meth_QTextEdit_setDocument, METH_VARARGS, doc_QTextEdit_setDocument},
    {sipName_setDocumentTitle, meth_QTextEdit_setDocumentTitle, METH_VARARGS, doc_QTextEdit_setDocumentTitle},
    {sipName_setExtraSelections, meth_QTextEdit_setExtraSelections, METH_VARARGS, doc_QTextEdit_setExtraSelections},
    {sipName_setFontFamily, meth_QTextEdit_setFontFamily, METH_VARARGS, doc_QTextEdit_setFontFamily},
    {sipName_setFontItalic, meth_QTextEdit_setFontItalic, METH_VARARGS, doc_QTextEdit_setFontItalic},
    {sipName_setFontPointSize, meth_QTextEdit_setFontPointSize, METH_VARARGS, doc_QTextEdit_setFontPointSize},
    {sipName_setFontUnderline, meth_QTextEdit_setFontUnderline, METH_VARARGS, doc_QTextEdit_setFontUnderline},
    {sipName_setFontWeight, meth_QTextEdit_setFontWeight, METH_VARARGS, doc_QTextEdit_setFontWeight},
    {sipName_setHtml, meth_QTextEdit_setHtml, METH_VARARGS, doc_QTextEdit_setHtml},
    {sipName_setLineWrapColumnOrWidth, meth_QTextEdit_setLineWrapColumnOrWidth, METH_VARARGS, doc_QTextEdit_setLineWrapColumnOrWidth},
    {sipName_setLineWrapMode, meth_QTextEdit_setLineWrapMode, METH_VARARGS, doc_QTextEdit_setLineWrapMode},
    {sipName_setOverwriteMode, meth_QTextEdit_setOverwriteMode, METH_VARARGS, doc_QTextEdit_setOverwriteMode},
    {sipName_setPlaceholderText, meth_QTextEdit_setPlaceholderText, METH_VARARGS, doc_QTextEdit_setPlaceholderText},
    {sipName_setPlainText, meth_QTextEdit_setPlainText, METH_VARARGS, doc_QTextEdit_setPlainText},
    {sipName_setReadOnly, meth_QTextEdit_setReadOnly, METH_VARARGS, doc_QTextEdit_setReadOnly},
    {sipName_setTabChangesFocus, meth_QTextEdit_setTabChangesFocus, METH_VARARGS, doc_QTextEdit_setTabChangesFocus},
    {sipName_setTabStopDistance, meth_QTextEdit_setTabStopDistance, METH_VARARGS, doc_QTextEdit_setTabStopDistance},
    {sipName_setTabStopWidth, meth_QTextEdit_setTabStopWidth, METH_VARARGS, doc_QTextEdit_setTabStopWidth},
    {sipName_setText, meth_QTextEdit_setText, METH_VARARGS, doc_QTextEdit_setText},
    {sipName_setTextBackgroundColor, meth_QTextEdit_setTextBackgroundColor, METH_VARARGS, doc_QTextEdit_setTextBackgroundColor},
    {sipName_setTextColor, meth_QTextEdit_setTextColor, METH_VARARGS, doc_QTextEdit_setTextColor},
    {sipName_setTextCursor, meth_QTextEdit_setTextCursor, METH_VARARGS, doc_QTextEdit_setTextCursor},
    {sipName_setTextInteractionFlags, meth_QTextEdit_setTextInteractionFlags, METH_VARARGS, doc_QTextEdit_setTextInteractionFlags},
    {sipName_setUndoRedoEnabled, meth_QTextEdit_setUndoRedoEnabled, METH_VARARGS, doc_QTextEdit_setUndoRedoEnabled},
    {sipName_setWordWrapMode, meth_QTextEdit_setWordWrapMode, METH_VARARGS, doc_QTextEdit_setWordWrapMode},
    {sipName_showEvent, meth_QTextEdit_showEvent, METH_VARARGS, doc_QTextEdit_showEvent},
    {sipName_tabChangesFocus, meth_QTextEdit_tabChangesFocus, METH_VARARGS, doc_QTextEdit_tabChangesFocus},
    {sipName_tabStopDistance, meth_QTextEdit_tabStopDistance, METH_VARARGS, doc_QTextEdit_tabStopDistance},
    {sipName_tabStopWidth, meth_QTextEdit_tabStopWidth, METH_VARARGS, doc_QTextEdit_tabStopWidth},
    {sipName_textBackgroundColor, meth_QTextEdit_textBackgroundColor, METH_VARARGS, doc_QTextEdit_textBackgroundColor},
    {sipName_textColor, meth_QTextEdit_textColor, METH_VARARGS, doc_QTextEdit_textColor},
    {sipName_textCursor, meth_QTextEdit_textCursor, METH_VARARGS, doc_QTextEdit_textCursor},
    {sipName_textInteractionFlags, meth_QTextEdit_textInteractionFlags, METH_VARARGS, doc_QTextEdit_textInteractionFlags},
    {sipName_timerEvent, meth_QTextEdit_timerEvent, METH_VARARGS, doc_QTextEdit_timerEvent},
    {sipName_toHtml, meth_QTextEdit_toHtml, METH_VARARGS, doc_QTextEdit_toHtml},
    {sipName_toPlainText, meth_QTextEdit_toPlainText, METH_VARARGS, doc_QTextEdit_toPlainText},
    {sipName_undo, meth_QTextEdit_undo, METH_VARARGS, doc_QTextEdit_undo},
    {sipName_wheelEvent, meth_QTextEdit_wheelEvent, METH_VARARGS, doc_QTextEdit_wheelEvent},
    {sipName_wordWrapMode, meth_QTextEdit_wordWrapMode, METH_VARARGS, doc_QTextEdit_wordWrapMode},
    {sipName_zoomIn, SIP_MLMETH_CAST(meth_QTextEdit_zoomIn), METH_VARARGS|METH_KEYWORDS, doc_QTextEdit_zoomIn},
    {sipName_zoomOut, SIP_MLMETH_CAST(meth_QTextEdit_zoomOut), METH_VARARGS|METH_KEYWORDS, doc_QTextEdit_zoomOut}
};

static sipEnumMemberDef enummembers_QTextEdit[] = {
    {sipName_AutoAll, static_cast<int>( ::QTextEdit::AutoAll), 435},
    {sipName_AutoBulletList, static_cast<int>( ::QTextEdit::AutoBulletList), 435},
    {sipName_AutoNone, static_cast<int>( ::QTextEdit::AutoNone), 435},
    {sipName_FixedColumnWidth, static_cast<int>( ::QTextEdit::FixedColumnWidth), 437},
    {sipName_FixedPixelWidth, static_cast<int>( ::QTextEdit::FixedPixelWidth), 437},
    {sipName_NoWrap, static_cast<int>( ::QTextEdit::NoWrap), 437},
    {sipName_WidgetWidth, static_cast<int>( ::QTextEdit::WidgetWidth), 437},
};

PyDoc_STRVAR(doc_QTextEdit, "\1QTextEdit(parent: QWidget = None)\n"
"QTextEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTextEdit[] = {
    {"cursorPositionChanged()", "\1cursorPositionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"selectionChanged()", "\1selectionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"copyAvailable(bool)", "\1copyAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentCharFormatChanged(QTextCharFormat)", "\1currentCharFormatChanged(self, QTextCharFormat)", SIP_NULLPTR, SIP_NULLPTR},
    {"redoAvailable(bool)", "\1redoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"undoAvailable(bool)", "\1undoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"textChanged()", "\1textChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTextEdit = {
    & ::QTextEdit::staticMetaObject,
    0,
    signals_QTextEdit,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTextEdit = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextEdit,
        SIP_NULLPTR,
        &plugin_QTextEdit
    },
    {
        sipNameNr_QTextEdit,
        {0, 0, 1},
        113, methods_QTextEdit,
        7, enummembers_QTextEdit,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextEdit,
    -1,
    -1,
    supers_QTextEdit,
    SIP_NULLPTR,
    init_type_QTextEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextEdit,
    SIP_NULLPTR,
    array_QTextEdit,
    SIP_NULLPTR,
    release_QTextEdit,
    cast_QTextEdit,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
