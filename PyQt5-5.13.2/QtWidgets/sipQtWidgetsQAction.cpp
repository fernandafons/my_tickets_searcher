/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qactiongroup.sip"
#include <qactiongroup.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQAction.cpp"


class sipQAction : public  ::QAction
{
public:
    sipQAction( ::QObject*);
    sipQAction(const  ::QString&, ::QObject*);
    sipQAction(const  ::QIcon&,const  ::QString&, ::QObject*);
    virtual ~sipQAction();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAction(const sipQAction &);
    sipQAction &operator = (const sipQAction &);

    char sipPyMethods[7];
};

sipQAction::sipQAction( ::QObject*a0):  ::QAction(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::sipQAction(const  ::QString& a0, ::QObject*a1):  ::QAction(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::sipQAction(const  ::QIcon& a0,const  ::QString& a1, ::QObject*a2):  ::QAction(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::~sipQAction()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAction::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAction);

    return  ::QAction::metaObject();
}

int sipQAction::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAction::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAction,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAction::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAction, _clname, &sipCpp) ? sipCpp :  ::QAction::qt_metacast(_clname));
}

bool sipQAction::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QAction::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAction::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QAction::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAction::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QAction::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAction::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QAction::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAction::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QAction::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAction::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QAction::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAction::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QAction::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAction_setActionGroup, "setActionGroup(self, QActionGroup)");

extern "C" {static PyObject *meth_QAction_setActionGroup(PyObject *, PyObject *);}
static PyObject *meth_QAction_setActionGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QActionGroup* a0;
        PyObject *a0Keep;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAction, &sipCpp, &a0Keep, sipType_QActionGroup, &a0))
        {
            sipCpp->setActionGroup(a0);

            sipKeepReference(sipSelf, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setActionGroup, doc_QAction_setActionGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_actionGroup, "actionGroup(self) -> QActionGroup");

extern "C" {static PyObject *meth_QAction_actionGroup(PyObject *, PyObject *);}
static PyObject *meth_QAction_actionGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QActionGroup*sipRes;

            sipRes = sipCpp->actionGroup();

            return sipConvertFromType(sipRes,sipType_QActionGroup,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_actionGroup, doc_QAction_actionGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QAction_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAction, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIcon, doc_QAction_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QAction_icon(PyObject *, PyObject *);}
static PyObject *meth_QAction_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_icon, doc_QAction_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QAction_setText(PyObject *, PyObject *);}
static PyObject *meth_QAction_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setText, doc_QAction_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_text, "text(self) -> str");

extern "C" {static PyObject *meth_QAction_text(PyObject *, PyObject *);}
static PyObject *meth_QAction_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_text, doc_QAction_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setIconText, "setIconText(self, str)");

extern "C" {static PyObject *meth_QAction_setIconText(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setIconText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIconText, doc_QAction_setIconText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_iconText, "iconText(self) -> str");

extern "C" {static PyObject *meth_QAction_iconText(PyObject *, PyObject *);}
static PyObject *meth_QAction_iconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->iconText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_iconText, doc_QAction_iconText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QAction_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setToolTip, doc_QAction_setToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QAction_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_toolTip, doc_QAction_toolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setStatusTip, "setStatusTip(self, str)");

extern "C" {static PyObject *meth_QAction_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStatusTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setStatusTip, doc_QAction_setStatusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_statusTip, "statusTip(self) -> str");

extern "C" {static PyObject *meth_QAction_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->statusTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_statusTip, doc_QAction_statusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setWhatsThis, "setWhatsThis(self, str)");

extern "C" {static PyObject *meth_QAction_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QAction_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWhatsThis(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setWhatsThis, doc_QAction_setWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_whatsThis, "whatsThis(self) -> str");

extern "C" {static PyObject *meth_QAction_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QAction_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->whatsThis());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_whatsThis, doc_QAction_whatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_menu, "menu(self) -> QMenu");

extern "C" {static PyObject *meth_QAction_menu(PyObject *, PyObject *);}
static PyObject *meth_QAction_menu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->menu();

            return sipConvertFromType(sipRes,sipType_QMenu,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_menu, doc_QAction_menu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setMenu, "setMenu(self, QMenu)");

extern "C" {static PyObject *meth_QAction_setMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_setMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMenu* a0;
        PyObject *a0Keep;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAction, &sipCpp, &a0Keep, sipType_QMenu, &a0))
        {
            sipCpp->setMenu(a0);

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setMenu, doc_QAction_setMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setSeparator, "setSeparator(self, bool)");

extern "C" {static PyObject *meth_QAction_setSeparator(PyObject *, PyObject *);}
static PyObject *meth_QAction_setSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setSeparator(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setSeparator, doc_QAction_setSeparator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isSeparator, "isSeparator(self) -> bool");

extern "C" {static PyObject *meth_QAction_isSeparator(PyObject *, PyObject *);}
static PyObject *meth_QAction_isSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSeparator();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isSeparator, doc_QAction_isSeparator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setShortcut, "setShortcut(self, Union[QKeySequence, QKeySequence.StandardKey, str, int])");

extern "C" {static PyObject *meth_QAction_setShortcut(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QKeySequence, &a0, &a0State))
        {
            sipCpp->setShortcut(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcut, doc_QAction_setShortcut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_shortcut, "shortcut(self) -> QKeySequence");

extern "C" {static PyObject *meth_QAction_shortcut(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QKeySequence*sipRes;

            sipRes = new  ::QKeySequence(sipCpp->shortcut());

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcut, doc_QAction_shortcut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setShortcutContext, "setShortcutContext(self, Qt.ShortcutContext)");

extern "C" {static PyObject *meth_QAction_setShortcutContext(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcutContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ShortcutContext a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_Qt_ShortcutContext, &a0))
        {
            sipCpp->setShortcutContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcutContext, doc_QAction_setShortcutContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_shortcutContext, "shortcutContext(self) -> Qt.ShortcutContext");

extern "C" {static PyObject *meth_QAction_shortcutContext(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcutContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::Qt::ShortcutContext sipRes;

            sipRes = sipCpp->shortcutContext();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ShortcutContext);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcutContext, doc_QAction_shortcutContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setFont, "setFont(self, QFont)");

extern "C" {static PyObject *meth_QAction_setFont(PyObject *, PyObject *);}
static PyObject *meth_QAction_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAction, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setFont, doc_QAction_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QAction_font(PyObject *, PyObject *);}
static PyObject *meth_QAction_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_font, doc_QAction_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setCheckable, "setCheckable(self, bool)");

extern "C" {static PyObject *meth_QAction_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAction_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setCheckable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setCheckable, doc_QAction_setCheckable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isCheckable, "isCheckable(self) -> bool");

extern "C" {static PyObject *meth_QAction_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAction_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCheckable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isCheckable, doc_QAction_isCheckable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_data, "data(self) -> Any");

extern "C" {static PyObject *meth_QAction_data(PyObject *, PyObject *);}
static PyObject *meth_QAction_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->data());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_data, doc_QAction_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setData, "setData(self, Any)");

extern "C" {static PyObject *meth_QAction_setData(PyObject *, PyObject *);}
static PyObject *meth_QAction_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setData(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setData, doc_QAction_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isChecked, "isChecked(self) -> bool");

extern "C" {static PyObject *meth_QAction_isChecked(PyObject *, PyObject *);}
static PyObject *meth_QAction_isChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isChecked();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isChecked, doc_QAction_isChecked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isEnabled, "isEnabled(self) -> bool");

extern "C" {static PyObject *meth_QAction_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isEnabled, doc_QAction_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QAction_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QAction_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isVisible, doc_QAction_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_activate, "activate(self, QAction.ActionEvent)");

extern "C" {static PyObject *meth_QAction_activate(PyObject *, PyObject *);}
static PyObject *meth_QAction_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction::ActionEvent a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_ActionEvent, &a0))
        {
            sipCpp->activate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_activate, doc_QAction_activate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_showStatusText, "showStatusText(self, widget: QWidget = None) -> bool");

extern "C" {static PyObject *meth_QAction_showStatusText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAction_showStatusText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
         ::QAction *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QAction, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->showStatusText(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_showStatusText, doc_QAction_showStatusText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_parentWidget, "parentWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QAction_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QAction_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->parentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_parentWidget, doc_QAction_parentWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAction_event(PyObject *, PyObject *);}
static PyObject *meth_QAction_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAction, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAction::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_event, doc_QAction_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_trigger, "trigger(self)");

extern "C" {static PyObject *meth_QAction_trigger(PyObject *, PyObject *);}
static PyObject *meth_QAction_trigger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            sipCpp->trigger();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_trigger, doc_QAction_trigger);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_hover, "hover(self)");

extern "C" {static PyObject *meth_QAction_hover(PyObject *, PyObject *);}
static PyObject *meth_QAction_hover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            sipCpp->hover();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_hover, doc_QAction_hover);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setChecked, "setChecked(self, bool)");

extern "C" {static PyObject *meth_QAction_setChecked(PyObject *, PyObject *);}
static PyObject *meth_QAction_setChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setChecked(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setChecked, doc_QAction_setChecked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_toggle, "toggle(self)");

extern "C" {static PyObject *meth_QAction_toggle(PyObject *, PyObject *);}
static PyObject *meth_QAction_toggle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            sipCpp->toggle();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_toggle, doc_QAction_toggle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setEnabled, "setEnabled(self, bool)");

extern "C" {static PyObject *meth_QAction_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setEnabled, doc_QAction_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setDisabled, "setDisabled(self, bool)");

extern "C" {static PyObject *meth_QAction_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setDisabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setDisabled, doc_QAction_setDisabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QAction_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QAction_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setVisible, doc_QAction_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setShortcuts, "setShortcuts(self, Iterable[Union[QKeySequence, QKeySequence.StandardKey, str, int]])\n"
"setShortcuts(self, QKeySequence.StandardKey)");

extern "C" {static PyObject *meth_QAction_setShortcuts(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcuts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QKeySequence>* a0;
        int a0State = 0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QList_0100QKeySequence,&a0, &a0State))
        {
            sipCpp->setShortcuts(*a0);
            sipReleaseType(const_cast<QList< ::QKeySequence> *>(a0),sipType_QList_0100QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QKeySequence::StandardKey a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QKeySequence_StandardKey, &a0))
        {
            sipCpp->setShortcuts(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcuts, doc_QAction_setShortcuts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_shortcuts, "shortcuts(self) -> List[QKeySequence]");

extern "C" {static PyObject *meth_QAction_shortcuts(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcuts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList< ::QKeySequence>*sipRes;

            sipRes = new QList< ::QKeySequence>(sipCpp->shortcuts());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QKeySequence,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcuts, doc_QAction_shortcuts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setAutoRepeat, "setAutoRepeat(self, bool)");

extern "C" {static PyObject *meth_QAction_setAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAction_setAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setAutoRepeat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setAutoRepeat, doc_QAction_setAutoRepeat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_autoRepeat, "autoRepeat(self) -> bool");

extern "C" {static PyObject *meth_QAction_autoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAction_autoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRepeat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_autoRepeat, doc_QAction_autoRepeat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setMenuRole, "setMenuRole(self, QAction.MenuRole)");

extern "C" {static PyObject *meth_QAction_setMenuRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_setMenuRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction::MenuRole a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_MenuRole, &a0))
        {
            sipCpp->setMenuRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setMenuRole, doc_QAction_setMenuRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_menuRole, "menuRole(self) -> QAction.MenuRole");

extern "C" {static PyObject *meth_QAction_menuRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_menuRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QAction::MenuRole sipRes;

            sipRes = sipCpp->menuRole();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAction_MenuRole);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_menuRole, doc_QAction_menuRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_associatedWidgets, "associatedWidgets(self) -> List[QWidget]");

extern "C" {static PyObject *meth_QAction_associatedWidgets(PyObject *, PyObject *);}
static PyObject *meth_QAction_associatedWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList< ::QWidget*>*sipRes;

            sipRes = new QList< ::QWidget*>(sipCpp->associatedWidgets());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_associatedWidgets, doc_QAction_associatedWidgets);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_associatedGraphicsWidgets, "associatedGraphicsWidgets(self) -> List[QGraphicsWidget]");

extern "C" {static PyObject *meth_QAction_associatedGraphicsWidgets(PyObject *, PyObject *);}
static PyObject *meth_QAction_associatedGraphicsWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList< ::QGraphicsWidget*>*sipRes;

            sipRes = new QList< ::QGraphicsWidget*>(sipCpp->associatedGraphicsWidgets());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_associatedGraphicsWidgets, doc_QAction_associatedGraphicsWidgets);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setIconVisibleInMenu, "setIconVisibleInMenu(self, bool)");

extern "C" {static PyObject *meth_QAction_setIconVisibleInMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIconVisibleInMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setIconVisibleInMenu(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIconVisibleInMenu, doc_QAction_setIconVisibleInMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isIconVisibleInMenu, "isIconVisibleInMenu(self) -> bool");

extern "C" {static PyObject *meth_QAction_isIconVisibleInMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_isIconVisibleInMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIconVisibleInMenu();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isIconVisibleInMenu, doc_QAction_isIconVisibleInMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setPriority, "setPriority(self, QAction.Priority)");

extern "C" {static PyObject *meth_QAction_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QAction_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAction::Priority a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setPriority, doc_QAction_setPriority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_priority, "priority(self) -> QAction.Priority");

extern "C" {static PyObject *meth_QAction_priority(PyObject *, PyObject *);}
static PyObject *meth_QAction_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
             ::QAction::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAction_Priority);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_priority, doc_QAction_priority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_setShortcutVisibleInContextMenu, "setShortcutVisibleInContextMenu(self, bool)");

extern "C" {static PyObject *meth_QAction_setShortcutVisibleInContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcutVisibleInContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            sipCpp->setShortcutVisibleInContextMenu(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcutVisibleInContextMenu, doc_QAction_setShortcutVisibleInContextMenu);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAction_isShortcutVisibleInContextMenu, "isShortcutVisibleInContextMenu(self) -> bool");

extern "C" {static PyObject *meth_QAction_isShortcutVisibleInContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_isShortcutVisibleInContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isShortcutVisibleInContextMenu();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_isShortcutVisibleInContextMenu, doc_QAction_isShortcutVisibleInContextMenu);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAction(void *, const sipTypeDef *);}
static void *cast_QAction(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAction *sipCpp = reinterpret_cast< ::QAction *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAction(void *, int);}
static void release_QAction(void *sipCppV, int)
{
     ::QAction *sipCpp = reinterpret_cast< ::QAction *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QAction(Py_ssize_t);}
static void *array_QAction(Py_ssize_t sipNrElem)
{
    return new  ::QAction[sipNrElem];
}


extern "C" {static void dealloc_QAction(sipSimpleWrapper *);}
static void dealloc_QAction(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAction *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAction(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAction(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAction(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAction *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAction(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQAction(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1|JH", sipType_QIcon, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQAction(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAction[] = {{32, 0, 1}};


static PyMethodDef methods_QAction[] = {
    {sipName_actionGroup, meth_QAction_actionGroup, METH_VARARGS, doc_QAction_actionGroup},
    {sipName_activate, meth_QAction_activate, METH_VARARGS, doc_QAction_activate},
    {sipName_associatedGraphicsWidgets, meth_QAction_associatedGraphicsWidgets, METH_VARARGS, doc_QAction_associatedGraphicsWidgets},
    {sipName_associatedWidgets, meth_QAction_associatedWidgets, METH_VARARGS, doc_QAction_associatedWidgets},
    {sipName_autoRepeat, meth_QAction_autoRepeat, METH_VARARGS, doc_QAction_autoRepeat},
    {sipName_data, meth_QAction_data, METH_VARARGS, doc_QAction_data},
    {sipName_event, meth_QAction_event, METH_VARARGS, doc_QAction_event},
    {sipName_font, meth_QAction_font, METH_VARARGS, doc_QAction_font},
    {sipName_hover, meth_QAction_hover, METH_VARARGS, doc_QAction_hover},
    {sipName_icon, meth_QAction_icon, METH_VARARGS, doc_QAction_icon},
    {sipName_iconText, meth_QAction_iconText, METH_VARARGS, doc_QAction_iconText},
    {sipName_isCheckable, meth_QAction_isCheckable, METH_VARARGS, doc_QAction_isCheckable},
    {sipName_isChecked, meth_QAction_isChecked, METH_VARARGS, doc_QAction_isChecked},
    {sipName_isEnabled, meth_QAction_isEnabled, METH_VARARGS, doc_QAction_isEnabled},
    {sipName_isIconVisibleInMenu, meth_QAction_isIconVisibleInMenu, METH_VARARGS, doc_QAction_isIconVisibleInMenu},
    {sipName_isSeparator, meth_QAction_isSeparator, METH_VARARGS, doc_QAction_isSeparator},
    {sipName_isShortcutVisibleInContextMenu, meth_QAction_isShortcutVisibleInContextMenu, METH_VARARGS, doc_QAction_isShortcutVisibleInContextMenu},
    {sipName_isVisible, meth_QAction_isVisible, METH_VARARGS, doc_QAction_isVisible},
    {sipName_menu, meth_QAction_menu, METH_VARARGS, doc_QAction_menu},
    {sipName_menuRole, meth_QAction_menuRole, METH_VARARGS, doc_QAction_menuRole},
    {sipName_parentWidget, meth_QAction_parentWidget, METH_VARARGS, doc_QAction_parentWidget},
    {sipName_priority, meth_QAction_priority, METH_VARARGS, doc_QAction_priority},
    {sipName_setActionGroup, meth_QAction_setActionGroup, METH_VARARGS, doc_QAction_setActionGroup},
    {sipName_setAutoRepeat, meth_QAction_setAutoRepeat, METH_VARARGS, doc_QAction_setAutoRepeat},
    {sipName_setCheckable, meth_QAction_setCheckable, METH_VARARGS, doc_QAction_setCheckable},
    {sipName_setChecked, meth_QAction_setChecked, METH_VARARGS, doc_QAction_setChecked},
    {sipName_setData, meth_QAction_setData, METH_VARARGS, doc_QAction_setData},
    {sipName_setDisabled, meth_QAction_setDisabled, METH_VARARGS, doc_QAction_setDisabled},
    {sipName_setEnabled, meth_QAction_setEnabled, METH_VARARGS, doc_QAction_setEnabled},
    {sipName_setFont, meth_QAction_setFont, METH_VARARGS, doc_QAction_setFont},
    {sipName_setIcon, meth_QAction_setIcon, METH_VARARGS, doc_QAction_setIcon},
    {sipName_setIconText, meth_QAction_setIconText, METH_VARARGS, doc_QAction_setIconText},
    {sipName_setIconVisibleInMenu, meth_QAction_setIconVisibleInMenu, METH_VARARGS, doc_QAction_setIconVisibleInMenu},
    {sipName_setMenu, meth_QAction_setMenu, METH_VARARGS, doc_QAction_setMenu},
    {sipName_setMenuRole, meth_QAction_setMenuRole, METH_VARARGS, doc_QAction_setMenuRole},
    {sipName_setPriority, meth_QAction_setPriority, METH_VARARGS, doc_QAction_setPriority},
    {sipName_setSeparator, meth_QAction_setSeparator, METH_VARARGS, doc_QAction_setSeparator},
    {sipName_setShortcut, meth_QAction_setShortcut, METH_VARARGS, doc_QAction_setShortcut},
    {sipName_setShortcutContext, meth_QAction_setShortcutContext, METH_VARARGS, doc_QAction_setShortcutContext},
    {sipName_setShortcutVisibleInContextMenu, meth_QAction_setShortcutVisibleInContextMenu, METH_VARARGS, doc_QAction_setShortcutVisibleInContextMenu},
    {sipName_setShortcuts, meth_QAction_setShortcuts, METH_VARARGS, doc_QAction_setShortcuts},
    {sipName_setStatusTip, meth_QAction_setStatusTip, METH_VARARGS, doc_QAction_setStatusTip},
    {sipName_setText, meth_QAction_setText, METH_VARARGS, doc_QAction_setText},
    {sipName_setToolTip, meth_QAction_setToolTip, METH_VARARGS, doc_QAction_setToolTip},
    {sipName_setVisible, meth_QAction_setVisible, METH_VARARGS, doc_QAction_setVisible},
    {sipName_setWhatsThis, meth_QAction_setWhatsThis, METH_VARARGS, doc_QAction_setWhatsThis},
    {sipName_shortcut, meth_QAction_shortcut, METH_VARARGS, doc_QAction_shortcut},
    {sipName_shortcutContext, meth_QAction_shortcutContext, METH_VARARGS, doc_QAction_shortcutContext},
    {sipName_shortcuts, meth_QAction_shortcuts, METH_VARARGS, doc_QAction_shortcuts},
    {sipName_showStatusText, SIP_MLMETH_CAST(meth_QAction_showStatusText), METH_VARARGS|METH_KEYWORDS, doc_QAction_showStatusText},
    {sipName_statusTip, meth_QAction_statusTip, METH_VARARGS, doc_QAction_statusTip},
    {sipName_text, meth_QAction_text, METH_VARARGS, doc_QAction_text},
    {sipName_toggle, meth_QAction_toggle, METH_VARARGS, doc_QAction_toggle},
    {sipName_toolTip, meth_QAction_toolTip, METH_VARARGS, doc_QAction_toolTip},
    {sipName_trigger, meth_QAction_trigger, METH_VARARGS, doc_QAction_trigger},
    {sipName_whatsThis, meth_QAction_whatsThis, METH_VARARGS, doc_QAction_whatsThis}
};

static sipEnumMemberDef enummembers_QAction[] = {
    {sipName_AboutQtRole, static_cast<int>( ::QAction::AboutQtRole), 28},
    {sipName_AboutRole, static_cast<int>( ::QAction::AboutRole), 28},
    {sipName_ApplicationSpecificRole, static_cast<int>( ::QAction::ApplicationSpecificRole), 28},
    {sipName_HighPriority, static_cast<int>( ::QAction::HighPriority), 29},
    {sipName_Hover, static_cast<int>( ::QAction::Hover), 27},
    {sipName_LowPriority, static_cast<int>( ::QAction::LowPriority), 29},
    {sipName_NoRole, static_cast<int>( ::QAction::NoRole), 28},
    {sipName_NormalPriority, static_cast<int>( ::QAction::NormalPriority), 29},
    {sipName_PreferencesRole, static_cast<int>( ::QAction::PreferencesRole), 28},
    {sipName_QuitRole, static_cast<int>( ::QAction::QuitRole), 28},
    {sipName_TextHeuristicRole, static_cast<int>( ::QAction::TextHeuristicRole), 28},
    {sipName_Trigger, static_cast<int>( ::QAction::Trigger), 27},
};

PyDoc_STRVAR(doc_QAction, "\1QAction(parent: QObject = None)\n"
"QAction(str, parent: QObject = None)\n"
"QAction(QIcon, str, parent: QObject = None)");


extern "C" {static int emit_QAction_triggered(void *, PyObject *);}

static int emit_QAction_triggered(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAction *sipCpp = reinterpret_cast<QAction *>(sipCppV);

    {
        bool a0 = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "|b", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggered(a0);
            Py_END_ALLOW_THREADS


            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAction, sipName_triggered, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAction[] = {
    {"toggled(bool)", "\1toggled(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"hovered()", "\1hovered(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"triggered(bool)", "\1triggered(self, checked: bool = False)", SIP_NULLPTR, emit_QAction_triggered},
    {"changed()", "\1changed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAction = {
    & ::QAction::staticMetaObject,
    0,
    signals_QAction,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QAction = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAction,
        SIP_NULLPTR,
        &plugin_QAction
    },
    {
        sipNameNr_QAction,
        {0, 0, 1},
        56, methods_QAction,
        12, enummembers_QAction,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAction,
    -1,
    -1,
    supers_QAction,
    SIP_NULLPTR,
    init_type_QAction,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QAction,
    SIP_NULLPTR,
    array_QAction,
    SIP_NULLPTR,
    release_QAction,
    cast_QAction,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
