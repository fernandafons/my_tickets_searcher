/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmouseeventtransition.sip"
#include <qmouseeventtransition.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"

#line 26 "sip/QtCore/qstate.sip"
#include <qstate.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMouseEventTransition.cpp"


class sipQMouseEventTransition : public  ::QMouseEventTransition
{
public:
    sipQMouseEventTransition( ::QState*);
    sipQMouseEventTransition( ::QObject*, ::QEvent::Type, ::Qt::MouseButton, ::QState*);
    virtual ~sipQMouseEventTransition();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onTransition( ::QEvent*) SIP_OVERRIDE;
    bool eventTest( ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMouseEventTransition(const sipQMouseEventTransition &);
    sipQMouseEventTransition &operator = (const sipQMouseEventTransition &);

    char sipPyMethods[9];
};

sipQMouseEventTransition::sipQMouseEventTransition( ::QState*a0):  ::QMouseEventTransition(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMouseEventTransition::sipQMouseEventTransition( ::QObject*a0, ::QEvent::Type a1, ::Qt::MouseButton a2, ::QState*a3):  ::QMouseEventTransition(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMouseEventTransition::~sipQMouseEventTransition()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMouseEventTransition::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMouseEventTransition);

    return  ::QMouseEventTransition::metaObject();
}

int sipQMouseEventTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMouseEventTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMouseEventTransition,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQMouseEventTransition::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMouseEventTransition, _clname, &sipCpp) ? sipCpp :  ::QMouseEventTransition::qt_metacast(_clname));
}

void sipQMouseEventTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_onTransition);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_onTransition);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::onTransition(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMouseEventTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventTest);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventTest);
#endif

    if (!sipMeth)
        return  ::QMouseEventTransition::eventTest(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMouseEventTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QMouseEventTransition::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMouseEventTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QMouseEventTransition::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMouseEventTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMouseEventTransition::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QMouseEventTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMouseEventTransition_button, "button(self) -> Qt.MouseButton");

extern "C" {static PyObject *meth_QMouseEventTransition_button(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
             ::Qt::MouseButton sipRes;

            sipRes = sipCpp->button();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_button, doc_QMouseEventTransition_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setButton, "setButton(self, Qt.MouseButton)");

extern "C" {static PyObject *meth_QMouseEventTransition_setButton(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButton a0;
         ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_Qt_MouseButton, &a0))
        {
            sipCpp->setButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setButton, doc_QMouseEventTransition_setButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_modifierMask, "modifierMask(self) -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QMouseEventTransition_modifierMask(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_modifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(sipCpp->modifierMask());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_modifierMask, doc_QMouseEventTransition_modifierMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setModifierMask, "setModifierMask(self, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])");

extern "C" {static PyObject *meth_QMouseEventTransition_setModifierMask(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setModifierMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::KeyboardModifiers* a0;
        int a0State = 0;
         ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            sipCpp->setModifierMask(*a0);
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setModifierMask, doc_QMouseEventTransition_setModifierMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_hitTestPath, "hitTestPath(self) -> QPainterPath");

extern "C" {static PyObject *meth_QMouseEventTransition_hitTestPath(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_hitTestPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEventTransition, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->hitTestPath());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_hitTestPath, doc_QMouseEventTransition_hitTestPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_setHitTestPath, "setHitTestPath(self, QPainterPath)");

extern "C" {static PyObject *meth_QMouseEventTransition_setHitTestPath(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_setHitTestPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
         ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->setHitTestPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_setHitTestPath, doc_QMouseEventTransition_setHitTestPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QMouseEventTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMouseEventTransition::onTransition(a0) : sipCpp->onTransition(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_onTransition, doc_QMouseEventTransition_onTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEventTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMouseEventTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QMouseEventTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMouseEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMouseEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMouseEventTransition::eventTest(a0) : sipCpp->eventTest(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMouseEventTransition, sipName_eventTest, doc_QMouseEventTransition_eventTest);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMouseEventTransition(void *, const sipTypeDef *);}
static void *cast_QMouseEventTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMouseEventTransition *sipCpp = reinterpret_cast< ::QMouseEventTransition *>(sipCppV);

    if (targetType == sipType_QEventTransition)
        return static_cast< ::QEventTransition *>(sipCpp);

    if (targetType == sipType_QAbstractTransition)
        return static_cast< ::QAbstractTransition *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMouseEventTransition(void *, int);}
static void release_QMouseEventTransition(void *sipCppV, int)
{
     ::QMouseEventTransition *sipCpp = reinterpret_cast< ::QMouseEventTransition *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QMouseEventTransition(Py_ssize_t);}
static void *array_QMouseEventTransition(Py_ssize_t sipNrElem)
{
    return new  ::QMouseEventTransition[sipNrElem];
}


extern "C" {static void dealloc_QMouseEventTransition(sipSimpleWrapper *);}
static void dealloc_QMouseEventTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMouseEventTransition *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMouseEventTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMouseEventTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMouseEventTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMouseEventTransition *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQMouseEventTransition(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QEvent::Type a1;
         ::Qt::MouseButton a2;
         ::QState* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8EE|JH", &a0Keep, sipType_QObject, &a0, sipType_QEvent_Type, &a1, sipType_Qt_MouseButton, &a2, sipType_QState, &a3, sipOwner))
        {
            sipCpp = new sipQMouseEventTransition(a0,a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, 10, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMouseEventTransition[] = {{14, 0, 1}};


static PyMethodDef methods_QMouseEventTransition[] = {
    {sipName_button, meth_QMouseEventTransition_button, METH_VARARGS, doc_QMouseEventTransition_button},
    {sipName_eventTest, meth_QMouseEventTransition_eventTest, METH_VARARGS, doc_QMouseEventTransition_eventTest},
    {sipName_hitTestPath, meth_QMouseEventTransition_hitTestPath, METH_VARARGS, doc_QMouseEventTransition_hitTestPath},
    {sipName_modifierMask, meth_QMouseEventTransition_modifierMask, METH_VARARGS, doc_QMouseEventTransition_modifierMask},
    {sipName_onTransition, meth_QMouseEventTransition_onTransition, METH_VARARGS, doc_QMouseEventTransition_onTransition},
    {sipName_setButton, meth_QMouseEventTransition_setButton, METH_VARARGS, doc_QMouseEventTransition_setButton},
    {sipName_setHitTestPath, meth_QMouseEventTransition_setHitTestPath, METH_VARARGS, doc_QMouseEventTransition_setHitTestPath},
    {sipName_setModifierMask, meth_QMouseEventTransition_setModifierMask, METH_VARARGS, doc_QMouseEventTransition_setModifierMask}
};

PyDoc_STRVAR(doc_QMouseEventTransition, "\1QMouseEventTransition(sourceState: QState = None)\n"
"QMouseEventTransition(QObject, QEvent.Type, Qt.MouseButton, sourceState: QState = None)");


static pyqt5ClassPluginDef plugin_QMouseEventTransition = {
    & ::QMouseEventTransition::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QMouseEventTransition = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMouseEventTransition,
        SIP_NULLPTR,
        &plugin_QMouseEventTransition
    },
    {
        sipNameNr_QMouseEventTransition,
        {0, 0, 1},
        8, methods_QMouseEventTransition,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMouseEventTransition,
    -1,
    -1,
    supers_QMouseEventTransition,
    SIP_NULLPTR,
    init_type_QMouseEventTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMouseEventTransition,
    SIP_NULLPTR,
    array_QMouseEventTransition,
    SIP_NULLPTR,
    release_QMouseEventTransition,
    cast_QMouseEventTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
