/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmessagebox.sip"
#include <qmessagebox.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmessagebox.sip"
#include <qmessagebox.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qcheckbox.sip"
#include <qcheckbox.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qpushbutton.sip"
#include <qpushbutton.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"


class sipQMessageBox : public  ::QMessageBox
{
public:
    sipQMessageBox( ::QWidget*);
    sipQMessageBox( ::QMessageBox::Icon,const  ::QString&,const  ::QString&, ::QMessageBox::StandardButtons, ::QWidget*, ::Qt::WindowFlags);
    virtual ~sipQMessageBox();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    int exec() SIP_OVERRIDE;
    void done(int) SIP_OVERRIDE;
    void accept() SIP_OVERRIDE;
    void reject() SIP_OVERRIDE;
    void open() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMessageBox(const sipQMessageBox &);
    sipQMessageBox &operator = (const sipQMessageBox &);

    char sipPyMethods[52];
};

sipQMessageBox::sipQMessageBox( ::QWidget*a0):  ::QMessageBox(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox( ::QMessageBox::Icon a0,const  ::QString& a1,const  ::QString& a2, ::QMessageBox::StandardButtons a3, ::QWidget*a4, ::Qt::WindowFlags a5):  ::QMessageBox(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::~sipQMessageBox()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMessageBox::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMessageBox);

    return  ::QMessageBox::metaObject();
}

int sipQMessageBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMessageBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMessageBox,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQMessageBox::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMessageBox, _clname, &sipCpp) ? sipCpp :  ::QMessageBox::qt_metacast(_clname));
}

void sipQMessageBox::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQMessageBox::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QMessageBox::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMessageBox::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QMessageBox::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQMessageBox::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QMessageBox::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMessageBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QMessageBox::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQMessageBox::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QMessageBox::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMessageBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QMessageBox::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQMessageBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QMessageBox::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQMessageBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QMessageBox::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMessageBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMessageBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QMessageBox::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQMessageBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[37]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[37]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QMessageBox::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMessageBox::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QMessageBox::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QMessageBox::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QMessageBox::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMessageBox::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMessageBox::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_exec_);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_exec_);
#endif

    if (!sipMeth)
        return  ::QMessageBox::exec();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMessageBox::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_done);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_done);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::done(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_accept);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_accept);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::accept();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMessageBox::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_reject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], sipPySelf, SIP_NULLPTR, sipName_reject);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::reject();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMessageBox::open()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_open);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], sipPySelf, SIP_NULLPTR, sipName_open);
#endif

    if (!sipMeth)
    {
         ::QMessageBox::open();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMessageBox_text, "text(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_text(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_text, doc_QMessageBox_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setText, doc_QMessageBox_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_icon, "icon(self) -> QMessageBox.Icon");

extern "C" {static PyObject *meth_QMessageBox_icon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QMessageBox::Icon sipRes;

            sipRes = sipCpp->icon();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_Icon);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_icon, doc_QMessageBox_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setIcon, "setIcon(self, QMessageBox.Icon)");

extern "C" {static PyObject *meth_QMessageBox_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMessageBox::Icon a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_Icon, &a0))
        {
            sipCpp->setIcon(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIcon, doc_QMessageBox_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_iconPixmap, "iconPixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_iconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_iconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->iconPixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_iconPixmap, doc_QMessageBox_iconPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setIconPixmap, "setIconPixmap(self, QPixmap)");

extern "C" {static PyObject *meth_QMessageBox_setIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->setIconPixmap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIconPixmap, doc_QMessageBox_setIconPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_textFormat, "textFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QMessageBox_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            sipRes = sipCpp->textFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextFormat);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_textFormat, doc_QMessageBox_textFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setTextFormat, "setTextFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QMessageBox_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextFormat a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            sipCpp->setTextFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setTextFormat, doc_QMessageBox_setTextFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_information, "information(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_information(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_information(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::information(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_StandardButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_information, doc_QMessageBox_information);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_question, "question(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.StandardButtons(QMessageBox.Yes|QMessageBox.No), defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_question(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_question(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::StandardButtons(QMessageBox::Yes|QMessageBox::No);
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::question(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_StandardButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_question, doc_QMessageBox_question);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_warning, "warning(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::warning(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_StandardButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_warning, doc_QMessageBox_warning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_critical, "critical(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::critical(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_StandardButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_critical, doc_QMessageBox_critical);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_about, "about(QWidget, str, str)");

extern "C" {static PyObject *meth_QMessageBox_about(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_about(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QMessageBox::about(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_about, doc_QMessageBox_about);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_aboutQt, "aboutQt(QWidget, title: str = '')");

extern "C" {static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QMessageBox::aboutQt(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_aboutQt, doc_QMessageBox_aboutQt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_standardIcon, "standardIcon(QMessageBox.Icon) -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMessageBox::Icon a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QMessageBox_Icon, &a0))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap( ::QMessageBox::standardIcon(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardIcon, doc_QMessageBox_standardIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMessageBox_event(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMessageBox::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_event, doc_QMessageBox_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QMessageBox_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_resizeEvent, doc_QMessageBox_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QMessageBox_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_showEvent, doc_QMessageBox_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QMessageBox_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QCloseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::closeEvent(a0) : sipCpp->closeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_closeEvent, doc_QMessageBox_closeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QMessageBox_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_keyPressEvent, doc_QMessageBox_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMessageBox_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_changeEvent, doc_QMessageBox_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_addButton, "addButton(self, QAbstractButton, QMessageBox.ButtonRole)\n"
"addButton(self, str, QMessageBox.ButtonRole) -> QPushButton\n"
"addButton(self, QMessageBox.StandardButton) -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_addButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_addButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
         ::QMessageBox::ButtonRole a1;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0, sipType_QMessageBox_ButtonRole, &a1))
        {
            sipCpp->addButton(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox::ButtonRole a1;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMessageBox_ButtonRole, &a1))
        {
             ::QPushButton*sipRes;

            sipRes = sipCpp->addButton(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
             ::QPushButton*sipRes;

            sipRes = sipCpp->addButton(a0);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_addButton, doc_QMessageBox_addButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_removeButton, "removeButton(self, QAbstractButton)");

extern "C" {static PyObject *meth_QMessageBox_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
            sipCpp->removeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_removeButton, doc_QMessageBox_removeButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setStandardButtons, "setStandardButtons(self, Union[QMessageBox.StandardButtons, QMessageBox.StandardButton])");

extern "C" {static PyObject *meth_QMessageBox_setStandardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setStandardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMessageBox::StandardButtons* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButtons, &a0, &a0State))
        {
            sipCpp->setStandardButtons(*a0);
            sipReleaseType(a0,sipType_QMessageBox_StandardButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setStandardButtons, doc_QMessageBox_setStandardButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_standardButtons, "standardButtons(self) -> QMessageBox.StandardButtons");

extern "C" {static PyObject *meth_QMessageBox_standardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QMessageBox::StandardButtons*sipRes;

            sipRes = new  ::QMessageBox::StandardButtons(sipCpp->standardButtons());

            return sipConvertFromNewType(sipRes,sipType_QMessageBox_StandardButtons,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButtons, doc_QMessageBox_standardButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_standardButton, "standardButton(self, QAbstractButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_standardButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
             ::QMessageBox::StandardButton sipRes;

            sipRes = sipCpp->standardButton(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_StandardButton);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButton, doc_QMessageBox_standardButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_button, "button(self, QMessageBox.StandardButton) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_button(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMessageBox::StandardButton a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
             ::QAbstractButton*sipRes;

            sipRes = sipCpp->button(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_button, doc_QMessageBox_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_defaultButton, "defaultButton(self) -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_defaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_defaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QPushButton*sipRes;

            sipRes = sipCpp->defaultButton();

            return sipConvertFromType(sipRes,sipType_QPushButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_defaultButton, doc_QMessageBox_defaultButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setDefaultButton, "setDefaultButton(self, QPushButton)\n"
"setDefaultButton(self, QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setDefaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDefaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPushButton* a0;
        PyObject *a0Keep;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QPushButton, &a0))
        {
            sipCpp->setDefaultButton(a0);

            sipKeepReference(sipSelf, -38, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            sipCpp->setDefaultButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDefaultButton, doc_QMessageBox_setDefaultButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_escapeButton, "escapeButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_escapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_escapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QAbstractButton*sipRes;

            sipRes = sipCpp->escapeButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_escapeButton, doc_QMessageBox_escapeButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setEscapeButton, "setEscapeButton(self, QAbstractButton)\n"
"setEscapeButton(self, QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setEscapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setEscapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        PyObject *a0Keep;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QAbstractButton, &a0))
        {
            sipCpp->setEscapeButton(a0);

            sipKeepReference(sipSelf, -39, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            sipCpp->setEscapeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setEscapeButton, doc_QMessageBox_setEscapeButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_clickedButton, "clickedButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_clickedButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_clickedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QAbstractButton*sipRes;

            sipRes = sipCpp->clickedButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_clickedButton, doc_QMessageBox_clickedButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_informativeText, "informativeText(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_informativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_informativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->informativeText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_informativeText, doc_QMessageBox_informativeText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setInformativeText, "setInformativeText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setInformativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setInformativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInformativeText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setInformativeText, doc_QMessageBox_setInformativeText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_detailedText, "detailedText(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_detailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_detailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->detailedText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_detailedText, doc_QMessageBox_detailedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setDetailedText, "setDetailedText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setDetailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDetailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDetailedText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDetailedText, doc_QMessageBox_setDetailedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowTitle, "setWindowTitle(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowTitle, doc_QMessageBox_setWindowTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowModality, "setWindowModality(self, Qt.WindowModality)");

extern "C" {static PyObject *meth_QMessageBox_setWindowModality(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowModality a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setWindowModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowModality, doc_QMessageBox_setWindowModality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_open, "open(self)\n"
"open(self, PYQT_SLOT)");

extern "C" {static PyObject *meth_QMessageBox_open(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::open() : sipCpp->open());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qmessagebox.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtwidgets_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 2772 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQMessageBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_open, doc_QMessageBox_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_buttons, "buttons(self) -> List[QAbstractButton]");

extern "C" {static PyObject *meth_QMessageBox_buttons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QList< ::QAbstractButton*>*sipRes;

            sipRes = new QList< ::QAbstractButton*>(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttons, doc_QMessageBox_buttons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_buttonRole, "buttonRole(self, QAbstractButton) -> QMessageBox.ButtonRole");

extern "C" {static PyObject *meth_QMessageBox_buttonRole(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractButton* a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
             ::QMessageBox::ButtonRole sipRes;

            sipRes = sipCpp->buttonRole(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMessageBox_ButtonRole);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttonRole, doc_QMessageBox_buttonRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QMessageBox_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setTextInteractionFlags, doc_QMessageBox_setTextInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QMessageBox_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_textInteractionFlags, doc_QMessageBox_textInteractionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_setCheckBox, "setCheckBox(self, QCheckBox)");

extern "C" {static PyObject *meth_QMessageBox_setCheckBox(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setCheckBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCheckBox* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QCheckBox, &a0))
        {
            sipCpp->setCheckBox(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setCheckBox, doc_QMessageBox_setCheckBox);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageBox_checkBox, "checkBox(self) -> QCheckBox");

extern "C" {static PyObject *meth_QMessageBox_checkBox(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_checkBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QCheckBox*sipRes;

            sipRes = sipCpp->checkBox();

            return sipConvertFromType(sipRes,sipType_QCheckBox,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_checkBox, doc_QMessageBox_checkBox);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMessageBox(void *, const sipTypeDef *);}
static void *cast_QMessageBox(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMessageBox *sipCpp = reinterpret_cast< ::QMessageBox *>(sipCppV);

    if (targetType == sipType_QDialog)
        return static_cast< ::QDialog *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageBox(void *, int);}
static void release_QMessageBox(void *sipCppV, int)
{
     ::QMessageBox *sipCpp = reinterpret_cast< ::QMessageBox *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QMessageBox(Py_ssize_t);}
static void *array_QMessageBox(Py_ssize_t sipNrElem)
{
    return new  ::QMessageBox[sipNrElem];
}


extern "C" {static void dealloc_QMessageBox(sipSimpleWrapper *);}
static void dealloc_QMessageBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMessageBox *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMessageBox(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMessageBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMessageBox *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQMessageBox(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QMessageBox::Icon a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::NoButton;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QWidget* a4 = 0;
         ::Qt::WindowFlags a5def = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint;
         ::Qt::WindowFlags* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buttons,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|J1JHJ1", sipType_QMessageBox_Icon, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QWidget, &a4, sipOwner, sipType_Qt_WindowFlags, &a5, &a5State))
        {
            sipCpp = new sipQMessageBox(a0,*a1,*a2,*a3,a4,*a5);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);
            sipReleaseType(a5,sipType_Qt_WindowFlags,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMessageBox[] = {{61, 255, 1}};


static PyMethodDef methods_QMessageBox[] = {
    {sipName_about, meth_QMessageBox_about, METH_VARARGS, doc_QMessageBox_about},
    {sipName_aboutQt, SIP_MLMETH_CAST(meth_QMessageBox_aboutQt), METH_VARARGS|METH_KEYWORDS, doc_QMessageBox_aboutQt},
    {sipName_addButton, meth_QMessageBox_addButton, METH_VARARGS, doc_QMessageBox_addButton},
    {sipName_button, meth_QMessageBox_button, METH_VARARGS, doc_QMessageBox_button},
    {sipName_buttonRole, meth_QMessageBox_buttonRole, METH_VARARGS, doc_QMessageBox_buttonRole},
    {sipName_buttons, meth_QMessageBox_buttons, METH_VARARGS, doc_QMessageBox_buttons},
    {sipName_changeEvent, meth_QMessageBox_changeEvent, METH_VARARGS, doc_QMessageBox_changeEvent},
    {sipName_checkBox, meth_QMessageBox_checkBox, METH_VARARGS, doc_QMessageBox_checkBox},
    {sipName_clickedButton, meth_QMessageBox_clickedButton, METH_VARARGS, doc_QMessageBox_clickedButton},
    {sipName_closeEvent, meth_QMessageBox_closeEvent, METH_VARARGS, doc_QMessageBox_closeEvent},
    {sipName_critical, SIP_MLMETH_CAST(meth_QMessageBox_critical), METH_VARARGS|METH_KEYWORDS, doc_QMessageBox_critical},
    {sipName_defaultButton, meth_QMessageBox_defaultButton, METH_VARARGS, doc_QMessageBox_defaultButton},
    {sipName_detailedText, meth_QMessageBox_detailedText, METH_VARARGS, doc_QMessageBox_detailedText},
    {sipName_escapeButton, meth_QMessageBox_escapeButton, METH_VARARGS, doc_QMessageBox_escapeButton},
    {sipName_event, meth_QMessageBox_event, METH_VARARGS, doc_QMessageBox_event},
    {sipName_icon, meth_QMessageBox_icon, METH_VARARGS, doc_QMessageBox_icon},
    {sipName_iconPixmap, meth_QMessageBox_iconPixmap, METH_VARARGS, doc_QMessageBox_iconPixmap},
    {sipName_information, SIP_MLMETH_CAST(meth_QMessageBox_information), METH_VARARGS|METH_KEYWORDS, doc_QMessageBox_information},
    {sipName_informativeText, meth_QMessageBox_informativeText, METH_VARARGS, doc_QMessageBox_informativeText},
    {sipName_keyPressEvent, meth_QMessageBox_keyPressEvent, METH_VARARGS, doc_QMessageBox_keyPressEvent},
    {sipName_open, meth_QMessageBox_open, METH_VARARGS, doc_QMessageBox_open},
    {sipName_question, SIP_MLMETH_CAST(meth_QMessageBox_question), METH_VARARGS|METH_KEYWORDS, doc_QMessageBox_question},
    {sipName_removeButton, meth_QMessageBox_removeButton, METH_VARARGS, doc_QMessageBox_removeButton},
    {sipName_resizeEvent, meth_QMessageBox_resizeEvent, METH_VARARGS, doc_QMessageBox_resizeEvent},
    {sipName_setCheckBox, meth_QMessageBox_setCheckBox, METH_VARARGS, doc_QMessageBox_setCheckBox},
    {sipName_setDefaultButton, meth_QMessageBox_setDefaultButton, METH_VARARGS, doc_QMessageBox_setDefaultButton},
    {sipName_setDetailedText, meth_QMessageBox_setDetailedText, METH_VARARGS, doc_QMessageBox_setDetailedText},
    {sipName_setEscapeButton, meth_QMessageBox_setEscapeButton, METH_VARARGS, doc_QMessageBox_setEscapeButton},
    {sipName_setIcon, meth_QMessageBox_setIcon, METH_VARARGS, doc_QMessageBox_setIcon},
    {sipName_setIconPixmap, meth_QMessageBox_setIconPixmap, METH_VARARGS, doc_QMessageBox_setIconPixmap},
    {sipName_setInformativeText, meth_QMessageBox_setInformativeText, METH_VARARGS, doc_QMessageBox_setInformativeText},
    {sipName_setStandardButtons, meth_QMessageBox_setStandardButtons, METH_VARARGS, doc_QMessageBox_setStandardButtons},
    {sipName_setText, meth_QMessageBox_setText, METH_VARARGS, doc_QMessageBox_setText},
    {sipName_setTextFormat, meth_QMessageBox_setTextFormat, METH_VARARGS, doc_QMessageBox_setTextFormat},
    {sipName_setTextInteractionFlags, meth_QMessageBox_setTextInteractionFlags, METH_VARARGS, doc_QMessageBox_setTextInteractionFlags},
    {sipName_setWindowModality, meth_QMessageBox_setWindowModality, METH_VARARGS, doc_QMessageBox_setWindowModality},
    {sipName_setWindowTitle, meth_QMessageBox_setWindowTitle, METH_VARARGS, doc_QMessageBox_setWindowTitle},
    {sipName_showEvent, meth_QMessageBox_showEvent, METH_VARARGS, doc_QMessageBox_showEvent},
    {sipName_standardButton, meth_QMessageBox_standardButton, METH_VARARGS, doc_QMessageBox_standardButton},
    {sipName_standardButtons, meth_QMessageBox_standardButtons, METH_VARARGS, doc_QMessageBox_standardButtons},
    {sipName_standardIcon, meth_QMessageBox_standardIcon, METH_VARARGS, doc_QMessageBox_standardIcon},
    {sipName_text, meth_QMessageBox_text, METH_VARARGS, doc_QMessageBox_text},
    {sipName_textFormat, meth_QMessageBox_textFormat, METH_VARARGS, doc_QMessageBox_textFormat},
    {sipName_textInteractionFlags, meth_QMessageBox_textInteractionFlags, METH_VARARGS, doc_QMessageBox_textInteractionFlags},
    {sipName_warning, SIP_MLMETH_CAST(meth_QMessageBox_warning), METH_VARARGS|METH_KEYWORDS, doc_QMessageBox_warning}
};

static sipEnumMemberDef enummembers_QMessageBox[] = {
    {sipName_Abort, static_cast<int>( ::QMessageBox::Abort), 239},
    {sipName_AcceptRole, static_cast<int>( ::QMessageBox::AcceptRole), 237},
    {sipName_ActionRole, static_cast<int>( ::QMessageBox::ActionRole), 237},
    {sipName_Apply, static_cast<int>( ::QMessageBox::Apply), 239},
    {sipName_ApplyRole, static_cast<int>( ::QMessageBox::ApplyRole), 237},
    {sipName_ButtonMask, static_cast<int>( ::QMessageBox::ButtonMask), 239},
    {sipName_Cancel, static_cast<int>( ::QMessageBox::Cancel), 239},
    {sipName_Close, static_cast<int>( ::QMessageBox::Close), 239},
    {sipName_Critical, static_cast<int>( ::QMessageBox::Critical), 238},
    {sipName_Default, static_cast<int>( ::QMessageBox::Default), 239},
    {sipName_DestructiveRole, static_cast<int>( ::QMessageBox::DestructiveRole), 237},
    {sipName_Discard, static_cast<int>( ::QMessageBox::Discard), 239},
    {sipName_Escape, static_cast<int>( ::QMessageBox::Escape), 239},
    {sipName_FirstButton, static_cast<int>( ::QMessageBox::FirstButton), 239},
    {sipName_FlagMask, static_cast<int>( ::QMessageBox::FlagMask), 239},
    {sipName_Help, static_cast<int>( ::QMessageBox::Help), 239},
    {sipName_HelpRole, static_cast<int>( ::QMessageBox::HelpRole), 237},
    {sipName_Ignore, static_cast<int>( ::QMessageBox::Ignore), 239},
    {sipName_Information, static_cast<int>( ::QMessageBox::Information), 238},
    {sipName_InvalidRole, static_cast<int>( ::QMessageBox::InvalidRole), 237},
    {sipName_LastButton, static_cast<int>( ::QMessageBox::LastButton), 239},
    {sipName_No, static_cast<int>( ::QMessageBox::No), 239},
    {sipName_NoAll, static_cast<int>( ::QMessageBox::NoAll), 239},
    {sipName_NoButton, static_cast<int>( ::QMessageBox::NoButton), 239},
    {sipName_NoIcon, static_cast<int>( ::QMessageBox::NoIcon), 238},
    {sipName_NoRole, static_cast<int>( ::QMessageBox::NoRole), 237},
    {sipName_NoToAll, static_cast<int>( ::QMessageBox::NoToAll), 239},
    {sipName_Ok, static_cast<int>( ::QMessageBox::Ok), 239},
    {sipName_Open, static_cast<int>( ::QMessageBox::Open), 239},
    {sipName_Question, static_cast<int>( ::QMessageBox::Question), 238},
    {sipName_RejectRole, static_cast<int>( ::QMessageBox::RejectRole), 237},
    {sipName_Reset, static_cast<int>( ::QMessageBox::Reset), 239},
    {sipName_ResetRole, static_cast<int>( ::QMessageBox::ResetRole), 237},
    {sipName_RestoreDefaults, static_cast<int>( ::QMessageBox::RestoreDefaults), 239},
    {sipName_Retry, static_cast<int>( ::QMessageBox::Retry), 239},
    {sipName_Save, static_cast<int>( ::QMessageBox::Save), 239},
    {sipName_SaveAll, static_cast<int>( ::QMessageBox::SaveAll), 239},
    {sipName_Warning, static_cast<int>( ::QMessageBox::Warning), 238},
    {sipName_Yes, static_cast<int>( ::QMessageBox::Yes), 239},
    {sipName_YesAll, static_cast<int>( ::QMessageBox::YesAll), 239},
    {sipName_YesRole, static_cast<int>( ::QMessageBox::YesRole), 237},
    {sipName_YesToAll, static_cast<int>( ::QMessageBox::YesToAll), 239},
};

PyDoc_STRVAR(doc_QMessageBox, "\1QMessageBox(parent: QWidget = None)\n"
"QMessageBox(QMessageBox.Icon, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.NoButton, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMessageBox[] = {
    {"buttonClicked(QAbstractButton*)", "\1buttonClicked(self, QAbstractButton)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QMessageBox = {
    & ::QMessageBox::staticMetaObject,
    0,
    signals_QMessageBox,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QMessageBox = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMessageBox,
        SIP_NULLPTR,
        &plugin_QMessageBox
    },
    {
        sipNameNr_QMessageBox,
        {0, 0, 1},
        45, methods_QMessageBox,
        42, enummembers_QMessageBox,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMessageBox,
    -1,
    -1,
    supers_QMessageBox,
    SIP_NULLPTR,
    init_type_QMessageBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMessageBox,
    SIP_NULLPTR,
    array_QMessageBox,
    SIP_NULLPTR,
    release_QMessageBox,
    cast_QMessageBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
