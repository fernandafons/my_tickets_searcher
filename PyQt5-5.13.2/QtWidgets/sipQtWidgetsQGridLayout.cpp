/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgridlayout.sip"
#include <qgridlayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"


class sipQGridLayout : public  ::QGridLayout
{
public:
    sipQGridLayout( ::QWidget*);
    sipQGridLayout();
    virtual ~sipQGridLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QSizePolicy::ControlTypes controlTypes() const SIP_OVERRIDE;
     ::QSpacerItem* spacerItem() SIP_OVERRIDE;
     ::QLayout* layout() SIP_OVERRIDE;
     ::QWidget* widget() SIP_OVERRIDE;
    void invalidate() SIP_OVERRIDE;
    int minimumHeightForWidth(int) const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool isEmpty() const SIP_OVERRIDE;
     ::QRect geometry() const SIP_OVERRIDE;
    void setGeometry(const  ::QRect&) SIP_OVERRIDE;
     ::Qt::Orientations expandingDirections() const SIP_OVERRIDE;
     ::QSize maximumSize() const SIP_OVERRIDE;
     ::QSize minimumSize() const SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
    void addItem( ::QLayoutItem*) SIP_OVERRIDE;
     ::QLayoutItem* itemAt(int) const SIP_OVERRIDE;
     ::QLayoutItem* takeAt(int) SIP_OVERRIDE;
    int indexOf( ::QWidget*) const SIP_OVERRIDE;
    int count() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGridLayout(const sipQGridLayout &);
    sipQGridLayout &operator = (const sipQGridLayout &);

    char sipPyMethods[27];
};

sipQGridLayout::sipQGridLayout( ::QWidget*a0):  ::QGridLayout(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGridLayout::sipQGridLayout():  ::QGridLayout(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGridLayout::~sipQGridLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGridLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGridLayout);

    return  ::QGridLayout::metaObject();
}

int sipQGridLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGridLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGridLayout,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQGridLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGridLayout, _clname, &sipCpp) ? sipCpp :  ::QGridLayout::qt_metacast(_clname));
}

void sipQGridLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGridLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGridLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGridLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGridLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGridLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QGridLayout::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGridLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QGridLayout::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSizePolicy::ControlTypes sipQGridLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_controlTypes);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_controlTypes);
#endif

    if (!sipMeth)
        return  ::QGridLayout::controlTypes();

    extern  ::QSizePolicy::ControlTypes sipVH_QtWidgets_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_81(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSpacerItem* sipQGridLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_spacerItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_spacerItem);
#endif

    if (!sipMeth)
        return  ::QGridLayout::spacerItem();

    extern  ::QSpacerItem* sipVH_QtWidgets_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_80(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QLayout* sipQGridLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_layout);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_layout);
#endif

    if (!sipMeth)
        return  ::QGridLayout::layout();

    extern  ::QLayout* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QWidget* sipQGridLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_widget);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_widget);
#endif

    if (!sipMeth)
        return  ::QGridLayout::widget();

    extern  ::QWidget* sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_78(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGridLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_invalidate);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_invalidate);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::invalidate();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQGridLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_minimumHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QGridLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQGridLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QGridLayout::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGridLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QGridLayout::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQGridLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isEmpty);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_isEmpty);
#endif

    if (!sipMeth)
        return  ::QGridLayout::isEmpty();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRect sipQGridLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_geometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_geometry);
#endif

    if (!sipMeth)
        return  ::QGridLayout::geometry();

    extern  ::QRect sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_77(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGridLayout::setGeometry(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_setGeometry);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], sipPySelf, SIP_NULLPTR, sipName_setGeometry);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtWidgets_76(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::Qt::Orientations sipQGridLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_expandingDirections);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_expandingDirections);
#endif

    if (!sipMeth)
        return  ::QGridLayout::expandingDirections();

    extern  ::Qt::Orientations sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_75(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQGridLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_maximumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_maximumSize);
#endif

    if (!sipMeth)
        return  ::QGridLayout::maximumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQGridLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[20]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[20]), sipPySelf, SIP_NULLPTR, sipName_minimumSize);
#endif

    if (!sipMeth)
        return  ::QGridLayout::minimumSize();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQGridLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QGridLayout::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGridLayout::addItem( ::QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_addItem);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_addItem);
#endif

    if (!sipMeth)
    {
         ::QGridLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLayoutItem*);

    sipVH_QtWidgets_82(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQGridLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_itemAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_itemAt);
#endif

    if (!sipMeth)
        return  ::QGridLayout::itemAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQGridLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_takeAt);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_takeAt);
#endif

    if (!sipMeth)
        return  ::QGridLayout::takeAt(a0);

    extern  ::QLayoutItem* sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_84(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQGridLayout::indexOf( ::QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[25]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_indexOf);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[25]), sipPySelf, SIP_NULLPTR, sipName_indexOf);
#endif

    if (!sipMeth)
        return  ::QGridLayout::indexOf(a0);

    extern int sipVH_QtWidgets_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    return sipVH_QtWidgets_85(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQGridLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_count);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), sipPySelf, SIP_NULLPTR, sipName_count);
#endif

    if (!sipMeth)
        return  ::QGridLayout::count();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QGridLayout_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QGridLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QGridLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_sizeHint, doc_QGridLayout_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QGridLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QGridLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_minimumSize, doc_QGridLayout_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QGridLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QGridLayout::maximumSize() : sipCpp->maximumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_maximumSize, doc_QGridLayout_maximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setRowStretch, "setRowStretch(self, int, int)");

extern "C" {static PyObject *meth_QGridLayout_setRowStretch(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setRowStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setRowStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setRowStretch, doc_QGridLayout_setRowStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setColumnStretch, "setColumnStretch(self, int, int)");

extern "C" {static PyObject *meth_QGridLayout_setColumnStretch(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setColumnStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setColumnStretch, doc_QGridLayout_setColumnStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_rowStretch, "rowStretch(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_rowStretch(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_rowStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowStretch(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_rowStretch, doc_QGridLayout_rowStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_columnStretch, "columnStretch(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_columnStretch(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_columnStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnStretch(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_columnStretch, doc_QGridLayout_columnStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setRowMinimumHeight, "setRowMinimumHeight(self, int, int)");

extern "C" {static PyObject *meth_QGridLayout_setRowMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setRowMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setRowMinimumHeight(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setRowMinimumHeight, doc_QGridLayout_setRowMinimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setColumnMinimumWidth, "setColumnMinimumWidth(self, int, int)");

extern "C" {static PyObject *meth_QGridLayout_setColumnMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setColumnMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnMinimumWidth(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setColumnMinimumWidth, doc_QGridLayout_setColumnMinimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_rowMinimumHeight, "rowMinimumHeight(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_rowMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_rowMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowMinimumHeight(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_rowMinimumHeight, doc_QGridLayout_rowMinimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_columnMinimumWidth, "columnMinimumWidth(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_columnMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_columnMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnMinimumWidth(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_columnMinimumWidth, doc_QGridLayout_columnMinimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_columnCount, doc_QGridLayout_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_rowCount, "rowCount(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_rowCount, doc_QGridLayout_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_cellRect, "cellRect(self, int, int) -> QRect");

extern "C" {static PyObject *meth_QGridLayout_cellRect(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_cellRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->cellRect(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_cellRect, doc_QGridLayout_cellRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QGridLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_hasHeightForWidth, doc_QGridLayout_hasHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_heightForWidth, doc_QGridLayout_heightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_minimumHeightForWidth, "minimumHeightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QGridLayout_minimumHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_minimumHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::minimumHeightForWidth(a0) : sipCpp->minimumHeightForWidth(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_minimumHeightForWidth, doc_QGridLayout_minimumHeightForWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QGridLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((sipSelfWasArg ? sipCpp-> ::QGridLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_expandingDirections, doc_QGridLayout_expandingDirections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QGridLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGridLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_invalidate, doc_QGridLayout_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_addWidget, "addWidget(self, QWidget)\n"
"addWidget(self, QWidget, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())\n"
"addWidget(self, QWidget, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())");

extern "C" {static PyObject *meth_QGridLayout_addWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
         ::QGridLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B@J8", &sipSelf, sipType_QGridLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgridlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1351 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
        int a1;
        int a2;
         ::Qt::Alignment a3def = Qt::Alignment();
         ::Qt::Alignment* a3 = &a3def;
        int a3State = 0;
         ::QGridLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B@J8ii|J1", &sipSelf, sipType_QGridLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0, &a1, &a2, sipType_Qt_Alignment, &a3, &a3State))
        {
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgridlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0, a1, a2, *a3);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1398 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
            sipReleaseType(a3,sipType_Qt_Alignment,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
        int a1;
        int a2;
        int a3;
        int a4;
         ::Qt::Alignment a5def = Qt::Alignment();
         ::Qt::Alignment* a5 = &a5def;
        int a5State = 0;
         ::QGridLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B@J8iiii|J1", &sipSelf, sipType_QGridLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0, &a1, &a2, &a3, &a4, sipType_Qt_Alignment, &a5, &a5State))
        {
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgridlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0, a1, a2, a3, a4, *a5);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1450 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQGridLayout.cpp"
            sipReleaseType(a5,sipType_Qt_Alignment,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_addWidget, doc_QGridLayout_addWidget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_addLayout, "addLayout(self, QLayout, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())\n"
"addLayout(self, QLayout, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())");

extern "C" {static PyObject *meth_QGridLayout_addLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_addLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLayout* a0;
        int a1;
        int a2;
         ::Qt::Alignment a3def = Qt::Alignment();
         ::Qt::Alignment* a3 = &a3def;
        int a3State = 0;
         ::QGridLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:ii|J1", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_QLayout, &a0, &a1, &a2, sipType_Qt_Alignment, &a3, &a3State))
        {
            sipCpp->addLayout(a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_Qt_Alignment,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QLayout* a0;
        int a1;
        int a2;
        int a3;
        int a4;
         ::Qt::Alignment a5def = Qt::Alignment();
         ::Qt::Alignment* a5 = &a5def;
        int a5State = 0;
         ::QGridLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:iiii|J1", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_QLayout, &a0, &a1, &a2, &a3, &a4, sipType_Qt_Alignment, &a5, &a5State))
        {
            sipCpp->addLayout(a0,a1,a2,a3,a4,*a5);
            sipReleaseType(a5,sipType_Qt_Alignment,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_addLayout, doc_QGridLayout_addLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setOriginCorner, "setOriginCorner(self, Qt.Corner)");

extern "C" {static PyObject *meth_QGridLayout_setOriginCorner(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setOriginCorner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Corner a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_Qt_Corner, &a0))
        {
            sipCpp->setOriginCorner(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setOriginCorner, doc_QGridLayout_setOriginCorner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_originCorner, "originCorner(self) -> Qt.Corner");

extern "C" {static PyObject *meth_QGridLayout_originCorner(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_originCorner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
             ::Qt::Corner sipRes;

            sipRes = sipCpp->originCorner();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_Corner);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_originCorner, doc_QGridLayout_originCorner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_itemAt, "itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QGridLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_itemAt, doc_QGridLayout_itemAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QGridLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_takeAt, doc_QGridLayout_takeAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGridLayout::count() : sipCpp->count());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_count, doc_QGridLayout_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QGridLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGridLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setGeometry, doc_QGridLayout_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_addItem, "addItem(self, QLayoutItem, int, int, rowSpan: int = 1, columnSpan: int = 1, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.Alignment())\n"
"addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QGridLayout_addItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_addItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLayoutItem* a0;
        int a1;
        int a2;
        int a3 = 1;
        int a4 = 1;
         ::Qt::Alignment a5def = Qt::Alignment();
         ::Qt::Alignment* a5 = &a5def;
        int a5State = 0;
         ::QGridLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_rowSpan,
            sipName_columnSpan,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:ii|iiJ1", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_QLayoutItem, &a0, &a1, &a2, &a3, &a4, sipType_Qt_Alignment, &a5, &a5State))
        {
            sipCpp->addItem(a0,a1,a2,a3,a4,*a5);
            sipReleaseType(a5,sipType_Qt_Alignment,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QLayoutItem* a0;
         ::QGridLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "pJ:", &sipSelf, sipType_QGridLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGridLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_addItem, doc_QGridLayout_addItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setDefaultPositioning, "setDefaultPositioning(self, int, Qt.Orientation)");

extern "C" {static PyObject *meth_QGridLayout_setDefaultPositioning(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setDefaultPositioning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::Orientation a1;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, sipType_Qt_Orientation, &a1))
        {
            sipCpp->setDefaultPositioning(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setDefaultPositioning, doc_QGridLayout_setDefaultPositioning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_getItemPosition, "getItemPosition(self, int) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QGridLayout_getItemPosition(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_getItemPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            sipCpp->getItemPosition(a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(iiii)",a1,a2,a3,a4);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_getItemPosition, doc_QGridLayout_getItemPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setHorizontalSpacing, "setHorizontalSpacing(self, int)");

extern "C" {static PyObject *meth_QGridLayout_setHorizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setHorizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            sipCpp->setHorizontalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setHorizontalSpacing, doc_QGridLayout_setHorizontalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_horizontalSpacing, "horizontalSpacing(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_horizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_horizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->horizontalSpacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_horizontalSpacing, doc_QGridLayout_horizontalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setVerticalSpacing, "setVerticalSpacing(self, int)");

extern "C" {static PyObject *meth_QGridLayout_setVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            sipCpp->setVerticalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setVerticalSpacing, doc_QGridLayout_setVerticalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_verticalSpacing, "verticalSpacing(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_verticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_verticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->verticalSpacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_verticalSpacing, doc_QGridLayout_verticalSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QGridLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGridLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_setSpacing, doc_QGridLayout_setSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QGridLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGridLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_spacing, doc_QGridLayout_spacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGridLayout_itemAtPosition, "itemAtPosition(self, int, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QGridLayout_itemAtPosition(PyObject *, PyObject *);}
static PyObject *meth_QGridLayout_itemAtPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QGridLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGridLayout, &sipCpp, &a0, &a1))
        {
             ::QLayoutItem*sipRes;

            sipRes = sipCpp->itemAtPosition(a0,a1);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGridLayout, sipName_itemAtPosition, doc_QGridLayout_itemAtPosition);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGridLayout(void *, const sipTypeDef *);}
static void *cast_QGridLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGridLayout *sipCpp = reinterpret_cast< ::QGridLayout *>(sipCppV);

    if (targetType == sipType_QLayout)
        return static_cast< ::QLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QLayoutItem)
        return static_cast< ::QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGridLayout(void *, int);}
static void release_QGridLayout(void *sipCppV, int)
{
     ::QGridLayout *sipCpp = reinterpret_cast< ::QGridLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QGridLayout(Py_ssize_t);}
static void *array_QGridLayout(Py_ssize_t sipNrElem)
{
    return new  ::QGridLayout[sipNrElem];
}


extern "C" {static void dealloc_QGridLayout(sipSimpleWrapper *);}
static void dealloc_QGridLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGridLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGridLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGridLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGridLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGridLayout *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQGridLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQGridLayout();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGridLayout[] = {{188, 255, 1}};


static PyMethodDef methods_QGridLayout[] = {
    {sipName_addItem, SIP_MLMETH_CAST(meth_QGridLayout_addItem), METH_VARARGS|METH_KEYWORDS, doc_QGridLayout_addItem},
    {sipName_addLayout, SIP_MLMETH_CAST(meth_QGridLayout_addLayout), METH_VARARGS|METH_KEYWORDS, doc_QGridLayout_addLayout},
    {sipName_addWidget, SIP_MLMETH_CAST(meth_QGridLayout_addWidget), METH_VARARGS|METH_KEYWORDS, doc_QGridLayout_addWidget},
    {sipName_cellRect, meth_QGridLayout_cellRect, METH_VARARGS, doc_QGridLayout_cellRect},
    {sipName_columnCount, meth_QGridLayout_columnCount, METH_VARARGS, doc_QGridLayout_columnCount},
    {sipName_columnMinimumWidth, meth_QGridLayout_columnMinimumWidth, METH_VARARGS, doc_QGridLayout_columnMinimumWidth},
    {sipName_columnStretch, meth_QGridLayout_columnStretch, METH_VARARGS, doc_QGridLayout_columnStretch},
    {sipName_count, meth_QGridLayout_count, METH_VARARGS, doc_QGridLayout_count},
    {sipName_expandingDirections, meth_QGridLayout_expandingDirections, METH_VARARGS, doc_QGridLayout_expandingDirections},
    {sipName_getItemPosition, meth_QGridLayout_getItemPosition, METH_VARARGS, doc_QGridLayout_getItemPosition},
    {sipName_hasHeightForWidth, meth_QGridLayout_hasHeightForWidth, METH_VARARGS, doc_QGridLayout_hasHeightForWidth},
    {sipName_heightForWidth, meth_QGridLayout_heightForWidth, METH_VARARGS, doc_QGridLayout_heightForWidth},
    {sipName_horizontalSpacing, meth_QGridLayout_horizontalSpacing, METH_VARARGS, doc_QGridLayout_horizontalSpacing},
    {sipName_invalidate, meth_QGridLayout_invalidate, METH_VARARGS, doc_QGridLayout_invalidate},
    {sipName_itemAt, meth_QGridLayout_itemAt, METH_VARARGS, doc_QGridLayout_itemAt},
    {sipName_itemAtPosition, meth_QGridLayout_itemAtPosition, METH_VARARGS, doc_QGridLayout_itemAtPosition},
    {sipName_maximumSize, meth_QGridLayout_maximumSize, METH_VARARGS, doc_QGridLayout_maximumSize},
    {sipName_minimumHeightForWidth, meth_QGridLayout_minimumHeightForWidth, METH_VARARGS, doc_QGridLayout_minimumHeightForWidth},
    {sipName_minimumSize, meth_QGridLayout_minimumSize, METH_VARARGS, doc_QGridLayout_minimumSize},
    {sipName_originCorner, meth_QGridLayout_originCorner, METH_VARARGS, doc_QGridLayout_originCorner},
    {sipName_rowCount, meth_QGridLayout_rowCount, METH_VARARGS, doc_QGridLayout_rowCount},
    {sipName_rowMinimumHeight, meth_QGridLayout_rowMinimumHeight, METH_VARARGS, doc_QGridLayout_rowMinimumHeight},
    {sipName_rowStretch, meth_QGridLayout_rowStretch, METH_VARARGS, doc_QGridLayout_rowStretch},
    {sipName_setColumnMinimumWidth, meth_QGridLayout_setColumnMinimumWidth, METH_VARARGS, doc_QGridLayout_setColumnMinimumWidth},
    {sipName_setColumnStretch, meth_QGridLayout_setColumnStretch, METH_VARARGS, doc_QGridLayout_setColumnStretch},
    {sipName_setDefaultPositioning, meth_QGridLayout_setDefaultPositioning, METH_VARARGS, doc_QGridLayout_setDefaultPositioning},
    {sipName_setGeometry, meth_QGridLayout_setGeometry, METH_VARARGS, doc_QGridLayout_setGeometry},
    {sipName_setHorizontalSpacing, meth_QGridLayout_setHorizontalSpacing, METH_VARARGS, doc_QGridLayout_setHorizontalSpacing},
    {sipName_setOriginCorner, meth_QGridLayout_setOriginCorner, METH_VARARGS, doc_QGridLayout_setOriginCorner},
    {sipName_setRowMinimumHeight, meth_QGridLayout_setRowMinimumHeight, METH_VARARGS, doc_QGridLayout_setRowMinimumHeight},
    {sipName_setRowStretch, meth_QGridLayout_setRowStretch, METH_VARARGS, doc_QGridLayout_setRowStretch},
    {sipName_setSpacing, meth_QGridLayout_setSpacing, METH_VARARGS, doc_QGridLayout_setSpacing},
    {sipName_setVerticalSpacing, meth_QGridLayout_setVerticalSpacing, METH_VARARGS, doc_QGridLayout_setVerticalSpacing},
    {sipName_sizeHint, meth_QGridLayout_sizeHint, METH_VARARGS, doc_QGridLayout_sizeHint},
    {sipName_spacing, meth_QGridLayout_spacing, METH_VARARGS, doc_QGridLayout_spacing},
    {sipName_takeAt, meth_QGridLayout_takeAt, METH_VARARGS, doc_QGridLayout_takeAt},
    {sipName_verticalSpacing, meth_QGridLayout_verticalSpacing, METH_VARARGS, doc_QGridLayout_verticalSpacing}
};

PyDoc_STRVAR(doc_QGridLayout, "\1QGridLayout(QWidget)\n"
"QGridLayout()");


static pyqt5ClassPluginDef plugin_QGridLayout = {
    & ::QGridLayout::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QGridLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGridLayout,
        SIP_NULLPTR,
        &plugin_QGridLayout
    },
    {
        sipNameNr_QGridLayout,
        {0, 0, 1},
        37, methods_QGridLayout,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGridLayout,
    -1,
    -1,
    supers_QGridLayout,
    SIP_NULLPTR,
    init_type_QGridLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGridLayout,
    SIP_NULLPTR,
    array_QGridLayout,
    SIP_NULLPTR,
    release_QGridLayout,
    cast_QGridLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
