/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qtabbar.sip"
#include <qtabbar.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 388 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 212 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 215 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 218 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 221 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"


class sipQTabBar : public  ::QTabBar
{
public:
    sipQTabBar( ::QWidget*);
    virtual ~sipQTabBar();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSize minimumTabSizeHint(int) const SIP_OVERRIDE;
    void tabLayoutChange() SIP_OVERRIDE;
    void tabRemoved(int) SIP_OVERRIDE;
    void tabInserted(int) SIP_OVERRIDE;
     ::QSize tabSizeHint(int) const SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabBar(const sipQTabBar &);
    sipQTabBar &operator = (const sipQTabBar &);

    char sipPyMethods[51];
};

sipQTabBar::sipQTabBar( ::QWidget*a0):  ::QTabBar(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTabBar::~sipQTabBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTabBar::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTabBar);

    return  ::QTabBar::metaObject();
}

int sipQTabBar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTabBar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTabBar,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQTabBar::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTabBar, _clname, &sipCpp) ? sipCpp :  ::QTabBar::qt_metacast(_clname));
}

 ::QSize sipQTabBar::minimumTabSizeHint(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumTabSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_minimumTabSizeHint);
#endif

    if (!sipMeth)
        return  ::QTabBar::minimumTabSizeHint(a0);

    extern  ::QSize sipVH_QtWidgets_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_166(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabLayoutChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_tabLayoutChange);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_tabLayoutChange);
#endif

    if (!sipMeth)
    {
         ::QTabBar::tabLayoutChange();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTabBar::tabRemoved(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_tabRemoved);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_tabRemoved);
#endif

    if (!sipMeth)
    {
         ::QTabBar::tabRemoved(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabInserted(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_tabInserted);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_tabInserted);
#endif

    if (!sipMeth)
    {
         ::QTabBar::tabInserted(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTabBar::tabSizeHint(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_tabSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, SIP_NULLPTR, sipName_tabSizeHint);
#endif

    if (!sipMeth)
        return  ::QTabBar::tabSizeHint(a0);

    extern  ::QSize sipVH_QtWidgets_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_166(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QTabBar::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QTabBar::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QTabBar::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTabBar::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QTabBar::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQTabBar::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QTabBar::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQTabBar::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QTabBar::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTabBar::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QTabBar::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTabBar::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QTabBar::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTabBar::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QTabBar::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQTabBar::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QTabBar::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQTabBar::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QTabBar::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTabBar::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QTabBar::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQTabBar::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QTabBar::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QTabBar::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTabBar::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[47]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[47]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QTabBar::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTabBar::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QTabBar::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQTabBar::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[49]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[49]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QTabBar::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQTabBar::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[50]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[50]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QTabBar::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTabBar_shape, "shape(self) -> QTabBar.Shape");

extern "C" {static PyObject *meth_QTabBar_shape(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::QTabBar::Shape sipRes;

            sipRes = sipCpp->shape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabBar_Shape);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_shape, doc_QTabBar_shape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setShape, "setShape(self, QTabBar.Shape)");

extern "C" {static PyObject *meth_QTabBar_setShape(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabBar::Shape a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QTabBar_Shape, &a0))
        {
            sipCpp->setShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setShape, doc_QTabBar_setShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_addTab, "addTab(self, str) -> int\n"
"addTab(self, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabBar_addTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_addTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_addTab, doc_QTabBar_addTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_insertTab, "insertTab(self, int, str) -> int\n"
"insertTab(self, int, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabBar_insertTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_insertTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        const  ::QIcon* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9J1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_insertTab, doc_QTabBar_insertTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_removeTab, "removeTab(self, int)");

extern "C" {static PyObject *meth_QTabBar_removeTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_removeTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->removeTab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_removeTab, doc_QTabBar_removeTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_isTabEnabled, "isTabEnabled(self, int) -> bool");

extern "C" {static PyObject *meth_QTabBar_isTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_isTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isTabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_isTabEnabled, doc_QTabBar_isTabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabEnabled, "setTabEnabled(self, int, bool)");

extern "C" {static PyObject *meth_QTabBar_setTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        bool a1;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTabBar, &sipCpp, &a0, &a1))
        {
            sipCpp->setTabEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabEnabled, doc_QTabBar_setTabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabText, "tabText(self, int) -> str");

extern "C" {static PyObject *meth_QTabBar_tabText(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabText, doc_QTabBar_tabText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabText, "setTabText(self, int, str)");

extern "C" {static PyObject *meth_QTabBar_setTabText(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabText(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabText, doc_QTabBar_setTabText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabTextColor, "tabTextColor(self, int) -> QColor");

extern "C" {static PyObject *meth_QTabBar_tabTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->tabTextColor(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabTextColor, doc_QTabBar_tabTextColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabTextColor, "setTabTextColor(self, int, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTabBar_setTabTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setTabTextColor(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabTextColor, doc_QTabBar_setTabTextColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabIcon, "tabIcon(self, int) -> QIcon");

extern "C" {static PyObject *meth_QTabBar_tabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->tabIcon(a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabIcon, doc_QTabBar_tabIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabIcon, "setTabIcon(self, int, QIcon)");

extern "C" {static PyObject *meth_QTabBar_setTabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QIcon* a1;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            sipCpp->setTabIcon(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabIcon, doc_QTabBar_setTabIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabToolTip, "setTabToolTip(self, int, str)");

extern "C" {static PyObject *meth_QTabBar_setTabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabToolTip(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabToolTip, doc_QTabBar_setTabToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabToolTip, "tabToolTip(self, int) -> str");

extern "C" {static PyObject *meth_QTabBar_tabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabToolTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabToolTip, doc_QTabBar_tabToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabWhatsThis, "setTabWhatsThis(self, int, str)");

extern "C" {static PyObject *meth_QTabBar_setTabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabWhatsThis(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabWhatsThis, doc_QTabBar_setTabWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabWhatsThis, "tabWhatsThis(self, int) -> str");

extern "C" {static PyObject *meth_QTabBar_tabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tabWhatsThis(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabWhatsThis, doc_QTabBar_tabWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabData, "setTabData(self, int, Any)");

extern "C" {static PyObject *meth_QTabBar_setTabData(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setTabData(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabData, doc_QTabBar_setTabData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabData, "tabData(self, int) -> Any");

extern "C" {static PyObject *meth_QTabBar_tabData(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->tabData(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabData, doc_QTabBar_tabData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabAt, "tabAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QTabBar_tabAt(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->tabAt(*a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabAt, doc_QTabBar_tabAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabRect, "tabRect(self, int) -> QRect");

extern "C" {static PyObject *meth_QTabBar_tabRect(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->tabRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabRect, doc_QTabBar_tabRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QTabBar_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_currentIndex, doc_QTabBar_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTabBar_count(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_count, doc_QTabBar_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabBar_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabBar::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_sizeHint, doc_QTabBar_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabBar_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabBar::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_minimumSizeHint, doc_QTabBar_minimumSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setDrawBase, "setDrawBase(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setDrawBase(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setDrawBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setDrawBase(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setDrawBase, doc_QTabBar_setDrawBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_drawBase, "drawBase(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_drawBase(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_drawBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->drawBase();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_drawBase, doc_QTabBar_drawBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QTabBar_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_iconSize, doc_QTabBar_iconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QTabBar_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setIconSize, doc_QTabBar_setIconSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_elideMode, "elideMode(self) -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QTabBar_elideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_elideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::Qt::TextElideMode sipRes;

            sipRes = sipCpp->elideMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextElideMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_elideMode, doc_QTabBar_elideMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setElideMode, "setElideMode(self, Qt.TextElideMode)");

extern "C" {static PyObject *meth_QTabBar_setElideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextElideMode a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            sipCpp->setElideMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setElideMode, doc_QTabBar_setElideMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setUsesScrollButtons, "setUsesScrollButtons(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setUsesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setUsesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setUsesScrollButtons(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setUsesScrollButtons, doc_QTabBar_setUsesScrollButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_usesScrollButtons, "usesScrollButtons(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_usesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_usesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->usesScrollButtons();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_usesScrollButtons, doc_QTabBar_usesScrollButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QTabBar_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setCurrentIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setCurrentIndex, doc_QTabBar_setCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_initStyleOption, "initStyleOption(self, QStyleOptionTab, int)");

extern "C" {static PyObject *meth_QTabBar_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStyleOptionTab* a0;
        int a1;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8i", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QStyleOptionTab, &a0, &a1))
        {
            sipCpp->initStyleOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_initStyleOption, doc_QTabBar_initStyleOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabSizeHint, "tabSizeHint(self, int) -> QSize");

extern "C" {static PyObject *meth_QTabBar_tabSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabBar::tabSizeHint(a0) : sipCpp->tabSizeHint(a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabSizeHint, doc_QTabBar_tabSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabInserted, "tabInserted(self, int)");

extern "C" {static PyObject *meth_QTabBar_tabInserted(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::tabInserted(a0) : sipCpp->tabInserted(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabInserted, doc_QTabBar_tabInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabRemoved, "tabRemoved(self, int)");

extern "C" {static PyObject *meth_QTabBar_tabRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::tabRemoved(a0) : sipCpp->tabRemoved(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabRemoved, doc_QTabBar_tabRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabLayoutChange, "tabLayoutChange(self)");

extern "C" {static PyObject *meth_QTabBar_tabLayoutChange(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabLayoutChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::tabLayoutChange() : sipCpp->tabLayoutChange());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabLayoutChange, doc_QTabBar_tabLayoutChange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTabBar_event(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTabBar::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_event, doc_QTabBar_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QTabBar_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_resizeEvent, doc_QTabBar_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QTabBar_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_showEvent, doc_QTabBar_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTabBar_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_paintEvent, doc_QTabBar_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mousePressEvent, doc_QTabBar_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mouseMoveEvent, doc_QTabBar_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTabBar_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_mouseReleaseEvent, doc_QTabBar_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTabBar_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_keyPressEvent, doc_QTabBar_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTabBar_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_changeEvent, doc_QTabBar_changeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_moveTab, "moveTab(self, int, int)");

extern "C" {static PyObject *meth_QTabBar_moveTab(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_moveTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTabBar, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTab(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_moveTab, doc_QTabBar_moveTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabsClosable, "tabsClosable(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_tabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabsClosable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabsClosable, doc_QTabBar_tabsClosable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabsClosable, "setTabsClosable(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setTabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setTabsClosable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabsClosable, doc_QTabBar_setTabsClosable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setTabButton, "setTabButton(self, int, QTabBar.ButtonPosition, QWidget)");

extern "C" {static PyObject *meth_QTabBar_setTabButton(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setTabButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabBar::ButtonPosition a1;
         ::QWidget* a2;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QTabBar_ButtonPosition, &a1, sipType_QWidget, &a2))
        {
            sipCpp->setTabButton(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setTabButton, doc_QTabBar_setTabButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_tabButton, "tabButton(self, int, QTabBar.ButtonPosition) -> QWidget");

extern "C" {static PyObject *meth_QTabBar_tabButton(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_tabButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTabBar::ButtonPosition a1;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QTabBar_ButtonPosition, &a1))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->tabButton(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_tabButton, doc_QTabBar_tabButton);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_selectionBehaviorOnRemove, "selectionBehaviorOnRemove(self) -> QTabBar.SelectionBehavior");

extern "C" {static PyObject *meth_QTabBar_selectionBehaviorOnRemove(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_selectionBehaviorOnRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
             ::QTabBar::SelectionBehavior sipRes;

            sipRes = sipCpp->selectionBehaviorOnRemove();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabBar_SelectionBehavior);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_selectionBehaviorOnRemove, doc_QTabBar_selectionBehaviorOnRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setSelectionBehaviorOnRemove, "setSelectionBehaviorOnRemove(self, QTabBar.SelectionBehavior)");

extern "C" {static PyObject *meth_QTabBar_setSelectionBehaviorOnRemove(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setSelectionBehaviorOnRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTabBar::SelectionBehavior a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QTabBar_SelectionBehavior, &a0))
        {
            sipCpp->setSelectionBehaviorOnRemove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setSelectionBehaviorOnRemove, doc_QTabBar_setSelectionBehaviorOnRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_expanding, "expanding(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_expanding(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_expanding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->expanding();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_expanding, doc_QTabBar_expanding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setExpanding, "setExpanding(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setExpanding(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setExpanding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setExpanding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setExpanding, doc_QTabBar_setExpanding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_isMovable, "isMovable(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_isMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_isMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_isMovable, doc_QTabBar_isMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setMovable, "setMovable(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setMovable, doc_QTabBar_setMovable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_documentMode, "documentMode(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->documentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_documentMode, doc_QTabBar_documentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setDocumentMode, "setDocumentMode(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setDocumentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setDocumentMode, doc_QTabBar_setDocumentMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QTabBar_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_hideEvent, doc_QTabBar_hideEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QTabBar_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_wheelEvent, doc_QTabBar_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_minimumTabSizeHint, "minimumTabSizeHint(self, int) -> QSize");

extern "C" {static PyObject *meth_QTabBar_minimumTabSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_minimumTabSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QTabBar::minimumTabSizeHint(a0) : sipCpp->minimumTabSizeHint(a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_minimumTabSizeHint, doc_QTabBar_minimumTabSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_autoHide, "autoHide(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_autoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_autoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoHide();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_autoHide, doc_QTabBar_autoHide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setAutoHide, "setAutoHide(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setAutoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setAutoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setAutoHide(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setAutoHide, doc_QTabBar_setAutoHide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_changeCurrentOnDrag, "changeCurrentOnDrag(self) -> bool");

extern "C" {static PyObject *meth_QTabBar_changeCurrentOnDrag(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_changeCurrentOnDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabBar, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->changeCurrentOnDrag();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_changeCurrentOnDrag, doc_QTabBar_changeCurrentOnDrag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setChangeCurrentOnDrag, "setChangeCurrentOnDrag(self, bool)");

extern "C" {static PyObject *meth_QTabBar_setChangeCurrentOnDrag(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setChangeCurrentOnDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
            sipCpp->setChangeCurrentOnDrag(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setChangeCurrentOnDrag, doc_QTabBar_setChangeCurrentOnDrag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTabBar_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabBar, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTabBar::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_timerEvent, doc_QTabBar_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_accessibleTabName, "accessibleTabName(self, int) -> str");

extern "C" {static PyObject *meth_QTabBar_accessibleTabName(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_accessibleTabName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabBar, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->accessibleTabName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_accessibleTabName, doc_QTabBar_accessibleTabName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabBar_setAccessibleTabName, "setAccessibleTabName(self, int, str)");

extern "C" {static PyObject *meth_QTabBar_setAccessibleTabName(PyObject *, PyObject *);}
static PyObject *meth_QTabBar_setAccessibleTabName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTabBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabBar, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setAccessibleTabName(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTabBar, sipName_setAccessibleTabName, doc_QTabBar_setAccessibleTabName);

    return SIP_NULLPTR;
}


extern "C" {static Py_ssize_t slot_QTabBar___len__(PyObject *);}
static Py_ssize_t slot_QTabBar___len__(PyObject *sipSelf)
{
     ::QTabBar *sipCpp = reinterpret_cast< ::QTabBar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTabBar));

    if (!sipCpp)
        return 0;


    {
        {
            Py_ssize_t sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (Py_ssize_t)sipCpp->count();
#line 3525 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtWidgets/sipQtWidgetsQTabBar.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTabBar(void *, const sipTypeDef *);}
static void *cast_QTabBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTabBar *sipCpp = reinterpret_cast< ::QTabBar *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabBar(void *, int);}
static void release_QTabBar(void *sipCppV, int)
{
     ::QTabBar *sipCpp = reinterpret_cast< ::QTabBar *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QTabBar(Py_ssize_t);}
static void *array_QTabBar(Py_ssize_t sipNrElem)
{
    return new  ::QTabBar[sipNrElem];
}


extern "C" {static void dealloc_QTabBar(sipSimpleWrapper *);}
static void dealloc_QTabBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTabBar *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTabBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTabBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTabBar *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTabBar(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabBar[] = {{458, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTabBar[] = {
    {(void *)slot_QTabBar___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTabBar[] = {
    {sipName_accessibleTabName, meth_QTabBar_accessibleTabName, METH_VARARGS, doc_QTabBar_accessibleTabName},
    {sipName_addTab, meth_QTabBar_addTab, METH_VARARGS, doc_QTabBar_addTab},
    {sipName_autoHide, meth_QTabBar_autoHide, METH_VARARGS, doc_QTabBar_autoHide},
    {sipName_changeCurrentOnDrag, meth_QTabBar_changeCurrentOnDrag, METH_VARARGS, doc_QTabBar_changeCurrentOnDrag},
    {sipName_changeEvent, meth_QTabBar_changeEvent, METH_VARARGS, doc_QTabBar_changeEvent},
    {sipName_count, meth_QTabBar_count, METH_VARARGS, doc_QTabBar_count},
    {sipName_currentIndex, meth_QTabBar_currentIndex, METH_VARARGS, doc_QTabBar_currentIndex},
    {sipName_documentMode, meth_QTabBar_documentMode, METH_VARARGS, doc_QTabBar_documentMode},
    {sipName_drawBase, meth_QTabBar_drawBase, METH_VARARGS, doc_QTabBar_drawBase},
    {sipName_elideMode, meth_QTabBar_elideMode, METH_VARARGS, doc_QTabBar_elideMode},
    {sipName_event, meth_QTabBar_event, METH_VARARGS, doc_QTabBar_event},
    {sipName_expanding, meth_QTabBar_expanding, METH_VARARGS, doc_QTabBar_expanding},
    {sipName_hideEvent, meth_QTabBar_hideEvent, METH_VARARGS, doc_QTabBar_hideEvent},
    {sipName_iconSize, meth_QTabBar_iconSize, METH_VARARGS, doc_QTabBar_iconSize},
    {sipName_initStyleOption, meth_QTabBar_initStyleOption, METH_VARARGS, doc_QTabBar_initStyleOption},
    {sipName_insertTab, meth_QTabBar_insertTab, METH_VARARGS, doc_QTabBar_insertTab},
    {sipName_isMovable, meth_QTabBar_isMovable, METH_VARARGS, doc_QTabBar_isMovable},
    {sipName_isTabEnabled, meth_QTabBar_isTabEnabled, METH_VARARGS, doc_QTabBar_isTabEnabled},
    {sipName_keyPressEvent, meth_QTabBar_keyPressEvent, METH_VARARGS, doc_QTabBar_keyPressEvent},
    {sipName_minimumSizeHint, meth_QTabBar_minimumSizeHint, METH_VARARGS, doc_QTabBar_minimumSizeHint},
    {sipName_minimumTabSizeHint, meth_QTabBar_minimumTabSizeHint, METH_VARARGS, doc_QTabBar_minimumTabSizeHint},
    {sipName_mouseMoveEvent, meth_QTabBar_mouseMoveEvent, METH_VARARGS, doc_QTabBar_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QTabBar_mousePressEvent, METH_VARARGS, doc_QTabBar_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QTabBar_mouseReleaseEvent, METH_VARARGS, doc_QTabBar_mouseReleaseEvent},
    {sipName_moveTab, meth_QTabBar_moveTab, METH_VARARGS, doc_QTabBar_moveTab},
    {sipName_paintEvent, meth_QTabBar_paintEvent, METH_VARARGS, doc_QTabBar_paintEvent},
    {sipName_removeTab, meth_QTabBar_removeTab, METH_VARARGS, doc_QTabBar_removeTab},
    {sipName_resizeEvent, meth_QTabBar_resizeEvent, METH_VARARGS, doc_QTabBar_resizeEvent},
    {sipName_selectionBehaviorOnRemove, meth_QTabBar_selectionBehaviorOnRemove, METH_VARARGS, doc_QTabBar_selectionBehaviorOnRemove},
    {sipName_setAccessibleTabName, meth_QTabBar_setAccessibleTabName, METH_VARARGS, doc_QTabBar_setAccessibleTabName},
    {sipName_setAutoHide, meth_QTabBar_setAutoHide, METH_VARARGS, doc_QTabBar_setAutoHide},
    {sipName_setChangeCurrentOnDrag, meth_QTabBar_setChangeCurrentOnDrag, METH_VARARGS, doc_QTabBar_setChangeCurrentOnDrag},
    {sipName_setCurrentIndex, meth_QTabBar_setCurrentIndex, METH_VARARGS, doc_QTabBar_setCurrentIndex},
    {sipName_setDocumentMode, meth_QTabBar_setDocumentMode, METH_VARARGS, doc_QTabBar_setDocumentMode},
    {sipName_setDrawBase, meth_QTabBar_setDrawBase, METH_VARARGS, doc_QTabBar_setDrawBase},
    {sipName_setElideMode, meth_QTabBar_setElideMode, METH_VARARGS, doc_QTabBar_setElideMode},
    {sipName_setExpanding, meth_QTabBar_setExpanding, METH_VARARGS, doc_QTabBar_setExpanding},
    {sipName_setIconSize, meth_QTabBar_setIconSize, METH_VARARGS, doc_QTabBar_setIconSize},
    {sipName_setMovable, meth_QTabBar_setMovable, METH_VARARGS, doc_QTabBar_setMovable},
    {sipName_setSelectionBehaviorOnRemove, meth_QTabBar_setSelectionBehaviorOnRemove, METH_VARARGS, doc_QTabBar_setSelectionBehaviorOnRemove},
    {sipName_setShape, meth_QTabBar_setShape, METH_VARARGS, doc_QTabBar_setShape},
    {sipName_setTabButton, meth_QTabBar_setTabButton, METH_VARARGS, doc_QTabBar_setTabButton},
    {sipName_setTabData, meth_QTabBar_setTabData, METH_VARARGS, doc_QTabBar_setTabData},
    {sipName_setTabEnabled, meth_QTabBar_setTabEnabled, METH_VARARGS, doc_QTabBar_setTabEnabled},
    {sipName_setTabIcon, meth_QTabBar_setTabIcon, METH_VARARGS, doc_QTabBar_setTabIcon},
    {sipName_setTabText, meth_QTabBar_setTabText, METH_VARARGS, doc_QTabBar_setTabText},
    {sipName_setTabTextColor, meth_QTabBar_setTabTextColor, METH_VARARGS, doc_QTabBar_setTabTextColor},
    {sipName_setTabToolTip, meth_QTabBar_setTabToolTip, METH_VARARGS, doc_QTabBar_setTabToolTip},
    {sipName_setTabWhatsThis, meth_QTabBar_setTabWhatsThis, METH_VARARGS, doc_QTabBar_setTabWhatsThis},
    {sipName_setTabsClosable, meth_QTabBar_setTabsClosable, METH_VARARGS, doc_QTabBar_setTabsClosable},
    {sipName_setUsesScrollButtons, meth_QTabBar_setUsesScrollButtons, METH_VARARGS, doc_QTabBar_setUsesScrollButtons},
    {sipName_shape, meth_QTabBar_shape, METH_VARARGS, doc_QTabBar_shape},
    {sipName_showEvent, meth_QTabBar_showEvent, METH_VARARGS, doc_QTabBar_showEvent},
    {sipName_sizeHint, meth_QTabBar_sizeHint, METH_VARARGS, doc_QTabBar_sizeHint},
    {sipName_tabAt, meth_QTabBar_tabAt, METH_VARARGS, doc_QTabBar_tabAt},
    {sipName_tabButton, meth_QTabBar_tabButton, METH_VARARGS, doc_QTabBar_tabButton},
    {sipName_tabData, meth_QTabBar_tabData, METH_VARARGS, doc_QTabBar_tabData},
    {sipName_tabIcon, meth_QTabBar_tabIcon, METH_VARARGS, doc_QTabBar_tabIcon},
    {sipName_tabInserted, meth_QTabBar_tabInserted, METH_VARARGS, doc_QTabBar_tabInserted},
    {sipName_tabLayoutChange, meth_QTabBar_tabLayoutChange, METH_VARARGS, doc_QTabBar_tabLayoutChange},
    {sipName_tabRect, meth_QTabBar_tabRect, METH_VARARGS, doc_QTabBar_tabRect},
    {sipName_tabRemoved, meth_QTabBar_tabRemoved, METH_VARARGS, doc_QTabBar_tabRemoved},
    {sipName_tabSizeHint, meth_QTabBar_tabSizeHint, METH_VARARGS, doc_QTabBar_tabSizeHint},
    {sipName_tabText, meth_QTabBar_tabText, METH_VARARGS, doc_QTabBar_tabText},
    {sipName_tabTextColor, meth_QTabBar_tabTextColor, METH_VARARGS, doc_QTabBar_tabTextColor},
    {sipName_tabToolTip, meth_QTabBar_tabToolTip, METH_VARARGS, doc_QTabBar_tabToolTip},
    {sipName_tabWhatsThis, meth_QTabBar_tabWhatsThis, METH_VARARGS, doc_QTabBar_tabWhatsThis},
    {sipName_tabsClosable, meth_QTabBar_tabsClosable, METH_VARARGS, doc_QTabBar_tabsClosable},
    {sipName_timerEvent, meth_QTabBar_timerEvent, METH_VARARGS, doc_QTabBar_timerEvent},
    {sipName_usesScrollButtons, meth_QTabBar_usesScrollButtons, METH_VARARGS, doc_QTabBar_usesScrollButtons},
    {sipName_wheelEvent, meth_QTabBar_wheelEvent, METH_VARARGS, doc_QTabBar_wheelEvent}
};

static sipEnumMemberDef enummembers_QTabBar[] = {
    {sipName_LeftSide, static_cast<int>( ::QTabBar::LeftSide), 419},
    {sipName_RightSide, static_cast<int>( ::QTabBar::RightSide), 419},
    {sipName_RoundedEast, static_cast<int>( ::QTabBar::RoundedEast), 421},
    {sipName_RoundedNorth, static_cast<int>( ::QTabBar::RoundedNorth), 421},
    {sipName_RoundedSouth, static_cast<int>( ::QTabBar::RoundedSouth), 421},
    {sipName_RoundedWest, static_cast<int>( ::QTabBar::RoundedWest), 421},
    {sipName_SelectLeftTab, static_cast<int>( ::QTabBar::SelectLeftTab), 420},
    {sipName_SelectPreviousTab, static_cast<int>( ::QTabBar::SelectPreviousTab), 420},
    {sipName_SelectRightTab, static_cast<int>( ::QTabBar::SelectRightTab), 420},
    {sipName_TriangularEast, static_cast<int>( ::QTabBar::TriangularEast), 421},
    {sipName_TriangularNorth, static_cast<int>( ::QTabBar::TriangularNorth), 421},
    {sipName_TriangularSouth, static_cast<int>( ::QTabBar::TriangularSouth), 421},
    {sipName_TriangularWest, static_cast<int>( ::QTabBar::TriangularWest), 421},
};

PyDoc_STRVAR(doc_QTabBar, "\1QTabBar(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTabBar[] = {
    {"tabBarDoubleClicked(int)", "\1tabBarDoubleClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabBarClicked(int)", "\1tabBarClicked(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabMoved(int,int)", "\1tabMoved(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabCloseRequested(int)", "\1tabCloseRequested(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentChanged(int)", "\1currentChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTabBar = {
    & ::QTabBar::staticMetaObject,
    0,
    signals_QTabBar,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtWidgets_QTabBar = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTabBar,
        SIP_NULLPTR,
        &plugin_QTabBar
    },
    {
        sipNameNr_QTabBar,
        {0, 0, 1},
        71, methods_QTabBar,
        13, enummembers_QTabBar,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTabBar,
    -1,
    -1,
    supers_QTabBar,
    slots_QTabBar,
    init_type_QTabBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTabBar,
    SIP_NULLPTR,
    array_QTabBar,
    SIP_NULLPTR,
    release_QTabBar,
    cast_QTabBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
