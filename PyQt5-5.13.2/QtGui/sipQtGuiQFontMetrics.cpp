/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"


PyDoc_STRVAR(doc_QFontMetrics_ascent, "ascent(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_ascent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ascent();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_ascent, doc_QFontMetrics_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_descent, "descent(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_descent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->descent();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_descent, doc_QFontMetrics_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_height, "height(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_height(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_height, doc_QFontMetrics_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_leading, "leading(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_leading(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->leading();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_leading, doc_QFontMetrics_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_lineSpacing, "lineSpacing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_lineSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineSpacing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_lineSpacing, doc_QFontMetrics_lineSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_minLeftBearing, "minLeftBearing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minLeftBearing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_minLeftBearing, doc_QFontMetrics_minLeftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_minRightBearing, "minRightBearing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_minRightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minRightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minRightBearing();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_minRightBearing, doc_QFontMetrics_minRightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_maxWidth, "maxWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_maxWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_maxWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_maxWidth, doc_QFontMetrics_maxWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_xHeight, "xHeight(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->xHeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_xHeight, doc_QFontMetrics_xHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_inFont, "inFont(self, str) -> bool");

extern "C" {static PyObject *meth_QFontMetrics_inFont(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_inFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->inFont(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_inFont, doc_QFontMetrics_inFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_leftBearing, "leftBearing(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_leftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->leftBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_leftBearing, doc_QFontMetrics_leftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_rightBearing, "rightBearing(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_rightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_rightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->rightBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_rightBearing, doc_QFontMetrics_rightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_widthChar, "widthChar(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_widthChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_widthChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->width(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_widthChar, doc_QFontMetrics_widthChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_width, "width(self, str, length: int = -1) -> int");

extern "C" {static PyObject *meth_QFontMetrics_width(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_width(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->width(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_width, doc_QFontMetrics_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_boundingRectChar, "boundingRectChar(self, str) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(*a0));
            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_boundingRectChar, doc_QFontMetrics_boundingRectChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_boundingRect, "boundingRect(self, str) -> QRect\n"
"boundingRect(self, QRect, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect\n"
"boundingRect(self, int, int, int, int, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
        int a3 = 0;
        PyObject * a4 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State, &a3, &PyList_Type, &a4))
        {
             ::QRect*sipRes = 0;

#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRect(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 539 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const  ::QString* a5;
        int a5State = 0;
        int a6 = 0;
        PyObject * a7 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiiiJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State, &a6, &PyList_Type, &a7))
        {
             ::QRect*sipRes = 0;

#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a7);
        
        sipRes = new QRect(sipCpp->boundingRect(a0, a1, a2, a3, a4, *a5, a6, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 580 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_boundingRect, doc_QFontMetrics_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_size, "size(self, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QSize");

extern "C" {static PyObject *meth_QFontMetrics_size(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_size(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2 = 0;
        PyObject * a3 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2, &PyList_Type, &a3))
        {
             ::QSize*sipRes = 0;

#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSize(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 627 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontMetrics.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_size, doc_QFontMetrics_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_underlinePos, "underlinePos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_underlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_underlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->underlinePos();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_underlinePos, doc_QFontMetrics_underlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_overlinePos, "overlinePos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_overlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_overlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->overlinePos();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_overlinePos, doc_QFontMetrics_overlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_strikeOutPos, "strikeOutPos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->strikeOutPos();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_strikeOutPos, doc_QFontMetrics_strikeOutPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_lineWidth, "lineWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_lineWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_lineWidth, doc_QFontMetrics_lineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_averageCharWidth, "averageCharWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->averageCharWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_averageCharWidth, doc_QFontMetrics_averageCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_elidedText, "elidedText(self, str, Qt.TextElideMode, int, flags: int = 0) -> str");

extern "C" {static PyObject *meth_QFontMetrics_elidedText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_elidedText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::TextElideMode a1;
        int a2;
        int a3 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1Ei|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_TextElideMode, &a1, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->elidedText(*a0,a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_elidedText, doc_QFontMetrics_elidedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_tightBoundingRect, "tightBoundingRect(self, str) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->tightBoundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_tightBoundingRect, doc_QFontMetrics_tightBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_inFontUcs4, "inFontUcs4(self, int) -> bool");

extern "C" {static PyObject *meth_QFontMetrics_inFontUcs4(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_inFontUcs4(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->inFontUcs4(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_inFontUcs4, doc_QFontMetrics_inFontUcs4);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_swap, "swap(self, QFontMetrics)");

extern "C" {static PyObject *meth_QFontMetrics_swap(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontMetrics* a0;
         ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QFontMetrics, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_swap, doc_QFontMetrics_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_capHeight, "capHeight(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_capHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_capHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->capHeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_capHeight, doc_QFontMetrics_capHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_horizontalAdvance, "horizontalAdvance(self, str, length: int = -1) -> int");

extern "C" {static PyObject *meth_QFontMetrics_horizontalAdvance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_horizontalAdvance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->horizontalAdvance(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_horizontalAdvance, doc_QFontMetrics_horizontalAdvance);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFontMetrics___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetrics___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetrics *sipCpp = reinterpret_cast< ::QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetrics, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetrics::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QFontMetrics, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFontMetrics___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetrics___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetrics *sipCpp = reinterpret_cast< ::QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetrics, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetrics::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QFontMetrics, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontMetrics(void *, int);}
static void release_QFontMetrics(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontMetrics *>(sipCppV);
}


extern "C" {static void assign_QFontMetrics(void *, Py_ssize_t, void *);}
static void assign_QFontMetrics(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFontMetrics *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFontMetrics *>(sipSrc);
}


extern "C" {static void *copy_QFontMetrics(const void *, Py_ssize_t);}
static void *copy_QFontMetrics(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QFontMetrics(reinterpret_cast<const  ::QFontMetrics *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFontMetrics(sipSimpleWrapper *);}
static void dealloc_QFontMetrics(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontMetrics(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontMetrics(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontMetrics(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontMetrics *sipCpp = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFontMetrics(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFont* a0;
         ::QPaintDevice* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J8", sipType_QFont, &a0, sipType_QPaintDevice, &a1))
        {
            sipCpp = new  ::QFontMetrics(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QFontMetrics* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontMetrics, &a0))
        {
            sipCpp = new  ::QFontMetrics(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFontMetrics[] = {
    {(void *)slot_QFontMetrics___ne__, ne_slot},
    {(void *)slot_QFontMetrics___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFontMetrics[] = {
    {sipName_ascent, meth_QFontMetrics_ascent, METH_VARARGS, doc_QFontMetrics_ascent},
    {sipName_averageCharWidth, meth_QFontMetrics_averageCharWidth, METH_VARARGS, doc_QFontMetrics_averageCharWidth},
    {sipName_boundingRect, SIP_MLMETH_CAST(meth_QFontMetrics_boundingRect), METH_VARARGS|METH_KEYWORDS, doc_QFontMetrics_boundingRect},
    {sipName_boundingRectChar, meth_QFontMetrics_boundingRectChar, METH_VARARGS, doc_QFontMetrics_boundingRectChar},
    {sipName_capHeight, meth_QFontMetrics_capHeight, METH_VARARGS, doc_QFontMetrics_capHeight},
    {sipName_descent, meth_QFontMetrics_descent, METH_VARARGS, doc_QFontMetrics_descent},
    {sipName_elidedText, SIP_MLMETH_CAST(meth_QFontMetrics_elidedText), METH_VARARGS|METH_KEYWORDS, doc_QFontMetrics_elidedText},
    {sipName_height, meth_QFontMetrics_height, METH_VARARGS, doc_QFontMetrics_height},
    {sipName_horizontalAdvance, SIP_MLMETH_CAST(meth_QFontMetrics_horizontalAdvance), METH_VARARGS|METH_KEYWORDS, doc_QFontMetrics_horizontalAdvance},
    {sipName_inFont, meth_QFontMetrics_inFont, METH_VARARGS, doc_QFontMetrics_inFont},
    {sipName_inFontUcs4, meth_QFontMetrics_inFontUcs4, METH_VARARGS, doc_QFontMetrics_inFontUcs4},
    {sipName_leading, meth_QFontMetrics_leading, METH_VARARGS, doc_QFontMetrics_leading},
    {sipName_leftBearing, meth_QFontMetrics_leftBearing, METH_VARARGS, doc_QFontMetrics_leftBearing},
    {sipName_lineSpacing, meth_QFontMetrics_lineSpacing, METH_VARARGS, doc_QFontMetrics_lineSpacing},
    {sipName_lineWidth, meth_QFontMetrics_lineWidth, METH_VARARGS, doc_QFontMetrics_lineWidth},
    {sipName_maxWidth, meth_QFontMetrics_maxWidth, METH_VARARGS, doc_QFontMetrics_maxWidth},
    {sipName_minLeftBearing, meth_QFontMetrics_minLeftBearing, METH_VARARGS, doc_QFontMetrics_minLeftBearing},
    {sipName_minRightBearing, meth_QFontMetrics_minRightBearing, METH_VARARGS, doc_QFontMetrics_minRightBearing},
    {sipName_overlinePos, meth_QFontMetrics_overlinePos, METH_VARARGS, doc_QFontMetrics_overlinePos},
    {sipName_rightBearing, meth_QFontMetrics_rightBearing, METH_VARARGS, doc_QFontMetrics_rightBearing},
    {sipName_size, SIP_MLMETH_CAST(meth_QFontMetrics_size), METH_VARARGS|METH_KEYWORDS, doc_QFontMetrics_size},
    {sipName_strikeOutPos, meth_QFontMetrics_strikeOutPos, METH_VARARGS, doc_QFontMetrics_strikeOutPos},
    {sipName_swap, meth_QFontMetrics_swap, METH_VARARGS, doc_QFontMetrics_swap},
    {sipName_tightBoundingRect, meth_QFontMetrics_tightBoundingRect, METH_VARARGS, doc_QFontMetrics_tightBoundingRect},
    {sipName_underlinePos, meth_QFontMetrics_underlinePos, METH_VARARGS, doc_QFontMetrics_underlinePos},
    {sipName_width, SIP_MLMETH_CAST(meth_QFontMetrics_width), METH_VARARGS|METH_KEYWORDS, doc_QFontMetrics_width},
    {sipName_widthChar, meth_QFontMetrics_widthChar, METH_VARARGS, doc_QFontMetrics_widthChar},
    {sipName_xHeight, meth_QFontMetrics_xHeight, METH_VARARGS, doc_QFontMetrics_xHeight}
};

PyDoc_STRVAR(doc_QFontMetrics, "\1QFontMetrics(QFont)\n"
"QFontMetrics(QFont, QPaintDevice)\n"
"QFontMetrics(QFontMetrics)");


static pyqt5ClassPluginDef plugin_QFontMetrics = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontMetrics = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontMetrics,
        SIP_NULLPTR,
        &plugin_QFontMetrics
    },
    {
        sipNameNr_QFontMetrics,
        {0, 0, 1},
        28, methods_QFontMetrics,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontMetrics,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFontMetrics,
    init_type_QFontMetrics,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFontMetrics,
    assign_QFontMetrics,
    SIP_NULLPTR,
    copy_QFontMetrics,
    release_QFontMetrics,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
