/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
#line 34 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qrgba64.sip"
#include <qrgba64.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"


PyDoc_STRVAR(doc_QColor_name, "name(self) -> str\n"
"name(self, QColor.NameFormat) -> str");

extern "C" {static PyObject *meth_QColor_name(PyObject *, PyObject *);}
static PyObject *meth_QColor_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QColor::NameFormat a0;
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_NameFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_name, doc_QColor_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setNamedColor, "setNamedColor(self, str)");

extern "C" {static PyObject *meth_QColor_setNamedColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_setNamedColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QColor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNamedColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setNamedColor, doc_QColor_setNamedColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_colorNames, "colorNames() -> List[str]");

extern "C" {static PyObject *meth_QColor_colorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_colorNames(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QColor::colorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_colorNames, doc_QColor_colorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_spec, "spec(self) -> QColor.Spec");

extern "C" {static PyObject *meth_QColor_spec(PyObject *, PyObject *);}
static PyObject *meth_QColor_spec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor::Spec sipRes;

            sipRes = sipCpp->spec();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QColor_Spec);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_spec, doc_QColor_spec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_alpha, "alpha(self) -> int");

extern "C" {static PyObject *meth_QColor_alpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alpha();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_alpha, doc_QColor_alpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setAlpha, "setAlpha(self, int)");

extern "C" {static PyObject *meth_QColor_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlpha, doc_QColor_setAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_alphaF, "alphaF(self) -> float");

extern "C" {static PyObject *meth_QColor_alphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_alphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->alphaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_alphaF, doc_QColor_alphaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setAlphaF, "setAlphaF(self, float)");

extern "C" {static PyObject *meth_QColor_setAlphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlphaF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlphaF, doc_QColor_setAlphaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_red, "red(self) -> int");

extern "C" {static PyObject *meth_QColor_red(PyObject *, PyObject *);}
static PyObject *meth_QColor_red(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->red();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_red, doc_QColor_red);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_green, "green(self) -> int");

extern "C" {static PyObject *meth_QColor_green(PyObject *, PyObject *);}
static PyObject *meth_QColor_green(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->green();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_green, doc_QColor_green);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blue, "blue(self) -> int");

extern "C" {static PyObject *meth_QColor_blue(PyObject *, PyObject *);}
static PyObject *meth_QColor_blue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blue();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_blue, doc_QColor_blue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRed, "setRed(self, int)");

extern "C" {static PyObject *meth_QColor_setRed(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRed, doc_QColor_setRed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setGreen, "setGreen(self, int)");

extern "C" {static PyObject *meth_QColor_setGreen(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreen, doc_QColor_setGreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setBlue, "setBlue(self, int)");

extern "C" {static PyObject *meth_QColor_setBlue(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlue, doc_QColor_setBlue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_redF, "redF(self) -> float");

extern "C" {static PyObject *meth_QColor_redF(PyObject *, PyObject *);}
static PyObject *meth_QColor_redF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->redF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_redF, doc_QColor_redF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_greenF, "greenF(self) -> float");

extern "C" {static PyObject *meth_QColor_greenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_greenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->greenF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_greenF, doc_QColor_greenF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blueF, "blueF(self) -> float");

extern "C" {static PyObject *meth_QColor_blueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->blueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_blueF, doc_QColor_blueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRedF, "setRedF(self, float)");

extern "C" {static PyObject *meth_QColor_setRedF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRedF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRedF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRedF, doc_QColor_setRedF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setGreenF, "setGreenF(self, float)");

extern "C" {static PyObject *meth_QColor_setGreenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreenF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreenF, doc_QColor_setGreenF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setBlueF, "setBlueF(self, float)");

extern "C" {static PyObject *meth_QColor_setBlueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlueF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlueF, doc_QColor_setBlueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getRgb, "getRgb(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgb(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgb, doc_QColor_getRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgb, "setRgb(self, int, int, int, alpha: int = 255)\n"
"setRgb(self, int)");

extern "C" {static PyObject *meth_QColor_setRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgb(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QRgb a0;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgb(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgb, doc_QColor_setRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getRgbF, "getRgbF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgbF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgbF, doc_QColor_getRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgbF, "setRgbF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgbF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgbF, doc_QColor_setRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgba, "rgba(self) -> int");

extern "C" {static PyObject *meth_QColor_rgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->rgba();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgba, doc_QColor_rgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgba, "setRgba(self, int)");

extern "C" {static PyObject *meth_QColor_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgba(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgba, doc_QColor_setRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgb, "rgb(self) -> int");

extern "C" {static PyObject *meth_QColor_rgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->rgb();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgb, doc_QColor_rgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hue, "hue(self) -> int");

extern "C" {static PyObject *meth_QColor_hue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hue();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hue, doc_QColor_hue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_saturation, "saturation(self) -> int");

extern "C" {static PyObject *meth_QColor_saturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->saturation();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturation, doc_QColor_saturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_value, "value(self) -> int");

extern "C" {static PyObject *meth_QColor_value(PyObject *, PyObject *);}
static PyObject *meth_QColor_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_value, doc_QColor_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hueF, "hueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hueF, doc_QColor_hueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_saturationF, "saturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_saturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->saturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturationF, doc_QColor_saturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_valueF, "valueF(self) -> float");

extern "C" {static PyObject *meth_QColor_valueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_valueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->valueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_valueF, doc_QColor_valueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsv, "getHsv(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsv(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsv, doc_QColor_getHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsv, "setHsv(self, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsv(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsv, doc_QColor_setHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsvF, "getHsvF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsvF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsvF, doc_QColor_getHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsvF, "setHsvF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsvF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsvF, doc_QColor_setHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_cyan, "cyan(self) -> int");

extern "C" {static PyObject *meth_QColor_cyan(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cyan();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyan, doc_QColor_cyan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_magenta, "magenta(self) -> int");

extern "C" {static PyObject *meth_QColor_magenta(PyObject *, PyObject *);}
static PyObject *meth_QColor_magenta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->magenta();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_magenta, doc_QColor_magenta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_yellow, "yellow(self) -> int");

extern "C" {static PyObject *meth_QColor_yellow(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yellow();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellow, doc_QColor_yellow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_black, "black(self) -> int");

extern "C" {static PyObject *meth_QColor_black(PyObject *, PyObject *);}
static PyObject *meth_QColor_black(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->black();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_black, doc_QColor_black);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_cyanF, "cyanF(self) -> float");

extern "C" {static PyObject *meth_QColor_cyanF(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyanF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cyanF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyanF, doc_QColor_cyanF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_magentaF, "magentaF(self) -> float");

extern "C" {static PyObject *meth_QColor_magentaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_magentaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->magentaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_magentaF, doc_QColor_magentaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_yellowF, "yellowF(self) -> float");

extern "C" {static PyObject *meth_QColor_yellowF(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellowF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->yellowF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellowF, doc_QColor_yellowF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blackF, "blackF(self) -> float");

extern "C" {static PyObject *meth_QColor_blackF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blackF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->blackF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_blackF, doc_QColor_blackF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getCmyk, "getCmyk(self) -> Tuple[int, int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmyk(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(iiiii)",a0,a1,a2,a3,a4);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmyk, doc_QColor_getCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setCmyk, "setCmyk(self, int, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmyk(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmyk, doc_QColor_setCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getCmykF, "getCmykF(self) -> Tuple[float, float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmykF(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(ddddd)",a0,a1,a2,a3,a4);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmykF, doc_QColor_getCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setCmykF, "setCmykF(self, float, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmykF(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmykF, doc_QColor_setCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toRgb, "toRgb(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_toRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toRgb());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_toRgb, doc_QColor_toRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toHsv, "toHsv(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toHsv());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsv, doc_QColor_toHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toCmyk, "toCmyk(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_toCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toCmyk());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_toCmyk, doc_QColor_toCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_convertTo, "convertTo(self, QColor.Spec) -> QColor");

extern "C" {static PyObject *meth_QColor_convertTo(PyObject *, PyObject *);}
static PyObject *meth_QColor_convertTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QColor::Spec a0;
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_Spec, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->convertTo(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_convertTo, doc_QColor_convertTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgb, "fromRgb(int) -> QColor\n"
"fromRgb(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "u", &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgb(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgb(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgb, doc_QColor_fromRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgba, "fromRgba(int) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgba, doc_QColor_fromRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgbF, "fromRgbF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgbF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgbF, doc_QColor_fromRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsv, "fromHsv(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsv(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsv, doc_QColor_fromHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsvF, "fromHsvF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsvF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsvF, doc_QColor_fromHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromCmyk, "fromCmyk(int, int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iiii|i", &a0, &a1, &a2, &a3, &a4))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromCmyk(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmyk, doc_QColor_fromCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromCmykF, "fromCmykF(float, float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "dddd|d", &a0, &a1, &a2, &a3, &a4))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromCmykF(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmykF, doc_QColor_fromCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QColor_isValid(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValid, doc_QColor_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lighter, "lighter(self, factor: int = 150) -> QColor");

extern "C" {static PyObject *meth_QColor_lighter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_lighter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 150;
        const  ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->lighter(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_lighter, doc_QColor_lighter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_darker, "darker(self, factor: int = 200) -> QColor");

extern "C" {static PyObject *meth_QColor_darker(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_darker(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 200;
        const  ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->darker(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_darker, doc_QColor_darker);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvHue, "hsvHue(self) -> int");

extern "C" {static PyObject *meth_QColor_hsvHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvHue();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHue, doc_QColor_hsvHue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvSaturation, "hsvSaturation(self) -> int");

extern "C" {static PyObject *meth_QColor_hsvSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvSaturation();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturation, doc_QColor_hsvSaturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvHueF, "hsvHueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hsvHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hsvHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHueF, doc_QColor_hsvHueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvSaturationF, "hsvSaturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_hsvSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hsvSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturationF, doc_QColor_hsvSaturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslHue, "hslHue(self) -> int");

extern "C" {static PyObject *meth_QColor_hslHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslHue();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHue, doc_QColor_hslHue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslSaturation, "hslSaturation(self) -> int");

extern "C" {static PyObject *meth_QColor_hslSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslSaturation();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturation, doc_QColor_hslSaturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lightness, "lightness(self) -> int");

extern "C" {static PyObject *meth_QColor_lightness(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lightness();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightness, doc_QColor_lightness);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslHueF, "hslHueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hslHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hslHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHueF, doc_QColor_hslHueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslSaturationF, "hslSaturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_hslSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hslSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturationF, doc_QColor_hslSaturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lightnessF, "lightnessF(self) -> float");

extern "C" {static PyObject *meth_QColor_lightnessF(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightnessF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lightnessF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightnessF, doc_QColor_lightnessF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsl, "getHsl(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsl(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsl, doc_QColor_getHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsl, "setHsl(self, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsl(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsl, doc_QColor_setHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHslF, "getHslF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHslF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHslF, doc_QColor_getHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHslF, "setHslF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHslF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHslF, doc_QColor_setHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toHsl, "toHsl(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toHsl(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toHsl());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsl, doc_QColor_toHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsl, "fromHsl(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsl(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsl, doc_QColor_fromHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHslF, "fromHslF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHslF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHslF, doc_QColor_fromHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_isValidColor, "isValidColor(str) -> bool");

extern "C" {static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QColor::isValidColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValidColor, doc_QColor_isValidColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgba64, "rgba64(self) -> QRgba64");

extern "C" {static PyObject *meth_QColor_rgba64(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(sipCpp->rgba64());

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgba64, doc_QColor_rgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgba64, "setRgba64(self, QRgba64)");

extern "C" {static PyObject *meth_QColor_setRgba64(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QColor, &sipCpp, sipType_QRgba64, &a0))
        {
            sipCpp->setRgba64(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgba64, doc_QColor_setRgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgba64, "fromRgba64(int, int, int, alpha: int = 65535) -> QColor\n"
"fromRgba64(QRgba64) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgba64(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba64(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ushort a0;
         ::ushort a1;
         ::ushort a2;
         ::ushort a3 = 65535;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ttt|t", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba64(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
         ::QRgba64* a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J9", sipType_QRgba64, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba64(*a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgba64, doc_QColor_fromRgba64);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QColor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QColor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QColor::operator!=(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QColor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QColor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QColor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QColor::operator==(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QColor, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QColor(void *, int);}
static void release_QColor(void *sipCppV, int)
{
    delete reinterpret_cast< ::QColor *>(sipCppV);
}


extern "C" {static PyObject *pickle_QColor(void *);}
static PyObject *pickle_QColor(void *sipCppV)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipCppV);
    PyObject *sipRes;

#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->red(), sipCpp->green(), sipCpp->blue(), sipCpp->alpha());
#line 2670 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"

    return sipRes;
}


extern "C" {static void *array_QColor(Py_ssize_t);}
static void *array_QColor(Py_ssize_t sipNrElem)
{
    return new  ::QColor[sipNrElem];
}


extern "C" {static void assign_QColor(void *, Py_ssize_t, void *);}
static void assign_QColor(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QColor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QColor *>(sipSrc);
}


extern "C" {static void *copy_QColor(const void *, Py_ssize_t);}
static void *copy_QColor(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QColor(reinterpret_cast<const  ::QColor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QColor(sipSimpleWrapper *);}
static void dealloc_QColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QColor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QColor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QColor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QColor *sipCpp = SIP_NULLPTR;

    {
         ::Qt::GlobalColor a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_Qt_GlobalColor, &a0))
        {
            sipCpp = new  ::QColor(a0);

            return sipCpp;
        }
    }

    {
         ::QRgb a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "u", &a0))
        {
            sipCpp = new  ::QColor(a0);

            return sipCpp;
        }
    }

    {
         ::QRgba64* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRgba64, &a0))
        {
            sipCpp = new  ::QColor(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
        if (a0->canConvert<QColor>())
            sipCpp = new QColor(a0->value<QColor>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 2759 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QColor();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iii|i", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QColor(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new  ::QColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QColor **sipCppPtr = reinterpret_cast< ::QColor **>(sipCppPtrV);

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::GlobalColor to be used whenever a QColor is expected.  Note that SIP
// must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)) ||
            sipCanConvertToType(sipPy, sipType_QColor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)))
{
    *sipCppPtr = new QColor((Qt::GlobalColor)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 2862 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQColor.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QColor[] = {
    {(void *)slot_QColor___ne__, ne_slot},
    {(void *)slot_QColor___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QColor[] = {
    {sipName_alpha, meth_QColor_alpha, METH_VARARGS, doc_QColor_alpha},
    {sipName_alphaF, meth_QColor_alphaF, METH_VARARGS, doc_QColor_alphaF},
    {sipName_black, meth_QColor_black, METH_VARARGS, doc_QColor_black},
    {sipName_blackF, meth_QColor_blackF, METH_VARARGS, doc_QColor_blackF},
    {sipName_blue, meth_QColor_blue, METH_VARARGS, doc_QColor_blue},
    {sipName_blueF, meth_QColor_blueF, METH_VARARGS, doc_QColor_blueF},
    {sipName_colorNames, meth_QColor_colorNames, METH_VARARGS, doc_QColor_colorNames},
    {sipName_convertTo, meth_QColor_convertTo, METH_VARARGS, doc_QColor_convertTo},
    {sipName_cyan, meth_QColor_cyan, METH_VARARGS, doc_QColor_cyan},
    {sipName_cyanF, meth_QColor_cyanF, METH_VARARGS, doc_QColor_cyanF},
    {sipName_darker, SIP_MLMETH_CAST(meth_QColor_darker), METH_VARARGS|METH_KEYWORDS, doc_QColor_darker},
    {sipName_fromCmyk, SIP_MLMETH_CAST(meth_QColor_fromCmyk), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromCmyk},
    {sipName_fromCmykF, SIP_MLMETH_CAST(meth_QColor_fromCmykF), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromCmykF},
    {sipName_fromHsl, SIP_MLMETH_CAST(meth_QColor_fromHsl), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromHsl},
    {sipName_fromHslF, SIP_MLMETH_CAST(meth_QColor_fromHslF), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromHslF},
    {sipName_fromHsv, SIP_MLMETH_CAST(meth_QColor_fromHsv), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromHsv},
    {sipName_fromHsvF, SIP_MLMETH_CAST(meth_QColor_fromHsvF), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromHsvF},
    {sipName_fromRgb, SIP_MLMETH_CAST(meth_QColor_fromRgb), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromRgb},
    {sipName_fromRgbF, SIP_MLMETH_CAST(meth_QColor_fromRgbF), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromRgbF},
    {sipName_fromRgba, meth_QColor_fromRgba, METH_VARARGS, doc_QColor_fromRgba},
    {sipName_fromRgba64, SIP_MLMETH_CAST(meth_QColor_fromRgba64), METH_VARARGS|METH_KEYWORDS, doc_QColor_fromRgba64},
    {sipName_getCmyk, SIP_MLMETH_CAST(meth_QColor_getCmyk), METH_VARARGS|METH_KEYWORDS, doc_QColor_getCmyk},
    {sipName_getCmykF, SIP_MLMETH_CAST(meth_QColor_getCmykF), METH_VARARGS|METH_KEYWORDS, doc_QColor_getCmykF},
    {sipName_getHsl, SIP_MLMETH_CAST(meth_QColor_getHsl), METH_VARARGS|METH_KEYWORDS, doc_QColor_getHsl},
    {sipName_getHslF, SIP_MLMETH_CAST(meth_QColor_getHslF), METH_VARARGS|METH_KEYWORDS, doc_QColor_getHslF},
    {sipName_getHsv, SIP_MLMETH_CAST(meth_QColor_getHsv), METH_VARARGS|METH_KEYWORDS, doc_QColor_getHsv},
    {sipName_getHsvF, SIP_MLMETH_CAST(meth_QColor_getHsvF), METH_VARARGS|METH_KEYWORDS, doc_QColor_getHsvF},
    {sipName_getRgb, SIP_MLMETH_CAST(meth_QColor_getRgb), METH_VARARGS|METH_KEYWORDS, doc_QColor_getRgb},
    {sipName_getRgbF, SIP_MLMETH_CAST(meth_QColor_getRgbF), METH_VARARGS|METH_KEYWORDS, doc_QColor_getRgbF},
    {sipName_green, meth_QColor_green, METH_VARARGS, doc_QColor_green},
    {sipName_greenF, meth_QColor_greenF, METH_VARARGS, doc_QColor_greenF},
    {sipName_hslHue, meth_QColor_hslHue, METH_VARARGS, doc_QColor_hslHue},
    {sipName_hslHueF, meth_QColor_hslHueF, METH_VARARGS, doc_QColor_hslHueF},
    {sipName_hslSaturation, meth_QColor_hslSaturation, METH_VARARGS, doc_QColor_hslSaturation},
    {sipName_hslSaturationF, meth_QColor_hslSaturationF, METH_VARARGS, doc_QColor_hslSaturationF},
    {sipName_hsvHue, meth_QColor_hsvHue, METH_VARARGS, doc_QColor_hsvHue},
    {sipName_hsvHueF, meth_QColor_hsvHueF, METH_VARARGS, doc_QColor_hsvHueF},
    {sipName_hsvSaturation, meth_QColor_hsvSaturation, METH_VARARGS, doc_QColor_hsvSaturation},
    {sipName_hsvSaturationF, meth_QColor_hsvSaturationF, METH_VARARGS, doc_QColor_hsvSaturationF},
    {sipName_hue, meth_QColor_hue, METH_VARARGS, doc_QColor_hue},
    {sipName_hueF, meth_QColor_hueF, METH_VARARGS, doc_QColor_hueF},
    {sipName_isValid, meth_QColor_isValid, METH_VARARGS, doc_QColor_isValid},
    {sipName_isValidColor, meth_QColor_isValidColor, METH_VARARGS, doc_QColor_isValidColor},
    {sipName_lighter, SIP_MLMETH_CAST(meth_QColor_lighter), METH_VARARGS|METH_KEYWORDS, doc_QColor_lighter},
    {sipName_lightness, meth_QColor_lightness, METH_VARARGS, doc_QColor_lightness},
    {sipName_lightnessF, meth_QColor_lightnessF, METH_VARARGS, doc_QColor_lightnessF},
    {sipName_magenta, meth_QColor_magenta, METH_VARARGS, doc_QColor_magenta},
    {sipName_magentaF, meth_QColor_magentaF, METH_VARARGS, doc_QColor_magentaF},
    {sipName_name, meth_QColor_name, METH_VARARGS, doc_QColor_name},
    {sipName_red, meth_QColor_red, METH_VARARGS, doc_QColor_red},
    {sipName_redF, meth_QColor_redF, METH_VARARGS, doc_QColor_redF},
    {sipName_rgb, meth_QColor_rgb, METH_VARARGS, doc_QColor_rgb},
    {sipName_rgba, meth_QColor_rgba, METH_VARARGS, doc_QColor_rgba},
    {sipName_rgba64, meth_QColor_rgba64, METH_VARARGS, doc_QColor_rgba64},
    {sipName_saturation, meth_QColor_saturation, METH_VARARGS, doc_QColor_saturation},
    {sipName_saturationF, meth_QColor_saturationF, METH_VARARGS, doc_QColor_saturationF},
    {sipName_setAlpha, meth_QColor_setAlpha, METH_VARARGS, doc_QColor_setAlpha},
    {sipName_setAlphaF, meth_QColor_setAlphaF, METH_VARARGS, doc_QColor_setAlphaF},
    {sipName_setBlue, meth_QColor_setBlue, METH_VARARGS, doc_QColor_setBlue},
    {sipName_setBlueF, meth_QColor_setBlueF, METH_VARARGS, doc_QColor_setBlueF},
    {sipName_setCmyk, SIP_MLMETH_CAST(meth_QColor_setCmyk), METH_VARARGS|METH_KEYWORDS, doc_QColor_setCmyk},
    {sipName_setCmykF, SIP_MLMETH_CAST(meth_QColor_setCmykF), METH_VARARGS|METH_KEYWORDS, doc_QColor_setCmykF},
    {sipName_setGreen, meth_QColor_setGreen, METH_VARARGS, doc_QColor_setGreen},
    {sipName_setGreenF, meth_QColor_setGreenF, METH_VARARGS, doc_QColor_setGreenF},
    {sipName_setHsl, SIP_MLMETH_CAST(meth_QColor_setHsl), METH_VARARGS|METH_KEYWORDS, doc_QColor_setHsl},
    {sipName_setHslF, SIP_MLMETH_CAST(meth_QColor_setHslF), METH_VARARGS|METH_KEYWORDS, doc_QColor_setHslF},
    {sipName_setHsv, SIP_MLMETH_CAST(meth_QColor_setHsv), METH_VARARGS|METH_KEYWORDS, doc_QColor_setHsv},
    {sipName_setHsvF, SIP_MLMETH_CAST(meth_QColor_setHsvF), METH_VARARGS|METH_KEYWORDS, doc_QColor_setHsvF},
    {sipName_setNamedColor, meth_QColor_setNamedColor, METH_VARARGS, doc_QColor_setNamedColor},
    {sipName_setRed, meth_QColor_setRed, METH_VARARGS, doc_QColor_setRed},
    {sipName_setRedF, meth_QColor_setRedF, METH_VARARGS, doc_QColor_setRedF},
    {sipName_setRgb, SIP_MLMETH_CAST(meth_QColor_setRgb), METH_VARARGS|METH_KEYWORDS, doc_QColor_setRgb},
    {sipName_setRgbF, SIP_MLMETH_CAST(meth_QColor_setRgbF), METH_VARARGS|METH_KEYWORDS, doc_QColor_setRgbF},
    {sipName_setRgba, meth_QColor_setRgba, METH_VARARGS, doc_QColor_setRgba},
    {sipName_setRgba64, meth_QColor_setRgba64, METH_VARARGS, doc_QColor_setRgba64},
    {sipName_spec, meth_QColor_spec, METH_VARARGS, doc_QColor_spec},
    {sipName_toCmyk, meth_QColor_toCmyk, METH_VARARGS, doc_QColor_toCmyk},
    {sipName_toHsl, meth_QColor_toHsl, METH_VARARGS, doc_QColor_toHsl},
    {sipName_toHsv, meth_QColor_toHsv, METH_VARARGS, doc_QColor_toHsv},
    {sipName_toRgb, meth_QColor_toRgb, METH_VARARGS, doc_QColor_toRgb},
    {sipName_value, meth_QColor_value, METH_VARARGS, doc_QColor_value},
    {sipName_valueF, meth_QColor_valueF, METH_VARARGS, doc_QColor_valueF},
    {sipName_yellow, meth_QColor_yellow, METH_VARARGS, doc_QColor_yellow},
    {sipName_yellowF, meth_QColor_yellowF, METH_VARARGS, doc_QColor_yellowF}
};

static sipEnumMemberDef enummembers_QColor[] = {
    {sipName_Cmyk, static_cast<int>( ::QColor::Cmyk), 14},
    {sipName_HexArgb, static_cast<int>( ::QColor::HexArgb), 13},
    {sipName_HexRgb, static_cast<int>( ::QColor::HexRgb), 13},
    {sipName_Hsl, static_cast<int>( ::QColor::Hsl), 14},
    {sipName_Hsv, static_cast<int>( ::QColor::Hsv), 14},
    {sipName_Invalid, static_cast<int>( ::QColor::Invalid), 14},
    {sipName_Rgb, static_cast<int>( ::QColor::Rgb), 14},
};

PyDoc_STRVAR(doc_QColor, "\1QColor(Qt.GlobalColor)\n"
"QColor(int)\n"
"QColor(QRgba64)\n"
"QColor(Any)\n"
"QColor()\n"
"QColor(int, int, int, alpha: int = 255)\n"
"QColor(str)\n"
"QColor(Union[QColor, Qt.GlobalColor, QGradient])");


static pyqt5ClassPluginDef plugin_QColor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QColor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QColor,
        SIP_NULLPTR,
        &plugin_QColor
    },
    {
        sipNameNr_QColor,
        {0, 0, 1},
        84, methods_QColor,
        7, enummembers_QColor,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QColor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QColor,
    init_type_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QColor,
    assign_QColor,
    array_QColor,
    copy_QColor,
    release_QColor,
    SIP_NULLPTR,
    convertTo_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR
};
