/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextInlineObject.cpp"

#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextInlineObject.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextInlineObject.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextInlineObject.cpp"


PyDoc_STRVAR(doc_QTextInlineObject_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextInlineObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_isValid, doc_QTextInlineObject_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QTextInlineObject_rect(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_rect, doc_QTextInlineObject_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_width, "width(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_width(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_width, doc_QTextInlineObject_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_ascent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_ascent, doc_QTextInlineObject_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_descent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_descent, doc_QTextInlineObject_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_height, "height(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_height(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_height, doc_QTextInlineObject_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextInlineObject_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textDirection, doc_QTextInlineObject_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setWidth, doc_QTextInlineObject_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setAscent, "setAscent(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setAscent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setAscent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setAscent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setAscent, doc_QTextInlineObject_setAscent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setDescent, "setDescent(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setDescent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setDescent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setDescent, doc_QTextInlineObject_setDescent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_textPosition, "textPosition(self) -> int");

extern "C" {static PyObject *meth_QTextInlineObject_textPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->textPosition();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textPosition, doc_QTextInlineObject_textPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_formatIndex, "formatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextInlineObject_formatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_formatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->formatIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_formatIndex, doc_QTextInlineObject_formatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_format, "format(self) -> QTextFormat");

extern "C" {static PyObject *meth_QTextInlineObject_format(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::QTextFormat*sipRes;

            sipRes = new  ::QTextFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_format, doc_QTextInlineObject_format);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextInlineObject(void *, int);}
static void release_QTextInlineObject(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextInlineObject *>(sipCppV);
}


extern "C" {static void *array_QTextInlineObject(Py_ssize_t);}
static void *array_QTextInlineObject(Py_ssize_t sipNrElem)
{
    return new  ::QTextInlineObject[sipNrElem];
}


extern "C" {static void assign_QTextInlineObject(void *, Py_ssize_t, void *);}
static void assign_QTextInlineObject(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextInlineObject *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextInlineObject *>(sipSrc);
}


extern "C" {static void *copy_QTextInlineObject(const void *, Py_ssize_t);}
static void *copy_QTextInlineObject(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextInlineObject(reinterpret_cast<const  ::QTextInlineObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextInlineObject(sipSimpleWrapper *);}
static void dealloc_QTextInlineObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextInlineObject(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextInlineObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextInlineObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextInlineObject *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextInlineObject();

            return sipCpp;
        }
    }

    {
        const  ::QTextInlineObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextInlineObject, &a0))
        {
            sipCpp = new  ::QTextInlineObject(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextInlineObject[] = {
    {sipName_ascent, meth_QTextInlineObject_ascent, METH_VARARGS, doc_QTextInlineObject_ascent},
    {sipName_descent, meth_QTextInlineObject_descent, METH_VARARGS, doc_QTextInlineObject_descent},
    {sipName_format, meth_QTextInlineObject_format, METH_VARARGS, doc_QTextInlineObject_format},
    {sipName_formatIndex, meth_QTextInlineObject_formatIndex, METH_VARARGS, doc_QTextInlineObject_formatIndex},
    {sipName_height, meth_QTextInlineObject_height, METH_VARARGS, doc_QTextInlineObject_height},
    {sipName_isValid, meth_QTextInlineObject_isValid, METH_VARARGS, doc_QTextInlineObject_isValid},
    {sipName_rect, meth_QTextInlineObject_rect, METH_VARARGS, doc_QTextInlineObject_rect},
    {sipName_setAscent, meth_QTextInlineObject_setAscent, METH_VARARGS, doc_QTextInlineObject_setAscent},
    {sipName_setDescent, meth_QTextInlineObject_setDescent, METH_VARARGS, doc_QTextInlineObject_setDescent},
    {sipName_setWidth, meth_QTextInlineObject_setWidth, METH_VARARGS, doc_QTextInlineObject_setWidth},
    {sipName_textDirection, meth_QTextInlineObject_textDirection, METH_VARARGS, doc_QTextInlineObject_textDirection},
    {sipName_textPosition, meth_QTextInlineObject_textPosition, METH_VARARGS, doc_QTextInlineObject_textPosition},
    {sipName_width, meth_QTextInlineObject_width, METH_VARARGS, doc_QTextInlineObject_width}
};

PyDoc_STRVAR(doc_QTextInlineObject, "\1QTextInlineObject()\n"
"QTextInlineObject(QTextInlineObject)");


static pyqt5ClassPluginDef plugin_QTextInlineObject = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextInlineObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextInlineObject,
        SIP_NULLPTR,
        &plugin_QTextInlineObject
    },
    {
        sipNameNr_QTextInlineObject,
        {0, 0, 1},
        13, methods_QTextInlineObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextInlineObject,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextInlineObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextInlineObject,
    assign_QTextInlineObject,
    array_QTextInlineObject,
    copy_QTextInlineObject,
    release_QTextInlineObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
