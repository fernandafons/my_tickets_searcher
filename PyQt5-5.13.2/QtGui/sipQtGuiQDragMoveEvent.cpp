/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 583 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQDragMoveEvent.cpp"


class sipQDragMoveEvent : public  ::QDragMoveEvent
{
public:
    sipQDragMoveEvent(const  ::QPoint&, ::Qt::DropActions,const  ::QMimeData*, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::QEvent::Type);
    sipQDragMoveEvent(const  ::QDragMoveEvent&);
    ~sipQDragMoveEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDragMoveEvent(const sipQDragMoveEvent &);
    sipQDragMoveEvent &operator = (const sipQDragMoveEvent &);
};

sipQDragMoveEvent::sipQDragMoveEvent(const  ::QPoint& a0, ::Qt::DropActions a1,const  ::QMimeData*a2, ::Qt::MouseButtons a3, ::Qt::KeyboardModifiers a4, ::QEvent::Type a5):  ::QDragMoveEvent(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
}

sipQDragMoveEvent::sipQDragMoveEvent(const  ::QDragMoveEvent& a0):  ::QDragMoveEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDragMoveEvent::~sipQDragMoveEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QDragMoveEvent_answerRect, "answerRect(self) -> QRect");

extern "C" {static PyObject *meth_QDragMoveEvent_answerRect(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_answerRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->answerRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_answerRect, doc_QDragMoveEvent_answerRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDragMoveEvent_accept, "accept(self)\n"
"accept(self, QRect)");

extern "C" {static PyObject *meth_QDragMoveEvent_accept(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDragMoveEvent, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->accept(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_accept, doc_QDragMoveEvent_accept);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDragMoveEvent_ignore, "ignore(self)\n"
"ignore(self, QRect)");

extern "C" {static PyObject *meth_QDragMoveEvent_ignore(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
            sipCpp->ignore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDragMoveEvent, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->ignore(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_ignore, doc_QDragMoveEvent_ignore);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDragMoveEvent(void *, const sipTypeDef *);}
static void *cast_QDragMoveEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDragMoveEvent *sipCpp = reinterpret_cast< ::QDragMoveEvent *>(sipCppV);

    if (targetType == sipType_QDropEvent)
        return static_cast< ::QDropEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDragMoveEvent(void *, int);}
static void release_QDragMoveEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDragMoveEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDragMoveEvent *>(sipCppV);
}


extern "C" {static void assign_QDragMoveEvent(void *, Py_ssize_t, void *);}
static void assign_QDragMoveEvent(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDragMoveEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDragMoveEvent *>(sipSrc);
}


extern "C" {static void *copy_QDragMoveEvent(const void *, Py_ssize_t);}
static void *copy_QDragMoveEvent(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QDragMoveEvent(reinterpret_cast<const  ::QDragMoveEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDragMoveEvent(sipSimpleWrapper *);}
static void dealloc_QDragMoveEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDragMoveEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDragMoveEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDragMoveEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDragMoveEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDragMoveEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::Qt::DropActions* a1;
        int a1State = 0;
        const  ::QMimeData* a2;
         ::Qt::MouseButtons* a3;
        int a3State = 0;
         ::Qt::KeyboardModifiers* a4;
        int a4State = 0;
         ::QEvent::Type a5 = QEvent::DragMove;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1J8J1J1|E", sipType_QPoint, &a0, sipType_Qt_DropActions, &a1, &a1State, sipType_QMimeData, &a2, sipType_Qt_MouseButtons, &a3, &a3State, sipType_Qt_KeyboardModifiers, &a4, &a4State, sipType_QEvent_Type, &a5))
        {
            sipCpp = new sipQDragMoveEvent(*a0,*a1,a2,*a3,*a4,a5);
            sipReleaseType(a1,sipType_Qt_DropActions,a1State);
            sipReleaseType(a3,sipType_Qt_MouseButtons,a3State);
            sipReleaseType(a4,sipType_Qt_KeyboardModifiers,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDragMoveEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDragMoveEvent, &a0))
        {
            sipCpp = new sipQDragMoveEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDragMoveEvent[] = {{26, 255, 1}};


static PyMethodDef methods_QDragMoveEvent[] = {
    {sipName_accept, meth_QDragMoveEvent_accept, METH_VARARGS, doc_QDragMoveEvent_accept},
    {sipName_answerRect, meth_QDragMoveEvent_answerRect, METH_VARARGS, doc_QDragMoveEvent_answerRect},
    {sipName_ignore, meth_QDragMoveEvent_ignore, METH_VARARGS, doc_QDragMoveEvent_ignore}
};

PyDoc_STRVAR(doc_QDragMoveEvent, "\1QDragMoveEvent(QPoint, Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], type: QEvent.Type = QEvent.DragMove)\n"
"QDragMoveEvent(QDragMoveEvent)");


static pyqt5ClassPluginDef plugin_QDragMoveEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDragMoveEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDragMoveEvent,
        SIP_NULLPTR,
        &plugin_QDragMoveEvent
    },
    {
        sipNameNr_QDragMoveEvent,
        {0, 0, 1},
        3, methods_QDragMoveEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDragMoveEvent,
    -1,
    -1,
    supers_QDragMoveEvent,
    SIP_NULLPTR,
    init_type_QDragMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QDragMoveEvent,
    assign_QDragMoveEvent,
    SIP_NULLPTR,
    copy_QDragMoveEvent,
    release_QDragMoveEvent,
    cast_QDragMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
