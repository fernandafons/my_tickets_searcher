/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 73 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 46 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 1073 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 927 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 781 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 632 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 483 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 331 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 179 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 137 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 143 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 152 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"


class sipQOpenGLShaderProgram : public  ::QOpenGLShaderProgram
{
public:
    sipQOpenGLShaderProgram( ::QObject*);
    virtual ~sipQOpenGLShaderProgram();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool link() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLShaderProgram(const sipQOpenGLShaderProgram &);
    sipQOpenGLShaderProgram &operator = (const sipQOpenGLShaderProgram &);

    char sipPyMethods[8];
};

sipQOpenGLShaderProgram::sipQOpenGLShaderProgram( ::QObject*a0):  ::QOpenGLShaderProgram(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLShaderProgram::~sipQOpenGLShaderProgram()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLShaderProgram::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLShaderProgram);

    return  ::QOpenGLShaderProgram::metaObject();
}

int sipQOpenGLShaderProgram::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLShaderProgram::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLShaderProgram,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQOpenGLShaderProgram::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLShaderProgram, _clname, &sipCpp) ? sipCpp :  ::QOpenGLShaderProgram::qt_metacast(_clname));
}

bool sipQOpenGLShaderProgram::link()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_link);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_link);
#endif

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::link();

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQOpenGLShaderProgram::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLShaderProgram::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLShaderProgram::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShader, "addShader(self, QOpenGLShader) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader* a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addShader(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShader, doc_QOpenGLShaderProgram_addShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeShader, "removeShader(self, QOpenGLShader)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader* a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            sipCpp->removeShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeShader, doc_QOpenGLShaderProgram_removeShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_shaders, "shaders(self) -> List[QOpenGLShader]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QList< ::QOpenGLShader*>*sipRes;

            sipRes = new QList< ::QOpenGLShader*>(sipCpp->shaders());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QOpenGLShader,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_shaders, doc_QOpenGLShaderProgram_shaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceCode, "addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool\n"
"addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceCode, doc_QOpenGLShaderProgram_addShaderFromSourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceFile, "addShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceFile, doc_QOpenGLShaderProgram_addShaderFromSourceFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeAllShaders, "removeAllShaders(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->removeAllShaders();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeAllShaders, doc_QOpenGLShaderProgram_removeAllShaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_link, "link(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_link(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOpenGLShaderProgram::link() : sipCpp->link());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_link, doc_QOpenGLShaderProgram_link);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_isLinked, "isLinked(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLinked();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_isLinked, doc_QOpenGLShaderProgram_isLinked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_log, "log(self) -> str");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_log(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->log());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_log, doc_QOpenGLShaderProgram_log);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bind();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bind, doc_QOpenGLShaderProgram_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_release, doc_QOpenGLShaderProgram_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_programId, "programId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->programId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_programId, doc_QOpenGLShaderProgram_programId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bindAttributeLocation, "bindAttributeLocation(self, Union[QByteArray, bytes, bytearray], int)\n"
"bindAttributeLocation(self, str, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bindAttributeLocation, doc_QOpenGLShaderProgram_bindAttributeLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_attributeLocation, "attributeLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
"attributeLocation(self, str) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_attributeLocation, doc_QOpenGLShaderProgram_attributeLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeValue, "setAttributeValue(self, int, float)\n"
"setAttributeValue(self, int, float, float)\n"
"setAttributeValue(self, int, float, float, float)\n"
"setAttributeValue(self, int, float, float, float, float)\n"
"setAttributeValue(self, int, QVector2D)\n"
"setAttributeValue(self, int, QVector3D)\n"
"setAttributeValue(self, int, QVector4D)\n"
"setAttributeValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setAttributeValue(self, str, float)\n"
"setAttributeValue(self, str, float, float)\n"
"setAttributeValue(self, str, float, float, float)\n"
"setAttributeValue(self, str, float, float, float, float)\n"
"setAttributeValue(self, str, QVector2D)\n"
"setAttributeValue(self, str, QVector3D)\n"
"setAttributeValue(self, str, QVector4D)\n"
"setAttributeValue(self, str, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeValue, doc_QOpenGLShaderProgram_setAttributeValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeArray, "setAttributeArray(self, int, PYQT_SHADER_ATTRIBUTE_ARRAY)\n"
"setAttributeArray(self, str, PYQT_SHADER_ATTRIBUTE_ARRAY)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPLong_FromLong(a0), &tsize,
                &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 1185 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPBytes_FromString(a0),
                &tsize, &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 1219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeArray, doc_QOpenGLShaderProgram_setAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeBuffer, "setAttributeBuffer(self, int, int, int, int, stride: int = 0)\n"
"setAttributeBuffer(self, str, int, int, int, stride: int = 0)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BAAuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeBuffer, doc_QOpenGLShaderProgram_setAttributeBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_enableAttributeArray, "enableAttributeArray(self, int)\n"
"enableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->enableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->enableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_enableAttributeArray, doc_QOpenGLShaderProgram_enableAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_disableAttributeArray, "disableAttributeArray(self, int)\n"
"disableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->disableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->disableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_disableAttributeArray, doc_QOpenGLShaderProgram_disableAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_uniformLocation, "uniformLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
"uniformLocation(self, str) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_uniformLocation, doc_QOpenGLShaderProgram_uniformLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValue, "setUniformValue(self, int, int)\n"
"setUniformValue(self, int, float)\n"
"setUniformValue(self, int, float, float)\n"
"setUniformValue(self, int, float, float, float)\n"
"setUniformValue(self, int, float, float, float, float)\n"
"setUniformValue(self, int, QVector2D)\n"
"setUniformValue(self, int, QVector3D)\n"
"setUniformValue(self, int, QVector4D)\n"
"setUniformValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setUniformValue(self, int, QPoint)\n"
"setUniformValue(self, int, Union[QPointF, QPoint])\n"
"setUniformValue(self, int, QSize)\n"
"setUniformValue(self, int, QSizeF)\n"
"setUniformValue(self, int, QMatrix2x2)\n"
"setUniformValue(self, int, QMatrix2x3)\n"
"setUniformValue(self, int, QMatrix2x4)\n"
"setUniformValue(self, int, QMatrix3x2)\n"
"setUniformValue(self, int, QMatrix3x3)\n"
"setUniformValue(self, int, QMatrix3x4)\n"
"setUniformValue(self, int, QMatrix4x2)\n"
"setUniformValue(self, int, QMatrix4x3)\n"
"setUniformValue(self, int, QMatrix4x4)\n"
"setUniformValue(self, int, QTransform)\n"
"setUniformValue(self, str, int)\n"
"setUniformValue(self, str, float)\n"
"setUniformValue(self, str, float, float)\n"
"setUniformValue(self, str, float, float, float)\n"
"setUniformValue(self, str, float, float, float, float)\n"
"setUniformValue(self, str, QVector2D)\n"
"setUniformValue(self, str, QVector3D)\n"
"setUniformValue(self, str, QVector4D)\n"
"setUniformValue(self, str, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setUniformValue(self, str, QPoint)\n"
"setUniformValue(self, str, Union[QPointF, QPoint])\n"
"setUniformValue(self, str, QSize)\n"
"setUniformValue(self, str, QSizeF)\n"
"setUniformValue(self, str, QMatrix2x2)\n"
"setUniformValue(self, str, QMatrix2x3)\n"
"setUniformValue(self, str, QMatrix2x4)\n"
"setUniformValue(self, str, QMatrix3x2)\n"
"setUniformValue(self, str, QMatrix3x3)\n"
"setUniformValue(self, str, QMatrix3x4)\n"
"setUniformValue(self, str, QMatrix4x2)\n"
"setUniformValue(self, str, QMatrix4x3)\n"
"setUniformValue(self, str, QMatrix4x4)\n"
"setUniformValue(self, str, QTransform)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLint a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSize* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSizeF* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QTransform* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLint a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QPoint* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QSize* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QSizeF* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QTransform* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValue, doc_QOpenGLShaderProgram_setUniformValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValueArray, "setUniformValueArray(self, int, PYQT_SHADER_UNIFORM_VALUE_ARRAY)\n"
"setUniformValueArray(self, str, PYQT_SHADER_UNIFORM_VALUE_ARRAY)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPLong_FromLong(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 2328 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPBytes_FromString(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 2403 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValueArray, doc_QOpenGLShaderProgram_setUniformValueArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms, "hasOpenGLShaderPrograms(context: QOpenGLContext = None) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8", sipType_QOpenGLContext, &a0))
        {
            bool sipRes;

            sipRes =  ::QOpenGLShaderProgram::hasOpenGLShaderPrograms(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_hasOpenGLShaderPrograms, doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_maxGeometryOutputVertices, "maxGeometryOutputVertices(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxGeometryOutputVertices();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_maxGeometryOutputVertices, doc_QOpenGLShaderProgram_maxGeometryOutputVertices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setPatchVertexCount, "setPatchVertexCount(self, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->setPatchVertexCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setPatchVertexCount, doc_QOpenGLShaderProgram_setPatchVertexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_patchVertexCount, "patchVertexCount(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->patchVertexCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_patchVertexCount, doc_QOpenGLShaderProgram_patchVertexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, "setDefaultOuterTessellationLevels(self, Iterable[float])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<float>* a0;
        int a0State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultOuterTessellationLevels(*a0);
            sipReleaseType(const_cast< ::QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultOuterTessellationLevels, doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultOuterTessellationLevels, "defaultOuterTessellationLevels(self) -> List[float]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QVector<float>*sipRes;

            sipRes = new  ::QVector<float>(sipCpp->defaultOuterTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultOuterTessellationLevels, doc_QOpenGLShaderProgram_defaultOuterTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, "setDefaultInnerTessellationLevels(self, Iterable[float])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<float>* a0;
        int a0State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultInnerTessellationLevels(*a0);
            sipReleaseType(const_cast< ::QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultInnerTessellationLevels, doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultInnerTessellationLevels, "defaultInnerTessellationLevels(self) -> List[float]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QVector<float>*sipRes;

            sipRes = new  ::QVector<float>(sipCpp->defaultInnerTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultInnerTessellationLevels, doc_QOpenGLShaderProgram_defaultInnerTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_create, doc_QOpenGLShaderProgram_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode, "addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool\n"
"addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addCacheableShaderFromSourceCode, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile, "addCacheableShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addCacheableShaderFromSourceFile, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLShaderProgram(void *, const sipTypeDef *);}
static void *cast_QOpenGLShaderProgram(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLShaderProgram *sipCpp = reinterpret_cast< ::QOpenGLShaderProgram *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLShaderProgram(void *, int);}
static void release_QOpenGLShaderProgram(void *sipCppV, int)
{
     ::QOpenGLShaderProgram *sipCpp = reinterpret_cast< ::QOpenGLShaderProgram *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QOpenGLShaderProgram(Py_ssize_t);}
static void *array_QOpenGLShaderProgram(Py_ssize_t sipNrElem)
{
    return new  ::QOpenGLShaderProgram[sipNrElem];
}


extern "C" {static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *);}
static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLShaderProgram *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLShaderProgram(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLShaderProgram *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLShaderProgram(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLShaderProgram[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLShaderProgram[] = {
    {sipName_addCacheableShaderFromSourceCode, meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode, METH_VARARGS, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode},
    {sipName_addCacheableShaderFromSourceFile, meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile, METH_VARARGS, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile},
    {sipName_addShader, meth_QOpenGLShaderProgram_addShader, METH_VARARGS, doc_QOpenGLShaderProgram_addShader},
    {sipName_addShaderFromSourceCode, meth_QOpenGLShaderProgram_addShaderFromSourceCode, METH_VARARGS, doc_QOpenGLShaderProgram_addShaderFromSourceCode},
    {sipName_addShaderFromSourceFile, meth_QOpenGLShaderProgram_addShaderFromSourceFile, METH_VARARGS, doc_QOpenGLShaderProgram_addShaderFromSourceFile},
    {sipName_attributeLocation, meth_QOpenGLShaderProgram_attributeLocation, METH_VARARGS, doc_QOpenGLShaderProgram_attributeLocation},
    {sipName_bind, meth_QOpenGLShaderProgram_bind, METH_VARARGS, doc_QOpenGLShaderProgram_bind},
    {sipName_bindAttributeLocation, meth_QOpenGLShaderProgram_bindAttributeLocation, METH_VARARGS, doc_QOpenGLShaderProgram_bindAttributeLocation},
    {sipName_create, meth_QOpenGLShaderProgram_create, METH_VARARGS, doc_QOpenGLShaderProgram_create},
    {sipName_defaultInnerTessellationLevels, meth_QOpenGLShaderProgram_defaultInnerTessellationLevels, METH_VARARGS, doc_QOpenGLShaderProgram_defaultInnerTessellationLevels},
    {sipName_defaultOuterTessellationLevels, meth_QOpenGLShaderProgram_defaultOuterTessellationLevels, METH_VARARGS, doc_QOpenGLShaderProgram_defaultOuterTessellationLevels},
    {sipName_disableAttributeArray, meth_QOpenGLShaderProgram_disableAttributeArray, METH_VARARGS, doc_QOpenGLShaderProgram_disableAttributeArray},
    {sipName_enableAttributeArray, meth_QOpenGLShaderProgram_enableAttributeArray, METH_VARARGS, doc_QOpenGLShaderProgram_enableAttributeArray},
    {sipName_hasOpenGLShaderPrograms, SIP_MLMETH_CAST(meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms), METH_VARARGS|METH_KEYWORDS, doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms},
    {sipName_isLinked, meth_QOpenGLShaderProgram_isLinked, METH_VARARGS, doc_QOpenGLShaderProgram_isLinked},
    {sipName_link, meth_QOpenGLShaderProgram_link, METH_VARARGS, doc_QOpenGLShaderProgram_link},
    {sipName_log, meth_QOpenGLShaderProgram_log, METH_VARARGS, doc_QOpenGLShaderProgram_log},
    {sipName_maxGeometryOutputVertices, meth_QOpenGLShaderProgram_maxGeometryOutputVertices, METH_VARARGS, doc_QOpenGLShaderProgram_maxGeometryOutputVertices},
    {sipName_patchVertexCount, meth_QOpenGLShaderProgram_patchVertexCount, METH_VARARGS, doc_QOpenGLShaderProgram_patchVertexCount},
    {sipName_programId, meth_QOpenGLShaderProgram_programId, METH_VARARGS, doc_QOpenGLShaderProgram_programId},
    {sipName_release, meth_QOpenGLShaderProgram_release, METH_VARARGS, doc_QOpenGLShaderProgram_release},
    {sipName_removeAllShaders, meth_QOpenGLShaderProgram_removeAllShaders, METH_VARARGS, doc_QOpenGLShaderProgram_removeAllShaders},
    {sipName_removeShader, meth_QOpenGLShaderProgram_removeShader, METH_VARARGS, doc_QOpenGLShaderProgram_removeShader},
    {sipName_setAttributeArray, meth_QOpenGLShaderProgram_setAttributeArray, METH_VARARGS, doc_QOpenGLShaderProgram_setAttributeArray},
    {sipName_setAttributeBuffer, SIP_MLMETH_CAST(meth_QOpenGLShaderProgram_setAttributeBuffer), METH_VARARGS|METH_KEYWORDS, doc_QOpenGLShaderProgram_setAttributeBuffer},
    {sipName_setAttributeValue, meth_QOpenGLShaderProgram_setAttributeValue, METH_VARARGS, doc_QOpenGLShaderProgram_setAttributeValue},
    {sipName_setDefaultInnerTessellationLevels, meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, METH_VARARGS, doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels},
    {sipName_setDefaultOuterTessellationLevels, meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, METH_VARARGS, doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels},
    {sipName_setPatchVertexCount, meth_QOpenGLShaderProgram_setPatchVertexCount, METH_VARARGS, doc_QOpenGLShaderProgram_setPatchVertexCount},
    {sipName_setUniformValue, meth_QOpenGLShaderProgram_setUniformValue, METH_VARARGS, doc_QOpenGLShaderProgram_setUniformValue},
    {sipName_setUniformValueArray, meth_QOpenGLShaderProgram_setUniformValueArray, METH_VARARGS, doc_QOpenGLShaderProgram_setUniformValueArray},
    {sipName_shaders, meth_QOpenGLShaderProgram_shaders, METH_VARARGS, doc_QOpenGLShaderProgram_shaders},
    {sipName_uniformLocation, meth_QOpenGLShaderProgram_uniformLocation, METH_VARARGS, doc_QOpenGLShaderProgram_uniformLocation}
};

PyDoc_STRVAR(doc_QOpenGLShaderProgram, "\1QOpenGLShaderProgram(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QOpenGLShaderProgram = {
    & ::QOpenGLShaderProgram::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLShaderProgram = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLShaderProgram,
        SIP_NULLPTR,
        &plugin_QOpenGLShaderProgram
    },
    {
        sipNameNr_QOpenGLShaderProgram,
        {0, 0, 1},
        33, methods_QOpenGLShaderProgram,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLShaderProgram,
    -1,
    -1,
    supers_QOpenGLShaderProgram,
    SIP_NULLPTR,
    init_type_QOpenGLShaderProgram,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QOpenGLShaderProgram,
    SIP_NULLPTR,
    array_QOpenGLShaderProgram,
    SIP_NULLPTR,
    release_QOpenGLShaderProgram,
    cast_QOpenGLShaderProgram,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
