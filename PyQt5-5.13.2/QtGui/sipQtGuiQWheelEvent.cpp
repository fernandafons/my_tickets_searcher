/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 253 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWheelEvent.cpp"


class sipQWheelEvent : public  ::QWheelEvent
{
public:
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase, ::Qt::MouseEventSource);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase, ::Qt::MouseEventSource,bool);
    sipQWheelEvent( ::QPointF, ::QPointF, ::QPoint, ::QPoint, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase,bool, ::Qt::MouseEventSource);
    sipQWheelEvent(const  ::QWheelEvent&);
    ~sipQWheelEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWheelEvent(const sipQWheelEvent &);
    sipQWheelEvent &operator = (const sipQWheelEvent &);
};

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8, ::Qt::MouseEventSource a9):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8, ::Qt::MouseEventSource a9,bool a10):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent( ::QPointF a0, ::QPointF a1, ::QPoint a2, ::QPoint a3, ::Qt::MouseButtons a4, ::Qt::KeyboardModifiers a5, ::Qt::ScrollPhase a6,bool a7, ::Qt::MouseEventSource a8):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QWheelEvent& a0):  ::QWheelEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::~sipQWheelEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QWheelEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pos, doc_QWheelEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPos, doc_QWheelEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_x, doc_QWheelEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_y, doc_QWheelEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalX, doc_QWheelEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalY, doc_QWheelEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_buttons, "buttons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QWheelEvent_buttons(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_buttons, doc_QWheelEvent_buttons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_pixelDelta, "pixelDelta(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pixelDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pixelDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pixelDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pixelDelta, doc_QWheelEvent_pixelDelta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_angleDelta, "angleDelta(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_angleDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_angleDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->angleDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_angleDelta, doc_QWheelEvent_angleDelta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_posF, "posF(self) -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_posF, doc_QWheelEvent_posF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPosF, "globalPosF(self) -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_globalPosF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->globalPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPosF, doc_QWheelEvent_globalPosF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_phase, "phase(self) -> Qt.ScrollPhase");

extern "C" {static PyObject *meth_QWheelEvent_phase(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_phase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::ScrollPhase sipRes;

            sipRes = sipCpp->phase();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScrollPhase);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_phase, doc_QWheelEvent_phase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_source, "source(self) -> Qt.MouseEventSource");

extern "C" {static PyObject *meth_QWheelEvent_source(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::MouseEventSource sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseEventSource);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_source, doc_QWheelEvent_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_inverted, "inverted(self) -> bool");

extern "C" {static PyObject *meth_QWheelEvent_inverted(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_inverted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->inverted();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_inverted, doc_QWheelEvent_inverted);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWheelEvent(void *, const sipTypeDef *);}
static void *cast_QWheelEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWheelEvent *sipCpp = reinterpret_cast< ::QWheelEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWheelEvent(void *, int);}
static void release_QWheelEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWheelEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QWheelEvent *>(sipCppV);
}


extern "C" {static void assign_QWheelEvent(void *, Py_ssize_t, void *);}
static void assign_QWheelEvent(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QWheelEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QWheelEvent *>(sipSrc);
}


extern "C" {static void *copy_QWheelEvent(const void *, Py_ssize_t);}
static void *copy_QWheelEvent(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QWheelEvent(reinterpret_cast<const  ::QWheelEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWheelEvent(sipSimpleWrapper *);}
static void dealloc_QWheelEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWheelEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWheelEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWheelEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWheelEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQWheelEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;
         ::Qt::MouseEventSource a9;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1EE", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8, sipType_Qt_MouseEventSource, &a9))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8,a9);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;
         ::Qt::MouseEventSource a9;
        bool a10;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1EEb", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8, sipType_Qt_MouseEventSource, &a9, &a10))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8,a9,a10);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QPointF* a0;
        int a0State = 0;
         ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
         ::Qt::MouseButtons* a4;
        int a4State = 0;
         ::Qt::KeyboardModifiers* a5;
        int a5State = 0;
         ::Qt::ScrollPhase a6;
        bool a7;
         ::Qt::MouseEventSource a8 = Qt::MouseEventNotSynthesized;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_source,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1J9J9J1J1Eb|E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, sipType_Qt_MouseButtons, &a4, &a4State, sipType_Qt_KeyboardModifiers, &a5, &a5State, sipType_Qt_ScrollPhase, &a6, &a7, sipType_Qt_MouseEventSource, &a8))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,*a4,*a5,a6,a7,a8);
            sipReleaseType(a0,sipType_QPointF,a0State);
            sipReleaseType(a1,sipType_QPointF,a1State);
            sipReleaseType(a4,sipType_Qt_MouseButtons,a4State);
            sipReleaseType(a5,sipType_Qt_KeyboardModifiers,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QWheelEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QWheelEvent, &a0))
        {
            sipCpp = new sipQWheelEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWheelEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QWheelEvent[] = {
    {sipName_angleDelta, meth_QWheelEvent_angleDelta, METH_VARARGS, doc_QWheelEvent_angleDelta},
    {sipName_buttons, meth_QWheelEvent_buttons, METH_VARARGS, doc_QWheelEvent_buttons},
    {sipName_globalPos, meth_QWheelEvent_globalPos, METH_VARARGS, doc_QWheelEvent_globalPos},
    {sipName_globalPosF, meth_QWheelEvent_globalPosF, METH_VARARGS, doc_QWheelEvent_globalPosF},
    {sipName_globalX, meth_QWheelEvent_globalX, METH_VARARGS, doc_QWheelEvent_globalX},
    {sipName_globalY, meth_QWheelEvent_globalY, METH_VARARGS, doc_QWheelEvent_globalY},
    {sipName_inverted, meth_QWheelEvent_inverted, METH_VARARGS, doc_QWheelEvent_inverted},
    {sipName_phase, meth_QWheelEvent_phase, METH_VARARGS, doc_QWheelEvent_phase},
    {sipName_pixelDelta, meth_QWheelEvent_pixelDelta, METH_VARARGS, doc_QWheelEvent_pixelDelta},
    {sipName_pos, meth_QWheelEvent_pos, METH_VARARGS, doc_QWheelEvent_pos},
    {sipName_posF, meth_QWheelEvent_posF, METH_VARARGS, doc_QWheelEvent_posF},
    {sipName_source, meth_QWheelEvent_source, METH_VARARGS, doc_QWheelEvent_source},
    {sipName_x, meth_QWheelEvent_x, METH_VARARGS, doc_QWheelEvent_x},
    {sipName_y, meth_QWheelEvent_y, METH_VARARGS, doc_QWheelEvent_y}
};

PyDoc_STRVAR(doc_QWheelEvent, "\1QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource, bool)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, bool, source: Qt.MouseEventSource = Qt.MouseEventNotSynthesized)\n"
"QWheelEvent(QWheelEvent)");


static pyqt5ClassPluginDef plugin_QWheelEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWheelEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWheelEvent,
        SIP_NULLPTR,
        &plugin_QWheelEvent
    },
    {
        sipNameNr_QWheelEvent,
        {0, 0, 1},
        14, methods_QWheelEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWheelEvent,
    -1,
    -1,
    supers_QWheelEvent,
    SIP_NULLPTR,
    init_type_QWheelEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QWheelEvent,
    assign_QWheelEvent,
    SIP_NULLPTR,
    copy_QWheelEvent,
    release_QWheelEvent,
    cast_QWheelEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
