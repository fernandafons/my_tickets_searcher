/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbackingstore.sip"
#include <qbackingstore.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQBackingStore.cpp"


PyDoc_STRVAR(doc_QBackingStore_window, "window(self) -> QWindow");

extern "C" {static PyObject *meth_QBackingStore_window(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_window, doc_QBackingStore_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_paintDevice, "paintDevice(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QBackingStore_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_paintDevice, doc_QBackingStore_paintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_flush, "flush(self, QRegion, window: QWindow = None, offset: QPoint = QPoint())");

extern "C" {static PyObject *meth_QBackingStore_flush(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_flush(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QWindow* a1 = 0;
        const  ::QPoint& a2def = QPoint();
        const  ::QPoint* a2 = &a2def;
         ::QBackingStore *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_window,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J8J9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0, sipType_QWindow, &a1, sipType_QPoint, &a2))
        {
            sipCpp->flush(*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_flush, doc_QBackingStore_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_resize, "resize(self, QSize)");

extern "C" {static PyObject *meth_QBackingStore_resize(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_resize, doc_QBackingStore_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QBackingStore_size(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_size, doc_QBackingStore_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_scroll, "scroll(self, QRegion, int, int) -> bool");

extern "C" {static PyObject *meth_QBackingStore_scroll(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_scroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        int a1;
        int a2;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->scroll(*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_scroll, doc_QBackingStore_scroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_beginPaint, "beginPaint(self, QRegion)");

extern "C" {static PyObject *meth_QBackingStore_beginPaint(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_beginPaint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->beginPaint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_beginPaint, doc_QBackingStore_beginPaint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_endPaint, "endPaint(self)");

extern "C" {static PyObject *meth_QBackingStore_endPaint(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_endPaint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
            sipCpp->endPaint();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_endPaint, doc_QBackingStore_endPaint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_setStaticContents, "setStaticContents(self, QRegion)");

extern "C" {static PyObject *meth_QBackingStore_setStaticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_setStaticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setStaticContents(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_setStaticContents, doc_QBackingStore_setStaticContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_staticContents, "staticContents(self) -> QRegion");

extern "C" {static PyObject *meth_QBackingStore_staticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_staticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->staticContents());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_staticContents, doc_QBackingStore_staticContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_hasStaticContents, "hasStaticContents(self) -> bool");

extern "C" {static PyObject *meth_QBackingStore_hasStaticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_hasStaticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasStaticContents();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_hasStaticContents, doc_QBackingStore_hasStaticContents);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBackingStore(void *, int);}
static void release_QBackingStore(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBackingStore *>(sipCppV);
}


extern "C" {static void dealloc_QBackingStore(sipSimpleWrapper *);}
static void dealloc_QBackingStore(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBackingStore(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBackingStore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBackingStore(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBackingStore *sipCpp = SIP_NULLPTR;

    {
         ::QWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QWindow, &a0))
        {
            sipCpp = new  ::QBackingStore(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QBackingStore[] = {
    {sipName_beginPaint, meth_QBackingStore_beginPaint, METH_VARARGS, doc_QBackingStore_beginPaint},
    {sipName_endPaint, meth_QBackingStore_endPaint, METH_VARARGS, doc_QBackingStore_endPaint},
    {sipName_flush, SIP_MLMETH_CAST(meth_QBackingStore_flush), METH_VARARGS|METH_KEYWORDS, doc_QBackingStore_flush},
    {sipName_hasStaticContents, meth_QBackingStore_hasStaticContents, METH_VARARGS, doc_QBackingStore_hasStaticContents},
    {sipName_paintDevice, meth_QBackingStore_paintDevice, METH_VARARGS, doc_QBackingStore_paintDevice},
    {sipName_resize, meth_QBackingStore_resize, METH_VARARGS, doc_QBackingStore_resize},
    {sipName_scroll, meth_QBackingStore_scroll, METH_VARARGS, doc_QBackingStore_scroll},
    {sipName_setStaticContents, meth_QBackingStore_setStaticContents, METH_VARARGS, doc_QBackingStore_setStaticContents},
    {sipName_size, meth_QBackingStore_size, METH_VARARGS, doc_QBackingStore_size},
    {sipName_staticContents, meth_QBackingStore_staticContents, METH_VARARGS, doc_QBackingStore_staticContents},
    {sipName_window, meth_QBackingStore_window, METH_VARARGS, doc_QBackingStore_window}
};

PyDoc_STRVAR(doc_QBackingStore, "\1QBackingStore(QWindow)");


static pyqt5ClassPluginDef plugin_QBackingStore = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QBackingStore = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBackingStore,
        SIP_NULLPTR,
        &plugin_QBackingStore
    },
    {
        sipNameNr_QBackingStore,
        {0, 0, 1},
        11, methods_QBackingStore,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBackingStore,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
