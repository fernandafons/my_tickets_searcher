/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLVersionProfile.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLVersionProfile.cpp"
#line 250 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLVersionProfile.cpp"


PyDoc_STRVAR(doc_QOpenGLVersionProfile_version, "version(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_version(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
             ::QPair<int,int>*sipRes;

            sipRes = new  ::QPair<int,int>(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_version, doc_QOpenGLVersionProfile_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_setVersion, "setVersion(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_setVersion, doc_QOpenGLVersionProfile_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_profile, "profile(self) -> QSurfaceFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_profile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
             ::QSurfaceFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_OpenGLContextProfile);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_profile, doc_QOpenGLVersionProfile_profile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_setProfile, "setProfile(self, QSurfaceFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::OpenGLContextProfile a0;
         ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp, sipType_QSurfaceFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_setProfile, doc_QOpenGLVersionProfile_setProfile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_hasProfiles, "hasProfiles(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_hasProfiles(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_hasProfiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasProfiles();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_hasProfiles, doc_QOpenGLVersionProfile_hasProfiles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_isLegacyVersion, "isLegacyVersion(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_isLegacyVersion(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_isLegacyVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLegacyVersion();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_isLegacyVersion, doc_QOpenGLVersionProfile_isLegacyVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_isValid, doc_QOpenGLVersionProfile_isValid);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOpenGLVersionProfile___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLVersionProfile___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLVersionProfile *sipCpp = reinterpret_cast< ::QOpenGLVersionProfile *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLVersionProfile));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLVersionProfile, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLVersionProfile, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLVersionProfile___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLVersionProfile___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLVersionProfile *sipCpp = reinterpret_cast< ::QOpenGLVersionProfile *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLVersionProfile));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLVersionProfile, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLVersionProfile, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLVersionProfile(void *, int);}
static void release_QOpenGLVersionProfile(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLVersionProfile *>(sipCppV);
}


extern "C" {static void *array_QOpenGLVersionProfile(Py_ssize_t);}
static void *array_QOpenGLVersionProfile(Py_ssize_t sipNrElem)
{
    return new  ::QOpenGLVersionProfile[sipNrElem];
}


extern "C" {static void assign_QOpenGLVersionProfile(void *, Py_ssize_t, void *);}
static void assign_QOpenGLVersionProfile(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLVersionProfile *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLVersionProfile *>(sipSrc);
}


extern "C" {static void *copy_QOpenGLVersionProfile(const void *, Py_ssize_t);}
static void *copy_QOpenGLVersionProfile(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QOpenGLVersionProfile(reinterpret_cast<const  ::QOpenGLVersionProfile *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLVersionProfile(sipSimpleWrapper *);}
static void dealloc_QOpenGLVersionProfile(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLVersionProfile(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLVersionProfile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLVersionProfile(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLVersionProfile *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLVersionProfile();

            return sipCpp;
        }
    }

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSurfaceFormat, &a0))
        {
            sipCpp = new  ::QOpenGLVersionProfile(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLVersionProfile, &a0))
        {
            sipCpp = new  ::QOpenGLVersionProfile(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLVersionProfile[] = {
    {(void *)slot_QOpenGLVersionProfile___eq__, eq_slot},
    {(void *)slot_QOpenGLVersionProfile___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLVersionProfile[] = {
    {sipName_hasProfiles, meth_QOpenGLVersionProfile_hasProfiles, METH_VARARGS, doc_QOpenGLVersionProfile_hasProfiles},
    {sipName_isLegacyVersion, meth_QOpenGLVersionProfile_isLegacyVersion, METH_VARARGS, doc_QOpenGLVersionProfile_isLegacyVersion},
    {sipName_isValid, meth_QOpenGLVersionProfile_isValid, METH_VARARGS, doc_QOpenGLVersionProfile_isValid},
    {sipName_profile, meth_QOpenGLVersionProfile_profile, METH_VARARGS, doc_QOpenGLVersionProfile_profile},
    {sipName_setProfile, meth_QOpenGLVersionProfile_setProfile, METH_VARARGS, doc_QOpenGLVersionProfile_setProfile},
    {sipName_setVersion, meth_QOpenGLVersionProfile_setVersion, METH_VARARGS, doc_QOpenGLVersionProfile_setVersion},
    {sipName_version, meth_QOpenGLVersionProfile_version, METH_VARARGS, doc_QOpenGLVersionProfile_version}
};

PyDoc_STRVAR(doc_QOpenGLVersionProfile, "\1QOpenGLVersionProfile()\n"
"QOpenGLVersionProfile(QSurfaceFormat)\n"
"QOpenGLVersionProfile(QOpenGLVersionProfile)");


static pyqt5ClassPluginDef plugin_QOpenGLVersionProfile = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLVersionProfile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLVersionProfile,
        SIP_NULLPTR,
        &plugin_QOpenGLVersionProfile
    },
    {
        sipNameNr_QOpenGLVersionProfile,
        {0, 0, 1},
        7, methods_QOpenGLVersionProfile,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLVersionProfile,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLVersionProfile,
    init_type_QOpenGLVersionProfile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QOpenGLVersionProfile,
    assign_QOpenGLVersionProfile,
    array_QOpenGLVersionProfile,
    copy_QOpenGLVersionProfile,
    release_QOpenGLVersionProfile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
