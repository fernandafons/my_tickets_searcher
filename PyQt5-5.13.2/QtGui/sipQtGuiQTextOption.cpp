/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"
#line 751 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextOption.cpp"


PyDoc_STRVAR(doc_QTextOption_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextOption_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_alignment, doc_QTextOption_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTextDirection, "setTextDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QTextOption_setTextDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTextDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setTextDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTextDirection, doc_QTextOption_setTextDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextOption_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_textDirection, doc_QTextOption_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setWrapMode, "setWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextOption_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::WrapMode a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            sipCpp->setWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setWrapMode, doc_QTextOption_setWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_wrapMode, "wrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextOption_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            sipRes = sipCpp->wrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextOption_WrapMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_wrapMode, doc_QTextOption_wrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_flags, "flags(self) -> QTextOption.Flags");

extern "C" {static PyObject *meth_QTextOption_flags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_flags, doc_QTextOption_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabStop, "tabStop(self) -> float");

extern "C" {static PyObject *meth_QTextOption_tabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStop();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabStop, doc_QTextOption_tabStop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabArray, "setTabArray(self, Iterable[float])");

extern "C" {static PyObject *meth_QTextOption_setTabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QList< ::qreal>* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_2400,&a0, &a0State))
        {
            sipCpp->setTabArray(*a0);
            sipReleaseType(const_cast< ::QList< ::qreal> *>(a0),sipType_QList_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabArray, doc_QTextOption_setTabArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabArray, "tabArray(self) -> List[float]");

extern "C" {static PyObject *meth_QTextOption_tabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QList< ::qreal>*sipRes;

            sipRes = new  ::QList< ::qreal>(sipCpp->tabArray());

            return sipConvertFromNewType(sipRes,sipType_QList_2400,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabArray, doc_QTextOption_tabArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setUseDesignMetrics, "setUseDesignMetrics(self, bool)");

extern "C" {static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setUseDesignMetrics(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setUseDesignMetrics, doc_QTextOption_setUseDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_useDesignMetrics, "useDesignMetrics(self) -> bool");

extern "C" {static PyObject *meth_QTextOption_useDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_useDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useDesignMetrics();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_useDesignMetrics, doc_QTextOption_useDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextOption_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setAlignment, doc_QTextOption_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setFlags, "setFlags(self, Union[QTextOption.Flags, QTextOption.Flag])");

extern "C" {static PyObject *meth_QTextOption_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flags* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_Flags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setFlags, doc_QTextOption_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabStop, "setTabStop(self, float)");

extern "C" {static PyObject *meth_QTextOption_setTabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setTabStop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabStop, doc_QTextOption_setTabStop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabs, "setTabs(self, Iterable[QTextOption.Tab])");

extern "C" {static PyObject *meth_QTextOption_setTabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextOption::Tab>* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            sipCpp->setTabs(*a0);
            sipReleaseType(const_cast<QList< ::QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabs, doc_QTextOption_setTabs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabs, "tabs(self) -> List[QTextOption.Tab]");

extern "C" {static PyObject *meth_QTextOption_tabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QList< ::QTextOption::Tab>*sipRes;

            sipRes = new QList< ::QTextOption::Tab>(sipCpp->tabs());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabs, doc_QTextOption_tabs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabStopDistance, "setTabStopDistance(self, float)");

extern "C" {static PyObject *meth_QTextOption_setTabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setTabStopDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabStopDistance, doc_QTextOption_setTabStopDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabStopDistance, "tabStopDistance(self) -> float");

extern "C" {static PyObject *meth_QTextOption_tabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStopDistance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabStopDistance, doc_QTextOption_tabStopDistance);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextOption(void *, int);}
static void release_QTextOption(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextOption *>(sipCppV);
}


extern "C" {static void *array_QTextOption(Py_ssize_t);}
static void *array_QTextOption(Py_ssize_t sipNrElem)
{
    return new  ::QTextOption[sipNrElem];
}


extern "C" {static void assign_QTextOption(void *, Py_ssize_t, void *);}
static void assign_QTextOption(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextOption *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextOption *>(sipSrc);
}


extern "C" {static void *copy_QTextOption(const void *, Py_ssize_t);}
static void *copy_QTextOption(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextOption(reinterpret_cast<const  ::QTextOption *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextOption(sipSimpleWrapper *);}
static void dealloc_QTextOption(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextOption(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextOption(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextOption(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextOption *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextOption();

            return sipCpp;
        }
    }

    {
         ::Qt::Alignment* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp = new  ::QTextOption(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QTextOption* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextOption, &a0))
        {
            sipCpp = new  ::QTextOption(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextOption[] = {
    {sipName_alignment, meth_QTextOption_alignment, METH_VARARGS, doc_QTextOption_alignment},
    {sipName_flags, meth_QTextOption_flags, METH_VARARGS, doc_QTextOption_flags},
    {sipName_setAlignment, meth_QTextOption_setAlignment, METH_VARARGS, doc_QTextOption_setAlignment},
    {sipName_setFlags, meth_QTextOption_setFlags, METH_VARARGS, doc_QTextOption_setFlags},
    {sipName_setTabArray, meth_QTextOption_setTabArray, METH_VARARGS, doc_QTextOption_setTabArray},
    {sipName_setTabStop, meth_QTextOption_setTabStop, METH_VARARGS, doc_QTextOption_setTabStop},
    {sipName_setTabStopDistance, meth_QTextOption_setTabStopDistance, METH_VARARGS, doc_QTextOption_setTabStopDistance},
    {sipName_setTabs, meth_QTextOption_setTabs, METH_VARARGS, doc_QTextOption_setTabs},
    {sipName_setTextDirection, meth_QTextOption_setTextDirection, METH_VARARGS, doc_QTextOption_setTextDirection},
    {sipName_setUseDesignMetrics, meth_QTextOption_setUseDesignMetrics, METH_VARARGS, doc_QTextOption_setUseDesignMetrics},
    {sipName_setWrapMode, meth_QTextOption_setWrapMode, METH_VARARGS, doc_QTextOption_setWrapMode},
    {sipName_tabArray, meth_QTextOption_tabArray, METH_VARARGS, doc_QTextOption_tabArray},
    {sipName_tabStop, meth_QTextOption_tabStop, METH_VARARGS, doc_QTextOption_tabStop},
    {sipName_tabStopDistance, meth_QTextOption_tabStopDistance, METH_VARARGS, doc_QTextOption_tabStopDistance},
    {sipName_tabs, meth_QTextOption_tabs, METH_VARARGS, doc_QTextOption_tabs},
    {sipName_textDirection, meth_QTextOption_textDirection, METH_VARARGS, doc_QTextOption_textDirection},
    {sipName_useDesignMetrics, meth_QTextOption_useDesignMetrics, METH_VARARGS, doc_QTextOption_useDesignMetrics},
    {sipName_wrapMode, meth_QTextOption_wrapMode, METH_VARARGS, doc_QTextOption_wrapMode}
};

static sipEnumMemberDef enummembers_QTextOption[] = {
    {sipName_AddSpaceForLineAndParagraphSeparators, static_cast<int>( ::QTextOption::AddSpaceForLineAndParagraphSeparators), 337},
    {sipName_CenterTab, static_cast<int>( ::QTextOption::CenterTab), 340},
    {sipName_DelimiterTab, static_cast<int>( ::QTextOption::DelimiterTab), 340},
    {sipName_IncludeTrailingSpaces, static_cast<int>( ::QTextOption::IncludeTrailingSpaces), 337},
    {sipName_LeftTab, static_cast<int>( ::QTextOption::LeftTab), 340},
    {sipName_ManualWrap, static_cast<int>( ::QTextOption::ManualWrap), 341},
    {sipName_NoWrap, static_cast<int>( ::QTextOption::NoWrap), 341},
    {sipName_RightTab, static_cast<int>( ::QTextOption::RightTab), 340},
    {sipName_ShowDocumentTerminator, static_cast<int>( ::QTextOption::ShowDocumentTerminator), 337},
    {sipName_ShowLineAndParagraphSeparators, static_cast<int>( ::QTextOption::ShowLineAndParagraphSeparators), 337},
    {sipName_ShowTabsAndSpaces, static_cast<int>( ::QTextOption::ShowTabsAndSpaces), 337},
    {sipName_SuppressColors, static_cast<int>( ::QTextOption::SuppressColors), 337},
    {sipName_WordWrap, static_cast<int>( ::QTextOption::WordWrap), 341},
    {sipName_WrapAnywhere, static_cast<int>( ::QTextOption::WrapAnywhere), 341},
    {sipName_WrapAtWordBoundaryOrAnywhere, static_cast<int>( ::QTextOption::WrapAtWordBoundaryOrAnywhere), 341},
};

PyDoc_STRVAR(doc_QTextOption, "\1QTextOption()\n"
"QTextOption(Union[Qt.Alignment, Qt.AlignmentFlag])\n"
"QTextOption(QTextOption)");


static pyqt5ClassPluginDef plugin_QTextOption = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextOption = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextOption,
        SIP_NULLPTR,
        &plugin_QTextOption
    },
    {
        sipNameNr_QTextOption,
        {0, 0, 1},
        18, methods_QTextOption,
        15, enummembers_QTextOption,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextOption,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextOption,
    assign_QTextOption,
    array_QTextOption,
    copy_QTextOption,
    release_QTextOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
