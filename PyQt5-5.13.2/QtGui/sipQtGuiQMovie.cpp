/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qmovie.sip"
#include <qmovie.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMovie.cpp"


class sipQMovie : public  ::QMovie
{
public:
    sipQMovie( ::QObject*);
    sipQMovie( ::QIODevice*,const  ::QByteArray&, ::QObject*);
    sipQMovie(const  ::QString&,const  ::QByteArray&, ::QObject*);
    virtual ~sipQMovie();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMovie(const sipQMovie &);
    sipQMovie &operator = (const sipQMovie &);

    char sipPyMethods[7];
};

sipQMovie::sipQMovie( ::QObject*a0):  ::QMovie(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie( ::QIODevice*a0,const  ::QByteArray& a1, ::QObject*a2):  ::QMovie(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie(const  ::QString& a0,const  ::QByteArray& a1, ::QObject*a2):  ::QMovie(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::~sipQMovie()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMovie::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QMovie);

    return  ::QMovie::metaObject();
}

int sipQMovie::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMovie::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMovie,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQMovie::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMovie, _clname, &sipCpp) ? sipCpp :  ::QMovie::qt_metacast(_clname));
}

bool sipQMovie::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QMovie::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMovie::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QMovie::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMovie::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QMovie::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QMovie::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QMovie::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QMovie::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QMovie::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMovie_supportedFormats, "supportedFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *);}
static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QMovie::supportedFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_supportedFormats, doc_QMovie_supportedFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QMovie_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMovie, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setDevice, doc_QMovie_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QMovie_device(PyObject *, PyObject *);}
static PyObject *meth_QMovie_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_device, doc_QMovie_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QMovie_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFileName, doc_QMovie_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QMovie_fileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_fileName, doc_QMovie_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QMovie_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFormat, doc_QMovie_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QMovie_format(PyObject *, PyObject *);}
static PyObject *meth_QMovie_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_format, doc_QMovie_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setBackgroundColor, "setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QMovie_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setBackgroundColor, doc_QMovie_setBackgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_backgroundColor, "backgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QMovie_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->backgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_backgroundColor, doc_QMovie_backgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_state, "state(self) -> QMovie.MovieState");

extern "C" {static PyObject *meth_QMovie_state(PyObject *, PyObject *);}
static PyObject *meth_QMovie_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QMovie::MovieState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMovie_MovieState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_state, doc_QMovie_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_frameRect, "frameRect(self) -> QRect");

extern "C" {static PyObject *meth_QMovie_frameRect(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->frameRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameRect, doc_QMovie_frameRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentImage, "currentImage(self) -> QImage");

extern "C" {static PyObject *meth_QMovie_currentImage(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->currentImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentImage, doc_QMovie_currentImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentPixmap, "currentPixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QMovie_currentPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->currentPixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentPixmap, doc_QMovie_currentPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMovie_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMovie_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_isValid, doc_QMovie_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_jumpToFrame, "jumpToFrame(self, int) -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToFrame(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToFrame, doc_QMovie_jumpToFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QMovie_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_loopCount, doc_QMovie_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_frameCount, "frameCount(self) -> int");

extern "C" {static PyObject *meth_QMovie_frameCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->frameCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameCount, doc_QMovie_frameCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_nextFrameDelay, "nextFrameDelay(self) -> int");

extern "C" {static PyObject *meth_QMovie_nextFrameDelay(PyObject *, PyObject *);}
static PyObject *meth_QMovie_nextFrameDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->nextFrameDelay();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_nextFrameDelay, doc_QMovie_nextFrameDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentFrameNumber, "currentFrameNumber(self) -> int");

extern "C" {static PyObject *meth_QMovie_currentFrameNumber(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentFrameNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrameNumber();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentFrameNumber, doc_QMovie_currentFrameNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setSpeed, "setSpeed(self, int)");

extern "C" {static PyObject *meth_QMovie_setSpeed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            sipCpp->setSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setSpeed, doc_QMovie_setSpeed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_speed, "speed(self) -> int");

extern "C" {static PyObject *meth_QMovie_speed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_speed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->speed();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_speed, doc_QMovie_speed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_scaledSize, "scaledSize(self) -> QSize");

extern "C" {static PyObject *meth_QMovie_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaledSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_scaledSize, doc_QMovie_scaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setScaledSize, "setScaledSize(self, QSize)");

extern "C" {static PyObject *meth_QMovie_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMovie, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setScaledSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setScaledSize, doc_QMovie_setScaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_cacheMode, "cacheMode(self) -> QMovie.CacheMode");

extern "C" {static PyObject *meth_QMovie_cacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_cacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QMovie::CacheMode sipRes;

            sipRes = sipCpp->cacheMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMovie_CacheMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_cacheMode, doc_QMovie_cacheMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setCacheMode, "setCacheMode(self, QMovie.CacheMode)");

extern "C" {static PyObject *meth_QMovie_setCacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setCacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie::CacheMode a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMovie, &sipCpp, sipType_QMovie_CacheMode, &a0))
        {
            sipCpp->setCacheMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setCacheMode, doc_QMovie_setCacheMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_start, "start(self)");

extern "C" {static PyObject *meth_QMovie_start(PyObject *, PyObject *);}
static PyObject *meth_QMovie_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_start, doc_QMovie_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_jumpToNextFrame, "jumpToNextFrame(self) -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToNextFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToNextFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToNextFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToNextFrame, doc_QMovie_jumpToNextFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setPaused, "setPaused(self, bool)");

extern "C" {static PyObject *meth_QMovie_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setPaused, doc_QMovie_setPaused);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_stop, "stop(self)");

extern "C" {static PyObject *meth_QMovie_stop(PyObject *, PyObject *);}
static PyObject *meth_QMovie_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_stop, doc_QMovie_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_lastError, "lastError(self) -> QImageReader.ImageReaderError");

extern "C" {static PyObject *meth_QMovie_lastError(PyObject *, PyObject *);}
static PyObject *meth_QMovie_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QImageReader::ImageReaderError sipRes;

            sipRes = sipCpp->lastError();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImageReader_ImageReaderError);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_lastError, doc_QMovie_lastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_lastErrorString, "lastErrorString(self) -> str");

extern "C" {static PyObject *meth_QMovie_lastErrorString(PyObject *, PyObject *);}
static PyObject *meth_QMovie_lastErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->lastErrorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMovie, sipName_lastErrorString, doc_QMovie_lastErrorString);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMovie(void *, const sipTypeDef *);}
static void *cast_QMovie(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMovie *sipCpp = reinterpret_cast< ::QMovie *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMovie(void *, int);}
static void release_QMovie(void *sipCppV, int)
{
     ::QMovie *sipCpp = reinterpret_cast< ::QMovie *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QMovie(Py_ssize_t);}
static void *array_QMovie(Py_ssize_t sipNrElem)
{
    return new  ::QMovie[sipNrElem];
}


extern "C" {static void dealloc_QMovie(sipSimpleWrapper *);}
static void dealloc_QMovie(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMovie *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMovie(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMovie(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMovie(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMovie *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQMovie(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1JH", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQMovie(a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQMovie(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMovie[] = {{25, 0, 1}};


static PyMethodDef methods_QMovie[] = {
    {sipName_backgroundColor, meth_QMovie_backgroundColor, METH_VARARGS, doc_QMovie_backgroundColor},
    {sipName_cacheMode, meth_QMovie_cacheMode, METH_VARARGS, doc_QMovie_cacheMode},
    {sipName_currentFrameNumber, meth_QMovie_currentFrameNumber, METH_VARARGS, doc_QMovie_currentFrameNumber},
    {sipName_currentImage, meth_QMovie_currentImage, METH_VARARGS, doc_QMovie_currentImage},
    {sipName_currentPixmap, meth_QMovie_currentPixmap, METH_VARARGS, doc_QMovie_currentPixmap},
    {sipName_device, meth_QMovie_device, METH_VARARGS, doc_QMovie_device},
    {sipName_fileName, meth_QMovie_fileName, METH_VARARGS, doc_QMovie_fileName},
    {sipName_format, meth_QMovie_format, METH_VARARGS, doc_QMovie_format},
    {sipName_frameCount, meth_QMovie_frameCount, METH_VARARGS, doc_QMovie_frameCount},
    {sipName_frameRect, meth_QMovie_frameRect, METH_VARARGS, doc_QMovie_frameRect},
    {sipName_isValid, meth_QMovie_isValid, METH_VARARGS, doc_QMovie_isValid},
    {sipName_jumpToFrame, meth_QMovie_jumpToFrame, METH_VARARGS, doc_QMovie_jumpToFrame},
    {sipName_jumpToNextFrame, meth_QMovie_jumpToNextFrame, METH_VARARGS, doc_QMovie_jumpToNextFrame},
    {sipName_lastError, meth_QMovie_lastError, METH_VARARGS, doc_QMovie_lastError},
    {sipName_lastErrorString, meth_QMovie_lastErrorString, METH_VARARGS, doc_QMovie_lastErrorString},
    {sipName_loopCount, meth_QMovie_loopCount, METH_VARARGS, doc_QMovie_loopCount},
    {sipName_nextFrameDelay, meth_QMovie_nextFrameDelay, METH_VARARGS, doc_QMovie_nextFrameDelay},
    {sipName_scaledSize, meth_QMovie_scaledSize, METH_VARARGS, doc_QMovie_scaledSize},
    {sipName_setBackgroundColor, meth_QMovie_setBackgroundColor, METH_VARARGS, doc_QMovie_setBackgroundColor},
    {sipName_setCacheMode, meth_QMovie_setCacheMode, METH_VARARGS, doc_QMovie_setCacheMode},
    {sipName_setDevice, meth_QMovie_setDevice, METH_VARARGS, doc_QMovie_setDevice},
    {sipName_setFileName, meth_QMovie_setFileName, METH_VARARGS, doc_QMovie_setFileName},
    {sipName_setFormat, meth_QMovie_setFormat, METH_VARARGS, doc_QMovie_setFormat},
    {sipName_setPaused, meth_QMovie_setPaused, METH_VARARGS, doc_QMovie_setPaused},
    {sipName_setScaledSize, meth_QMovie_setScaledSize, METH_VARARGS, doc_QMovie_setScaledSize},
    {sipName_setSpeed, meth_QMovie_setSpeed, METH_VARARGS, doc_QMovie_setSpeed},
    {sipName_speed, meth_QMovie_speed, METH_VARARGS, doc_QMovie_speed},
    {sipName_start, meth_QMovie_start, METH_VARARGS, doc_QMovie_start},
    {sipName_state, meth_QMovie_state, METH_VARARGS, doc_QMovie_state},
    {sipName_stop, meth_QMovie_stop, METH_VARARGS, doc_QMovie_stop},
    {sipName_supportedFormats, meth_QMovie_supportedFormats, METH_VARARGS, doc_QMovie_supportedFormats}
};

static sipEnumMemberDef enummembers_QMovie[] = {
    {sipName_CacheAll, static_cast<int>( ::QMovie::CacheAll), 121},
    {sipName_CacheNone, static_cast<int>( ::QMovie::CacheNone), 121},
    {sipName_NotRunning, static_cast<int>( ::QMovie::NotRunning), 122},
    {sipName_Paused, static_cast<int>( ::QMovie::Paused), 122},
    {sipName_Running, static_cast<int>( ::QMovie::Running), 122},
};

PyDoc_STRVAR(doc_QMovie, "\1QMovie(parent: QObject = None)\n"
"QMovie(QIODevice, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None)\n"
"QMovie(str, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMovie[] = {
    {"frameChanged(int)", "\1frameChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QImageReader::ImageReaderError)", "\1error(self, QImageReader.ImageReaderError)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QMovie::MovieState)", "\1stateChanged(self, QMovie.MovieState)", SIP_NULLPTR, SIP_NULLPTR},
    {"updated(QRect)", "\1updated(self, QRect)", SIP_NULLPTR, SIP_NULLPTR},
    {"resized(QSize)", "\1resized(self, QSize)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QMovie = {
    & ::QMovie::staticMetaObject,
    0,
    signals_QMovie,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMovie = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMovie,
        SIP_NULLPTR,
        &plugin_QMovie
    },
    {
        sipNameNr_QMovie,
        {0, 0, 1},
        31, methods_QMovie,
        5, enummembers_QMovie,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMovie,
    -1,
    -1,
    supers_QMovie,
    SIP_NULLPTR,
    init_type_QMovie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMovie,
    SIP_NULLPTR,
    array_QMovie,
    SIP_NULLPTR,
    release_QMovie,
    cast_QMovie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
