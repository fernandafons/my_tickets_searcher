/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 34 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixelFormat.cpp"



PyDoc_STRVAR(doc_QPixelFormat_colorModel, "colorModel(self) -> QPixelFormat.ColorModel");

extern "C" {static PyObject *meth_QPixelFormat_colorModel(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_colorModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::ColorModel sipRes;

            sipRes = sipCpp->colorModel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_ColorModel);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_colorModel, doc_QPixelFormat_colorModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_channelCount, "channelCount(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_channelCount(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_channelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->channelCount();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_channelCount, doc_QPixelFormat_channelCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_redSize, "redSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_redSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_redSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->redSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_redSize, doc_QPixelFormat_redSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_greenSize, "greenSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_greenSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_greenSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->greenSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_greenSize, doc_QPixelFormat_greenSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_blueSize, "blueSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_blueSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_blueSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->blueSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_blueSize, doc_QPixelFormat_blueSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_cyanSize, "cyanSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_cyanSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_cyanSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->cyanSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_cyanSize, doc_QPixelFormat_cyanSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_magentaSize, "magentaSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_magentaSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_magentaSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->magentaSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_magentaSize, doc_QPixelFormat_magentaSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_yellowSize, "yellowSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_yellowSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_yellowSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->yellowSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_yellowSize, doc_QPixelFormat_yellowSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_blackSize, "blackSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_blackSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_blackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->blackSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_blackSize, doc_QPixelFormat_blackSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_hueSize, "hueSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_hueSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_hueSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->hueSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_hueSize, doc_QPixelFormat_hueSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_saturationSize, "saturationSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_saturationSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_saturationSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->saturationSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_saturationSize, doc_QPixelFormat_saturationSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_lightnessSize, "lightnessSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_lightnessSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_lightnessSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->lightnessSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_lightnessSize, doc_QPixelFormat_lightnessSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_brightnessSize, "brightnessSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_brightnessSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_brightnessSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->brightnessSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_brightnessSize, doc_QPixelFormat_brightnessSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaSize, "alphaSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_alphaSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->alphaSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaSize, doc_QPixelFormat_alphaSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_bitsPerPixel, "bitsPerPixel(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_bitsPerPixel(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_bitsPerPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->bitsPerPixel();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_bitsPerPixel, doc_QPixelFormat_bitsPerPixel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaUsage, "alphaUsage(self) -> QPixelFormat.AlphaUsage");

extern "C" {static PyObject *meth_QPixelFormat_alphaUsage(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaUsage sipRes;

            sipRes = sipCpp->alphaUsage();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaUsage);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaUsage, doc_QPixelFormat_alphaUsage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaPosition, "alphaPosition(self) -> QPixelFormat.AlphaPosition");

extern "C" {static PyObject *meth_QPixelFormat_alphaPosition(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaPosition sipRes;

            sipRes = sipCpp->alphaPosition();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaPosition);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaPosition, doc_QPixelFormat_alphaPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_premultiplied, "premultiplied(self) -> QPixelFormat.AlphaPremultiplied");

extern "C" {static PyObject *meth_QPixelFormat_premultiplied(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_premultiplied(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaPremultiplied sipRes;

            sipRes = sipCpp->premultiplied();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaPremultiplied);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_premultiplied, doc_QPixelFormat_premultiplied);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_typeInterpretation, "typeInterpretation(self) -> QPixelFormat.TypeInterpretation");

extern "C" {static PyObject *meth_QPixelFormat_typeInterpretation(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_typeInterpretation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::TypeInterpretation sipRes;

            sipRes = sipCpp->typeInterpretation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_TypeInterpretation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_typeInterpretation, doc_QPixelFormat_typeInterpretation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_byteOrder, "byteOrder(self) -> QPixelFormat.ByteOrder");

extern "C" {static PyObject *meth_QPixelFormat_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::ByteOrder sipRes;

            sipRes = sipCpp->byteOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_ByteOrder);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_byteOrder, doc_QPixelFormat_byteOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_yuvLayout, "yuvLayout(self) -> QPixelFormat.YUVLayout");

extern "C" {static PyObject *meth_QPixelFormat_yuvLayout(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_yuvLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::YUVLayout sipRes;

            sipRes = sipCpp->yuvLayout();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_YUVLayout);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_yuvLayout, doc_QPixelFormat_yuvLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_subEnum, "subEnum(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_subEnum(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_subEnum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->subEnum();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_subEnum, doc_QPixelFormat_subEnum);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPixelFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPixelFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixelFormat *sipCpp = reinterpret_cast< ::QPixelFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixelFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixelFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPixelFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPixelFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPixelFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixelFormat *sipCpp = reinterpret_cast< ::QPixelFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixelFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixelFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPixelFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixelFormat(void *, int);}
static void release_QPixelFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPixelFormat *>(sipCppV);
}


extern "C" {static void *array_QPixelFormat(Py_ssize_t);}
static void *array_QPixelFormat(Py_ssize_t sipNrElem)
{
    return new  ::QPixelFormat[sipNrElem];
}


extern "C" {static void assign_QPixelFormat(void *, Py_ssize_t, void *);}
static void assign_QPixelFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixelFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixelFormat *>(sipSrc);
}


extern "C" {static void *copy_QPixelFormat(const void *, Py_ssize_t);}
static void *copy_QPixelFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QPixelFormat(reinterpret_cast<const  ::QPixelFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixelFormat(sipSimpleWrapper *);}
static void dealloc_QPixelFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixelFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPixelFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixelFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPixelFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPixelFormat();

            return sipCpp;
        }
    }

    {
         ::QPixelFormat::ColorModel a0;
         ::uchar a1;
         ::uchar a2;
         ::uchar a3;
         ::uchar a4;
         ::uchar a5;
         ::uchar a6;
         ::QPixelFormat::AlphaUsage a7;
         ::QPixelFormat::AlphaPosition a8;
         ::QPixelFormat::AlphaPremultiplied a9;
         ::QPixelFormat::TypeInterpretation a10;
         ::QPixelFormat::ByteOrder a11 = QPixelFormat::CurrentSystemEndian;
         ::uchar a12 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_byteOrder,
            sipName_subEnum,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EMMMMMMEEEE|EM", sipType_QPixelFormat_ColorModel, &a0, &a1, &a2, &a3, &a4, &a5, &a6, sipType_QPixelFormat_AlphaUsage, &a7, sipType_QPixelFormat_AlphaPosition, &a8, sipType_QPixelFormat_AlphaPremultiplied, &a9, sipType_QPixelFormat_TypeInterpretation, &a10, sipType_QPixelFormat_ByteOrder, &a11, &a12))
        {
            sipCpp = new  ::QPixelFormat(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);

            return sipCpp;
        }
    }

    {
        const  ::QPixelFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixelFormat, &a0))
        {
            sipCpp = new  ::QPixelFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPixelFormat[] = {
    {(void *)slot_QPixelFormat___eq__, eq_slot},
    {(void *)slot_QPixelFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPixelFormat[] = {
    {sipName_alphaPosition, meth_QPixelFormat_alphaPosition, METH_VARARGS, doc_QPixelFormat_alphaPosition},
    {sipName_alphaSize, meth_QPixelFormat_alphaSize, METH_VARARGS, doc_QPixelFormat_alphaSize},
    {sipName_alphaUsage, meth_QPixelFormat_alphaUsage, METH_VARARGS, doc_QPixelFormat_alphaUsage},
    {sipName_bitsPerPixel, meth_QPixelFormat_bitsPerPixel, METH_VARARGS, doc_QPixelFormat_bitsPerPixel},
    {sipName_blackSize, meth_QPixelFormat_blackSize, METH_VARARGS, doc_QPixelFormat_blackSize},
    {sipName_blueSize, meth_QPixelFormat_blueSize, METH_VARARGS, doc_QPixelFormat_blueSize},
    {sipName_brightnessSize, meth_QPixelFormat_brightnessSize, METH_VARARGS, doc_QPixelFormat_brightnessSize},
    {sipName_byteOrder, meth_QPixelFormat_byteOrder, METH_VARARGS, doc_QPixelFormat_byteOrder},
    {sipName_channelCount, meth_QPixelFormat_channelCount, METH_VARARGS, doc_QPixelFormat_channelCount},
    {sipName_colorModel, meth_QPixelFormat_colorModel, METH_VARARGS, doc_QPixelFormat_colorModel},
    {sipName_cyanSize, meth_QPixelFormat_cyanSize, METH_VARARGS, doc_QPixelFormat_cyanSize},
    {sipName_greenSize, meth_QPixelFormat_greenSize, METH_VARARGS, doc_QPixelFormat_greenSize},
    {sipName_hueSize, meth_QPixelFormat_hueSize, METH_VARARGS, doc_QPixelFormat_hueSize},
    {sipName_lightnessSize, meth_QPixelFormat_lightnessSize, METH_VARARGS, doc_QPixelFormat_lightnessSize},
    {sipName_magentaSize, meth_QPixelFormat_magentaSize, METH_VARARGS, doc_QPixelFormat_magentaSize},
    {sipName_premultiplied, meth_QPixelFormat_premultiplied, METH_VARARGS, doc_QPixelFormat_premultiplied},
    {sipName_redSize, meth_QPixelFormat_redSize, METH_VARARGS, doc_QPixelFormat_redSize},
    {sipName_saturationSize, meth_QPixelFormat_saturationSize, METH_VARARGS, doc_QPixelFormat_saturationSize},
    {sipName_subEnum, meth_QPixelFormat_subEnum, METH_VARARGS, doc_QPixelFormat_subEnum},
    {sipName_typeInterpretation, meth_QPixelFormat_typeInterpretation, METH_VARARGS, doc_QPixelFormat_typeInterpretation},
    {sipName_yellowSize, meth_QPixelFormat_yellowSize, METH_VARARGS, doc_QPixelFormat_yellowSize},
    {sipName_yuvLayout, meth_QPixelFormat_yuvLayout, METH_VARARGS, doc_QPixelFormat_yuvLayout}
};

static sipEnumMemberDef enummembers_QPixelFormat[] = {
    {sipName_Alpha, static_cast<int>( ::QPixelFormat::Alpha), 230},
    {sipName_AtBeginning, static_cast<int>( ::QPixelFormat::AtBeginning), 226},
    {sipName_AtEnd, static_cast<int>( ::QPixelFormat::AtEnd), 226},
    {sipName_BGR, static_cast<int>( ::QPixelFormat::BGR), 230},
    {sipName_BigEndian, static_cast<int>( ::QPixelFormat::BigEndian), 229},
    {sipName_CMYK, static_cast<int>( ::QPixelFormat::CMYK), 230},
    {sipName_CurrentSystemEndian, static_cast<int>( ::QPixelFormat::CurrentSystemEndian), 229},
    {sipName_FloatingPoint, static_cast<int>( ::QPixelFormat::FloatingPoint), 231},
    {sipName_Grayscale, static_cast<int>( ::QPixelFormat::Grayscale), 230},
    {sipName_HSL, static_cast<int>( ::QPixelFormat::HSL), 230},
    {sipName_HSV, static_cast<int>( ::QPixelFormat::HSV), 230},
    {sipName_IMC1, static_cast<int>( ::QPixelFormat::IMC1), 232},
    {sipName_IMC2, static_cast<int>( ::QPixelFormat::IMC2), 232},
    {sipName_IMC3, static_cast<int>( ::QPixelFormat::IMC3), 232},
    {sipName_IMC4, static_cast<int>( ::QPixelFormat::IMC4), 232},
    {sipName_IgnoresAlpha, static_cast<int>( ::QPixelFormat::IgnoresAlpha), 228},
    {sipName_Indexed, static_cast<int>( ::QPixelFormat::Indexed), 230},
    {sipName_LittleEndian, static_cast<int>( ::QPixelFormat::LittleEndian), 229},
    {sipName_NV12, static_cast<int>( ::QPixelFormat::NV12), 232},
    {sipName_NV21, static_cast<int>( ::QPixelFormat::NV21), 232},
    {sipName_NotPremultiplied, static_cast<int>( ::QPixelFormat::NotPremultiplied), 227},
    {sipName_Premultiplied, static_cast<int>( ::QPixelFormat::Premultiplied), 227},
    {sipName_RGB, static_cast<int>( ::QPixelFormat::RGB), 230},
    {sipName_UYVY, static_cast<int>( ::QPixelFormat::UYVY), 232},
    {sipName_UnsignedByte, static_cast<int>( ::QPixelFormat::UnsignedByte), 231},
    {sipName_UnsignedInteger, static_cast<int>( ::QPixelFormat::UnsignedInteger), 231},
    {sipName_UnsignedShort, static_cast<int>( ::QPixelFormat::UnsignedShort), 231},
    {sipName_UsesAlpha, static_cast<int>( ::QPixelFormat::UsesAlpha), 228},
    {sipName_Y16, static_cast<int>( ::QPixelFormat::Y16), 232},
    {sipName_Y8, static_cast<int>( ::QPixelFormat::Y8), 232},
    {sipName_YUV, static_cast<int>( ::QPixelFormat::YUV), 230},
    {sipName_YUV411, static_cast<int>( ::QPixelFormat::YUV411), 232},
    {sipName_YUV420P, static_cast<int>( ::QPixelFormat::YUV420P), 232},
    {sipName_YUV420SP, static_cast<int>( ::QPixelFormat::YUV420SP), 232},
    {sipName_YUV422, static_cast<int>( ::QPixelFormat::YUV422), 232},
    {sipName_YUV444, static_cast<int>( ::QPixelFormat::YUV444), 232},
    {sipName_YUYV, static_cast<int>( ::QPixelFormat::YUYV), 232},
    {sipName_YV12, static_cast<int>( ::QPixelFormat::YV12), 232},
};

PyDoc_STRVAR(doc_QPixelFormat, "\1QPixelFormat()\n"
"QPixelFormat(QPixelFormat.ColorModel, int, int, int, int, int, int, QPixelFormat.AlphaUsage, QPixelFormat.AlphaPosition, QPixelFormat.AlphaPremultiplied, QPixelFormat.TypeInterpretation, byteOrder: QPixelFormat.ByteOrder = QPixelFormat.CurrentSystemEndian, subEnum: int = 0)\n"
"QPixelFormat(QPixelFormat)");


static pyqt5ClassPluginDef plugin_QPixelFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixelFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixelFormat,
        SIP_NULLPTR,
        &plugin_QPixelFormat
    },
    {
        sipNameNr_QPixelFormat,
        {0, 0, 1},
        22, methods_QPixelFormat,
        38, enummembers_QPixelFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixelFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPixelFormat,
    init_type_QPixelFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPixelFormat,
    assign_QPixelFormat,
    array_QPixelFormat,
    copy_QPixelFormat,
    release_QPixelFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
