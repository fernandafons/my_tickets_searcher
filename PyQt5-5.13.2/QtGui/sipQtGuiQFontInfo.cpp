/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontInfo.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontInfo.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQFontInfo.cpp"


PyDoc_STRVAR(doc_QFontInfo_family, "family(self) -> str");

extern "C" {static PyObject *meth_QFontInfo_family(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_family(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->family());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_family, doc_QFontInfo_family);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pixelSize, "pixelSize(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pixelSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pixelSize, doc_QFontInfo_pixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pointSize, "pointSize(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_pointSize(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pointSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pointSize, doc_QFontInfo_pointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pointSizeF, "pointSizeF(self) -> float");

extern "C" {static PyObject *meth_QFontInfo_pointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pointSizeF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pointSizeF, doc_QFontInfo_pointSizeF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_italic, "italic(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_italic(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_italic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->italic();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_italic, doc_QFontInfo_italic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_style, "style(self) -> QFont.Style");

extern "C" {static PyObject *meth_QFontInfo_style(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QFont::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Style);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_style, doc_QFontInfo_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_weight(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_weight, doc_QFontInfo_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_bold, "bold(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_bold(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_bold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bold();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_bold, doc_QFontInfo_bold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_fixedPitch, "fixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_fixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_fixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_fixedPitch, doc_QFontInfo_fixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_styleHint, "styleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QFontInfo_styleHint(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_styleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QFont::StyleHint sipRes;

            sipRes = sipCpp->styleHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleHint);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_styleHint, doc_QFontInfo_styleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_rawMode, "rawMode(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_rawMode(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_rawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rawMode();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_rawMode, doc_QFontInfo_rawMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_exactMatch, "exactMatch(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exactMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_exactMatch, doc_QFontInfo_exactMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_styleName, "styleName(self) -> str");

extern "C" {static PyObject *meth_QFontInfo_styleName(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_styleName, doc_QFontInfo_styleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_swap, "swap(self, QFontInfo)");

extern "C" {static PyObject *meth_QFontInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontInfo* a0;
         ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontInfo, &sipCpp, sipType_QFontInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_swap, doc_QFontInfo_swap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontInfo(void *, int);}
static void release_QFontInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontInfo *>(sipCppV);
}


extern "C" {static void assign_QFontInfo(void *, Py_ssize_t, void *);}
static void assign_QFontInfo(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFontInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFontInfo *>(sipSrc);
}


extern "C" {static void *copy_QFontInfo(const void *, Py_ssize_t);}
static void *copy_QFontInfo(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QFontInfo(reinterpret_cast<const  ::QFontInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFontInfo(sipSimpleWrapper *);}
static void dealloc_QFontInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontInfo *sipCpp = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFontInfo(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFontInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontInfo, &a0))
        {
            sipCpp = new  ::QFontInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QFontInfo[] = {
    {sipName_bold, meth_QFontInfo_bold, METH_VARARGS, doc_QFontInfo_bold},
    {sipName_exactMatch, meth_QFontInfo_exactMatch, METH_VARARGS, doc_QFontInfo_exactMatch},
    {sipName_family, meth_QFontInfo_family, METH_VARARGS, doc_QFontInfo_family},
    {sipName_fixedPitch, meth_QFontInfo_fixedPitch, METH_VARARGS, doc_QFontInfo_fixedPitch},
    {sipName_italic, meth_QFontInfo_italic, METH_VARARGS, doc_QFontInfo_italic},
    {sipName_pixelSize, meth_QFontInfo_pixelSize, METH_VARARGS, doc_QFontInfo_pixelSize},
    {sipName_pointSize, meth_QFontInfo_pointSize, METH_VARARGS, doc_QFontInfo_pointSize},
    {sipName_pointSizeF, meth_QFontInfo_pointSizeF, METH_VARARGS, doc_QFontInfo_pointSizeF},
    {sipName_rawMode, meth_QFontInfo_rawMode, METH_VARARGS, doc_QFontInfo_rawMode},
    {sipName_style, meth_QFontInfo_style, METH_VARARGS, doc_QFontInfo_style},
    {sipName_styleHint, meth_QFontInfo_styleHint, METH_VARARGS, doc_QFontInfo_styleHint},
    {sipName_styleName, meth_QFontInfo_styleName, METH_VARARGS, doc_QFontInfo_styleName},
    {sipName_swap, meth_QFontInfo_swap, METH_VARARGS, doc_QFontInfo_swap},
    {sipName_weight, meth_QFontInfo_weight, METH_VARARGS, doc_QFontInfo_weight}
};

PyDoc_STRVAR(doc_QFontInfo, "\1QFontInfo(QFont)\n"
"QFontInfo(QFontInfo)");


static pyqt5ClassPluginDef plugin_QFontInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontInfo,
        SIP_NULLPTR,
        &plugin_QFontInfo
    },
    {
        sipNameNr_QFontInfo,
        {0, 0, 1},
        14, methods_QFontInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QFontInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QFontInfo,
    assign_QFontInfo,
    SIP_NULLPTR,
    copy_QFontInfo,
    release_QFontInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
