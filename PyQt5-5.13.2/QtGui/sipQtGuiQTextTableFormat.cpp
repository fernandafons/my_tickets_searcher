/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 545 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 482 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 571 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 459 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 427 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 376 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextTableFormat.cpp"


PyDoc_STRVAR(doc_QTextTableFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextTableFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_isValid, doc_QTextTableFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_columns, "columns(self) -> int");

extern "C" {static PyObject *meth_QTextTableFormat_columns(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_columns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columns();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_columns, doc_QTextTableFormat_columns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setColumnWidthConstraints, "setColumnWidthConstraints(self, Iterable[QTextLength])");

extern "C" {static PyObject *meth_QTextTableFormat_setColumnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setColumnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QTextLength>* a0;
        int a0State = 0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextTableFormat, &sipCpp, sipType_QVector_0100QTextLength,&a0, &a0State))
        {
            sipCpp->setColumnWidthConstraints(*a0);
            sipReleaseType(const_cast<QVector< ::QTextLength> *>(a0),sipType_QVector_0100QTextLength,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setColumnWidthConstraints, doc_QTextTableFormat_setColumnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_columnWidthConstraints, "columnWidthConstraints(self) -> List[QTextLength]");

extern "C" {static PyObject *meth_QTextTableFormat_columnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_columnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            QVector< ::QTextLength>*sipRes;

            sipRes = new QVector< ::QTextLength>(sipCpp->columnWidthConstraints());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_columnWidthConstraints, doc_QTextTableFormat_columnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_clearColumnWidthConstraints, "clearColumnWidthConstraints(self)");

extern "C" {static PyObject *meth_QTextTableFormat_clearColumnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_clearColumnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            sipCpp->clearColumnWidthConstraints();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_clearColumnWidthConstraints, doc_QTextTableFormat_clearColumnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_cellSpacing, "cellSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextTableFormat_cellSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_cellSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cellSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_cellSpacing, doc_QTextTableFormat_cellSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setCellSpacing, "setCellSpacing(self, float)");

extern "C" {static PyObject *meth_QTextTableFormat_setCellSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setCellSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setCellSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setCellSpacing, doc_QTextTableFormat_setCellSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_cellPadding, "cellPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableFormat_cellPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_cellPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cellPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_cellPadding, doc_QTextTableFormat_cellPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextTableFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_alignment, doc_QTextTableFormat_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setColumns, "setColumns(self, int)");

extern "C" {static PyObject *meth_QTextTableFormat_setColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setColumns(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setColumns, doc_QTextTableFormat_setColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setCellPadding, "setCellPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableFormat_setCellPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setCellPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setCellPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setCellPadding, doc_QTextTableFormat_setCellPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextTableFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextTableFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setAlignment, doc_QTextTableFormat_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setHeaderRowCount, "setHeaderRowCount(self, int)");

extern "C" {static PyObject *meth_QTextTableFormat_setHeaderRowCount(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setHeaderRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setHeaderRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setHeaderRowCount, doc_QTextTableFormat_setHeaderRowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_headerRowCount, "headerRowCount(self) -> int");

extern "C" {static PyObject *meth_QTextTableFormat_headerRowCount(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_headerRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->headerRowCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_headerRowCount, doc_QTextTableFormat_headerRowCount);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextTableFormat(void *, const sipTypeDef *);}
static void *cast_QTextTableFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextTableFormat *sipCpp = reinterpret_cast< ::QTextTableFormat *>(sipCppV);

    if (targetType == sipType_QTextFrameFormat)
        return static_cast< ::QTextFrameFormat *>(sipCpp);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableFormat(void *, int);}
static void release_QTextTableFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextTableFormat *>(sipCppV);
}


extern "C" {static void *array_QTextTableFormat(Py_ssize_t);}
static void *array_QTextTableFormat(Py_ssize_t sipNrElem)
{
    return new  ::QTextTableFormat[sipNrElem];
}


extern "C" {static void assign_QTextTableFormat(void *, Py_ssize_t, void *);}
static void assign_QTextTableFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextTableFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextTableFormat *>(sipSrc);
}


extern "C" {static void *copy_QTextTableFormat(const void *, Py_ssize_t);}
static void *copy_QTextTableFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextTableFormat(reinterpret_cast<const  ::QTextTableFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableFormat(sipSimpleWrapper *);}
static void dealloc_QTextTableFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextTableFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextTableFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTableFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextTableFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextTableFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextTableFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextTableFormat, &a0))
        {
            sipCpp = new  ::QTextTableFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTableFormat[] = {{315, 255, 1}};


static PyMethodDef methods_QTextTableFormat[] = {
    {sipName_alignment, meth_QTextTableFormat_alignment, METH_VARARGS, doc_QTextTableFormat_alignment},
    {sipName_cellPadding, meth_QTextTableFormat_cellPadding, METH_VARARGS, doc_QTextTableFormat_cellPadding},
    {sipName_cellSpacing, meth_QTextTableFormat_cellSpacing, METH_VARARGS, doc_QTextTableFormat_cellSpacing},
    {sipName_clearColumnWidthConstraints, meth_QTextTableFormat_clearColumnWidthConstraints, METH_VARARGS, doc_QTextTableFormat_clearColumnWidthConstraints},
    {sipName_columnWidthConstraints, meth_QTextTableFormat_columnWidthConstraints, METH_VARARGS, doc_QTextTableFormat_columnWidthConstraints},
    {sipName_columns, meth_QTextTableFormat_columns, METH_VARARGS, doc_QTextTableFormat_columns},
    {sipName_headerRowCount, meth_QTextTableFormat_headerRowCount, METH_VARARGS, doc_QTextTableFormat_headerRowCount},
    {sipName_isValid, meth_QTextTableFormat_isValid, METH_VARARGS, doc_QTextTableFormat_isValid},
    {sipName_setAlignment, meth_QTextTableFormat_setAlignment, METH_VARARGS, doc_QTextTableFormat_setAlignment},
    {sipName_setCellPadding, meth_QTextTableFormat_setCellPadding, METH_VARARGS, doc_QTextTableFormat_setCellPadding},
    {sipName_setCellSpacing, meth_QTextTableFormat_setCellSpacing, METH_VARARGS, doc_QTextTableFormat_setCellSpacing},
    {sipName_setColumnWidthConstraints, meth_QTextTableFormat_setColumnWidthConstraints, METH_VARARGS, doc_QTextTableFormat_setColumnWidthConstraints},
    {sipName_setColumns, meth_QTextTableFormat_setColumns, METH_VARARGS, doc_QTextTableFormat_setColumns},
    {sipName_setHeaderRowCount, meth_QTextTableFormat_setHeaderRowCount, METH_VARARGS, doc_QTextTableFormat_setHeaderRowCount}
};

PyDoc_STRVAR(doc_QTextTableFormat, "\1QTextTableFormat()\n"
"QTextTableFormat(QTextTableFormat)");


static pyqt5ClassPluginDef plugin_QTextTableFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextTableFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextTableFormat,
        SIP_NULLPTR,
        &plugin_QTextTableFormat
    },
    {
        sipNameNr_QTextTableFormat,
        {0, 0, 1},
        14, methods_QTextTableFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextTableFormat,
    -1,
    -1,
    supers_QTextTableFormat,
    SIP_NULLPTR,
    init_type_QTextTableFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextTableFormat,
    assign_QTextTableFormat,
    array_QTextTableFormat,
    copy_QTextTableFormat,
    release_QTextTableFormat,
    cast_QTextTableFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
