/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 416 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQResizeEvent.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQResizeEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQResizeEvent.cpp"


class sipQResizeEvent : public  ::QResizeEvent
{
public:
    sipQResizeEvent(const  ::QSize&,const  ::QSize&);
    sipQResizeEvent(const  ::QResizeEvent&);
    ~sipQResizeEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQResizeEvent(const sipQResizeEvent &);
    sipQResizeEvent &operator = (const sipQResizeEvent &);
};

sipQResizeEvent::sipQResizeEvent(const  ::QSize& a0,const  ::QSize& a1):  ::QResizeEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQResizeEvent::sipQResizeEvent(const  ::QResizeEvent& a0):  ::QResizeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQResizeEvent::~sipQResizeEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QResizeEvent_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QResizeEvent_size(PyObject *, PyObject *);}
static PyObject *meth_QResizeEvent_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResizeEvent, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QResizeEvent, sipName_size, doc_QResizeEvent_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResizeEvent_oldSize, "oldSize(self) -> QSize");

extern "C" {static PyObject *meth_QResizeEvent_oldSize(PyObject *, PyObject *);}
static PyObject *meth_QResizeEvent_oldSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResizeEvent, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->oldSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QResizeEvent, sipName_oldSize, doc_QResizeEvent_oldSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QResizeEvent(void *, const sipTypeDef *);}
static void *cast_QResizeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QResizeEvent *sipCpp = reinterpret_cast< ::QResizeEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QResizeEvent(void *, int);}
static void release_QResizeEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQResizeEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QResizeEvent *>(sipCppV);
}


extern "C" {static void assign_QResizeEvent(void *, Py_ssize_t, void *);}
static void assign_QResizeEvent(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QResizeEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QResizeEvent *>(sipSrc);
}


extern "C" {static void *copy_QResizeEvent(const void *, Py_ssize_t);}
static void *copy_QResizeEvent(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QResizeEvent(reinterpret_cast<const  ::QResizeEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QResizeEvent(sipSimpleWrapper *);}
static void dealloc_QResizeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQResizeEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QResizeEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QResizeEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QResizeEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQResizeEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
            sipCpp = new sipQResizeEvent(*a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QResizeEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QResizeEvent, &a0))
        {
            sipCpp = new sipQResizeEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QResizeEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QResizeEvent[] = {
    {sipName_oldSize, meth_QResizeEvent_oldSize, METH_VARARGS, doc_QResizeEvent_oldSize},
    {sipName_size, meth_QResizeEvent_size, METH_VARARGS, doc_QResizeEvent_size}
};

PyDoc_STRVAR(doc_QResizeEvent, "\1QResizeEvent(QSize, QSize)\n"
"QResizeEvent(QResizeEvent)");


static pyqt5ClassPluginDef plugin_QResizeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QResizeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QResizeEvent,
        SIP_NULLPTR,
        &plugin_QResizeEvent
    },
    {
        sipNameNr_QResizeEvent,
        {0, 0, 1},
        2, methods_QResizeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QResizeEvent,
    -1,
    -1,
    supers_QResizeEvent,
    SIP_NULLPTR,
    init_type_QResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QResizeEvent,
    assign_QResizeEvent,
    SIP_NULLPTR,
    copy_QResizeEvent,
    release_QResizeEvent,
    cast_QResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
