/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 124 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLFramebufferObjectFormat.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLFramebufferObjectFormat.cpp"


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setSamples, doc_QOpenGLFramebufferObjectFormat_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_samples, doc_QOpenGLFramebufferObjectFormat_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setMipmap, "setMipmap(self, bool)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setMipmap, doc_QOpenGLFramebufferObjectFormat_setMipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_mipmap, "mipmap(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_mipmap, doc_QOpenGLFramebufferObjectFormat_mipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setAttachment, "setAttachment(self, QOpenGLFramebufferObject.Attachment)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject::Attachment a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, sipType_QOpenGLFramebufferObject_Attachment, &a0))
        {
            sipCpp->setAttachment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setAttachment, doc_QOpenGLFramebufferObjectFormat_setAttachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_attachment, "attachment(self) -> QOpenGLFramebufferObject.Attachment");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::QOpenGLFramebufferObject::Attachment sipRes;

            sipRes = sipCpp->attachment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLFramebufferObject_Attachment);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_attachment, doc_QOpenGLFramebufferObjectFormat_attachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setTextureTarget, "setTextureTarget(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setTextureTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setTextureTarget, doc_QOpenGLFramebufferObjectFormat_setTextureTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_textureTarget, "textureTarget(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::GLenum sipRes;

            sipRes = sipCpp->textureTarget();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_textureTarget, doc_QOpenGLFramebufferObjectFormat_textureTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, "setInternalTextureFormat(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setInternalTextureFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setInternalTextureFormat, doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_internalTextureFormat, "internalTextureFormat(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::GLenum sipRes;

            sipRes = sipCpp->internalTextureFormat();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_internalTextureFormat, doc_QOpenGLFramebufferObjectFormat_internalTextureFormat);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLFramebufferObjectFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLFramebufferObjectFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLFramebufferObjectFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLFramebufferObjectFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFramebufferObjectFormat(void *, int);}
static void release_QOpenGLFramebufferObjectFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipCppV);
}


extern "C" {static void *array_QOpenGLFramebufferObjectFormat(Py_ssize_t);}
static void *array_QOpenGLFramebufferObjectFormat(Py_ssize_t sipNrElem)
{
    return new  ::QOpenGLFramebufferObjectFormat[sipNrElem];
}


extern "C" {static void assign_QOpenGLFramebufferObjectFormat(void *, Py_ssize_t, void *);}
static void assign_QOpenGLFramebufferObjectFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipSrc);
}


extern "C" {static void *copy_QOpenGLFramebufferObjectFormat(const void *, Py_ssize_t);}
static void *copy_QOpenGLFramebufferObjectFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QOpenGLFramebufferObjectFormat(reinterpret_cast<const  ::QOpenGLFramebufferObjectFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *);}
static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLFramebufferObjectFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLFramebufferObjectFormat();

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            sipCpp = new  ::QOpenGLFramebufferObjectFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLFramebufferObjectFormat[] = {
    {(void *)slot_QOpenGLFramebufferObjectFormat___ne__, ne_slot},
    {(void *)slot_QOpenGLFramebufferObjectFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLFramebufferObjectFormat[] = {
    {sipName_attachment, meth_QOpenGLFramebufferObjectFormat_attachment, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_attachment},
    {sipName_internalTextureFormat, meth_QOpenGLFramebufferObjectFormat_internalTextureFormat, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_internalTextureFormat},
    {sipName_mipmap, meth_QOpenGLFramebufferObjectFormat_mipmap, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_mipmap},
    {sipName_samples, meth_QOpenGLFramebufferObjectFormat_samples, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_samples},
    {sipName_setAttachment, meth_QOpenGLFramebufferObjectFormat_setAttachment, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_setAttachment},
    {sipName_setInternalTextureFormat, meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat},
    {sipName_setMipmap, meth_QOpenGLFramebufferObjectFormat_setMipmap, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_setMipmap},
    {sipName_setSamples, meth_QOpenGLFramebufferObjectFormat_setSamples, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_setSamples},
    {sipName_setTextureTarget, meth_QOpenGLFramebufferObjectFormat_setTextureTarget, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_setTextureTarget},
    {sipName_textureTarget, meth_QOpenGLFramebufferObjectFormat_textureTarget, METH_VARARGS, doc_QOpenGLFramebufferObjectFormat_textureTarget}
};

PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat, "\1QOpenGLFramebufferObjectFormat()\n"
"QOpenGLFramebufferObjectFormat(QOpenGLFramebufferObjectFormat)");


static pyqt5ClassPluginDef plugin_QOpenGLFramebufferObjectFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLFramebufferObjectFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFramebufferObjectFormat,
        SIP_NULLPTR,
        &plugin_QOpenGLFramebufferObjectFormat
    },
    {
        sipNameNr_QOpenGLFramebufferObjectFormat,
        {0, 0, 1},
        10, methods_QOpenGLFramebufferObjectFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLFramebufferObjectFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLFramebufferObjectFormat,
    init_type_QOpenGLFramebufferObjectFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QOpenGLFramebufferObjectFormat,
    assign_QOpenGLFramebufferObjectFormat,
    array_QOpenGLFramebufferObjectFormat,
    copy_QOpenGLFramebufferObjectFormat,
    release_QOpenGLFramebufferObjectFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
