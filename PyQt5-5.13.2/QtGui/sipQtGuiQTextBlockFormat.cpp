/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 376 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 571 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 459 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 482 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 545 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 427 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextBlockFormat.cpp"


PyDoc_STRVAR(doc_QTextBlockFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_isValid, doc_QTextBlockFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextBlockFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_alignment, doc_QTextBlockFormat_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTopMargin, "setTopMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setTopMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTopMargin, doc_QTextBlockFormat_setTopMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_topMargin, "topMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->topMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_topMargin, doc_QTextBlockFormat_topMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setBottomMargin, "setBottomMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setBottomMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setBottomMargin, doc_QTextBlockFormat_setBottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_bottomMargin, "bottomMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottomMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_bottomMargin, doc_QTextBlockFormat_bottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLeftMargin, "setLeftMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setLeftMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLeftMargin, doc_QTextBlockFormat_setLeftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_leftMargin, "leftMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leftMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_leftMargin, doc_QTextBlockFormat_leftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setRightMargin, "setRightMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setRightMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setRightMargin, doc_QTextBlockFormat_setRightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_rightMargin, "rightMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rightMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_rightMargin, doc_QTextBlockFormat_rightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTextIndent, "setTextIndent(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setTextIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTextIndent, doc_QTextBlockFormat_setTextIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_textIndent, "textIndent(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_textIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_textIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->textIndent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_textIndent, doc_QTextBlockFormat_textIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_indent, "indent(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_indent, doc_QTextBlockFormat_indent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setNonBreakableLines, "setNonBreakableLines(self, bool)");

extern "C" {static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setNonBreakableLines(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setNonBreakableLines, doc_QTextBlockFormat_setNonBreakableLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_nonBreakableLines, "nonBreakableLines(self) -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->nonBreakableLines();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_nonBreakableLines, doc_QTextBlockFormat_nonBreakableLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setAlignment, doc_QTextBlockFormat_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setIndent, "setIndent(self, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setIndent, doc_QTextBlockFormat_setIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setPageBreakPolicy, "setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])");

extern "C" {static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            sipCpp->setPageBreakPolicy(*a0);
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setPageBreakPolicy, doc_QTextBlockFormat_setPageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_pageBreakPolicy, "pageBreakPolicy(self) -> QTextFormat.PageBreakFlags");

extern "C" {static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_pageBreakPolicy, doc_QTextBlockFormat_pageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTabPositions, "setTabPositions(self, Iterable[QTextOption.Tab])");

extern "C" {static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextOption::Tab>* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            sipCpp->setTabPositions(*a0);
            sipReleaseType(const_cast<QList< ::QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTabPositions, doc_QTextBlockFormat_setTabPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_tabPositions, "tabPositions(self) -> List[QTextOption.Tab]");

extern "C" {static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QList< ::QTextOption::Tab>*sipRes;

            sipRes = new QList< ::QTextOption::Tab>(sipCpp->tabPositions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_tabPositions, doc_QTextBlockFormat_tabPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLineHeight, "setLineHeight(self, float, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        int a1;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setLineHeight(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLineHeight, doc_QTextBlockFormat_setLineHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeight, "lineHeight(self) -> float\n"
"lineHeight(self, float, scaling: float = 1) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
         ::qreal a0;
         ::qreal a1 = 1;
        const  ::QTextBlockFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_scaling,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|d", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineHeight(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeight, doc_QTextBlockFormat_lineHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeightType, "lineHeightType(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineHeightType();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeightType, doc_QTextBlockFormat_lineHeightType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setHeadingLevel, "setHeadingLevel(self, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setHeadingLevel(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setHeadingLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setHeadingLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setHeadingLevel, doc_QTextBlockFormat_setHeadingLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_headingLevel, "headingLevel(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_headingLevel(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_headingLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->headingLevel();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_headingLevel, doc_QTextBlockFormat_headingLevel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextBlockFormat(void *, const sipTypeDef *);}
static void *cast_QTextBlockFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextBlockFormat *sipCpp = reinterpret_cast< ::QTextBlockFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockFormat(void *, int);}
static void release_QTextBlockFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBlockFormat *>(sipCppV);
}


extern "C" {static void *array_QTextBlockFormat(Py_ssize_t);}
static void *array_QTextBlockFormat(Py_ssize_t sipNrElem)
{
    return new  ::QTextBlockFormat[sipNrElem];
}


extern "C" {static void assign_QTextBlockFormat(void *, Py_ssize_t, void *);}
static void assign_QTextBlockFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBlockFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBlockFormat *>(sipSrc);
}


extern "C" {static void *copy_QTextBlockFormat(const void *, Py_ssize_t);}
static void *copy_QTextBlockFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextBlockFormat(reinterpret_cast<const  ::QTextBlockFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlockFormat(sipSimpleWrapper *);}
static void dealloc_QTextBlockFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlockFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBlockFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBlockFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextBlockFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlockFormat, &a0))
        {
            sipCpp = new  ::QTextBlockFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBlockFormat[] = {{306, 255, 1}};


static PyMethodDef methods_QTextBlockFormat[] = {
    {sipName_alignment, meth_QTextBlockFormat_alignment, METH_VARARGS, doc_QTextBlockFormat_alignment},
    {sipName_bottomMargin, meth_QTextBlockFormat_bottomMargin, METH_VARARGS, doc_QTextBlockFormat_bottomMargin},
    {sipName_headingLevel, meth_QTextBlockFormat_headingLevel, METH_VARARGS, doc_QTextBlockFormat_headingLevel},
    {sipName_indent, meth_QTextBlockFormat_indent, METH_VARARGS, doc_QTextBlockFormat_indent},
    {sipName_isValid, meth_QTextBlockFormat_isValid, METH_VARARGS, doc_QTextBlockFormat_isValid},
    {sipName_leftMargin, meth_QTextBlockFormat_leftMargin, METH_VARARGS, doc_QTextBlockFormat_leftMargin},
    {sipName_lineHeight, SIP_MLMETH_CAST(meth_QTextBlockFormat_lineHeight), METH_VARARGS|METH_KEYWORDS, doc_QTextBlockFormat_lineHeight},
    {sipName_lineHeightType, meth_QTextBlockFormat_lineHeightType, METH_VARARGS, doc_QTextBlockFormat_lineHeightType},
    {sipName_nonBreakableLines, meth_QTextBlockFormat_nonBreakableLines, METH_VARARGS, doc_QTextBlockFormat_nonBreakableLines},
    {sipName_pageBreakPolicy, meth_QTextBlockFormat_pageBreakPolicy, METH_VARARGS, doc_QTextBlockFormat_pageBreakPolicy},
    {sipName_rightMargin, meth_QTextBlockFormat_rightMargin, METH_VARARGS, doc_QTextBlockFormat_rightMargin},
    {sipName_setAlignment, meth_QTextBlockFormat_setAlignment, METH_VARARGS, doc_QTextBlockFormat_setAlignment},
    {sipName_setBottomMargin, meth_QTextBlockFormat_setBottomMargin, METH_VARARGS, doc_QTextBlockFormat_setBottomMargin},
    {sipName_setHeadingLevel, meth_QTextBlockFormat_setHeadingLevel, METH_VARARGS, doc_QTextBlockFormat_setHeadingLevel},
    {sipName_setIndent, meth_QTextBlockFormat_setIndent, METH_VARARGS, doc_QTextBlockFormat_setIndent},
    {sipName_setLeftMargin, meth_QTextBlockFormat_setLeftMargin, METH_VARARGS, doc_QTextBlockFormat_setLeftMargin},
    {sipName_setLineHeight, meth_QTextBlockFormat_setLineHeight, METH_VARARGS, doc_QTextBlockFormat_setLineHeight},
    {sipName_setNonBreakableLines, meth_QTextBlockFormat_setNonBreakableLines, METH_VARARGS, doc_QTextBlockFormat_setNonBreakableLines},
    {sipName_setPageBreakPolicy, meth_QTextBlockFormat_setPageBreakPolicy, METH_VARARGS, doc_QTextBlockFormat_setPageBreakPolicy},
    {sipName_setRightMargin, meth_QTextBlockFormat_setRightMargin, METH_VARARGS, doc_QTextBlockFormat_setRightMargin},
    {sipName_setTabPositions, meth_QTextBlockFormat_setTabPositions, METH_VARARGS, doc_QTextBlockFormat_setTabPositions},
    {sipName_setTextIndent, meth_QTextBlockFormat_setTextIndent, METH_VARARGS, doc_QTextBlockFormat_setTextIndent},
    {sipName_setTopMargin, meth_QTextBlockFormat_setTopMargin, METH_VARARGS, doc_QTextBlockFormat_setTopMargin},
    {sipName_tabPositions, meth_QTextBlockFormat_tabPositions, METH_VARARGS, doc_QTextBlockFormat_tabPositions},
    {sipName_textIndent, meth_QTextBlockFormat_textIndent, METH_VARARGS, doc_QTextBlockFormat_textIndent},
    {sipName_topMargin, meth_QTextBlockFormat_topMargin, METH_VARARGS, doc_QTextBlockFormat_topMargin}
};

static sipEnumMemberDef enummembers_QTextBlockFormat[] = {
    {sipName_FixedHeight, static_cast<int>( ::QTextBlockFormat::FixedHeight), 287},
    {sipName_LineDistanceHeight, static_cast<int>( ::QTextBlockFormat::LineDistanceHeight), 287},
    {sipName_MinimumHeight, static_cast<int>( ::QTextBlockFormat::MinimumHeight), 287},
    {sipName_ProportionalHeight, static_cast<int>( ::QTextBlockFormat::ProportionalHeight), 287},
    {sipName_SingleHeight, static_cast<int>( ::QTextBlockFormat::SingleHeight), 287},
};

PyDoc_STRVAR(doc_QTextBlockFormat, "\1QTextBlockFormat()\n"
"QTextBlockFormat(QTextBlockFormat)");


static pyqt5ClassPluginDef plugin_QTextBlockFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlockFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlockFormat,
        SIP_NULLPTR,
        &plugin_QTextBlockFormat
    },
    {
        sipNameNr_QTextBlockFormat,
        {0, 0, 1},
        26, methods_QTextBlockFormat,
        5, enummembers_QTextBlockFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlockFormat,
    -1,
    -1,
    supers_QTextBlockFormat,
    SIP_NULLPTR,
    init_type_QTextBlockFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextBlockFormat,
    assign_QTextBlockFormat,
    array_QTextBlockFormat,
    copy_QTextBlockFormat,
    release_QTextBlockFormat,
    cast_QTextBlockFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
