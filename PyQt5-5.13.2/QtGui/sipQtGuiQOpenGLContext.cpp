/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 46 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 28 "sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"


class sipQOpenGLContext : public  ::QOpenGLContext
{
public:
    sipQOpenGLContext( ::QObject*);
    virtual ~sipQOpenGLContext();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLContext(const sipQOpenGLContext &);
    sipQOpenGLContext &operator = (const sipQOpenGLContext &);

    char sipPyMethods[7];
};

sipQOpenGLContext::sipQOpenGLContext( ::QObject*a0):  ::QOpenGLContext(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLContext::~sipQOpenGLContext()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLContext::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLContext);

    return  ::QOpenGLContext::metaObject();
}

int sipQOpenGLContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLContext,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQOpenGLContext::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLContext, _clname, &sipCpp) ? sipCpp :  ::QOpenGLContext::qt_metacast(_clname));
}

bool sipQOpenGLContext::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QOpenGLContext::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLContext::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QOpenGLContext::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLContext::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLContext::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLContext::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLContext::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLContext::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLContext::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLContext_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QOpenGLContext_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setFormat, doc_QOpenGLContext_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setShareContext, "setShareContext(self, QOpenGLContext)");

extern "C" {static PyObject *meth_QOpenGLContext_setShareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setShareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->setShareContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setShareContext, doc_QOpenGLContext_setShareContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QOpenGLContext_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QScreen* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setScreen, doc_QOpenGLContext_setScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_create, doc_QOpenGLContext_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isValid, doc_QOpenGLContext_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOpenGLContext_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_format, doc_QOpenGLContext_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareContext, "shareContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_shareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->shareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareContext, doc_QOpenGLContext_shareContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareGroup, "shareGroup(self) -> QOpenGLContextGroup");

extern "C" {static PyObject *meth_QOpenGLContext_shareGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QOpenGLContextGroup*sipRes;

            sipRes = sipCpp->shareGroup();

            return sipConvertFromType(sipRes,sipType_QOpenGLContextGroup,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareGroup, doc_QOpenGLContext_shareGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QOpenGLContext_screen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_screen, doc_QOpenGLContext_screen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_defaultFramebufferObject, "defaultFramebufferObject(self) -> int");

extern "C" {static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_defaultFramebufferObject, doc_QOpenGLContext_defaultFramebufferObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_makeCurrent, "makeCurrent(self, QSurface) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->makeCurrent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_makeCurrent, doc_QOpenGLContext_makeCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_doneCurrent, doc_QOpenGLContext_doneCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_swapBuffers, "swapBuffers(self, QSurface)");

extern "C" {static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            sipCpp->swapBuffers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_swapBuffers, doc_QOpenGLContext_swapBuffers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_getProcAddress, "getProcAddress(self, Union[QByteArray, bytes, bytearray]) -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLContext_getProcAddress(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_getProcAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QFunctionPointer sipRes;

            sipRes = sipCpp->getProcAddress(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_getProcAddress, doc_QOpenGLContext_getProcAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_surface, "surface(self) -> QSurface");

extern "C" {static PyObject *meth_QOpenGLContext_surface(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_surface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QSurface*sipRes;

            sipRes = sipCpp->surface();

            return sipConvertFromType(sipRes,sipType_QSurface,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_surface, doc_QOpenGLContext_surface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_currentContext, "currentContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext*sipRes;

            sipRes =  ::QOpenGLContext::currentContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_currentContext, doc_QOpenGLContext_currentContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_areSharing, "areSharing(QOpenGLContext, QOpenGLContext) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QOpenGLContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QOpenGLContext, &a0, sipType_QOpenGLContext, &a1))
        {
            bool sipRes;

            sipRes =  ::QOpenGLContext::areSharing(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_areSharing, doc_QOpenGLContext_areSharing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_extensions, "extensions(self) -> Set[QByteArray]");

extern "C" {static PyObject *meth_QOpenGLContext_extensions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_extensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QSet< ::QByteArray>*sipRes;

            sipRes = new QSet< ::QByteArray>(sipCpp->extensions());

            return sipConvertFromNewType(sipRes,sipType_QSet_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_extensions, doc_QOpenGLContext_extensions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_hasExtension, "hasExtension(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_hasExtension(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_hasExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasExtension(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_hasExtension, doc_QOpenGLContext_hasExtension);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_versionFunctions, "versionFunctions(self, versionProfile: QOpenGLVersionProfile = None) -> object");

extern "C" {static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0 = 0;
        const  ::QOpenGLContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_versionProfile,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLVersionProfile, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 79 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopenglcontext.sip"
        sipRes = qpyopengl_version_functions(sipCpp, sipSelf, a0);
#line 872 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLContext.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_versionFunctions, doc_QOpenGLContext_versionFunctions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleHandle, "openGLModuleHandle() -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            void*sipRes;

            sipRes =  ::QOpenGLContext::openGLModuleHandle();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleHandle, doc_QOpenGLContext_openGLModuleHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleType, "openGLModuleType() -> QOpenGLContext.OpenGLModuleType");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext::OpenGLModuleType sipRes;

            sipRes =  ::QOpenGLContext::openGLModuleType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLContext_OpenGLModuleType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleType, doc_QOpenGLContext_openGLModuleType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_isOpenGLES, "isOpenGLES(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpenGLES();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isOpenGLES, doc_QOpenGLContext_isOpenGLES);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setNativeHandle, "setNativeHandle(self, Any)");

extern "C" {static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setNativeHandle(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setNativeHandle, doc_QOpenGLContext_setNativeHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_nativeHandle, "nativeHandle(self) -> Any");

extern "C" {static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->nativeHandle());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_nativeHandle, doc_QOpenGLContext_nativeHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_supportsThreadedOpenGL, "supportsThreadedOpenGL() -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_supportsThreadedOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_supportsThreadedOpenGL(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QOpenGLContext::supportsThreadedOpenGL();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_supportsThreadedOpenGL, doc_QOpenGLContext_supportsThreadedOpenGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_globalShareContext, "globalShareContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_globalShareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_globalShareContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext*sipRes;

            sipRes =  ::QOpenGLContext::globalShareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_globalShareContext, doc_QOpenGLContext_globalShareContext);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLContext(void *, const sipTypeDef *);}
static void *cast_QOpenGLContext(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLContext *sipCpp = reinterpret_cast< ::QOpenGLContext *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLContext(void *, int);}
static void release_QOpenGLContext(void *sipCppV, int)
{
     ::QOpenGLContext *sipCpp = reinterpret_cast< ::QOpenGLContext *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QOpenGLContext(Py_ssize_t);}
static void *array_QOpenGLContext(Py_ssize_t sipNrElem)
{
    return new  ::QOpenGLContext[sipNrElem];
}


extern "C" {static void dealloc_QOpenGLContext(sipSimpleWrapper *);}
static void dealloc_QOpenGLContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLContext *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLContext(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLContext *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLContext(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLContext[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLContext[] = {
    {sipName_areSharing, meth_QOpenGLContext_areSharing, METH_VARARGS, doc_QOpenGLContext_areSharing},
    {sipName_create, meth_QOpenGLContext_create, METH_VARARGS, doc_QOpenGLContext_create},
    {sipName_currentContext, meth_QOpenGLContext_currentContext, METH_VARARGS, doc_QOpenGLContext_currentContext},
    {sipName_defaultFramebufferObject, meth_QOpenGLContext_defaultFramebufferObject, METH_VARARGS, doc_QOpenGLContext_defaultFramebufferObject},
    {sipName_doneCurrent, meth_QOpenGLContext_doneCurrent, METH_VARARGS, doc_QOpenGLContext_doneCurrent},
    {sipName_extensions, meth_QOpenGLContext_extensions, METH_VARARGS, doc_QOpenGLContext_extensions},
    {sipName_format, meth_QOpenGLContext_format, METH_VARARGS, doc_QOpenGLContext_format},
    {sipName_getProcAddress, meth_QOpenGLContext_getProcAddress, METH_VARARGS, doc_QOpenGLContext_getProcAddress},
    {sipName_globalShareContext, meth_QOpenGLContext_globalShareContext, METH_VARARGS, doc_QOpenGLContext_globalShareContext},
    {sipName_hasExtension, meth_QOpenGLContext_hasExtension, METH_VARARGS, doc_QOpenGLContext_hasExtension},
    {sipName_isOpenGLES, meth_QOpenGLContext_isOpenGLES, METH_VARARGS, doc_QOpenGLContext_isOpenGLES},
    {sipName_isValid, meth_QOpenGLContext_isValid, METH_VARARGS, doc_QOpenGLContext_isValid},
    {sipName_makeCurrent, meth_QOpenGLContext_makeCurrent, METH_VARARGS, doc_QOpenGLContext_makeCurrent},
    {sipName_nativeHandle, meth_QOpenGLContext_nativeHandle, METH_VARARGS, doc_QOpenGLContext_nativeHandle},
    {sipName_openGLModuleHandle, meth_QOpenGLContext_openGLModuleHandle, METH_VARARGS, doc_QOpenGLContext_openGLModuleHandle},
    {sipName_openGLModuleType, meth_QOpenGLContext_openGLModuleType, METH_VARARGS, doc_QOpenGLContext_openGLModuleType},
    {sipName_screen, meth_QOpenGLContext_screen, METH_VARARGS, doc_QOpenGLContext_screen},
    {sipName_setFormat, meth_QOpenGLContext_setFormat, METH_VARARGS, doc_QOpenGLContext_setFormat},
    {sipName_setNativeHandle, meth_QOpenGLContext_setNativeHandle, METH_VARARGS, doc_QOpenGLContext_setNativeHandle},
    {sipName_setScreen, meth_QOpenGLContext_setScreen, METH_VARARGS, doc_QOpenGLContext_setScreen},
    {sipName_setShareContext, meth_QOpenGLContext_setShareContext, METH_VARARGS, doc_QOpenGLContext_setShareContext},
    {sipName_shareContext, meth_QOpenGLContext_shareContext, METH_VARARGS, doc_QOpenGLContext_shareContext},
    {sipName_shareGroup, meth_QOpenGLContext_shareGroup, METH_VARARGS, doc_QOpenGLContext_shareGroup},
    {sipName_supportsThreadedOpenGL, meth_QOpenGLContext_supportsThreadedOpenGL, METH_VARARGS, doc_QOpenGLContext_supportsThreadedOpenGL},
    {sipName_surface, meth_QOpenGLContext_surface, METH_VARARGS, doc_QOpenGLContext_surface},
    {sipName_swapBuffers, meth_QOpenGLContext_swapBuffers, METH_VARARGS, doc_QOpenGLContext_swapBuffers},
    {sipName_versionFunctions, SIP_MLMETH_CAST(meth_QOpenGLContext_versionFunctions), METH_VARARGS|METH_KEYWORDS, doc_QOpenGLContext_versionFunctions}
};

static sipEnumMemberDef enummembers_QOpenGLContext[] = {
    {sipName_LibGL, static_cast<int>( ::QOpenGLContext::LibGL), 132},
    {sipName_LibGLES, static_cast<int>( ::QOpenGLContext::LibGLES), 132},
};

PyDoc_STRVAR(doc_QOpenGLContext, "\1QOpenGLContext(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLContext[] = {
    {"aboutToBeDestroyed()", "\1aboutToBeDestroyed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QOpenGLContext = {
    & ::QOpenGLContext::staticMetaObject,
    0,
    signals_QOpenGLContext,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLContext = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLContext,
        SIP_NULLPTR,
        &plugin_QOpenGLContext
    },
    {
        sipNameNr_QOpenGLContext,
        {0, 0, 1},
        27, methods_QOpenGLContext,
        2, enummembers_QOpenGLContext,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLContext,
    -1,
    -1,
    supers_QOpenGLContext,
    SIP_NULLPTR,
    init_type_QOpenGLContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QOpenGLContext,
    SIP_NULLPTR,
    array_QOpenGLContext,
    SIP_NULLPTR,
    release_QOpenGLContext,
    cast_QOpenGLContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
