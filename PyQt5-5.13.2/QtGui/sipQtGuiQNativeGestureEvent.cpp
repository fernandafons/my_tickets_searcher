/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 863 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQNativeGestureEvent.cpp"


class sipQNativeGestureEvent : public  ::QNativeGestureEvent
{
public:
    sipQNativeGestureEvent( ::Qt::NativeGestureType,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::qreal, ::ulong, ::quint64);
    sipQNativeGestureEvent( ::Qt::NativeGestureType,const  ::QTouchDevice*,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::qreal, ::ulong, ::quint64);
    sipQNativeGestureEvent(const  ::QNativeGestureEvent&);
    ~sipQNativeGestureEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNativeGestureEvent(const sipQNativeGestureEvent &);
    sipQNativeGestureEvent &operator = (const sipQNativeGestureEvent &);
};

sipQNativeGestureEvent::sipQNativeGestureEvent( ::Qt::NativeGestureType a0,const  ::QPointF& a1,const  ::QPointF& a2,const  ::QPointF& a3, ::qreal a4, ::ulong a5, ::quint64 a6):  ::QNativeGestureEvent(a0,a1,a2,a3,a4,a5,a6), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::sipQNativeGestureEvent( ::Qt::NativeGestureType a0,const  ::QTouchDevice*a1,const  ::QPointF& a2,const  ::QPointF& a3,const  ::QPointF& a4, ::qreal a5, ::ulong a6, ::quint64 a7):  ::QNativeGestureEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::sipQNativeGestureEvent(const  ::QNativeGestureEvent& a0):  ::QNativeGestureEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::~sipQNativeGestureEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QNativeGestureEvent_gestureType, "gestureType(self) -> Qt.NativeGestureType");

extern "C" {static PyObject *meth_QNativeGestureEvent_gestureType(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_gestureType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::Qt::NativeGestureType sipRes;

            sipRes = sipCpp->gestureType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_NativeGestureType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_gestureType, doc_QNativeGestureEvent_gestureType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_value, "value(self) -> float");

extern "C" {static PyObject *meth_QNativeGestureEvent_value(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->value();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_value, doc_QNativeGestureEvent_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QNativeGestureEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_pos, doc_QNativeGestureEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QNativeGestureEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_globalPos, doc_QNativeGestureEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_localPos, "localPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_localPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_localPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->localPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_localPos, doc_QNativeGestureEvent_localPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_windowPos, "windowPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_windowPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_windowPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->windowPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_windowPos, doc_QNativeGestureEvent_windowPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_screenPos, "screenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_screenPos, doc_QNativeGestureEvent_screenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_device, "device(self) -> QTouchDevice");

extern "C" {static PyObject *meth_QNativeGestureEvent_device(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
            const  ::QTouchDevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(const_cast< ::QTouchDevice *>(sipRes),sipType_QTouchDevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_device, doc_QNativeGestureEvent_device);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNativeGestureEvent(void *, const sipTypeDef *);}
static void *cast_QNativeGestureEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNativeGestureEvent *sipCpp = reinterpret_cast< ::QNativeGestureEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNativeGestureEvent(void *, int);}
static void release_QNativeGestureEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNativeGestureEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QNativeGestureEvent *>(sipCppV);
}


extern "C" {static void assign_QNativeGestureEvent(void *, Py_ssize_t, void *);}
static void assign_QNativeGestureEvent(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNativeGestureEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNativeGestureEvent *>(sipSrc);
}


extern "C" {static void *copy_QNativeGestureEvent(const void *, Py_ssize_t);}
static void *copy_QNativeGestureEvent(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QNativeGestureEvent(reinterpret_cast<const  ::QNativeGestureEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNativeGestureEvent(sipSimpleWrapper *);}
static void dealloc_QNativeGestureEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNativeGestureEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNativeGestureEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNativeGestureEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNativeGestureEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQNativeGestureEvent *sipCpp = SIP_NULLPTR;

    {
         ::Qt::NativeGestureType a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
         ::qreal a4;
         ::ulong a5;
         ::quint64 a6;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1J1dmo", sipType_Qt_NativeGestureType, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, &a4, &a5, &a6))
        {
            sipCpp = new sipQNativeGestureEvent(a0,*a1,*a2,*a3,a4,a5,a6);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::Qt::NativeGestureType a0;
        const  ::QTouchDevice* a1;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
        const  ::QPointF* a4;
        int a4State = 0;
         ::qreal a5;
         ::ulong a6;
         ::quint64 a7;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ8J1J1J1dmo", sipType_Qt_NativeGestureType, &a0, sipType_QTouchDevice, &a1, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, sipType_QPointF, &a4, &a4State, &a5, &a6, &a7))
        {
            sipCpp = new sipQNativeGestureEvent(a0,a1,*a2,*a3,*a4,a5,a6,a7);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);
            sipReleaseType(const_cast< ::QPointF *>(a4),sipType_QPointF,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QNativeGestureEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNativeGestureEvent, &a0))
        {
            sipCpp = new sipQNativeGestureEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNativeGestureEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QNativeGestureEvent[] = {
    {sipName_device, meth_QNativeGestureEvent_device, METH_VARARGS, doc_QNativeGestureEvent_device},
    {sipName_gestureType, meth_QNativeGestureEvent_gestureType, METH_VARARGS, doc_QNativeGestureEvent_gestureType},
    {sipName_globalPos, meth_QNativeGestureEvent_globalPos, METH_VARARGS, doc_QNativeGestureEvent_globalPos},
    {sipName_localPos, meth_QNativeGestureEvent_localPos, METH_VARARGS, doc_QNativeGestureEvent_localPos},
    {sipName_pos, meth_QNativeGestureEvent_pos, METH_VARARGS, doc_QNativeGestureEvent_pos},
    {sipName_screenPos, meth_QNativeGestureEvent_screenPos, METH_VARARGS, doc_QNativeGestureEvent_screenPos},
    {sipName_value, meth_QNativeGestureEvent_value, METH_VARARGS, doc_QNativeGestureEvent_value},
    {sipName_windowPos, meth_QNativeGestureEvent_windowPos, METH_VARARGS, doc_QNativeGestureEvent_windowPos}
};

PyDoc_STRVAR(doc_QNativeGestureEvent, "\1QNativeGestureEvent(Qt.NativeGestureType, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)\n"
"QNativeGestureEvent(Qt.NativeGestureType, QTouchDevice, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)\n"
"QNativeGestureEvent(QNativeGestureEvent)");


static pyqt5ClassPluginDef plugin_QNativeGestureEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QNativeGestureEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNativeGestureEvent,
        SIP_NULLPTR,
        &plugin_QNativeGestureEvent
    },
    {
        sipNameNr_QNativeGestureEvent,
        {0, 0, 1},
        8, methods_QNativeGestureEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNativeGestureEvent,
    -1,
    -1,
    supers_QNativeGestureEvent,
    SIP_NULLPTR,
    init_type_QNativeGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNativeGestureEvent,
    assign_QNativeGestureEvent,
    SIP_NULLPTR,
    copy_QNativeGestureEvent,
    release_QNativeGestureEvent,
    cast_QNativeGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
