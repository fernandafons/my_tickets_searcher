/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"
#line 115 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPageLayout.cpp"


PyDoc_STRVAR(doc_QPageLayout_swap, "swap(self, QPageLayout)");

extern "C" {static PyObject *meth_QPageLayout_swap(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_swap, doc_QPageLayout_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_isEquivalentTo, "isEquivalentTo(self, QPageLayout) -> bool");

extern "C" {static PyObject *meth_QPageLayout_isEquivalentTo(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_isEquivalentTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEquivalentTo(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_isEquivalentTo, doc_QPageLayout_isEquivalentTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPageLayout_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_isValid, doc_QPageLayout_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMode, "setMode(self, QPageLayout.Mode)");

extern "C" {static PyObject *meth_QPageLayout_setMode(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Mode a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Mode, &a0))
        {
            sipCpp->setMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMode, doc_QPageLayout_setMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_mode, "mode(self) -> QPageLayout.Mode");

extern "C" {static PyObject *meth_QPageLayout_mode(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Mode sipRes;

            sipRes = sipCpp->mode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Mode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_mode, doc_QPageLayout_mode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setPageSize, "setPageSize(self, QPageSize, minMargins: QMarginsF = QMarginsF(0,0,0,0))");

extern "C" {static PyObject *meth_QPageLayout_setPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize* a0;
        const  ::QMarginsF& a1def = QMarginsF(0,0,0,0);
        const  ::QMarginsF* a1 = &a1def;
         ::QPageLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_minMargins,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageSize, &a0, sipType_QMarginsF, &a1))
        {
            sipCpp->setPageSize(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setPageSize, doc_QPageLayout_setPageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_pageSize, "pageSize(self) -> QPageSize");

extern "C" {static PyObject *meth_QPageLayout_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageSize*sipRes;

            sipRes = new  ::QPageSize(sipCpp->pageSize());

            return sipConvertFromNewType(sipRes,sipType_QPageSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_pageSize, doc_QPageLayout_pageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setOrientation, "setOrientation(self, QPageLayout.Orientation)");

extern "C" {static PyObject *meth_QPageLayout_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Orientation a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setOrientation, doc_QPageLayout_setOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_orientation, "orientation(self) -> QPageLayout.Orientation");

extern "C" {static PyObject *meth_QPageLayout_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Orientation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_orientation, doc_QPageLayout_orientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setUnits, "setUnits(self, QPageLayout.Unit)");

extern "C" {static PyObject *meth_QPageLayout_setUnits(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Unit a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
            sipCpp->setUnits(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setUnits, doc_QPageLayout_setUnits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_units, "units(self) -> QPageLayout.Unit");

extern "C" {static PyObject *meth_QPageLayout_units(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_units(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Unit sipRes;

            sipRes = sipCpp->units();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Unit);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_units, doc_QPageLayout_units);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMargins, "setMargins(self, QMarginsF) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QMarginsF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setMargins(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMargins, doc_QPageLayout_setMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setLeftMargin, "setLeftMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setLeftMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setLeftMargin, doc_QPageLayout_setLeftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setRightMargin, "setRightMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setRightMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setRightMargin, doc_QPageLayout_setRightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setTopMargin, "setTopMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setTopMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setTopMargin, doc_QPageLayout_setTopMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setBottomMargin, "setBottomMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setBottomMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setBottomMargin, doc_QPageLayout_setBottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_margins, "margins(self) -> QMarginsF\n"
"margins(self, QPageLayout.Unit) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_margins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_margins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->margins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->margins(a0));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_margins, doc_QPageLayout_margins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_marginsPoints, "marginsPoints(self) -> QMargins");

extern "C" {static PyObject *meth_QPageLayout_marginsPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_marginsPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->marginsPoints());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_marginsPoints, doc_QPageLayout_marginsPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_marginsPixels, "marginsPixels(self, int) -> QMargins");

extern "C" {static PyObject *meth_QPageLayout_marginsPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_marginsPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->marginsPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_marginsPixels, doc_QPageLayout_marginsPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMinimumMargins, "setMinimumMargins(self, QMarginsF)");

extern "C" {static PyObject *meth_QPageLayout_setMinimumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMinimumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QMarginsF, &a0))
        {
            sipCpp->setMinimumMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMinimumMargins, doc_QPageLayout_setMinimumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_minimumMargins, "minimumMargins(self) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_minimumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_minimumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->minimumMargins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_minimumMargins, doc_QPageLayout_minimumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_maximumMargins, "maximumMargins(self) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_maximumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_maximumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->maximumMargins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_maximumMargins, doc_QPageLayout_maximumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRect, "fullRect(self) -> QRectF\n"
"fullRect(self, QPageLayout.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPageLayout_fullRect(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->fullRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->fullRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRect, doc_QPageLayout_fullRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRectPoints, "fullRectPoints(self) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_fullRectPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRectPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->fullRectPoints());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRectPoints, doc_QPageLayout_fullRectPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRectPixels, "fullRectPixels(self, int) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_fullRectPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRectPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->fullRectPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRectPixels, doc_QPageLayout_fullRectPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRect, "paintRect(self) -> QRectF\n"
"paintRect(self, QPageLayout.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPageLayout_paintRect(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->paintRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->paintRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRect, doc_QPageLayout_paintRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRectPoints, "paintRectPoints(self) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_paintRectPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRectPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->paintRectPoints());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRectPoints, doc_QPageLayout_paintRectPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRectPixels, "paintRectPixels(self, int) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_paintRectPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRectPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->paintRectPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRectPixels, doc_QPageLayout_paintRectPixels);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPageLayout___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPageLayout___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageLayout *sipCpp = reinterpret_cast< ::QPageLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageLayout));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPageLayout, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPageLayout___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPageLayout___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageLayout *sipCpp = reinterpret_cast< ::QPageLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageLayout));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPageLayout, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPageLayout(void *, int);}
static void release_QPageLayout(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPageLayout *>(sipCppV);
}


extern "C" {static void *array_QPageLayout(Py_ssize_t);}
static void *array_QPageLayout(Py_ssize_t sipNrElem)
{
    return new  ::QPageLayout[sipNrElem];
}


extern "C" {static void assign_QPageLayout(void *, Py_ssize_t, void *);}
static void assign_QPageLayout(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPageLayout *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPageLayout *>(sipSrc);
}


extern "C" {static void *copy_QPageLayout(const void *, Py_ssize_t);}
static void *copy_QPageLayout(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QPageLayout(reinterpret_cast<const  ::QPageLayout *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPageLayout(sipSimpleWrapper *);}
static void dealloc_QPageLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPageLayout(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPageLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPageLayout(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPageLayout *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPageLayout();

            return sipCpp;
        }
    }

    {
        const  ::QPageSize* a0;
         ::QPageLayout::Orientation a1;
        const  ::QMarginsF* a2;
         ::QPageLayout::Unit a3 = QPageLayout::Point;
        const  ::QMarginsF& a4def = QMarginsF(0,0,0,0);
        const  ::QMarginsF* a4 = &a4def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_units,
            sipName_minMargins,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9EJ9|EJ9", sipType_QPageSize, &a0, sipType_QPageLayout_Orientation, &a1, sipType_QMarginsF, &a2, sipType_QPageLayout_Unit, &a3, sipType_QMarginsF, &a4))
        {
            sipCpp = new  ::QPageLayout(*a0,a1,*a2,a3,*a4);

            return sipCpp;
        }
    }

    {
        const  ::QPageLayout* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPageLayout, &a0))
        {
            sipCpp = new  ::QPageLayout(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPageLayout[] = {
    {(void *)slot_QPageLayout___eq__, eq_slot},
    {(void *)slot_QPageLayout___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPageLayout[] = {
    {sipName_fullRect, meth_QPageLayout_fullRect, METH_VARARGS, doc_QPageLayout_fullRect},
    {sipName_fullRectPixels, meth_QPageLayout_fullRectPixels, METH_VARARGS, doc_QPageLayout_fullRectPixels},
    {sipName_fullRectPoints, meth_QPageLayout_fullRectPoints, METH_VARARGS, doc_QPageLayout_fullRectPoints},
    {sipName_isEquivalentTo, meth_QPageLayout_isEquivalentTo, METH_VARARGS, doc_QPageLayout_isEquivalentTo},
    {sipName_isValid, meth_QPageLayout_isValid, METH_VARARGS, doc_QPageLayout_isValid},
    {sipName_margins, meth_QPageLayout_margins, METH_VARARGS, doc_QPageLayout_margins},
    {sipName_marginsPixels, meth_QPageLayout_marginsPixels, METH_VARARGS, doc_QPageLayout_marginsPixels},
    {sipName_marginsPoints, meth_QPageLayout_marginsPoints, METH_VARARGS, doc_QPageLayout_marginsPoints},
    {sipName_maximumMargins, meth_QPageLayout_maximumMargins, METH_VARARGS, doc_QPageLayout_maximumMargins},
    {sipName_minimumMargins, meth_QPageLayout_minimumMargins, METH_VARARGS, doc_QPageLayout_minimumMargins},
    {sipName_mode, meth_QPageLayout_mode, METH_VARARGS, doc_QPageLayout_mode},
    {sipName_orientation, meth_QPageLayout_orientation, METH_VARARGS, doc_QPageLayout_orientation},
    {sipName_pageSize, meth_QPageLayout_pageSize, METH_VARARGS, doc_QPageLayout_pageSize},
    {sipName_paintRect, meth_QPageLayout_paintRect, METH_VARARGS, doc_QPageLayout_paintRect},
    {sipName_paintRectPixels, meth_QPageLayout_paintRectPixels, METH_VARARGS, doc_QPageLayout_paintRectPixels},
    {sipName_paintRectPoints, meth_QPageLayout_paintRectPoints, METH_VARARGS, doc_QPageLayout_paintRectPoints},
    {sipName_setBottomMargin, meth_QPageLayout_setBottomMargin, METH_VARARGS, doc_QPageLayout_setBottomMargin},
    {sipName_setLeftMargin, meth_QPageLayout_setLeftMargin, METH_VARARGS, doc_QPageLayout_setLeftMargin},
    {sipName_setMargins, meth_QPageLayout_setMargins, METH_VARARGS, doc_QPageLayout_setMargins},
    {sipName_setMinimumMargins, meth_QPageLayout_setMinimumMargins, METH_VARARGS, doc_QPageLayout_setMinimumMargins},
    {sipName_setMode, meth_QPageLayout_setMode, METH_VARARGS, doc_QPageLayout_setMode},
    {sipName_setOrientation, meth_QPageLayout_setOrientation, METH_VARARGS, doc_QPageLayout_setOrientation},
    {sipName_setPageSize, SIP_MLMETH_CAST(meth_QPageLayout_setPageSize), METH_VARARGS|METH_KEYWORDS, doc_QPageLayout_setPageSize},
    {sipName_setRightMargin, meth_QPageLayout_setRightMargin, METH_VARARGS, doc_QPageLayout_setRightMargin},
    {sipName_setTopMargin, meth_QPageLayout_setTopMargin, METH_VARARGS, doc_QPageLayout_setTopMargin},
    {sipName_setUnits, meth_QPageLayout_setUnits, METH_VARARGS, doc_QPageLayout_setUnits},
    {sipName_swap, meth_QPageLayout_swap, METH_VARARGS, doc_QPageLayout_swap},
    {sipName_units, meth_QPageLayout_units, METH_VARARGS, doc_QPageLayout_units}
};

static sipEnumMemberDef enummembers_QPageLayout[] = {
    {sipName_Cicero, static_cast<int>( ::QPageLayout::Cicero), 184},
    {sipName_Didot, static_cast<int>( ::QPageLayout::Didot), 184},
    {sipName_FullPageMode, static_cast<int>( ::QPageLayout::FullPageMode), 182},
    {sipName_Inch, static_cast<int>( ::QPageLayout::Inch), 184},
    {sipName_Landscape, static_cast<int>( ::QPageLayout::Landscape), 183},
    {sipName_Millimeter, static_cast<int>( ::QPageLayout::Millimeter), 184},
    {sipName_Pica, static_cast<int>( ::QPageLayout::Pica), 184},
    {sipName_Point, static_cast<int>( ::QPageLayout::Point), 184},
    {sipName_Portrait, static_cast<int>( ::QPageLayout::Portrait), 183},
    {sipName_StandardMode, static_cast<int>( ::QPageLayout::StandardMode), 182},
};

PyDoc_STRVAR(doc_QPageLayout, "\1QPageLayout()\n"
"QPageLayout(QPageSize, QPageLayout.Orientation, QMarginsF, units: QPageLayout.Unit = QPageLayout.Point, minMargins: QMarginsF = QMarginsF(0,0,0,0))\n"
"QPageLayout(QPageLayout)");


static pyqt5ClassPluginDef plugin_QPageLayout = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPageLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPageLayout,
        SIP_NULLPTR,
        &plugin_QPageLayout
    },
    {
        sipNameNr_QPageLayout,
        {0, 0, 1},
        28, methods_QPageLayout,
        10, enummembers_QPageLayout,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPageLayout,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPageLayout,
    init_type_QPageLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPageLayout,
    assign_QPageLayout,
    array_QPageLayout,
    copy_QPageLayout,
    release_QPageLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
