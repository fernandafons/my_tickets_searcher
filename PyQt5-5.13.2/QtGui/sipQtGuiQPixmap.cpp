/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"


class sipQPixmap : public  ::QPixmap
{
public:
    sipQPixmap();
    sipQPixmap(int,int);
    sipQPixmap(const  ::QSize&);
    sipQPixmap(const  ::QString&,const char*, ::Qt::ImageConversionFlags);
    sipQPixmap(const char**);
    sipQPixmap(const  ::QPixmap&);
    virtual ~sipQPixmap();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPixmap(const sipQPixmap &);
    sipQPixmap &operator = (const sipQPixmap &);

    char sipPyMethods[3];
};

sipQPixmap::sipQPixmap():  ::QPixmap(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(int a0,int a1):  ::QPixmap(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QSize& a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QString& a0,const char*a1, ::Qt::ImageConversionFlags a2):  ::QPixmap(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const char**a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QPixmap& a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::~sipQPixmap()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQPixmap::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QPixmap::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQPixmap::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QPixmap::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPixmap::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QPixmap::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPixmap_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isNull, doc_QPixmap_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_devType, "devType(self) -> int");

extern "C" {static PyObject *meth_QPixmap_devType(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::devType() : sipCpp->devType());

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_devType, doc_QPixmap_devType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_width, "width(self) -> int");

extern "C" {static PyObject *meth_QPixmap_width(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_width, doc_QPixmap_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_height, "height(self) -> int");

extern "C" {static PyObject *meth_QPixmap_height(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_height, doc_QPixmap_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QPixmap_size(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_size, doc_QPixmap_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_rect, "rect(self) -> QRect");

extern "C" {static PyObject *meth_QPixmap_rect(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_rect, doc_QPixmap_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QPixmap_depth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_depth, doc_QPixmap_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_defaultDepth, "defaultDepth() -> int");

extern "C" {static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QPixmap::defaultDepth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_defaultDepth, doc_QPixmap_defaultDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fill, "fill(self, color: Union[QColor, Qt.GlobalColor, QGradient] = Qt.GlobalColor.white)");

extern "C" {static PyObject *meth_QPixmap_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor& a0def = Qt::GlobalColor::white;
        const  ::QColor* a0 = &a0def;
        int a0State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_color,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->fill(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fill, doc_QPixmap_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_mask, "mask(self) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_mask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_mask, doc_QPixmap_mask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_setMask, "setMask(self, QBitmap)");

extern "C" {static PyObject *meth_QPixmap_setMask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitmap* a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QBitmap, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setMask, doc_QPixmap_setMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_hasAlpha, "hasAlpha(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlpha();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlpha, doc_QPixmap_hasAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_hasAlphaChannel, "hasAlphaChannel(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlphaChannel();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlphaChannel, doc_QPixmap_hasAlphaChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_createHeuristicMask, "createHeuristicMask(self, clipTight: bool = True) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createHeuristicMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clipTight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QPixmap, &sipCpp, &a0))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->createHeuristicMask(a0));

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createHeuristicMask, doc_QPixmap_createHeuristicMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_createMaskFromColor, "createMaskFromColor(self, Union[QColor, Qt.GlobalColor, QGradient], mode: Qt.MaskMode = Qt.MaskInColor) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createMaskFromColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::Qt::MaskMode a1 = Qt::MaskInColor;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State, sipType_Qt_MaskMode, &a1))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->createMaskFromColor(*a0,a1));
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createMaskFromColor, doc_QPixmap_createMaskFromColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaled, "scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap\n"
"scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a3 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|EE", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2, sipType_Qt_TransformationMode, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaled(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a2 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1, sipType_Qt_TransformationMode, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaled(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaled, doc_QPixmap_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaledToWidth, "scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaledToWidth(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToWidth, doc_QPixmap_scaledToWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaledToHeight, "scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaledToHeight(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToHeight, doc_QPixmap_scaledToHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_toImage, "toImage(self) -> QImage");

extern "C" {static PyObject *meth_QPixmap_toImage(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->toImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_toImage, doc_QPixmap_toImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fromImage, "fromImage(QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|J1", sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap( ::QPixmap::fromImage(*a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImage, doc_QPixmap_fromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fromImageReader, "fromImageReader(QImageReader, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageReader* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J1", sipType_QImageReader, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap( ::QPixmap::fromImageReader(a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImageReader, doc_QPixmap_fromImageReader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_convertFromImage, "convertFromImage(self, QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_convertFromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_convertFromImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->convertFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_convertFromImage, doc_QPixmap_convertFromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_load, "load(self, str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->load(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_load, doc_QPixmap_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_loadFromData, "loadFromData(self, bytes, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool\n"
"loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        Py_ssize_t a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bk|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2Keep, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(a0,(uint)a1,a2,*a3);
            Py_XDECREF(a2Keep);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_loadFromData, doc_QPixmap_loadFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_save, "save(self, str, format: str = None, quality: int = -1) -> bool\n"
"save(self, QIODevice, format: str = None, quality: int = -1) -> bool");

extern "C" {static PyObject *meth_QPixmap_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAi", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->save(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|AAi", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->save(a0,a1,a2);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_save, doc_QPixmap_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_copy, "copy(self, rect: QRect = QRect()) -> QPixmap\n"
"copy(self, int, int, int, int) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect& a0def = QRect();
        const  ::QRect* a0 = &a0def;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QRect, &a0))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->copy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QPixmap *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Biiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->copy(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_copy, doc_QPixmap_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_detach, "detach(self)");

extern "C" {static PyObject *meth_QPixmap_detach(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_detach, doc_QPixmap_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_isQBitmap, "isQBitmap(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_isQBitmap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isQBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isQBitmap();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isQBitmap, doc_QPixmap_isQBitmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPixmap_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_paintEngine, doc_QPixmap_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPixmap_metric(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::metric(a0) : sipCpp->metric(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_metric, doc_QPixmap_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_transformed, "transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_transformed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_transformed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QTransform, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->transformed(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_transformed, doc_QPixmap_transformed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_trueMatrix, "trueMatrix(QTransform, int, int) -> QTransform");

extern "C" {static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QTransform, &a0, &a1, &a2))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QPixmap::trueMatrix(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_trueMatrix, doc_QPixmap_trueMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QPixmap_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_cacheKey, doc_QPixmap_cacheKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scroll, "scroll(self, int, int, QRect) -> QRegion\n"
"scroll(self, int, int, int, int, int, int) -> QRegion");

extern "C" {static PyObject *meth_QPixmap_scroll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scroll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QRect* a2;
         ::QRegion* a3;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ9", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_QRect, &a2))
        {
            a3 = new  ::QRegion();

            sipCpp->scroll(a0,a1,*a2,a3);

            return sipConvertFromNewType(a3,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::QRegion* a6;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            a6 = new  ::QRegion();

            sipCpp->scroll(a0,a1,a2,a3,a4,a5,a6);

            return sipConvertFromNewType(a6,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scroll, doc_QPixmap_scroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_swap, "swap(self, QPixmap)");

extern "C" {static PyObject *meth_QPixmap_swap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixmap* a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_swap, doc_QPixmap_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QPixmap_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_devicePixelRatio, doc_QPixmap_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QPixmap_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPixmap, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setDevicePixelRatio, doc_QPixmap_setDevicePixelRatio);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPixmap(void *, const sipTypeDef *);}
static void *cast_QPixmap(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPixmap *sipCpp = reinterpret_cast< ::QPixmap *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmap(void *, int);}
static void release_QPixmap(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPixmap *>(sipCppV);
    else
        delete reinterpret_cast< ::QPixmap *>(sipCppV);
}


extern "C" {static void *array_QPixmap(Py_ssize_t);}
static void *array_QPixmap(Py_ssize_t sipNrElem)
{
    return new  ::QPixmap[sipNrElem];
}


extern "C" {static void assign_QPixmap(void *, Py_ssize_t, void *);}
static void assign_QPixmap(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixmap *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixmap *>(sipSrc);
}


extern "C" {static void *copy_QPixmap(const void *, Py_ssize_t);}
static void *copy_QPixmap(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QPixmap(reinterpret_cast<const  ::QPixmap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmap(sipSimpleWrapper *);}
static void dealloc_QPixmap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPixmap *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixmap(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPixmap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixmap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPixmap *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQPixmap();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new sipQPixmap(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new sipQPixmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::ImageConversionFlag::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|AAJ1", sipType_QString,&a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            sipCpp = new sipQPixmap(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpixmap.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQPixmap(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 1630 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            sipCpp = new sipQPixmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpixmap.sip"
        if (a0->canConvert<QPixmap>())
            sipCpp = new sipQPixmap(a0->value<QPixmap>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 1676 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPixmap.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPixmap[] = {{193, 255, 1}};


static PyMethodDef methods_QPixmap[] = {
    {sipName_cacheKey, meth_QPixmap_cacheKey, METH_VARARGS, doc_QPixmap_cacheKey},
    {sipName_convertFromImage, SIP_MLMETH_CAST(meth_QPixmap_convertFromImage), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_convertFromImage},
    {sipName_copy, SIP_MLMETH_CAST(meth_QPixmap_copy), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_copy},
    {sipName_createHeuristicMask, SIP_MLMETH_CAST(meth_QPixmap_createHeuristicMask), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_createHeuristicMask},
    {sipName_createMaskFromColor, SIP_MLMETH_CAST(meth_QPixmap_createMaskFromColor), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_createMaskFromColor},
    {sipName_defaultDepth, meth_QPixmap_defaultDepth, METH_VARARGS, doc_QPixmap_defaultDepth},
    {sipName_depth, meth_QPixmap_depth, METH_VARARGS, doc_QPixmap_depth},
    {sipName_detach, meth_QPixmap_detach, METH_VARARGS, doc_QPixmap_detach},
    {sipName_devType, meth_QPixmap_devType, METH_VARARGS, doc_QPixmap_devType},
    {sipName_devicePixelRatio, meth_QPixmap_devicePixelRatio, METH_VARARGS, doc_QPixmap_devicePixelRatio},
    {sipName_fill, SIP_MLMETH_CAST(meth_QPixmap_fill), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_fill},
    {sipName_fromImage, SIP_MLMETH_CAST(meth_QPixmap_fromImage), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_fromImage},
    {sipName_fromImageReader, SIP_MLMETH_CAST(meth_QPixmap_fromImageReader), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_fromImageReader},
    {sipName_hasAlpha, meth_QPixmap_hasAlpha, METH_VARARGS, doc_QPixmap_hasAlpha},
    {sipName_hasAlphaChannel, meth_QPixmap_hasAlphaChannel, METH_VARARGS, doc_QPixmap_hasAlphaChannel},
    {sipName_height, meth_QPixmap_height, METH_VARARGS, doc_QPixmap_height},
    {sipName_isNull, meth_QPixmap_isNull, METH_VARARGS, doc_QPixmap_isNull},
    {sipName_isQBitmap, meth_QPixmap_isQBitmap, METH_VARARGS, doc_QPixmap_isQBitmap},
    {sipName_load, SIP_MLMETH_CAST(meth_QPixmap_load), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_load},
    {sipName_loadFromData, SIP_MLMETH_CAST(meth_QPixmap_loadFromData), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_loadFromData},
    {sipName_mask, meth_QPixmap_mask, METH_VARARGS, doc_QPixmap_mask},
    {sipName_metric, meth_QPixmap_metric, METH_VARARGS, doc_QPixmap_metric},
    {sipName_paintEngine, meth_QPixmap_paintEngine, METH_VARARGS, doc_QPixmap_paintEngine},
    {sipName_rect, meth_QPixmap_rect, METH_VARARGS, doc_QPixmap_rect},
    {sipName_save, SIP_MLMETH_CAST(meth_QPixmap_save), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_save},
    {sipName_scaled, SIP_MLMETH_CAST(meth_QPixmap_scaled), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_scaled},
    {sipName_scaledToHeight, SIP_MLMETH_CAST(meth_QPixmap_scaledToHeight), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_scaledToHeight},
    {sipName_scaledToWidth, SIP_MLMETH_CAST(meth_QPixmap_scaledToWidth), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_scaledToWidth},
    {sipName_scroll, SIP_MLMETH_CAST(meth_QPixmap_scroll), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_scroll},
    {sipName_setDevicePixelRatio, meth_QPixmap_setDevicePixelRatio, METH_VARARGS, doc_QPixmap_setDevicePixelRatio},
    {sipName_setMask, meth_QPixmap_setMask, METH_VARARGS, doc_QPixmap_setMask},
    {sipName_size, meth_QPixmap_size, METH_VARARGS, doc_QPixmap_size},
    {sipName_swap, meth_QPixmap_swap, METH_VARARGS, doc_QPixmap_swap},
    {sipName_toImage, meth_QPixmap_toImage, METH_VARARGS, doc_QPixmap_toImage},
    {sipName_transformed, SIP_MLMETH_CAST(meth_QPixmap_transformed), METH_VARARGS|METH_KEYWORDS, doc_QPixmap_transformed},
    {sipName_trueMatrix, meth_QPixmap_trueMatrix, METH_VARARGS, doc_QPixmap_trueMatrix},
    {sipName_width, meth_QPixmap_width, METH_VARARGS, doc_QPixmap_width}
};

PyDoc_STRVAR(doc_QPixmap, "\1QPixmap()\n"
"QPixmap(int, int)\n"
"QPixmap(QSize)\n"
"QPixmap(str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.ImageConversionFlag.AutoColor)\n"
"QPixmap(List[str])\n"
"QPixmap(QPixmap)\n"
"QPixmap(Any)");


static pyqt5ClassPluginDef plugin_QPixmap = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixmap = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixmap,
        SIP_NULLPTR,
        &plugin_QPixmap
    },
    {
        sipNameNr_QPixmap,
        {0, 0, 1},
        37, methods_QPixmap,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixmap,
    -1,
    -1,
    supers_QPixmap,
    SIP_NULLPTR,
    init_type_QPixmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPixmap,
    assign_QPixmap,
    array_QPixmap,
    copy_QPixmap,
    release_QPixmap,
    cast_QPixmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
