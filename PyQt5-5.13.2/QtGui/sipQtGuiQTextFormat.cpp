/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 571 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 459 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 482 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 545 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 427 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 376 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"


PyDoc_STRVAR(doc_QTextFormat_merge, "merge(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_merge(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->merge(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_merge, doc_QTextFormat_merge);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isValid, doc_QTextFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_type, "type(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_type(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_type, doc_QTextFormat_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_objectIndex, "objectIndex(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectIndex();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectIndex, doc_QTextFormat_objectIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectIndex, "setObjectIndex(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectIndex, doc_QTextFormat_setObjectIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_property, "property(self, int) -> Any");

extern "C" {static PyObject *meth_QTextFormat_property(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_property, doc_QTextFormat_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setProperty, "setProperty(self, int, Any)\n"
"setProperty(self, int, Iterable[QTextLength])");

extern "C" {static PyObject *meth_QTextFormat_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector< ::QTextLength>* a1;
        int a1State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVector_0100QTextLength,&a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast<QVector< ::QTextLength> *>(a1),sipType_QVector_0100QTextLength,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setProperty, doc_QTextFormat_setProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearProperty, "clearProperty(self, int)");

extern "C" {static PyObject *meth_QTextFormat_clearProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->clearProperty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearProperty, doc_QTextFormat_clearProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_hasProperty, "hasProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_hasProperty, doc_QTextFormat_hasProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_boolProperty, "boolProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_boolProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_boolProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->boolProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_boolProperty, doc_QTextFormat_boolProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_intProperty, "intProperty(self, int) -> int");

extern "C" {static PyObject *meth_QTextFormat_intProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_intProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->intProperty(a0);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_intProperty, doc_QTextFormat_intProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_doubleProperty, "doubleProperty(self, int) -> float");

extern "C" {static PyObject *meth_QTextFormat_doubleProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_doubleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->doubleProperty(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_doubleProperty, doc_QTextFormat_doubleProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_stringProperty, "stringProperty(self, int) -> str");

extern "C" {static PyObject *meth_QTextFormat_stringProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_stringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->stringProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_stringProperty, doc_QTextFormat_stringProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_colorProperty, "colorProperty(self, int) -> QColor");

extern "C" {static PyObject *meth_QTextFormat_colorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_colorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->colorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_colorProperty, doc_QTextFormat_colorProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_penProperty, "penProperty(self, int) -> QPen");

extern "C" {static PyObject *meth_QTextFormat_penProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_penProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->penProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_penProperty, doc_QTextFormat_penProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_brushProperty, "brushProperty(self, int) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_brushProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_brushProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brushProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_brushProperty, doc_QTextFormat_brushProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_lengthProperty, "lengthProperty(self, int) -> QTextLength");

extern "C" {static PyObject *meth_QTextFormat_lengthProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QTextLength*sipRes;

            sipRes = new  ::QTextLength(sipCpp->lengthProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLength,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthProperty, doc_QTextFormat_lengthProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_lengthVectorProperty, "lengthVectorProperty(self, int) -> List[QTextLength]");

extern "C" {static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVector< ::QTextLength>*sipRes;

            sipRes = new QVector< ::QTextLength>(sipCpp->lengthVectorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthVectorProperty, doc_QTextFormat_lengthVectorProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_properties, "properties(self) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QTextFormat_properties(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>(sipCpp->properties());

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_properties, doc_QTextFormat_properties);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_objectType, "objectType(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectType();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectType, doc_QTextFormat_objectType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isCharFormat, "isCharFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isCharFormat, doc_QTextFormat_isCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isBlockFormat, "isBlockFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBlockFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isBlockFormat, doc_QTextFormat_isBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isListFormat, "isListFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isListFormat, doc_QTextFormat_isListFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isFrameFormat, "isFrameFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFrameFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isFrameFormat, doc_QTextFormat_isFrameFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isImageFormat, "isImageFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isImageFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isImageFormat, doc_QTextFormat_isImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isTableFormat, "isTableFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableFormat, doc_QTextFormat_isTableFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toBlockFormat, "toBlockFormat(self) -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextFormat_toBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextBlockFormat*sipRes;

            sipRes = new  ::QTextBlockFormat(sipCpp->toBlockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toBlockFormat, doc_QTextFormat_toBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toCharFormat, "toCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextFormat_toCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->toCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toCharFormat, doc_QTextFormat_toCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toListFormat, "toListFormat(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextFormat_toListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextListFormat*sipRes;

            sipRes = new  ::QTextListFormat(sipCpp->toListFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toListFormat, doc_QTextFormat_toListFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toTableFormat, "toTableFormat(self) -> QTextTableFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextTableFormat*sipRes;

            sipRes = new  ::QTextTableFormat(sipCpp->toTableFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableFormat, doc_QTextFormat_toTableFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toFrameFormat, "toFrameFormat(self) -> QTextFrameFormat");

extern "C" {static PyObject *meth_QTextFormat_toFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextFrameFormat*sipRes;

            sipRes = new  ::QTextFrameFormat(sipCpp->toFrameFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toFrameFormat, doc_QTextFormat_toFrameFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toImageFormat, "toImageFormat(self) -> QTextImageFormat");

extern "C" {static PyObject *meth_QTextFormat_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextImageFormat*sipRes;

            sipRes = new  ::QTextImageFormat(sipCpp->toImageFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextImageFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toImageFormat, doc_QTextFormat_toImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setLayoutDirection, "setLayoutDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setLayoutDirection, doc_QTextFormat_setLayoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_layoutDirection, "layoutDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextFormat_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_layoutDirection, doc_QTextFormat_layoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setBackground, doc_QTextFormat_setBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_background(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_background, doc_QTextFormat_background);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearBackground, "clearBackground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearBackground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearBackground, doc_QTextFormat_clearBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setForeground, "setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setForeground, doc_QTextFormat_setForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_foreground, "foreground(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_foreground, doc_QTextFormat_foreground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearForeground, "clearForeground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearForeground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearForeground, doc_QTextFormat_clearForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectType, "setObjectType(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectType, doc_QTextFormat_setObjectType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_propertyCount, "propertyCount(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_propertyCount, doc_QTextFormat_propertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isTableCellFormat, "isTableCellFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableCellFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableCellFormat, doc_QTextFormat_isTableCellFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toTableCellFormat, "toTableCellFormat(self) -> QTextTableCellFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextTableCellFormat*sipRes;

            sipRes = new  ::QTextTableCellFormat(sipCpp->toTableCellFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableCellFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableCellFormat, doc_QTextFormat_toTableCellFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_swap, "swap(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_swap(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat* a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_swap, doc_QTextFormat_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isEmpty, doc_QTextFormat_isEmpty);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat *sipCpp = reinterpret_cast< ::QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat *sipCpp = reinterpret_cast< ::QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFormat(void *, int);}
static void release_QTextFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFormat *>(sipCppV);
}


extern "C" {static void *array_QTextFormat(Py_ssize_t);}
static void *array_QTextFormat(Py_ssize_t sipNrElem)
{
    return new  ::QTextFormat[sipNrElem];
}


extern "C" {static void assign_QTextFormat(void *, Py_ssize_t, void *);}
static void assign_QTextFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFormat *>(sipSrc);
}


extern "C" {static void *copy_QTextFormat(const void *, Py_ssize_t);}
static void *copy_QTextFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextFormat(reinterpret_cast<const  ::QTextFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFormat(sipSimpleWrapper *);}
static void dealloc_QTextFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFormat();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextFormat(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextFormat, &a0))
        {
            sipCpp = new  ::QTextFormat(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
        if (a0->canConvert<QTextFormat>())
            sipCpp = new QTextFormat(a0->value<QTextFormat>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 1510 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextFormat.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFormat[] = {
    {(void *)slot_QTextFormat___ne__, ne_slot},
    {(void *)slot_QTextFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFormat[] = {
    {sipName_background, meth_QTextFormat_background, METH_VARARGS, doc_QTextFormat_background},
    {sipName_boolProperty, meth_QTextFormat_boolProperty, METH_VARARGS, doc_QTextFormat_boolProperty},
    {sipName_brushProperty, meth_QTextFormat_brushProperty, METH_VARARGS, doc_QTextFormat_brushProperty},
    {sipName_clearBackground, meth_QTextFormat_clearBackground, METH_VARARGS, doc_QTextFormat_clearBackground},
    {sipName_clearForeground, meth_QTextFormat_clearForeground, METH_VARARGS, doc_QTextFormat_clearForeground},
    {sipName_clearProperty, meth_QTextFormat_clearProperty, METH_VARARGS, doc_QTextFormat_clearProperty},
    {sipName_colorProperty, meth_QTextFormat_colorProperty, METH_VARARGS, doc_QTextFormat_colorProperty},
    {sipName_doubleProperty, meth_QTextFormat_doubleProperty, METH_VARARGS, doc_QTextFormat_doubleProperty},
    {sipName_foreground, meth_QTextFormat_foreground, METH_VARARGS, doc_QTextFormat_foreground},
    {sipName_hasProperty, meth_QTextFormat_hasProperty, METH_VARARGS, doc_QTextFormat_hasProperty},
    {sipName_intProperty, meth_QTextFormat_intProperty, METH_VARARGS, doc_QTextFormat_intProperty},
    {sipName_isBlockFormat, meth_QTextFormat_isBlockFormat, METH_VARARGS, doc_QTextFormat_isBlockFormat},
    {sipName_isCharFormat, meth_QTextFormat_isCharFormat, METH_VARARGS, doc_QTextFormat_isCharFormat},
    {sipName_isEmpty, meth_QTextFormat_isEmpty, METH_VARARGS, doc_QTextFormat_isEmpty},
    {sipName_isFrameFormat, meth_QTextFormat_isFrameFormat, METH_VARARGS, doc_QTextFormat_isFrameFormat},
    {sipName_isImageFormat, meth_QTextFormat_isImageFormat, METH_VARARGS, doc_QTextFormat_isImageFormat},
    {sipName_isListFormat, meth_QTextFormat_isListFormat, METH_VARARGS, doc_QTextFormat_isListFormat},
    {sipName_isTableCellFormat, meth_QTextFormat_isTableCellFormat, METH_VARARGS, doc_QTextFormat_isTableCellFormat},
    {sipName_isTableFormat, meth_QTextFormat_isTableFormat, METH_VARARGS, doc_QTextFormat_isTableFormat},
    {sipName_isValid, meth_QTextFormat_isValid, METH_VARARGS, doc_QTextFormat_isValid},
    {sipName_layoutDirection, meth_QTextFormat_layoutDirection, METH_VARARGS, doc_QTextFormat_layoutDirection},
    {sipName_lengthProperty, meth_QTextFormat_lengthProperty, METH_VARARGS, doc_QTextFormat_lengthProperty},
    {sipName_lengthVectorProperty, meth_QTextFormat_lengthVectorProperty, METH_VARARGS, doc_QTextFormat_lengthVectorProperty},
    {sipName_merge, meth_QTextFormat_merge, METH_VARARGS, doc_QTextFormat_merge},
    {sipName_objectIndex, meth_QTextFormat_objectIndex, METH_VARARGS, doc_QTextFormat_objectIndex},
    {sipName_objectType, meth_QTextFormat_objectType, METH_VARARGS, doc_QTextFormat_objectType},
    {sipName_penProperty, meth_QTextFormat_penProperty, METH_VARARGS, doc_QTextFormat_penProperty},
    {sipName_properties, meth_QTextFormat_properties, METH_VARARGS, doc_QTextFormat_properties},
    {sipName_property, meth_QTextFormat_property, METH_VARARGS, doc_QTextFormat_property},
    {sipName_propertyCount, meth_QTextFormat_propertyCount, METH_VARARGS, doc_QTextFormat_propertyCount},
    {sipName_setBackground, meth_QTextFormat_setBackground, METH_VARARGS, doc_QTextFormat_setBackground},
    {sipName_setForeground, meth_QTextFormat_setForeground, METH_VARARGS, doc_QTextFormat_setForeground},
    {sipName_setLayoutDirection, meth_QTextFormat_setLayoutDirection, METH_VARARGS, doc_QTextFormat_setLayoutDirection},
    {sipName_setObjectIndex, meth_QTextFormat_setObjectIndex, METH_VARARGS, doc_QTextFormat_setObjectIndex},
    {sipName_setObjectType, meth_QTextFormat_setObjectType, METH_VARARGS, doc_QTextFormat_setObjectType},
    {sipName_setProperty, meth_QTextFormat_setProperty, METH_VARARGS, doc_QTextFormat_setProperty},
    {sipName_stringProperty, meth_QTextFormat_stringProperty, METH_VARARGS, doc_QTextFormat_stringProperty},
    {sipName_swap, meth_QTextFormat_swap, METH_VARARGS, doc_QTextFormat_swap},
    {sipName_toBlockFormat, meth_QTextFormat_toBlockFormat, METH_VARARGS, doc_QTextFormat_toBlockFormat},
    {sipName_toCharFormat, meth_QTextFormat_toCharFormat, METH_VARARGS, doc_QTextFormat_toCharFormat},
    {sipName_toFrameFormat, meth_QTextFormat_toFrameFormat, METH_VARARGS, doc_QTextFormat_toFrameFormat},
    {sipName_toImageFormat, meth_QTextFormat_toImageFormat, METH_VARARGS, doc_QTextFormat_toImageFormat},
    {sipName_toListFormat, meth_QTextFormat_toListFormat, METH_VARARGS, doc_QTextFormat_toListFormat},
    {sipName_toTableCellFormat, meth_QTextFormat_toTableCellFormat, METH_VARARGS, doc_QTextFormat_toTableCellFormat},
    {sipName_toTableFormat, meth_QTextFormat_toTableFormat, METH_VARARGS, doc_QTextFormat_toTableFormat},
    {sipName_type, meth_QTextFormat_type, METH_VARARGS, doc_QTextFormat_type}
};

static sipEnumMemberDef enummembers_QTextFormat[] = {
    {sipName_AnchorHref, static_cast<int>( ::QTextFormat::AnchorHref), 311},
    {sipName_AnchorName, static_cast<int>( ::QTextFormat::AnchorName), 311},
    {sipName_BackgroundBrush, static_cast<int>( ::QTextFormat::BackgroundBrush), 311},
    {sipName_BackgroundImageUrl, static_cast<int>( ::QTextFormat::BackgroundImageUrl), 311},
    {sipName_BlockAlignment, static_cast<int>( ::QTextFormat::BlockAlignment), 311},
    {sipName_BlockBottomMargin, static_cast<int>( ::QTextFormat::BlockBottomMargin), 311},
    {sipName_BlockFormat, static_cast<int>( ::QTextFormat::BlockFormat), 307},
    {sipName_BlockIndent, static_cast<int>( ::QTextFormat::BlockIndent), 311},
    {sipName_BlockLeftMargin, static_cast<int>( ::QTextFormat::BlockLeftMargin), 311},
    {sipName_BlockNonBreakableLines, static_cast<int>( ::QTextFormat::BlockNonBreakableLines), 311},
    {sipName_BlockRightMargin, static_cast<int>( ::QTextFormat::BlockRightMargin), 311},
    {sipName_BlockTopMargin, static_cast<int>( ::QTextFormat::BlockTopMargin), 311},
    {sipName_BlockTrailingHorizontalRulerWidth, static_cast<int>( ::QTextFormat::BlockTrailingHorizontalRulerWidth), 311},
    {sipName_CharFormat, static_cast<int>( ::QTextFormat::CharFormat), 307},
    {sipName_CssFloat, static_cast<int>( ::QTextFormat::CssFloat), 311},
    {sipName_FirstFontProperty, static_cast<int>( ::QTextFormat::FirstFontProperty), 311},
    {sipName_FontCapitalization, static_cast<int>( ::QTextFormat::FontCapitalization), 311},
    {sipName_FontFamily, static_cast<int>( ::QTextFormat::FontFamily), 311},
    {sipName_FontFixedPitch, static_cast<int>( ::QTextFormat::FontFixedPitch), 311},
    {sipName_FontHintingPreference, static_cast<int>( ::QTextFormat::FontHintingPreference), 311},
    {sipName_FontItalic, static_cast<int>( ::QTextFormat::FontItalic), 311},
    {sipName_FontKerning, static_cast<int>( ::QTextFormat::FontKerning), 311},
    {sipName_FontLetterSpacing, static_cast<int>( ::QTextFormat::FontLetterSpacing), 311},
    {sipName_FontLetterSpacingType, static_cast<int>( ::QTextFormat::FontLetterSpacingType), 311},
    {sipName_FontOverline, static_cast<int>( ::QTextFormat::FontOverline), 311},
    {sipName_FontPixelSize, static_cast<int>( ::QTextFormat::FontPixelSize), 311},
    {sipName_FontPointSize, static_cast<int>( ::QTextFormat::FontPointSize), 311},
    {sipName_FontSizeAdjustment, static_cast<int>( ::QTextFormat::FontSizeAdjustment), 311},
    {sipName_FontSizeIncrement, static_cast<int>( ::QTextFormat::FontSizeIncrement), 311},
    {sipName_FontStretch, static_cast<int>( ::QTextFormat::FontStretch), 311},
    {sipName_FontStrikeOut, static_cast<int>( ::QTextFormat::FontStrikeOut), 311},
    {sipName_FontStyleHint, static_cast<int>( ::QTextFormat::FontStyleHint), 311},
    {sipName_FontStyleStrategy, static_cast<int>( ::QTextFormat::FontStyleStrategy), 311},
    {sipName_FontUnderline, static_cast<int>( ::QTextFormat::FontUnderline), 311},
    {sipName_FontWeight, static_cast<int>( ::QTextFormat::FontWeight), 311},
    {sipName_FontWordSpacing, static_cast<int>( ::QTextFormat::FontWordSpacing), 311},
    {sipName_ForegroundBrush, static_cast<int>( ::QTextFormat::ForegroundBrush), 311},
    {sipName_FrameBorder, static_cast<int>( ::QTextFormat::FrameBorder), 311},
    {sipName_FrameBorderBrush, static_cast<int>( ::QTextFormat::FrameBorderBrush), 311},
    {sipName_FrameBorderStyle, static_cast<int>( ::QTextFormat::FrameBorderStyle), 311},
    {sipName_FrameBottomMargin, static_cast<int>( ::QTextFormat::FrameBottomMargin), 311},
    {sipName_FrameFormat, static_cast<int>( ::QTextFormat::FrameFormat), 307},
    {sipName_FrameHeight, static_cast<int>( ::QTextFormat::FrameHeight), 311},
    {sipName_FrameLeftMargin, static_cast<int>( ::QTextFormat::FrameLeftMargin), 311},
    {sipName_FrameMargin, static_cast<int>( ::QTextFormat::FrameMargin), 311},
    {sipName_FramePadding, static_cast<int>( ::QTextFormat::FramePadding), 311},
    {sipName_FrameRightMargin, static_cast<int>( ::QTextFormat::FrameRightMargin), 311},
    {sipName_FrameTopMargin, static_cast<int>( ::QTextFormat::FrameTopMargin), 311},
    {sipName_FrameWidth, static_cast<int>( ::QTextFormat::FrameWidth), 311},
    {sipName_FullWidthSelection, static_cast<int>( ::QTextFormat::FullWidthSelection), 311},
    {sipName_HeadingLevel, static_cast<int>( ::QTextFormat::HeadingLevel), 311},
    {sipName_ImageHeight, static_cast<int>( ::QTextFormat::ImageHeight), 311},
    {sipName_ImageName, static_cast<int>( ::QTextFormat::ImageName), 311},
    {sipName_ImageObject, static_cast<int>( ::QTextFormat::ImageObject), 308},
    {sipName_ImageQuality, static_cast<int>( ::QTextFormat::ImageQuality), 311},
    {sipName_ImageWidth, static_cast<int>( ::QTextFormat::ImageWidth), 311},
    {sipName_InvalidFormat, static_cast<int>( ::QTextFormat::InvalidFormat), 307},
    {sipName_IsAnchor, static_cast<int>( ::QTextFormat::IsAnchor), 311},
    {sipName_LastFontProperty, static_cast<int>( ::QTextFormat::LastFontProperty), 311},
    {sipName_LayoutDirection, static_cast<int>( ::QTextFormat::LayoutDirection), 311},
    {sipName_LineHeight, static_cast<int>( ::QTextFormat::LineHeight), 311},
    {sipName_LineHeightType, static_cast<int>( ::QTextFormat::LineHeightType), 311},
    {sipName_ListFormat, static_cast<int>( ::QTextFormat::ListFormat), 307},
    {sipName_ListIndent, static_cast<int>( ::QTextFormat::ListIndent), 311},
    {sipName_ListNumberPrefix, static_cast<int>( ::QTextFormat::ListNumberPrefix), 311},
    {sipName_ListNumberSuffix, static_cast<int>( ::QTextFormat::ListNumberSuffix), 311},
    {sipName_ListStyle, static_cast<int>( ::QTextFormat::ListStyle), 311},
    {sipName_NoObject, static_cast<int>( ::QTextFormat::NoObject), 308},
    {sipName_ObjectIndex, static_cast<int>( ::QTextFormat::ObjectIndex), 311},
    {sipName_ObjectType, static_cast<int>( ::QTextFormat::ObjectType), 311},
    {sipName_OutlinePen, static_cast<int>( ::QTextFormat::OutlinePen), 311},
    {sipName_PageBreakPolicy, static_cast<int>( ::QTextFormat::PageBreakPolicy), 311},
    {sipName_PageBreak_AlwaysAfter, static_cast<int>( ::QTextFormat::PageBreak_AlwaysAfter), 309},
    {sipName_PageBreak_AlwaysBefore, static_cast<int>( ::QTextFormat::PageBreak_AlwaysBefore), 309},
    {sipName_PageBreak_Auto, static_cast<int>( ::QTextFormat::PageBreak_Auto), 309},
    {sipName_TabPositions, static_cast<int>( ::QTextFormat::TabPositions), 311},
    {sipName_TableCellBottomPadding, static_cast<int>( ::QTextFormat::TableCellBottomPadding), 311},
    {sipName_TableCellColumnSpan, static_cast<int>( ::QTextFormat::TableCellColumnSpan), 311},
    {sipName_TableCellLeftPadding, static_cast<int>( ::QTextFormat::TableCellLeftPadding), 311},
    {sipName_TableCellObject, static_cast<int>( ::QTextFormat::TableCellObject), 308},
    {sipName_TableCellPadding, static_cast<int>( ::QTextFormat::TableCellPadding), 311},
    {sipName_TableCellRightPadding, static_cast<int>( ::QTextFormat::TableCellRightPadding), 311},
    {sipName_TableCellRowSpan, static_cast<int>( ::QTextFormat::TableCellRowSpan), 311},
    {sipName_TableCellSpacing, static_cast<int>( ::QTextFormat::TableCellSpacing), 311},
    {sipName_TableCellTopPadding, static_cast<int>( ::QTextFormat::TableCellTopPadding), 311},
    {sipName_TableColumnWidthConstraints, static_cast<int>( ::QTextFormat::TableColumnWidthConstraints), 311},
    {sipName_TableColumns, static_cast<int>( ::QTextFormat::TableColumns), 311},
    {sipName_TableFormat, static_cast<int>( ::QTextFormat::TableFormat), 307},
    {sipName_TableHeaderRowCount, static_cast<int>( ::QTextFormat::TableHeaderRowCount), 311},
    {sipName_TableObject, static_cast<int>( ::QTextFormat::TableObject), 308},
    {sipName_TextIndent, static_cast<int>( ::QTextFormat::TextIndent), 311},
    {sipName_TextOutline, static_cast<int>( ::QTextFormat::TextOutline), 311},
    {sipName_TextToolTip, static_cast<int>( ::QTextFormat::TextToolTip), 311},
    {sipName_TextUnderlineColor, static_cast<int>( ::QTextFormat::TextUnderlineColor), 311},
    {sipName_TextUnderlineStyle, static_cast<int>( ::QTextFormat::TextUnderlineStyle), 311},
    {sipName_TextVerticalAlignment, static_cast<int>( ::QTextFormat::TextVerticalAlignment), 311},
    {sipName_UserFormat, static_cast<int>( ::QTextFormat::UserFormat), 307},
    {sipName_UserObject, static_cast<int>( ::QTextFormat::UserObject), 308},
    {sipName_UserProperty, static_cast<int>( ::QTextFormat::UserProperty), 311},
};

PyDoc_STRVAR(doc_QTextFormat, "\1QTextFormat()\n"
"QTextFormat(int)\n"
"QTextFormat(QTextFormat)\n"
"QTextFormat(Any)");


static pyqt5ClassPluginDef plugin_QTextFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFormat,
        SIP_NULLPTR,
        &plugin_QTextFormat
    },
    {
        sipNameNr_QTextFormat,
        {0, 0, 1},
        46, methods_QTextFormat,
        99, enummembers_QTextFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextFormat,
    init_type_QTextFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextFormat,
    assign_QTextFormat,
    array_QTextFormat,
    copy_QTextFormat,
    release_QTextFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
