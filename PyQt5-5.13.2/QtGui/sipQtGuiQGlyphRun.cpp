/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGlyphRun.cpp"


PyDoc_STRVAR(doc_QGlyphRun_rawFont, "rawFont(self) -> QRawFont");

extern "C" {static PyObject *meth_QGlyphRun_rawFont(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_rawFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QRawFont*sipRes;

            sipRes = new  ::QRawFont(sipCpp->rawFont());

            return sipConvertFromNewType(sipRes,sipType_QRawFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_rawFont, doc_QGlyphRun_rawFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setRawFont, "setRawFont(self, QRawFont)");

extern "C" {static PyObject *meth_QGlyphRun_setRawFont(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setRawFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QRawFont, &a0))
        {
            sipCpp->setRawFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setRawFont, doc_QGlyphRun_setRawFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_glyphIndexes, "glyphIndexes(self) -> List[int]");

extern "C" {static PyObject *meth_QGlyphRun_glyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_glyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->glyphIndexes());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_glyphIndexes, doc_QGlyphRun_glyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setGlyphIndexes, "setGlyphIndexes(self, Iterable[int])");

extern "C" {static PyObject *meth_QGlyphRun_setGlyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setGlyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            sipCpp->setGlyphIndexes(*a0);
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setGlyphIndexes, doc_QGlyphRun_setGlyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_positions, "positions(self) -> List[QPointF]");

extern "C" {static PyObject *meth_QGlyphRun_positions(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_positions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->positions());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_positions, doc_QGlyphRun_positions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setPositions, "setPositions(self, Iterable[Union[QPointF, QPoint]])");

extern "C" {static PyObject *meth_QGlyphRun_setPositions(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QPointF>* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp->setPositions(*a0);
            sipReleaseType(const_cast<QVector< ::QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setPositions, doc_QGlyphRun_setPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_clear, "clear(self)");

extern "C" {static PyObject *meth_QGlyphRun_clear(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_clear, doc_QGlyphRun_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setOverline, "setOverline(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setOverline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setOverline, doc_QGlyphRun_setOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_overline, "overline(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_overline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_overline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_overline, doc_QGlyphRun_overline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setUnderline, "setUnderline(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setUnderline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setUnderline, doc_QGlyphRun_setUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_underline, "underline(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_underline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_underline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->underline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_underline, doc_QGlyphRun_underline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setStrikeOut, "setStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setStrikeOut, doc_QGlyphRun_setStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_strikeOut, "strikeOut(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_strikeOut(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_strikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->strikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_strikeOut, doc_QGlyphRun_strikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setRightToLeft, "setRightToLeft(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setRightToLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setRightToLeft, doc_QGlyphRun_setRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_isRightToLeft, "isRightToLeft(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_isRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_isRightToLeft, doc_QGlyphRun_isRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setFlag, "setFlag(self, QGlyphRun.GlyphRunFlag, enabled: bool = True)");

extern "C" {static PyObject *meth_QGlyphRun_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlag a0;
        bool a1 = 1;
         ::QGlyphRun *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun_GlyphRunFlag, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setFlag, doc_QGlyphRun_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setFlags, "setFlags(self, Union[QGlyphRun.GlyphRunFlags, QGlyphRun.GlyphRunFlag])");

extern "C" {static PyObject *meth_QGlyphRun_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QGlyphRun_GlyphRunFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setFlags, doc_QGlyphRun_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_flags, "flags(self) -> QGlyphRun.GlyphRunFlags");

extern "C" {static PyObject *meth_QGlyphRun_flags(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_flags, doc_QGlyphRun_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setBoundingRect, "setBoundingRect(self, QRectF)");

extern "C" {static PyObject *meth_QGlyphRun_setBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setBoundingRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setBoundingRect, doc_QGlyphRun_setBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QGlyphRun_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_boundingRect, doc_QGlyphRun_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_isEmpty, doc_QGlyphRun_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_swap, "swap(self, QGlyphRun)");

extern "C" {static PyObject *meth_QGlyphRun_swap(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_swap, doc_QGlyphRun_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QGlyphRun___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun *sipCpp = reinterpret_cast< ::QGlyphRun *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGlyphRun, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGlyphRun::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QGlyphRun, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGlyphRun___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun *sipCpp = reinterpret_cast< ::QGlyphRun *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGlyphRun, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGlyphRun::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QGlyphRun, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QGlyphRun(void *, int);}
static void release_QGlyphRun(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGlyphRun *>(sipCppV);
}


extern "C" {static void *array_QGlyphRun(Py_ssize_t);}
static void *array_QGlyphRun(Py_ssize_t sipNrElem)
{
    return new  ::QGlyphRun[sipNrElem];
}


extern "C" {static void assign_QGlyphRun(void *, Py_ssize_t, void *);}
static void assign_QGlyphRun(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGlyphRun *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGlyphRun *>(sipSrc);
}


extern "C" {static void *copy_QGlyphRun(const void *, Py_ssize_t);}
static void *copy_QGlyphRun(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QGlyphRun(reinterpret_cast<const  ::QGlyphRun *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGlyphRun(sipSimpleWrapper *);}
static void dealloc_QGlyphRun(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGlyphRun(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGlyphRun(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGlyphRun(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGlyphRun *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QGlyphRun();

            return sipCpp;
        }
    }

    {
        const  ::QGlyphRun* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QGlyphRun, &a0))
        {
            sipCpp = new  ::QGlyphRun(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGlyphRun[] = {
    {(void *)slot_QGlyphRun___ne__, ne_slot},
    {(void *)slot_QGlyphRun___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGlyphRun[] = {
    {sipName_boundingRect, meth_QGlyphRun_boundingRect, METH_VARARGS, doc_QGlyphRun_boundingRect},
    {sipName_clear, meth_QGlyphRun_clear, METH_VARARGS, doc_QGlyphRun_clear},
    {sipName_flags, meth_QGlyphRun_flags, METH_VARARGS, doc_QGlyphRun_flags},
    {sipName_glyphIndexes, meth_QGlyphRun_glyphIndexes, METH_VARARGS, doc_QGlyphRun_glyphIndexes},
    {sipName_isEmpty, meth_QGlyphRun_isEmpty, METH_VARARGS, doc_QGlyphRun_isEmpty},
    {sipName_isRightToLeft, meth_QGlyphRun_isRightToLeft, METH_VARARGS, doc_QGlyphRun_isRightToLeft},
    {sipName_overline, meth_QGlyphRun_overline, METH_VARARGS, doc_QGlyphRun_overline},
    {sipName_positions, meth_QGlyphRun_positions, METH_VARARGS, doc_QGlyphRun_positions},
    {sipName_rawFont, meth_QGlyphRun_rawFont, METH_VARARGS, doc_QGlyphRun_rawFont},
    {sipName_setBoundingRect, meth_QGlyphRun_setBoundingRect, METH_VARARGS, doc_QGlyphRun_setBoundingRect},
    {sipName_setFlag, SIP_MLMETH_CAST(meth_QGlyphRun_setFlag), METH_VARARGS|METH_KEYWORDS, doc_QGlyphRun_setFlag},
    {sipName_setFlags, meth_QGlyphRun_setFlags, METH_VARARGS, doc_QGlyphRun_setFlags},
    {sipName_setGlyphIndexes, meth_QGlyphRun_setGlyphIndexes, METH_VARARGS, doc_QGlyphRun_setGlyphIndexes},
    {sipName_setOverline, meth_QGlyphRun_setOverline, METH_VARARGS, doc_QGlyphRun_setOverline},
    {sipName_setPositions, meth_QGlyphRun_setPositions, METH_VARARGS, doc_QGlyphRun_setPositions},
    {sipName_setRawFont, meth_QGlyphRun_setRawFont, METH_VARARGS, doc_QGlyphRun_setRawFont},
    {sipName_setRightToLeft, meth_QGlyphRun_setRightToLeft, METH_VARARGS, doc_QGlyphRun_setRightToLeft},
    {sipName_setStrikeOut, meth_QGlyphRun_setStrikeOut, METH_VARARGS, doc_QGlyphRun_setStrikeOut},
    {sipName_setUnderline, meth_QGlyphRun_setUnderline, METH_VARARGS, doc_QGlyphRun_setUnderline},
    {sipName_strikeOut, meth_QGlyphRun_strikeOut, METH_VARARGS, doc_QGlyphRun_strikeOut},
    {sipName_swap, meth_QGlyphRun_swap, METH_VARARGS, doc_QGlyphRun_swap},
    {sipName_underline, meth_QGlyphRun_underline, METH_VARARGS, doc_QGlyphRun_underline}
};

static sipEnumMemberDef enummembers_QGlyphRun[] = {
    {sipName_Overline, static_cast<int>( ::QGlyphRun::Overline), 47},
    {sipName_RightToLeft, static_cast<int>( ::QGlyphRun::RightToLeft), 47},
    {sipName_SplitLigature, static_cast<int>( ::QGlyphRun::SplitLigature), 47},
    {sipName_StrikeOut, static_cast<int>( ::QGlyphRun::StrikeOut), 47},
    {sipName_Underline, static_cast<int>( ::QGlyphRun::Underline), 47},
};

PyDoc_STRVAR(doc_QGlyphRun, "\1QGlyphRun()\n"
"QGlyphRun(QGlyphRun)");


static pyqt5ClassPluginDef plugin_QGlyphRun = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGlyphRun = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGlyphRun,
        SIP_NULLPTR,
        &plugin_QGlyphRun
    },
    {
        sipNameNr_QGlyphRun,
        {0, 0, 1},
        22, methods_QGlyphRun,
        5, enummembers_QGlyphRun,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGlyphRun,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QGlyphRun,
    init_type_QGlyphRun,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGlyphRun,
    assign_QGlyphRun,
    array_QGlyphRun,
    copy_QGlyphRun,
    release_QGlyphRun,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
