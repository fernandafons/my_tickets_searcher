/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qguiapplication.sip"
#include <qguiapplication.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qinputmethod.sip"
#include <qinputmethod.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qstylehints.sip"
#include <qstylehints.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 137 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 143 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"


class sipQGuiApplication : public  ::QGuiApplication
{
public:
    sipQGuiApplication(int&,char**,int);
    virtual ~sipQGuiApplication();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool notify( ::QObject*, ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGuiApplication(const sipQGuiApplication &);
    sipQGuiApplication &operator = (const sipQGuiApplication &);

    char sipPyMethods[8];
};

sipQGuiApplication::sipQGuiApplication(int& a0,char**a1,int a2):  ::QGuiApplication(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGuiApplication::~sipQGuiApplication()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGuiApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QGuiApplication);

    return  ::QGuiApplication::metaObject();
}

int sipQGuiApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGuiApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGuiApplication,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQGuiApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QGuiApplication, _clname, &sipCpp) ? sipCpp :  ::QGuiApplication::qt_metacast(_clname));
}

void sipQGuiApplication::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QGuiApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QGuiApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QGuiApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QGuiApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QGuiApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QGuiApplication::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGuiApplication::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QGuiApplication::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::notify( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_notify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_notify);
#endif

    if (!sipMeth)
        return  ::QGuiApplication::notify(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QGuiApplication_allWindows, "allWindows() -> List[QWindow]");

extern "C" {static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindowList*sipRes;

            sipRes = new  ::QWindowList( ::QGuiApplication::allWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_allWindows, doc_QGuiApplication_allWindows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelWindows, "topLevelWindows() -> List[QWindow]");

extern "C" {static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindowList*sipRes;

            sipRes = new  ::QWindowList( ::QGuiApplication::topLevelWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelWindows, doc_QGuiApplication_topLevelWindows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelAt, "topLevelAt(QPoint) -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::topLevelAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelAt, doc_QGuiApplication_topLevelAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_platformName, "platformName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::platformName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_platformName, doc_QGuiApplication_platformName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_focusWindow, "focusWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::focusWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusWindow, doc_QGuiApplication_focusWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_focusObject, "focusObject() -> QObject");

extern "C" {static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QObject*sipRes;

            sipRes =  ::QGuiApplication::focusObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusObject, doc_QGuiApplication_focusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_primaryScreen, "primaryScreen() -> QScreen");

extern "C" {static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QScreen*sipRes;

            sipRes =  ::QGuiApplication::primaryScreen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_primaryScreen, doc_QGuiApplication_primaryScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_screens, "screens() -> List[QScreen]");

extern "C" {static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QScreen*>*sipRes;

            sipRes = new QList< ::QScreen*>( ::QGuiApplication::screens());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScreen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_screens, doc_QGuiApplication_screens);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_overrideCursor, "overrideCursor() -> QCursor");

extern "C" {static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCursor*sipRes;

            sipRes =  ::QGuiApplication::overrideCursor();

            return sipConvertFromType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_overrideCursor, doc_QGuiApplication_overrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setOverrideCursor, "setOverrideCursor(Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
             ::QGuiApplication::setOverrideCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setOverrideCursor, doc_QGuiApplication_setOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_changeOverrideCursor, "changeOverrideCursor(Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
             ::QGuiApplication::changeOverrideCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_changeOverrideCursor, doc_QGuiApplication_changeOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_restoreOverrideCursor, "restoreOverrideCursor()");

extern "C" {static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGuiApplication::restoreOverrideCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_restoreOverrideCursor, doc_QGuiApplication_restoreOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_font, "font() -> QFont");

extern "C" {static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont( ::QGuiApplication::font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_font, doc_QGuiApplication_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setFont, "setFont(QFont)");

extern "C" {static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QFont, &a0))
        {
             ::QGuiApplication::setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setFont, doc_QGuiApplication_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_clipboard, "clipboard() -> QClipboard");

extern "C" {static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QClipboard*sipRes;

            sipRes =  ::QGuiApplication::clipboard();

            return sipConvertFromType(sipRes,sipType_QClipboard,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_clipboard, doc_QGuiApplication_clipboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_palette, "palette() -> QPalette");

extern "C" {static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QPalette*sipRes;

            sipRes = new  ::QPalette( ::QGuiApplication::palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_palette, doc_QGuiApplication_palette);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setPalette, "setPalette(QPalette)");

extern "C" {static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPalette, &a0))
        {
             ::QGuiApplication::setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setPalette, doc_QGuiApplication_setPalette);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_keyboardModifiers, "keyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers( ::QGuiApplication::keyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_keyboardModifiers, doc_QGuiApplication_keyboardModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_queryKeyboardModifiers, "queryKeyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers( ::QGuiApplication::queryKeyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_queryKeyboardModifiers, doc_QGuiApplication_queryKeyboardModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_mouseButtons, "mouseButtons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons( ::QGuiApplication::mouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_mouseButtons, doc_QGuiApplication_mouseButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setLayoutDirection, "setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_LayoutDirection, &a0))
        {
             ::QGuiApplication::setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setLayoutDirection, doc_QGuiApplication_setLayoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_layoutDirection, "layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes =  ::QGuiApplication::layoutDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_layoutDirection, doc_QGuiApplication_layoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isRightToLeft, "isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isRightToLeft, doc_QGuiApplication_isRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isLeftToRight, "isLeftToRight() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isLeftToRight();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isLeftToRight, doc_QGuiApplication_isLeftToRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setDesktopSettingsAware, "setDesktopSettingsAware(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setDesktopSettingsAware(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setDesktopSettingsAware, doc_QGuiApplication_setDesktopSettingsAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_desktopSettingsAware, "desktopSettingsAware() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::desktopSettingsAware();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_desktopSettingsAware, doc_QGuiApplication_desktopSettingsAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setQuitOnLastWindowClosed, "setQuitOnLastWindowClosed(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setQuitOnLastWindowClosed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setQuitOnLastWindowClosed, doc_QGuiApplication_setQuitOnLastWindowClosed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_quitOnLastWindowClosed, "quitOnLastWindowClosed() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::quitOnLastWindowClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_quitOnLastWindowClosed, doc_QGuiApplication_quitOnLastWindowClosed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QGuiApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_exec_, doc_QGuiApplication_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QGuiApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QGuiApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_exec, doc_QGuiApplication_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGuiApplication::notify(a0,a1) : sipCpp->notify(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_notify, doc_QGuiApplication_notify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setApplicationDisplayName, "setApplicationDisplayName(str)");

extern "C" {static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QGuiApplication::setApplicationDisplayName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setApplicationDisplayName, doc_QGuiApplication_setApplicationDisplayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationDisplayName, "applicationDisplayName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::applicationDisplayName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationDisplayName, doc_QGuiApplication_applicationDisplayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_modalWindow, "modalWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::modalWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_modalWindow, doc_QGuiApplication_modalWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_styleHints, "styleHints() -> QStyleHints");

extern "C" {static PyObject *meth_QGuiApplication_styleHints(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_styleHints(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStyleHints*sipRes;

            sipRes =  ::QGuiApplication::styleHints();

            return sipConvertFromType(sipRes,sipType_QStyleHints,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_styleHints, doc_QGuiApplication_styleHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_inputMethod, "inputMethod() -> QInputMethod");

extern "C" {static PyObject *meth_QGuiApplication_inputMethod(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_inputMethod(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QInputMethod*sipRes;

            sipRes =  ::QGuiApplication::inputMethod();

            return sipConvertFromType(sipRes,sipType_QInputMethod,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_inputMethod, doc_QGuiApplication_inputMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_devicePixelRatio, doc_QGuiApplication_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isSessionRestored, "isSessionRestored(self) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSessionRestored();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSessionRestored, doc_QGuiApplication_isSessionRestored);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionId, "sessionId(self) -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionId());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionId, doc_QGuiApplication_sessionId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionKey, "sessionKey(self) -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionKey());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionKey, doc_QGuiApplication_sessionKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isSavingSession, "isSavingSession(self) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSavingSession(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSavingSession(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSavingSession();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSavingSession, doc_QGuiApplication_isSavingSession);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationState, "applicationState() -> Qt.ApplicationState");

extern "C" {static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::ApplicationState sipRes;

            sipRes =  ::QGuiApplication::applicationState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ApplicationState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationState, doc_QGuiApplication_applicationState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sync, "sync()");

extern "C" {static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGuiApplication::sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sync, doc_QGuiApplication_sync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setWindowIcon, "setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QIcon, &a0))
        {
             ::QGuiApplication::setWindowIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setWindowIcon, doc_QGuiApplication_setWindowIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_windowIcon, "windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon( ::QGuiApplication::windowIcon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_windowIcon, doc_QGuiApplication_windowIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGuiApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_event, doc_QGuiApplication_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isFallbackSessionManagementEnabled, "isFallbackSessionManagementEnabled() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isFallbackSessionManagementEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isFallbackSessionManagementEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isFallbackSessionManagementEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isFallbackSessionManagementEnabled, doc_QGuiApplication_isFallbackSessionManagementEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setFallbackSessionManagementEnabled, "setFallbackSessionManagementEnabled(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setFallbackSessionManagementEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setFallbackSessionManagementEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setFallbackSessionManagementEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setFallbackSessionManagementEnabled, doc_QGuiApplication_setFallbackSessionManagementEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setDesktopFileName, "setDesktopFileName(str)");

extern "C" {static PyObject *meth_QGuiApplication_setDesktopFileName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setDesktopFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QGuiApplication::setDesktopFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setDesktopFileName, doc_QGuiApplication_setDesktopFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_desktopFileName, "desktopFileName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_desktopFileName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_desktopFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::desktopFileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_desktopFileName, doc_QGuiApplication_desktopFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_screenAt, "screenAt(QPoint) -> QScreen");

extern "C" {static PyObject *meth_QGuiApplication_screenAt(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_screenAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
             ::QScreen*sipRes;

            sipRes =  ::QGuiApplication::screenAt(*a0);

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_screenAt, doc_QGuiApplication_screenAt);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGuiApplication(void *, const sipTypeDef *);}
static void *cast_QGuiApplication(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGuiApplication *sipCpp = reinterpret_cast< ::QGuiApplication *>(sipCppV);

    if (targetType == sipType_QCoreApplication)
        return static_cast< ::QCoreApplication *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGuiApplication(void *, int);}
static void release_QGuiApplication(void *sipCppV, int)
{
     ::QGuiApplication *sipCpp = reinterpret_cast< ::QGuiApplication *>(sipCppV);

#line 176 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qguiapplication.sip"
        pyqt5_qtgui_cleanup_qobjects();
#line 1749 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGuiApplication(sipSimpleWrapper *);}
static void dealloc_QGuiApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGuiApplication *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGuiApplication(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGuiApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGuiApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGuiApplication *sipCpp = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 151 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qguiapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_qtgui_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGuiApplication(nargc, argv, QCoreApplication::ApplicationFlags);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_qtgui_update_argv_list(a0, argc, argv);
        }
#line 1809 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQGuiApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGuiApplication[] = {{4, 0, 1}};


static PyMethodDef methods_QGuiApplication[] = {
    {sipName_allWindows, meth_QGuiApplication_allWindows, METH_VARARGS, doc_QGuiApplication_allWindows},
    {sipName_applicationDisplayName, meth_QGuiApplication_applicationDisplayName, METH_VARARGS, doc_QGuiApplication_applicationDisplayName},
    {sipName_applicationState, meth_QGuiApplication_applicationState, METH_VARARGS, doc_QGuiApplication_applicationState},
    {sipName_changeOverrideCursor, meth_QGuiApplication_changeOverrideCursor, METH_VARARGS, doc_QGuiApplication_changeOverrideCursor},
    {sipName_clipboard, meth_QGuiApplication_clipboard, METH_VARARGS, doc_QGuiApplication_clipboard},
    {sipName_desktopFileName, meth_QGuiApplication_desktopFileName, METH_VARARGS, doc_QGuiApplication_desktopFileName},
    {sipName_desktopSettingsAware, meth_QGuiApplication_desktopSettingsAware, METH_VARARGS, doc_QGuiApplication_desktopSettingsAware},
    {sipName_devicePixelRatio, meth_QGuiApplication_devicePixelRatio, METH_VARARGS, doc_QGuiApplication_devicePixelRatio},
    {sipName_event, meth_QGuiApplication_event, METH_VARARGS, doc_QGuiApplication_event},
    {sipName_exec, meth_QGuiApplication_exec, METH_VARARGS, doc_QGuiApplication_exec},
    {sipName_exec_, meth_QGuiApplication_exec_, METH_VARARGS, doc_QGuiApplication_exec_},
    {sipName_focusObject, meth_QGuiApplication_focusObject, METH_VARARGS, doc_QGuiApplication_focusObject},
    {sipName_focusWindow, meth_QGuiApplication_focusWindow, METH_VARARGS, doc_QGuiApplication_focusWindow},
    {sipName_font, meth_QGuiApplication_font, METH_VARARGS, doc_QGuiApplication_font},
    {sipName_inputMethod, meth_QGuiApplication_inputMethod, METH_VARARGS, doc_QGuiApplication_inputMethod},
    {sipName_isFallbackSessionManagementEnabled, meth_QGuiApplication_isFallbackSessionManagementEnabled, METH_VARARGS, doc_QGuiApplication_isFallbackSessionManagementEnabled},
    {sipName_isLeftToRight, meth_QGuiApplication_isLeftToRight, METH_VARARGS, doc_QGuiApplication_isLeftToRight},
    {sipName_isRightToLeft, meth_QGuiApplication_isRightToLeft, METH_VARARGS, doc_QGuiApplication_isRightToLeft},
    {sipName_isSavingSession, meth_QGuiApplication_isSavingSession, METH_VARARGS, doc_QGuiApplication_isSavingSession},
    {sipName_isSessionRestored, meth_QGuiApplication_isSessionRestored, METH_VARARGS, doc_QGuiApplication_isSessionRestored},
    {sipName_keyboardModifiers, meth_QGuiApplication_keyboardModifiers, METH_VARARGS, doc_QGuiApplication_keyboardModifiers},
    {sipName_layoutDirection, meth_QGuiApplication_layoutDirection, METH_VARARGS, doc_QGuiApplication_layoutDirection},
    {sipName_modalWindow, meth_QGuiApplication_modalWindow, METH_VARARGS, doc_QGuiApplication_modalWindow},
    {sipName_mouseButtons, meth_QGuiApplication_mouseButtons, METH_VARARGS, doc_QGuiApplication_mouseButtons},
    {sipName_notify, meth_QGuiApplication_notify, METH_VARARGS, doc_QGuiApplication_notify},
    {sipName_overrideCursor, meth_QGuiApplication_overrideCursor, METH_VARARGS, doc_QGuiApplication_overrideCursor},
    {sipName_palette, meth_QGuiApplication_palette, METH_VARARGS, doc_QGuiApplication_palette},
    {sipName_platformName, meth_QGuiApplication_platformName, METH_VARARGS, doc_QGuiApplication_platformName},
    {sipName_primaryScreen, meth_QGuiApplication_primaryScreen, METH_VARARGS, doc_QGuiApplication_primaryScreen},
    {sipName_queryKeyboardModifiers, meth_QGuiApplication_queryKeyboardModifiers, METH_VARARGS, doc_QGuiApplication_queryKeyboardModifiers},
    {sipName_quitOnLastWindowClosed, meth_QGuiApplication_quitOnLastWindowClosed, METH_VARARGS, doc_QGuiApplication_quitOnLastWindowClosed},
    {sipName_restoreOverrideCursor, meth_QGuiApplication_restoreOverrideCursor, METH_VARARGS, doc_QGuiApplication_restoreOverrideCursor},
    {sipName_screenAt, meth_QGuiApplication_screenAt, METH_VARARGS, doc_QGuiApplication_screenAt},
    {sipName_screens, meth_QGuiApplication_screens, METH_VARARGS, doc_QGuiApplication_screens},
    {sipName_sessionId, meth_QGuiApplication_sessionId, METH_VARARGS, doc_QGuiApplication_sessionId},
    {sipName_sessionKey, meth_QGuiApplication_sessionKey, METH_VARARGS, doc_QGuiApplication_sessionKey},
    {sipName_setApplicationDisplayName, meth_QGuiApplication_setApplicationDisplayName, METH_VARARGS, doc_QGuiApplication_setApplicationDisplayName},
    {sipName_setDesktopFileName, meth_QGuiApplication_setDesktopFileName, METH_VARARGS, doc_QGuiApplication_setDesktopFileName},
    {sipName_setDesktopSettingsAware, meth_QGuiApplication_setDesktopSettingsAware, METH_VARARGS, doc_QGuiApplication_setDesktopSettingsAware},
    {sipName_setFallbackSessionManagementEnabled, meth_QGuiApplication_setFallbackSessionManagementEnabled, METH_VARARGS, doc_QGuiApplication_setFallbackSessionManagementEnabled},
    {sipName_setFont, meth_QGuiApplication_setFont, METH_VARARGS, doc_QGuiApplication_setFont},
    {sipName_setLayoutDirection, meth_QGuiApplication_setLayoutDirection, METH_VARARGS, doc_QGuiApplication_setLayoutDirection},
    {sipName_setOverrideCursor, meth_QGuiApplication_setOverrideCursor, METH_VARARGS, doc_QGuiApplication_setOverrideCursor},
    {sipName_setPalette, meth_QGuiApplication_setPalette, METH_VARARGS, doc_QGuiApplication_setPalette},
    {sipName_setQuitOnLastWindowClosed, meth_QGuiApplication_setQuitOnLastWindowClosed, METH_VARARGS, doc_QGuiApplication_setQuitOnLastWindowClosed},
    {sipName_setWindowIcon, meth_QGuiApplication_setWindowIcon, METH_VARARGS, doc_QGuiApplication_setWindowIcon},
    {sipName_styleHints, meth_QGuiApplication_styleHints, METH_VARARGS, doc_QGuiApplication_styleHints},
    {sipName_sync, meth_QGuiApplication_sync, METH_VARARGS, doc_QGuiApplication_sync},
    {sipName_topLevelAt, meth_QGuiApplication_topLevelAt, METH_VARARGS, doc_QGuiApplication_topLevelAt},
    {sipName_topLevelWindows, meth_QGuiApplication_topLevelWindows, METH_VARARGS, doc_QGuiApplication_topLevelWindows},
    {sipName_windowIcon, meth_QGuiApplication_windowIcon, METH_VARARGS, doc_QGuiApplication_windowIcon}
};

PyDoc_STRVAR(doc_QGuiApplication, "\1QGuiApplication(List[str])");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGuiApplication[] = {
    {"fontChanged(QFont)", "\1fontChanged(self, QFont)", SIP_NULLPTR, SIP_NULLPTR},
    {"primaryScreenChanged(QScreen*)", "\1primaryScreenChanged(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"paletteChanged(QPalette)", "\1paletteChanged(self, QPalette)", SIP_NULLPTR, SIP_NULLPTR},
    {"layoutDirectionChanged(Qt::LayoutDirection)", "\1layoutDirectionChanged(self, Qt.LayoutDirection)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenRemoved(QScreen*)", "\1screenRemoved(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"applicationDisplayNameChanged()", "\1applicationDisplayNameChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"applicationStateChanged(Qt::ApplicationState)", "\1applicationStateChanged(self, Qt.ApplicationState)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusWindowChanged(QWindow*)", "\1focusWindowChanged(self, QWindow)", SIP_NULLPTR, SIP_NULLPTR},
    {"saveStateRequest(QSessionManager&)", "\1saveStateRequest(self, QSessionManager)", SIP_NULLPTR, SIP_NULLPTR},
    {"commitDataRequest(QSessionManager&)", "\1commitDataRequest(self, QSessionManager)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusObjectChanged(QObject*)", "\1focusObjectChanged(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {"lastWindowClosed()", "\1lastWindowClosed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenAdded(QScreen*)", "\1screenAdded(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"fontDatabaseChanged()", "\1fontDatabaseChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QGuiApplication = {
    & ::QGuiApplication::staticMetaObject,
    0,
    signals_QGuiApplication,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGuiApplication = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGuiApplication,
        SIP_NULLPTR,
        &plugin_QGuiApplication
    },
    {
        sipNameNr_QGuiApplication,
        {0, 0, 1},
        51, methods_QGuiApplication,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGuiApplication,
    -1,
    -1,
    supers_QGuiApplication,
    SIP_NULLPTR,
    init_type_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QGuiApplication,
    cast_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
