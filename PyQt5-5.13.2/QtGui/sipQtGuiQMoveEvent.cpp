/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 403 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMoveEvent.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMoveEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQMoveEvent.cpp"


class sipQMoveEvent : public  ::QMoveEvent
{
public:
    sipQMoveEvent(const  ::QPoint&,const  ::QPoint&);
    sipQMoveEvent(const  ::QMoveEvent&);
    ~sipQMoveEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMoveEvent(const sipQMoveEvent &);
    sipQMoveEvent &operator = (const sipQMoveEvent &);
};

sipQMoveEvent::sipQMoveEvent(const  ::QPoint& a0,const  ::QPoint& a1):  ::QMoveEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQMoveEvent::sipQMoveEvent(const  ::QMoveEvent& a0):  ::QMoveEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQMoveEvent::~sipQMoveEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QMoveEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QMoveEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QMoveEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMoveEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMoveEvent, sipName_pos, doc_QMoveEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMoveEvent_oldPos, "oldPos(self) -> QPoint");

extern "C" {static PyObject *meth_QMoveEvent_oldPos(PyObject *, PyObject *);}
static PyObject *meth_QMoveEvent_oldPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMoveEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->oldPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMoveEvent, sipName_oldPos, doc_QMoveEvent_oldPos);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMoveEvent(void *, const sipTypeDef *);}
static void *cast_QMoveEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMoveEvent *sipCpp = reinterpret_cast< ::QMoveEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMoveEvent(void *, int);}
static void release_QMoveEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQMoveEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QMoveEvent *>(sipCppV);
}


extern "C" {static void assign_QMoveEvent(void *, Py_ssize_t, void *);}
static void assign_QMoveEvent(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMoveEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMoveEvent *>(sipSrc);
}


extern "C" {static void *copy_QMoveEvent(const void *, Py_ssize_t);}
static void *copy_QMoveEvent(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QMoveEvent(reinterpret_cast<const  ::QMoveEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMoveEvent(sipSimpleWrapper *);}
static void dealloc_QMoveEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMoveEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMoveEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMoveEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMoveEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMoveEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new sipQMoveEvent(*a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QMoveEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMoveEvent, &a0))
        {
            sipCpp = new sipQMoveEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMoveEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QMoveEvent[] = {
    {sipName_oldPos, meth_QMoveEvent_oldPos, METH_VARARGS, doc_QMoveEvent_oldPos},
    {sipName_pos, meth_QMoveEvent_pos, METH_VARARGS, doc_QMoveEvent_pos}
};

PyDoc_STRVAR(doc_QMoveEvent, "\1QMoveEvent(QPoint, QPoint)\n"
"QMoveEvent(QMoveEvent)");


static pyqt5ClassPluginDef plugin_QMoveEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMoveEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMoveEvent,
        SIP_NULLPTR,
        &plugin_QMoveEvent
    },
    {
        sipNameNr_QMoveEvent,
        {0, 0, 1},
        2, methods_QMoveEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMoveEvent,
    -1,
    -1,
    supers_QMoveEvent,
    SIP_NULLPTR,
    init_type_QMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QMoveEvent,
    assign_QMoveEvent,
    SIP_NULLPTR,
    copy_QMoveEvent,
    release_QMoveEvent,
    cast_QMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
