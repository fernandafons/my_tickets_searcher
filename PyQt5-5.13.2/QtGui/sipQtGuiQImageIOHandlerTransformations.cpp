/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"


extern "C" {static long slot_QImageIOHandler_Transformations___hash__(PyObject *);}
static long slot_QImageIOHandler_Transformations___hash__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QImageIOHandler::Transformations::Int();
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QImageIOHandler_Transformations___bool__(PyObject *);}
static int slot_QImageIOHandler_Transformations___bool__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() != 0);
#line 76 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ne__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() != a0->operator QImageIOHandler::Transformations::Int());
#line 106 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QImageIOHandler_Transformations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___eq__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() == a0->operator QImageIOHandler::Transformations::Int());
#line 142 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QImageIOHandler_Transformations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QImageIOHandler::Transformations(*sipCpp ^ a0);
#line 181 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___xor__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 ^ a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ior__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QImageIOHandler::Transformations(*sipCpp | a0);
#line 253 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___or__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 | a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___iand__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QImageIOHandler::Transformations::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___and__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 & a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___invert__(PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___invert__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___int__(PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___int__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return PyLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageIOHandler_Transformations(void *, int);}
static void release_QImageIOHandler_Transformations(void *sipCppV, int)
{
    delete reinterpret_cast< ::QImageIOHandler::Transformations *>(sipCppV);
}


extern "C" {static void *array_QImageIOHandler_Transformations(Py_ssize_t);}
static void *array_QImageIOHandler_Transformations(Py_ssize_t sipNrElem)
{
    return new  ::QImageIOHandler::Transformations[sipNrElem];
}


extern "C" {static void assign_QImageIOHandler_Transformations(void *, Py_ssize_t, void *);}
static void assign_QImageIOHandler_Transformations(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QImageIOHandler::Transformations *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QImageIOHandler::Transformations *>(sipSrc);
}


extern "C" {static void *copy_QImageIOHandler_Transformations(const void *, Py_ssize_t);}
static void *copy_QImageIOHandler_Transformations(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QImageIOHandler::Transformations(reinterpret_cast<const  ::QImageIOHandler::Transformations *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QImageIOHandler_Transformations(sipSimpleWrapper *);}
static void dealloc_QImageIOHandler_Transformations(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImageIOHandler_Transformations(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QImageIOHandler_Transformations(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageIOHandler_Transformations(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QImageIOHandler::Transformations *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QImageIOHandler::Transformations();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QImageIOHandler::Transformations(a0);

            return sipCpp;
        }
    }

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            sipCpp = new  ::QImageIOHandler::Transformations(*a0);
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QImageIOHandler_Transformations(PyObject *, void **, int *, PyObject *);}
static int convertTo_QImageIOHandler_Transformations(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QImageIOHandler::Transformations **sipCppPtr = reinterpret_cast< ::QImageIOHandler::Transformations **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QImageIOHandler::Transformations is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformation)) ||
            sipCanConvertToType(sipPy, sipType_QImageIOHandler_Transformations, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformation)))
{
    *sipCppPtr = new QImageIOHandler::Transformations(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QImageIOHandler::Transformations *>(sipConvertToType(sipPy, sipType_QImageIOHandler_Transformations, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 521 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQImageIOHandlerTransformations.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QImageIOHandler_Transformations[] = {
    {(void *)slot_QImageIOHandler_Transformations___hash__, hash_slot},
    {(void *)slot_QImageIOHandler_Transformations___bool__, bool_slot},
    {(void *)slot_QImageIOHandler_Transformations___ne__, ne_slot},
    {(void *)slot_QImageIOHandler_Transformations___eq__, eq_slot},
    {(void *)slot_QImageIOHandler_Transformations___ixor__, ixor_slot},
    {(void *)slot_QImageIOHandler_Transformations___xor__, xor_slot},
    {(void *)slot_QImageIOHandler_Transformations___ior__, ior_slot},
    {(void *)slot_QImageIOHandler_Transformations___or__, or_slot},
    {(void *)slot_QImageIOHandler_Transformations___iand__, iand_slot},
    {(void *)slot_QImageIOHandler_Transformations___and__, and_slot},
    {(void *)slot_QImageIOHandler_Transformations___invert__, invert_slot},
    {(void *)slot_QImageIOHandler_Transformations___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QImageIOHandler_Transformations, "\1QImageIOHandler.Transformations()\n"
"QImageIOHandler.Transformations(Union[QImageIOHandler.Transformations, QImageIOHandler.Transformation])\n"
"QImageIOHandler.Transformations(QImageIOHandler.Transformations)");


static pyqt5ClassPluginDef plugin_QImageIOHandler_Transformations = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImageIOHandler_Transformations = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImageIOHandler__Transformations,
        SIP_NULLPTR,
        &plugin_QImageIOHandler_Transformations
    },
    {
        sipNameNr_Transformations,
        {69, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImageIOHandler_Transformations,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QImageIOHandler_Transformations,
    init_type_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QImageIOHandler_Transformations,
    assign_QImageIOHandler_Transformations,
    array_QImageIOHandler_Transformations,
    copy_QImageIOHandler_Transformations,
    release_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    convertTo_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
