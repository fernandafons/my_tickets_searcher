/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"

#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 118 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 97 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 85 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 88 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 100 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 103 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 106 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 109 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 112 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 115 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 118 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 121 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 124 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQAbstractTextDocumentLayout.cpp"


class sipQAbstractTextDocumentLayout : public  ::QAbstractTextDocumentLayout
{
public:
    sipQAbstractTextDocumentLayout( ::QTextDocument*);
    virtual ~sipQAbstractTextDocumentLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void drawInlineObject( ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void positionInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void resizeInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void documentChanged(int,int,int) SIP_OVERRIDE;
     ::QRectF blockBoundingRect(const  ::QTextBlock&) const SIP_OVERRIDE;
     ::QRectF frameBoundingRect( ::QTextFrame*) const SIP_OVERRIDE;
     ::QSizeF documentSize() const SIP_OVERRIDE;
    int pageCount() const SIP_OVERRIDE;
    int hitTest(const  ::QPointF&, ::Qt::HitTestAccuracy) const SIP_OVERRIDE;
    void draw( ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTextDocumentLayout(const sipQAbstractTextDocumentLayout &);
    sipQAbstractTextDocumentLayout &operator = (const sipQAbstractTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQAbstractTextDocumentLayout::sipQAbstractTextDocumentLayout( ::QTextDocument*a0):  ::QAbstractTextDocumentLayout(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTextDocumentLayout::~sipQAbstractTextDocumentLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractTextDocumentLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractTextDocumentLayout);

    return  ::QAbstractTextDocumentLayout::metaObject();
}

int sipQAbstractTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractTextDocumentLayout,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAbstractTextDocumentLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QAbstractTextDocumentLayout, _clname, &sipCpp) ? sipCpp :  ::QAbstractTextDocumentLayout::qt_metacast(_clname));
}

void sipQAbstractTextDocumentLayout::drawInlineObject( ::QPainter*a0,const  ::QRectF& a1, ::QTextInlineObject a2,int a3,const  ::QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_drawInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_drawInlineObject);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_14(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

void sipQAbstractTextDocumentLayout::positionInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_positionInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_positionInlineObject);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_13(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTextDocumentLayout::resizeInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_resizeInlineObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_resizeInlineObject);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_13(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_documentChanged);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_documentChanged);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    sipVH_QtGui_12(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QRectF sipQAbstractTextDocumentLayout::blockBoundingRect(const  ::QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect);
#endif

    if (!sipMeth)
        return  ::QRectF();

    extern  ::QRectF sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    return sipVH_QtGui_11(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQAbstractTextDocumentLayout::frameBoundingRect( ::QTextFrame*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect);
#endif

    if (!sipMeth)
        return  ::QRectF();

    extern  ::QRectF sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextFrame*);

    return sipVH_QtGui_10(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSizeF sipQAbstractTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractTextDocumentLayout, sipName_documentSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_documentSize);
#endif

    if (!sipMeth)
        return  ::QSizeF();

    extern  ::QSizeF sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_9(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractTextDocumentLayout, sipName_pageCount);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_pageCount);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractTextDocumentLayout::hitTest(const  ::QPointF& a0, ::Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractTextDocumentLayout, sipName_hitTest);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_hitTest);
#endif

    if (!sipMeth)
        return 0;

    extern int sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&, ::Qt::HitTestAccuracy);

    return sipVH_QtGui_7(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTextDocumentLayout::draw( ::QPainter*a0,const  ::QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_draw);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, sipName_QAbstractTextDocumentLayout, sipName_draw);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtGui_6(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTextDocumentLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QAbstractTextDocumentLayout::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTextDocumentLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QAbstractTextDocumentLayout::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTextDocumentLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_draw, "draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPainter* a0;
        const  ::QAbstractTextDocumentLayout::PaintContext* a1;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_draw);
                return SIP_NULLPTR;
            }

            sipCpp->draw(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_draw, doc_QAbstractTextDocumentLayout_draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_hitTest, "hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::HitTestAccuracy a1;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_hitTest);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hitTest(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_hitTest, doc_QAbstractTextDocumentLayout_hitTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_anchorAt, "anchorAt(self, Union[QPointF, QPoint]) -> str");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_anchorAt, doc_QAbstractTextDocumentLayout_anchorAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_pageCount, "pageCount(self) -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_pageCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->pageCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_pageCount, doc_QAbstractTextDocumentLayout_pageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentSize, "documentSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QSizeF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentSize);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSizeF(sipCpp->documentSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentSize, doc_QAbstractTextDocumentLayout_documentSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_frameBoundingRect, "frameBoundingRect(self, QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QTextFrame* a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->frameBoundingRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect, doc_QAbstractTextDocumentLayout_frameBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QTextBlock* a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->blockBoundingRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect, doc_QAbstractTextDocumentLayout_blockBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_setPaintDevice, "setPaintDevice(self, QPaintDevice)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintDevice* a0;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPaintDevice, &a0))
        {
            sipCpp->setPaintDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_setPaintDevice, doc_QAbstractTextDocumentLayout_setPaintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_paintDevice, "paintDevice(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_paintDevice, doc_QAbstractTextDocumentLayout_paintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_document, doc_QAbstractTextDocumentLayout_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_registerHandler, "registerHandler(self, int, QObject)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QObject* a1;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->registerHandler(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_registerHandler, doc_QAbstractTextDocumentLayout_registerHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_unregisterHandler, "unregisterHandler(self, int, component: QObject = None)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_unregisterHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_unregisterHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QObject* a1 = 0;
         ::QAbstractTextDocumentLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_component,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->unregisterHandler(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_unregisterHandler, doc_QAbstractTextDocumentLayout_unregisterHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_handlerForObject, "handlerForObject(self, int) -> QTextObjectInterface");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
             ::QTextObjectInterface*sipRes;

            sipRes = sipCpp->handlerForObject(a0);

            return sipConvertFromType(sipRes,sipType_QTextObjectInterface,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_handlerForObject, doc_QAbstractTextDocumentLayout_handlerForObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentChanged, "documentChanged(self, int, int, int)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        int a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentChanged);
                return SIP_NULLPTR;
            }

            sipCpp->documentChanged(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentChanged, doc_QAbstractTextDocumentLayout_documentChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_resizeInlineObject, "resizeInlineObject(self, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextInlineObject* a0;
        int a1;
        const  ::QTextFormat* a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::resizeInlineObject(*a0,a1,*a2) : sipCpp->resizeInlineObject(*a0,a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_resizeInlineObject, doc_QAbstractTextDocumentLayout_resizeInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_positionInlineObject, "positionInlineObject(self, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextInlineObject* a0;
        int a1;
        const  ::QTextFormat* a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::positionInlineObject(*a0,a1,*a2) : sipCpp->positionInlineObject(*a0,a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_positionInlineObject, doc_QAbstractTextDocumentLayout_positionInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_drawInlineObject, "drawInlineObject(self, QPainter, QRectF, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRectF* a1;
         ::QTextInlineObject* a2;
        int a3;
        const  ::QTextFormat* a4;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextInlineObject, &a2, &a3, sipType_QTextFormat, &a4))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::drawInlineObject(a0,*a1,*a2,a3,*a4) : sipCpp->drawInlineObject(a0,*a1,*a2,a3,*a4));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_drawInlineObject, doc_QAbstractTextDocumentLayout_drawInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_format, "format(self, int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->format(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_format, doc_QAbstractTextDocumentLayout_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_imageAt, "imageAt(self, Union[QPointF, QPoint]) -> str");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_imageAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_imageAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->imageAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_imageAt, doc_QAbstractTextDocumentLayout_imageAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_formatAt, "formatAt(self, Union[QPointF, QPoint]) -> QTextFormat");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_formatAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_formatAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QTextFormat*sipRes;

            sipRes = new  ::QTextFormat(sipCpp->formatAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_formatAt, doc_QAbstractTextDocumentLayout_formatAt);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QAbstractTextDocumentLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTextDocumentLayout *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTextDocumentLayout(void *, int);}
static void release_QAbstractTextDocumentLayout(void *sipCppV, int)
{
     ::QAbstractTextDocumentLayout *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTextDocumentLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractTextDocumentLayout *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQAbstractTextDocumentLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTextDocumentLayout[] = {{25, 0, 1}};


static PyMethodDef methods_QAbstractTextDocumentLayout[] = {
    {sipName_anchorAt, meth_QAbstractTextDocumentLayout_anchorAt, METH_VARARGS, doc_QAbstractTextDocumentLayout_anchorAt},
    {sipName_blockBoundingRect, meth_QAbstractTextDocumentLayout_blockBoundingRect, METH_VARARGS, doc_QAbstractTextDocumentLayout_blockBoundingRect},
    {sipName_document, meth_QAbstractTextDocumentLayout_document, METH_VARARGS, doc_QAbstractTextDocumentLayout_document},
    {sipName_documentChanged, meth_QAbstractTextDocumentLayout_documentChanged, METH_VARARGS, doc_QAbstractTextDocumentLayout_documentChanged},
    {sipName_documentSize, meth_QAbstractTextDocumentLayout_documentSize, METH_VARARGS, doc_QAbstractTextDocumentLayout_documentSize},
    {sipName_draw, meth_QAbstractTextDocumentLayout_draw, METH_VARARGS, doc_QAbstractTextDocumentLayout_draw},
    {sipName_drawInlineObject, meth_QAbstractTextDocumentLayout_drawInlineObject, METH_VARARGS, doc_QAbstractTextDocumentLayout_drawInlineObject},
    {sipName_format, meth_QAbstractTextDocumentLayout_format, METH_VARARGS, doc_QAbstractTextDocumentLayout_format},
    {sipName_formatAt, meth_QAbstractTextDocumentLayout_formatAt, METH_VARARGS, doc_QAbstractTextDocumentLayout_formatAt},
    {sipName_frameBoundingRect, meth_QAbstractTextDocumentLayout_frameBoundingRect, METH_VARARGS, doc_QAbstractTextDocumentLayout_frameBoundingRect},
    {sipName_handlerForObject, meth_QAbstractTextDocumentLayout_handlerForObject, METH_VARARGS, doc_QAbstractTextDocumentLayout_handlerForObject},
    {sipName_hitTest, meth_QAbstractTextDocumentLayout_hitTest, METH_VARARGS, doc_QAbstractTextDocumentLayout_hitTest},
    {sipName_imageAt, meth_QAbstractTextDocumentLayout_imageAt, METH_VARARGS, doc_QAbstractTextDocumentLayout_imageAt},
    {sipName_pageCount, meth_QAbstractTextDocumentLayout_pageCount, METH_VARARGS, doc_QAbstractTextDocumentLayout_pageCount},
    {sipName_paintDevice, meth_QAbstractTextDocumentLayout_paintDevice, METH_VARARGS, doc_QAbstractTextDocumentLayout_paintDevice},
    {sipName_positionInlineObject, meth_QAbstractTextDocumentLayout_positionInlineObject, METH_VARARGS, doc_QAbstractTextDocumentLayout_positionInlineObject},
    {sipName_registerHandler, meth_QAbstractTextDocumentLayout_registerHandler, METH_VARARGS, doc_QAbstractTextDocumentLayout_registerHandler},
    {sipName_resizeInlineObject, meth_QAbstractTextDocumentLayout_resizeInlineObject, METH_VARARGS, doc_QAbstractTextDocumentLayout_resizeInlineObject},
    {sipName_setPaintDevice, meth_QAbstractTextDocumentLayout_setPaintDevice, METH_VARARGS, doc_QAbstractTextDocumentLayout_setPaintDevice},
    {sipName_unregisterHandler, SIP_MLMETH_CAST(meth_QAbstractTextDocumentLayout_unregisterHandler), METH_VARARGS|METH_KEYWORDS, doc_QAbstractTextDocumentLayout_unregisterHandler}
};

PyDoc_STRVAR(doc_QAbstractTextDocumentLayout, "\1QAbstractTextDocumentLayout(QTextDocument)");


extern "C" {static int emit_QAbstractTextDocumentLayout_update(void *, PyObject *);}

static int emit_QAbstractTextDocumentLayout_update(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractTextDocumentLayout *sipCpp = reinterpret_cast<QAbstractTextDocumentLayout *>(sipCppV);

    {
        const  ::QRectF& a0def = QRectF(0,0,1e+09,1e+09);
        const  ::QRectF* a0 = &a0def;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update(*a0);
            Py_END_ALLOW_THREADS


            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_update, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractTextDocumentLayout[] = {
    {"updateBlock(QTextBlock)", "\1updateBlock(self, QTextBlock)", SIP_NULLPTR, SIP_NULLPTR},
    {"pageCountChanged(int)", "\1pageCountChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"documentSizeChanged(QSizeF)", "\1documentSizeChanged(self, QSizeF)", SIP_NULLPTR, SIP_NULLPTR},
    {"update(QRectF)", "\1update(self, rect: QRectF = QRectF(0,0,1e+09,1e+09))", SIP_NULLPTR, emit_QAbstractTextDocumentLayout_update},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractTextDocumentLayout = {
    & ::QAbstractTextDocumentLayout::staticMetaObject,
    0,
    signals_QAbstractTextDocumentLayout,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QAbstractTextDocumentLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTextDocumentLayout,
        SIP_NULLPTR,
        &plugin_QAbstractTextDocumentLayout
    },
    {
        sipNameNr_QAbstractTextDocumentLayout,
        {0, 0, 1},
        20, methods_QAbstractTextDocumentLayout,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTextDocumentLayout,
    -1,
    -1,
    supers_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    init_type_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractTextDocumentLayout,
    cast_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
