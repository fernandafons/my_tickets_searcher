/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQSurfaceFormat.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQSurfaceFormat.cpp"
#line 250 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQSurfaceFormat.cpp"


PyDoc_STRVAR(doc_QSurfaceFormat_setDepthBufferSize, "setDepthBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setDepthBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDepthBufferSize, doc_QSurfaceFormat_setDepthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_depthBufferSize, "depthBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depthBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_depthBufferSize, doc_QSurfaceFormat_depthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStencilBufferSize, "setStencilBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStencilBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStencilBufferSize, doc_QSurfaceFormat_setStencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stencilBufferSize, "stencilBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stencilBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stencilBufferSize, doc_QSurfaceFormat_stencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRedBufferSize, "setRedBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setRedBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRedBufferSize, doc_QSurfaceFormat_setRedBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_redBufferSize, "redBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->redBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_redBufferSize, doc_QSurfaceFormat_redBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setGreenBufferSize, "setGreenBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setGreenBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setGreenBufferSize, doc_QSurfaceFormat_setGreenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_greenBufferSize, "greenBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->greenBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_greenBufferSize, doc_QSurfaceFormat_greenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setBlueBufferSize, "setBlueBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setBlueBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setBlueBufferSize, doc_QSurfaceFormat_setBlueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_blueBufferSize, "blueBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blueBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_blueBufferSize, doc_QSurfaceFormat_blueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setAlphaBufferSize, "setAlphaBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setAlphaBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setAlphaBufferSize, doc_QSurfaceFormat_setAlphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_alphaBufferSize, "alphaBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alphaBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_alphaBufferSize, doc_QSurfaceFormat_alphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSamples, doc_QSurfaceFormat_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_samples, doc_QSurfaceFormat_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapBehavior, "setSwapBehavior(self, QSurfaceFormat.SwapBehavior)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::SwapBehavior a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_SwapBehavior, &a0))
        {
            sipCpp->setSwapBehavior(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapBehavior, doc_QSurfaceFormat_setSwapBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapBehavior, "swapBehavior(self) -> QSurfaceFormat.SwapBehavior");

extern "C" {static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::SwapBehavior sipRes;

            sipRes = sipCpp->swapBehavior();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_SwapBehavior);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapBehavior, doc_QSurfaceFormat_swapBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_hasAlpha, "hasAlpha(self) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlpha();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_hasAlpha, doc_QSurfaceFormat_hasAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setProfile, "setProfile(self, QSurfaceFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QSurfaceFormat_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::OpenGLContextProfile a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setProfile, doc_QSurfaceFormat_setProfile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_profile, "profile(self) -> QSurfaceFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QSurfaceFormat_profile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_OpenGLContextProfile);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_profile, doc_QSurfaceFormat_profile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRenderableType, "setRenderableType(self, QSurfaceFormat.RenderableType)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::RenderableType a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_RenderableType, &a0))
        {
            sipCpp->setRenderableType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRenderableType, doc_QSurfaceFormat_setRenderableType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_renderableType, "renderableType(self) -> QSurfaceFormat.RenderableType");

extern "C" {static PyObject *meth_QSurfaceFormat_renderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_renderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::RenderableType sipRes;

            sipRes = sipCpp->renderableType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_RenderableType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_renderableType, doc_QSurfaceFormat_renderableType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMajorVersion, "setMajorVersion(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMajorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMajorVersion, doc_QSurfaceFormat_setMajorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_majorVersion, "majorVersion(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_majorVersion, doc_QSurfaceFormat_majorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMinorVersion, "setMinorVersion(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMinorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMinorVersion, doc_QSurfaceFormat_setMinorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_minorVersion, "minorVersion(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_minorVersion, doc_QSurfaceFormat_minorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStereo, "setStereo(self, bool)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStereo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStereo, doc_QSurfaceFormat_setStereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOption, "setOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])\n"
"setOption(self, QSurfaceFormat.FormatOption, on: bool = True)");

extern "C" {static PyObject *meth_QSurfaceFormat_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QSurfaceFormat::FormatOption a0;
        bool a1 = 1;
         ::QSurfaceFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOption, doc_QSurfaceFormat_setOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_testOption, "testOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption]) -> bool\n"
"testOption(self, QSurfaceFormat.FormatOption) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QSurfaceFormat::FormatOption a0;
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_testOption, doc_QSurfaceFormat_testOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stereo, "stereo(self) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stereo();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stereo, doc_QSurfaceFormat_stereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_version, "version(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QSurfaceFormat_version(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QPair<int,int>*sipRes;

            sipRes = new  ::QPair<int,int>(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_version, doc_QSurfaceFormat_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setVersion, "setVersion(self, int, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setVersion, doc_QSurfaceFormat_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOptions, "setOptions(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])");

extern "C" {static PyObject *meth_QSurfaceFormat_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOptions, doc_QSurfaceFormat_setOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_options, "options(self) -> QSurfaceFormat.FormatOptions");

extern "C" {static PyObject *meth_QSurfaceFormat_options(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_options, doc_QSurfaceFormat_options);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapInterval, "swapInterval(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->swapInterval();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapInterval, doc_QSurfaceFormat_swapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapInterval, "setSwapInterval(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSwapInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapInterval, doc_QSurfaceFormat_setSwapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setDefaultFormat, "setDefaultFormat(QSurfaceFormat)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSurfaceFormat, &a0))
        {
             ::QSurfaceFormat::setDefaultFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDefaultFormat, doc_QSurfaceFormat_setDefaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_defaultFormat, "defaultFormat() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat( ::QSurfaceFormat::defaultFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_defaultFormat, doc_QSurfaceFormat_defaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_colorSpace, "colorSpace(self) -> QSurfaceFormat.ColorSpace");

extern "C" {static PyObject *meth_QSurfaceFormat_colorSpace(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_colorSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::ColorSpace sipRes;

            sipRes = sipCpp->colorSpace();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_ColorSpace);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_colorSpace, doc_QSurfaceFormat_colorSpace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setColorSpace, "setColorSpace(self, QSurfaceFormat.ColorSpace)");

extern "C" {static PyObject *meth_QSurfaceFormat_setColorSpace(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setColorSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::ColorSpace a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_ColorSpace, &a0))
        {
            sipCpp->setColorSpace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setColorSpace, doc_QSurfaceFormat_setColorSpace);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSurfaceFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat *sipCpp = reinterpret_cast< ::QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QSurfaceFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSurfaceFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat *sipCpp = reinterpret_cast< ::QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QSurfaceFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSurfaceFormat(void *, int);}
static void release_QSurfaceFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSurfaceFormat *>(sipCppV);
}


extern "C" {static void *array_QSurfaceFormat(Py_ssize_t);}
static void *array_QSurfaceFormat(Py_ssize_t sipNrElem)
{
    return new  ::QSurfaceFormat[sipNrElem];
}


extern "C" {static void assign_QSurfaceFormat(void *, Py_ssize_t, void *);}
static void assign_QSurfaceFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSurfaceFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSurfaceFormat *>(sipSrc);
}


extern "C" {static void *copy_QSurfaceFormat(const void *, Py_ssize_t);}
static void *copy_QSurfaceFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QSurfaceFormat(reinterpret_cast<const  ::QSurfaceFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSurfaceFormat(sipSimpleWrapper *);}
static void dealloc_QSurfaceFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSurfaceFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSurfaceFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSurfaceFormat();

            return sipCpp;
        }
    }

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp = new  ::QSurfaceFormat(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSurfaceFormat, &a0))
        {
            sipCpp = new  ::QSurfaceFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSurfaceFormat[] = {
    {(void *)slot_QSurfaceFormat___eq__, eq_slot},
    {(void *)slot_QSurfaceFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSurfaceFormat[] = {
    {sipName_alphaBufferSize, meth_QSurfaceFormat_alphaBufferSize, METH_VARARGS, doc_QSurfaceFormat_alphaBufferSize},
    {sipName_blueBufferSize, meth_QSurfaceFormat_blueBufferSize, METH_VARARGS, doc_QSurfaceFormat_blueBufferSize},
    {sipName_colorSpace, meth_QSurfaceFormat_colorSpace, METH_VARARGS, doc_QSurfaceFormat_colorSpace},
    {sipName_defaultFormat, meth_QSurfaceFormat_defaultFormat, METH_VARARGS, doc_QSurfaceFormat_defaultFormat},
    {sipName_depthBufferSize, meth_QSurfaceFormat_depthBufferSize, METH_VARARGS, doc_QSurfaceFormat_depthBufferSize},
    {sipName_greenBufferSize, meth_QSurfaceFormat_greenBufferSize, METH_VARARGS, doc_QSurfaceFormat_greenBufferSize},
    {sipName_hasAlpha, meth_QSurfaceFormat_hasAlpha, METH_VARARGS, doc_QSurfaceFormat_hasAlpha},
    {sipName_majorVersion, meth_QSurfaceFormat_majorVersion, METH_VARARGS, doc_QSurfaceFormat_majorVersion},
    {sipName_minorVersion, meth_QSurfaceFormat_minorVersion, METH_VARARGS, doc_QSurfaceFormat_minorVersion},
    {sipName_options, meth_QSurfaceFormat_options, METH_VARARGS, doc_QSurfaceFormat_options},
    {sipName_profile, meth_QSurfaceFormat_profile, METH_VARARGS, doc_QSurfaceFormat_profile},
    {sipName_redBufferSize, meth_QSurfaceFormat_redBufferSize, METH_VARARGS, doc_QSurfaceFormat_redBufferSize},
    {sipName_renderableType, meth_QSurfaceFormat_renderableType, METH_VARARGS, doc_QSurfaceFormat_renderableType},
    {sipName_samples, meth_QSurfaceFormat_samples, METH_VARARGS, doc_QSurfaceFormat_samples},
    {sipName_setAlphaBufferSize, meth_QSurfaceFormat_setAlphaBufferSize, METH_VARARGS, doc_QSurfaceFormat_setAlphaBufferSize},
    {sipName_setBlueBufferSize, meth_QSurfaceFormat_setBlueBufferSize, METH_VARARGS, doc_QSurfaceFormat_setBlueBufferSize},
    {sipName_setColorSpace, meth_QSurfaceFormat_setColorSpace, METH_VARARGS, doc_QSurfaceFormat_setColorSpace},
    {sipName_setDefaultFormat, meth_QSurfaceFormat_setDefaultFormat, METH_VARARGS, doc_QSurfaceFormat_setDefaultFormat},
    {sipName_setDepthBufferSize, meth_QSurfaceFormat_setDepthBufferSize, METH_VARARGS, doc_QSurfaceFormat_setDepthBufferSize},
    {sipName_setGreenBufferSize, meth_QSurfaceFormat_setGreenBufferSize, METH_VARARGS, doc_QSurfaceFormat_setGreenBufferSize},
    {sipName_setMajorVersion, meth_QSurfaceFormat_setMajorVersion, METH_VARARGS, doc_QSurfaceFormat_setMajorVersion},
    {sipName_setMinorVersion, meth_QSurfaceFormat_setMinorVersion, METH_VARARGS, doc_QSurfaceFormat_setMinorVersion},
    {sipName_setOption, SIP_MLMETH_CAST(meth_QSurfaceFormat_setOption), METH_VARARGS|METH_KEYWORDS, doc_QSurfaceFormat_setOption},
    {sipName_setOptions, meth_QSurfaceFormat_setOptions, METH_VARARGS, doc_QSurfaceFormat_setOptions},
    {sipName_setProfile, meth_QSurfaceFormat_setProfile, METH_VARARGS, doc_QSurfaceFormat_setProfile},
    {sipName_setRedBufferSize, meth_QSurfaceFormat_setRedBufferSize, METH_VARARGS, doc_QSurfaceFormat_setRedBufferSize},
    {sipName_setRenderableType, meth_QSurfaceFormat_setRenderableType, METH_VARARGS, doc_QSurfaceFormat_setRenderableType},
    {sipName_setSamples, meth_QSurfaceFormat_setSamples, METH_VARARGS, doc_QSurfaceFormat_setSamples},
    {sipName_setStencilBufferSize, meth_QSurfaceFormat_setStencilBufferSize, METH_VARARGS, doc_QSurfaceFormat_setStencilBufferSize},
    {sipName_setStereo, meth_QSurfaceFormat_setStereo, METH_VARARGS, doc_QSurfaceFormat_setStereo},
    {sipName_setSwapBehavior, meth_QSurfaceFormat_setSwapBehavior, METH_VARARGS, doc_QSurfaceFormat_setSwapBehavior},
    {sipName_setSwapInterval, meth_QSurfaceFormat_setSwapInterval, METH_VARARGS, doc_QSurfaceFormat_setSwapInterval},
    {sipName_setVersion, meth_QSurfaceFormat_setVersion, METH_VARARGS, doc_QSurfaceFormat_setVersion},
    {sipName_stencilBufferSize, meth_QSurfaceFormat_stencilBufferSize, METH_VARARGS, doc_QSurfaceFormat_stencilBufferSize},
    {sipName_stereo, meth_QSurfaceFormat_stereo, METH_VARARGS, doc_QSurfaceFormat_stereo},
    {sipName_swapBehavior, meth_QSurfaceFormat_swapBehavior, METH_VARARGS, doc_QSurfaceFormat_swapBehavior},
    {sipName_swapInterval, meth_QSurfaceFormat_swapInterval, METH_VARARGS, doc_QSurfaceFormat_swapInterval},
    {sipName_testOption, meth_QSurfaceFormat_testOption, METH_VARARGS, doc_QSurfaceFormat_testOption},
    {sipName_version, meth_QSurfaceFormat_version, METH_VARARGS, doc_QSurfaceFormat_version}
};

static sipEnumMemberDef enummembers_QSurfaceFormat[] = {
    {sipName_CompatibilityProfile, static_cast<int>( ::QSurfaceFormat::CompatibilityProfile), 277},
    {sipName_CoreProfile, static_cast<int>( ::QSurfaceFormat::CoreProfile), 277},
    {sipName_DebugContext, static_cast<int>( ::QSurfaceFormat::DebugContext), 275},
    {sipName_DefaultColorSpace, static_cast<int>( ::QSurfaceFormat::DefaultColorSpace), 274},
    {sipName_DefaultRenderableType, static_cast<int>( ::QSurfaceFormat::DefaultRenderableType), 278},
    {sipName_DefaultSwapBehavior, static_cast<int>( ::QSurfaceFormat::DefaultSwapBehavior), 279},
    {sipName_DeprecatedFunctions, static_cast<int>( ::QSurfaceFormat::DeprecatedFunctions), 275},
    {sipName_DoubleBuffer, static_cast<int>( ::QSurfaceFormat::DoubleBuffer), 279},
    {sipName_NoProfile, static_cast<int>( ::QSurfaceFormat::NoProfile), 277},
    {sipName_OpenGL, static_cast<int>( ::QSurfaceFormat::OpenGL), 278},
    {sipName_OpenGLES, static_cast<int>( ::QSurfaceFormat::OpenGLES), 278},
    {sipName_OpenVG, static_cast<int>( ::QSurfaceFormat::OpenVG), 278},
    {sipName_ResetNotification, static_cast<int>( ::QSurfaceFormat::ResetNotification), 275},
    {sipName_SingleBuffer, static_cast<int>( ::QSurfaceFormat::SingleBuffer), 279},
    {sipName_StereoBuffers, static_cast<int>( ::QSurfaceFormat::StereoBuffers), 275},
    {sipName_TripleBuffer, static_cast<int>( ::QSurfaceFormat::TripleBuffer), 279},
    {sipName_sRGBColorSpace, static_cast<int>( ::QSurfaceFormat::sRGBColorSpace), 274},
};

PyDoc_STRVAR(doc_QSurfaceFormat, "\1QSurfaceFormat()\n"
"QSurfaceFormat(Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])\n"
"QSurfaceFormat(QSurfaceFormat)");


static pyqt5ClassPluginDef plugin_QSurfaceFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSurfaceFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSurfaceFormat,
        SIP_NULLPTR,
        &plugin_QSurfaceFormat
    },
    {
        sipNameNr_QSurfaceFormat,
        {0, 0, 1},
        39, methods_QSurfaceFormat,
        17, enummembers_QSurfaceFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSurfaceFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSurfaceFormat,
    init_type_QSurfaceFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSurfaceFormat,
    assign_QSurfaceFormat,
    array_QSurfaceFormat,
    copy_QSurfaceFormat,
    release_QSurfaceFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
