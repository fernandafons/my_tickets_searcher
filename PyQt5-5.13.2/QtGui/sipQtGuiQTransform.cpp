/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 329 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"


PyDoc_STRVAR(doc_QTransform_type, "type(self) -> QTransform.TransformationType");

extern "C" {static PyObject *meth_QTransform_type(PyObject *, PyObject *);}
static PyObject *meth_QTransform_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform::TransformationType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTransform_TransformationType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_type, doc_QTransform_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_setMatrix, "setMatrix(self, float, float, float, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QTransform_setMatrix(PyObject *, PyObject *);}
static PyObject *meth_QTransform_setMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::qreal a6;
         ::qreal a7;
         ::qreal a8;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddddddd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->setMatrix(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_setMatrix, doc_QTransform_setMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_inverted, "inverted(self) -> Tuple[QTransform, bool]");

extern "C" {static PyObject *meth_QTransform_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QTransform *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->inverted(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_inverted, doc_QTransform_inverted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_adjoint, "adjoint(self) -> QTransform");

extern "C" {static PyObject *meth_QTransform_adjoint(PyObject *, PyObject *);}
static PyObject *meth_QTransform_adjoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->adjoint());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_adjoint, doc_QTransform_adjoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_transposed, "transposed(self) -> QTransform");

extern "C" {static PyObject *meth_QTransform_transposed(PyObject *, PyObject *);}
static PyObject *meth_QTransform_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_transposed, doc_QTransform_transposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_translate, "translate(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_translate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->translate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_translate, doc_QTransform_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_scale, "scale(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_scale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->scale(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_scale, doc_QTransform_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_shear, "shear(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_shear(PyObject *, PyObject *);}
static PyObject *meth_QTransform_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->shear(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_shear, doc_QTransform_shear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_rotate, "rotate(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::Qt::Axis a1 = Qt::ZAxis;
         ::QTransform *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->rotate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotate, doc_QTransform_rotate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_rotateRadians, "rotateRadians(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotateRadians(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotateRadians(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::Qt::Axis a1 = Qt::ZAxis;
         ::QTransform *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->rotateRadians(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotateRadians, doc_QTransform_rotateRadians);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_squareToQuad, "squareToQuad(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
         ::QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes =  ::QTransform::squareToQuad(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_squareToQuad, doc_QTransform_squareToQuad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_quadToSquare, "quadToSquare(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
         ::QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes =  ::QTransform::quadToSquare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToSquare, doc_QTransform_quadToSquare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_quadToQuad, "quadToQuad(QPolygonF, QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF* a1;
         ::QTransform* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QPolygonF, &a0, sipType_QPolygonF, &a1, sipType_QTransform, &a2))
        {
            bool sipRes;

            sipRes =  ::QTransform::quadToQuad(*a0,*a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToQuad, doc_QTransform_quadToQuad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_reset, "reset(self)");

extern "C" {static PyObject *meth_QTransform_reset(PyObject *, PyObject *);}
static PyObject *meth_QTransform_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_reset, doc_QTransform_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_map, "map(self, int, int) -> Tuple[int, int]\n"
"map(self, float, float) -> Tuple[float, float]\n"
"map(self, QPoint) -> QPoint\n"
"map(self, Union[QPointF, QPoint]) -> QPointF\n"
"map(self, QLine) -> QLine\n"
"map(self, QLineF) -> QLineF\n"
"map(self, QPolygonF) -> QPolygonF\n"
"map(self, QPolygon) -> QPolygon\n"
"map(self, QRegion) -> QRegion\n"
"map(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QTransform_map(PyObject *, PyObject *);}
static PyObject *meth_QTransform_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXiXi", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(ii)",a2,a3);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(dd)",a2,a3);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->map(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QLine* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLine, &a0))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    {
        const  ::QLineF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLineF, &a0))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPolygonF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPolygon* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegion* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        const  ::QPainterPath* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_map, doc_QTransform_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_mapToPolygon, "mapToPolygon(self, QRect) -> QPolygon");

extern "C" {static PyObject *meth_QTransform_mapToPolygon(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapToPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->mapToPolygon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapToPolygon, doc_QTransform_mapToPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_mapRect, "mapRect(self, QRect) -> QRect\n"
"mapRect(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QTransform_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapRect, doc_QTransform_mapRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isAffine, "isAffine(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isAffine(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAffine();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isAffine, doc_QTransform_isAffine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isIdentity, doc_QTransform_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isInvertible, "isInvertible(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isInvertible(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isInvertible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInvertible();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isInvertible, doc_QTransform_isInvertible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isScaling, "isScaling(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isScaling(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isScaling();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isScaling, doc_QTransform_isScaling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isRotating, "isRotating(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isRotating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isRotating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRotating();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isRotating, doc_QTransform_isRotating);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isTranslating, "isTranslating(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isTranslating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isTranslating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTranslating();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isTranslating, doc_QTransform_isTranslating);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_determinant, "determinant(self) -> float");

extern "C" {static PyObject *meth_QTransform_determinant(PyObject *, PyObject *);}
static PyObject *meth_QTransform_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_determinant, doc_QTransform_determinant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m11, "m11(self) -> float");

extern "C" {static PyObject *meth_QTransform_m11(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m11(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m11();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m11, doc_QTransform_m11);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m12, "m12(self) -> float");

extern "C" {static PyObject *meth_QTransform_m12(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m12(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m12();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m12, doc_QTransform_m12);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m13, "m13(self) -> float");

extern "C" {static PyObject *meth_QTransform_m13(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m13(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m13();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m13, doc_QTransform_m13);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m21, "m21(self) -> float");

extern "C" {static PyObject *meth_QTransform_m21(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m21(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m21();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m21, doc_QTransform_m21);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m22, "m22(self) -> float");

extern "C" {static PyObject *meth_QTransform_m22(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m22(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m22();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m22, doc_QTransform_m22);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m23, "m23(self) -> float");

extern "C" {static PyObject *meth_QTransform_m23(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m23(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m23();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m23, doc_QTransform_m23);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m31, "m31(self) -> float");

extern "C" {static PyObject *meth_QTransform_m31(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m31(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m31();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m31, doc_QTransform_m31);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m32, "m32(self) -> float");

extern "C" {static PyObject *meth_QTransform_m32(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m32();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m32, doc_QTransform_m32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m33, "m33(self) -> float");

extern "C" {static PyObject *meth_QTransform_m33(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m33(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m33();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m33, doc_QTransform_m33);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_dx, "dx(self) -> float");

extern "C" {static PyObject *meth_QTransform_dx(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dx();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dx, doc_QTransform_dx);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_dy, "dy(self) -> float");

extern "C" {static PyObject *meth_QTransform_dy(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dy();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dy, doc_QTransform_dy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_fromTranslate, "fromTranslate(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QTransform::fromTranslate(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromTranslate, doc_QTransform_fromTranslate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_fromScale, "fromScale(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QTransform::fromScale(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromScale, doc_QTransform_fromScale);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTransform___truediv__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___truediv__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, truediv_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___add__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___sub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static long slot_QTransform___hash__(PyObject *);}
static long slot_QTransform___hash__(PyObject *sipSelf)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 112 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
        sipRes = qHash(*sipCpp);
#line 1366 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTransform___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___itruediv__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___itruediv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___matmul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___matmul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, matmul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___mul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___imatmul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imatmul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            sipCpp-> ::QTransform::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___imul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            sipCpp-> ::QTransform::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTransform::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTransform, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTransform___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTransform::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTransform, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTransform(void *, int);}
static void release_QTransform(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTransform *>(sipCppV);
}


extern "C" {static PyObject *pickle_QTransform(void *);}
static PyObject *pickle_QTransform(void *sipCppV)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipCppV);
    PyObject *sipRes;

#line 34 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
#line 1738 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTransform.cpp"

    return sipRes;
}


extern "C" {static void *array_QTransform(Py_ssize_t);}
static void *array_QTransform(Py_ssize_t sipNrElem)
{
    return new  ::QTransform[sipNrElem];
}


extern "C" {static void assign_QTransform(void *, Py_ssize_t, void *);}
static void assign_QTransform(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTransform *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTransform *>(sipSrc);
}


extern "C" {static void *copy_QTransform(const void *, Py_ssize_t);}
static void *copy_QTransform(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTransform(reinterpret_cast<const  ::QTransform *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTransform(sipSimpleWrapper *);}
static void dealloc_QTransform(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTransform(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTransform(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTransform(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTransform *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTransform();

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::qreal a6;
         ::qreal a7;
         ::qreal a8 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_m33,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddddddd|d", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new  ::QTransform(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new  ::QTransform(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
        const  ::QTransform* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTransform, &a0))
        {
            sipCpp = new  ::QTransform(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTransform[] = {
    {(void *)slot_QTransform___truediv__, truediv_slot},
    {(void *)slot_QTransform___add__, add_slot},
    {(void *)slot_QTransform___sub__, sub_slot},
    {(void *)slot_QTransform___hash__, hash_slot},
    {(void *)slot_QTransform___isub__, isub_slot},
    {(void *)slot_QTransform___iadd__, iadd_slot},
    {(void *)slot_QTransform___itruediv__, itruediv_slot},
    {(void *)slot_QTransform___matmul__, matmul_slot},
    {(void *)slot_QTransform___mul__, mul_slot},
    {(void *)slot_QTransform___imatmul__, imatmul_slot},
    {(void *)slot_QTransform___imul__, imul_slot},
    {(void *)slot_QTransform___ne__, ne_slot},
    {(void *)slot_QTransform___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTransform[] = {
    {sipName_adjoint, meth_QTransform_adjoint, METH_VARARGS, doc_QTransform_adjoint},
    {sipName_determinant, meth_QTransform_determinant, METH_VARARGS, doc_QTransform_determinant},
    {sipName_dx, meth_QTransform_dx, METH_VARARGS, doc_QTransform_dx},
    {sipName_dy, meth_QTransform_dy, METH_VARARGS, doc_QTransform_dy},
    {sipName_fromScale, meth_QTransform_fromScale, METH_VARARGS, doc_QTransform_fromScale},
    {sipName_fromTranslate, meth_QTransform_fromTranslate, METH_VARARGS, doc_QTransform_fromTranslate},
    {sipName_inverted, SIP_MLMETH_CAST(meth_QTransform_inverted), METH_VARARGS|METH_KEYWORDS, doc_QTransform_inverted},
    {sipName_isAffine, meth_QTransform_isAffine, METH_VARARGS, doc_QTransform_isAffine},
    {sipName_isIdentity, meth_QTransform_isIdentity, METH_VARARGS, doc_QTransform_isIdentity},
    {sipName_isInvertible, meth_QTransform_isInvertible, METH_VARARGS, doc_QTransform_isInvertible},
    {sipName_isRotating, meth_QTransform_isRotating, METH_VARARGS, doc_QTransform_isRotating},
    {sipName_isScaling, meth_QTransform_isScaling, METH_VARARGS, doc_QTransform_isScaling},
    {sipName_isTranslating, meth_QTransform_isTranslating, METH_VARARGS, doc_QTransform_isTranslating},
    {sipName_m11, meth_QTransform_m11, METH_VARARGS, doc_QTransform_m11},
    {sipName_m12, meth_QTransform_m12, METH_VARARGS, doc_QTransform_m12},
    {sipName_m13, meth_QTransform_m13, METH_VARARGS, doc_QTransform_m13},
    {sipName_m21, meth_QTransform_m21, METH_VARARGS, doc_QTransform_m21},
    {sipName_m22, meth_QTransform_m22, METH_VARARGS, doc_QTransform_m22},
    {sipName_m23, meth_QTransform_m23, METH_VARARGS, doc_QTransform_m23},
    {sipName_m31, meth_QTransform_m31, METH_VARARGS, doc_QTransform_m31},
    {sipName_m32, meth_QTransform_m32, METH_VARARGS, doc_QTransform_m32},
    {sipName_m33, meth_QTransform_m33, METH_VARARGS, doc_QTransform_m33},
    {sipName_map, meth_QTransform_map, METH_VARARGS, doc_QTransform_map},
    {sipName_mapRect, meth_QTransform_mapRect, METH_VARARGS, doc_QTransform_mapRect},
    {sipName_mapToPolygon, meth_QTransform_mapToPolygon, METH_VARARGS, doc_QTransform_mapToPolygon},
    {sipName_quadToQuad, meth_QTransform_quadToQuad, METH_VARARGS, doc_QTransform_quadToQuad},
    {sipName_quadToSquare, meth_QTransform_quadToSquare, METH_VARARGS, doc_QTransform_quadToSquare},
    {sipName_reset, meth_QTransform_reset, METH_VARARGS, doc_QTransform_reset},
    {sipName_rotate, SIP_MLMETH_CAST(meth_QTransform_rotate), METH_VARARGS|METH_KEYWORDS, doc_QTransform_rotate},
    {sipName_rotateRadians, SIP_MLMETH_CAST(meth_QTransform_rotateRadians), METH_VARARGS|METH_KEYWORDS, doc_QTransform_rotateRadians},
    {sipName_scale, meth_QTransform_scale, METH_VARARGS, doc_QTransform_scale},
    {sipName_setMatrix, meth_QTransform_setMatrix, METH_VARARGS, doc_QTransform_setMatrix},
    {sipName_shear, meth_QTransform_shear, METH_VARARGS, doc_QTransform_shear},
    {sipName_squareToQuad, meth_QTransform_squareToQuad, METH_VARARGS, doc_QTransform_squareToQuad},
    {sipName_translate, meth_QTransform_translate, METH_VARARGS, doc_QTransform_translate},
    {sipName_transposed, meth_QTransform_transposed, METH_VARARGS, doc_QTransform_transposed},
    {sipName_type, meth_QTransform_type, METH_VARARGS, doc_QTransform_type}
};

static sipEnumMemberDef enummembers_QTransform[] = {
    {sipName_TxNone, static_cast<int>( ::QTransform::TxNone), 355},
    {sipName_TxProject, static_cast<int>( ::QTransform::TxProject), 355},
    {sipName_TxRotate, static_cast<int>( ::QTransform::TxRotate), 355},
    {sipName_TxScale, static_cast<int>( ::QTransform::TxScale), 355},
    {sipName_TxShear, static_cast<int>( ::QTransform::TxShear), 355},
    {sipName_TxTranslate, static_cast<int>( ::QTransform::TxTranslate), 355},
};

PyDoc_STRVAR(doc_QTransform, "\1QTransform()\n"
"QTransform(float, float, float, float, float, float, float, float, m33: float = 1)\n"
"QTransform(float, float, float, float, float, float)\n"
"QTransform(QTransform)");


static pyqt5ClassPluginDef plugin_QTransform = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTransform = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTransform,
        SIP_NULLPTR,
        &plugin_QTransform
    },
    {
        sipNameNr_QTransform,
        {0, 0, 1},
        37, methods_QTransform,
        6, enummembers_QTransform,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTransform,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTransform,
    init_type_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTransform,
    assign_QTransform,
    array_QTransform,
    copy_QTransform,
    release_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR
};
