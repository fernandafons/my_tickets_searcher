/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 55 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qopengltimerquery.sip"
#include <qopengltimerquery.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 350 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#include <qopengl.h>
#line 37 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 40 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQOpenGLTimeMonitor.cpp"


class sipQOpenGLTimeMonitor : public  ::QOpenGLTimeMonitor
{
public:
    sipQOpenGLTimeMonitor( ::QObject*);
    virtual ~sipQOpenGLTimeMonitor();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLTimeMonitor(const sipQOpenGLTimeMonitor &);
    sipQOpenGLTimeMonitor &operator = (const sipQOpenGLTimeMonitor &);

    char sipPyMethods[7];
};

sipQOpenGLTimeMonitor::sipQOpenGLTimeMonitor( ::QObject*a0):  ::QOpenGLTimeMonitor(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLTimeMonitor::~sipQOpenGLTimeMonitor()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLTimeMonitor::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLTimeMonitor);

    return  ::QOpenGLTimeMonitor::metaObject();
}

int sipQOpenGLTimeMonitor::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLTimeMonitor::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLTimeMonitor,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQOpenGLTimeMonitor::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLTimeMonitor, _clname, &sipCpp) ? sipCpp :  ::QOpenGLTimeMonitor::qt_metacast(_clname));
}

bool sipQOpenGLTimeMonitor::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QOpenGLTimeMonitor::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLTimeMonitor::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QOpenGLTimeMonitor::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLTimeMonitor::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLTimeMonitor::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLTimeMonitor::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLTimeMonitor::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLTimeMonitor::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QOpenGLTimeMonitor::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLTimeMonitor::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLTimeMonitor::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLTimeMonitor::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QOpenGLTimeMonitor::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_setSampleCount, "setSampleCount(self, int)");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_setSampleCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_setSampleCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp, &a0))
        {
            sipCpp->setSampleCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_setSampleCount, doc_QOpenGLTimeMonitor_setSampleCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_sampleCount, "sampleCount(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_sampleCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_sampleCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sampleCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_sampleCount, doc_QOpenGLTimeMonitor_sampleCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_create, doc_QOpenGLTimeMonitor_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_destroy, doc_QOpenGLTimeMonitor_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_isCreated, doc_QOpenGLTimeMonitor_isCreated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_objectIds, "objectIds(self) -> List[int]");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_objectIds(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_objectIds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
             ::QVector< ::GLuint>*sipRes;

            sipRes = new  ::QVector< ::GLuint>(sipCpp->objectIds());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_objectIds, doc_QOpenGLTimeMonitor_objectIds);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_recordSample, "recordSample(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_recordSample(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_recordSample(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->recordSample();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_recordSample, doc_QOpenGLTimeMonitor_recordSample);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_isResultAvailable, "isResultAvailable(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_isResultAvailable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_isResultAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isResultAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_isResultAvailable, doc_QOpenGLTimeMonitor_isResultAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_waitForSamples, "waitForSamples(self) -> List[int]");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_waitForSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_waitForSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
             ::QVector< ::GLuint64>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector< ::GLuint64>(sipCpp->waitForSamples());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_3900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_waitForSamples, doc_QOpenGLTimeMonitor_waitForSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_waitForIntervals, "waitForIntervals(self) -> List[int]");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_waitForIntervals(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_waitForIntervals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
             ::QVector< ::GLuint64>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector< ::GLuint64>(sipCpp->waitForIntervals());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_3900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_waitForIntervals, doc_QOpenGLTimeMonitor_waitForIntervals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTimeMonitor_reset, "reset(self)");

extern "C" {static PyObject *meth_QOpenGLTimeMonitor_reset(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTimeMonitor_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTimeMonitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTimeMonitor, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QOpenGLTimeMonitor, sipName_reset, doc_QOpenGLTimeMonitor_reset);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLTimeMonitor(void *, const sipTypeDef *);}
static void *cast_QOpenGLTimeMonitor(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLTimeMonitor *sipCpp = reinterpret_cast< ::QOpenGLTimeMonitor *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTimeMonitor(void *, int);}
static void release_QOpenGLTimeMonitor(void *sipCppV, int)
{
     ::QOpenGLTimeMonitor *sipCpp = reinterpret_cast< ::QOpenGLTimeMonitor *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QOpenGLTimeMonitor(Py_ssize_t);}
static void *array_QOpenGLTimeMonitor(Py_ssize_t sipNrElem)
{
    return new  ::QOpenGLTimeMonitor[sipNrElem];
}


extern "C" {static void dealloc_QOpenGLTimeMonitor(sipSimpleWrapper *);}
static void dealloc_QOpenGLTimeMonitor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLTimeMonitor *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLTimeMonitor(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLTimeMonitor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTimeMonitor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLTimeMonitor *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLTimeMonitor(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLTimeMonitor[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLTimeMonitor[] = {
    {sipName_create, meth_QOpenGLTimeMonitor_create, METH_VARARGS, doc_QOpenGLTimeMonitor_create},
    {sipName_destroy, meth_QOpenGLTimeMonitor_destroy, METH_VARARGS, doc_QOpenGLTimeMonitor_destroy},
    {sipName_isCreated, meth_QOpenGLTimeMonitor_isCreated, METH_VARARGS, doc_QOpenGLTimeMonitor_isCreated},
    {sipName_isResultAvailable, meth_QOpenGLTimeMonitor_isResultAvailable, METH_VARARGS, doc_QOpenGLTimeMonitor_isResultAvailable},
    {sipName_objectIds, meth_QOpenGLTimeMonitor_objectIds, METH_VARARGS, doc_QOpenGLTimeMonitor_objectIds},
    {sipName_recordSample, meth_QOpenGLTimeMonitor_recordSample, METH_VARARGS, doc_QOpenGLTimeMonitor_recordSample},
    {sipName_reset, meth_QOpenGLTimeMonitor_reset, METH_VARARGS, doc_QOpenGLTimeMonitor_reset},
    {sipName_sampleCount, meth_QOpenGLTimeMonitor_sampleCount, METH_VARARGS, doc_QOpenGLTimeMonitor_sampleCount},
    {sipName_setSampleCount, meth_QOpenGLTimeMonitor_setSampleCount, METH_VARARGS, doc_QOpenGLTimeMonitor_setSampleCount},
    {sipName_waitForIntervals, meth_QOpenGLTimeMonitor_waitForIntervals, METH_VARARGS, doc_QOpenGLTimeMonitor_waitForIntervals},
    {sipName_waitForSamples, meth_QOpenGLTimeMonitor_waitForSamples, METH_VARARGS, doc_QOpenGLTimeMonitor_waitForSamples}
};

PyDoc_STRVAR(doc_QOpenGLTimeMonitor, "\1QOpenGLTimeMonitor(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QOpenGLTimeMonitor = {
    & ::QOpenGLTimeMonitor::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLTimeMonitor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTimeMonitor,
        SIP_NULLPTR,
        &plugin_QOpenGLTimeMonitor
    },
    {
        sipNameNr_QOpenGLTimeMonitor,
        {0, 0, 1},
        11, methods_QOpenGLTimeMonitor,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLTimeMonitor,
    -1,
    -1,
    supers_QOpenGLTimeMonitor,
    SIP_NULLPTR,
    init_type_QOpenGLTimeMonitor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QOpenGLTimeMonitor,
    SIP_NULLPTR,
    array_QOpenGLTimeMonitor,
    SIP_NULLPTR,
    release_QOpenGLTimeMonitor,
    cast_QOpenGLTimeMonitor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
