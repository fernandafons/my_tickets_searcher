/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"

#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"
#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintEngineState.cpp"


PyDoc_STRVAR(doc_QPaintEngineState_state, "state(self) -> QPaintEngine.DirtyFlags");

extern "C" {static PyObject *meth_QPaintEngineState_state(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_state, doc_QPaintEngineState_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_pen, "pen(self) -> QPen");

extern "C" {static PyObject *meth_QPaintEngineState_pen(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->pen());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_pen, doc_QPaintEngineState_pen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brush, "brush(self) -> QBrush");

extern "C" {static PyObject *meth_QPaintEngineState_brush(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brush, doc_QPaintEngineState_brush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brushOrigin, "brushOrigin(self) -> QPointF");

extern "C" {static PyObject *meth_QPaintEngineState_brushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->brushOrigin());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brushOrigin, doc_QPaintEngineState_brushOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_backgroundBrush, "backgroundBrush(self) -> QBrush");

extern "C" {static PyObject *meth_QPaintEngineState_backgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_backgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->backgroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_backgroundBrush, doc_QPaintEngineState_backgroundBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_backgroundMode, "backgroundMode(self) -> Qt.BGMode");

extern "C" {static PyObject *meth_QPaintEngineState_backgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_backgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::Qt::BGMode sipRes;

            sipRes = sipCpp->backgroundMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_BGMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_backgroundMode, doc_QPaintEngineState_backgroundMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QPaintEngineState_font(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_font, doc_QPaintEngineState_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QPaintEngineState_opacity(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_opacity, doc_QPaintEngineState_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipOperation, "clipOperation(self) -> Qt.ClipOperation");

extern "C" {static PyObject *meth_QPaintEngineState_clipOperation(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::Qt::ClipOperation sipRes;

            sipRes = sipCpp->clipOperation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ClipOperation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipOperation, doc_QPaintEngineState_clipOperation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipRegion, "clipRegion(self) -> QRegion");

extern "C" {static PyObject *meth_QPaintEngineState_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->clipRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipRegion, doc_QPaintEngineState_clipRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipPath, "clipPath(self) -> QPainterPath");

extern "C" {static PyObject *meth_QPaintEngineState_clipPath(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->clipPath());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipPath, doc_QPaintEngineState_clipPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_isClipEnabled, "isClipEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_isClipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_isClipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClipEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_isClipEnabled, doc_QPaintEngineState_isClipEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_renderHints, "renderHints(self) -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QPaintEngineState_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_renderHints, doc_QPaintEngineState_renderHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_compositionMode, "compositionMode(self) -> QPainter.CompositionMode");

extern "C" {static PyObject *meth_QPaintEngineState_compositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_compositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter::CompositionMode sipRes;

            sipRes = sipCpp->compositionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPainter_CompositionMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_compositionMode, doc_QPaintEngineState_compositionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_painter, "painter(self) -> QPainter");

extern "C" {static PyObject *meth_QPaintEngineState_painter(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_painter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->painter();

            return sipConvertFromType(sipRes,sipType_QPainter,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_painter, doc_QPaintEngineState_painter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_transform, "transform(self) -> QTransform");

extern "C" {static PyObject *meth_QPaintEngineState_transform(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_transform, doc_QPaintEngineState_transform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brushNeedsResolving, "brushNeedsResolving(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_brushNeedsResolving(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brushNeedsResolving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->brushNeedsResolving();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brushNeedsResolving, doc_QPaintEngineState_brushNeedsResolving);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_penNeedsResolving, "penNeedsResolving(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_penNeedsResolving(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_penNeedsResolving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->penNeedsResolving();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_penNeedsResolving, doc_QPaintEngineState_penNeedsResolving);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngineState(void *, int);}
static void release_QPaintEngineState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPaintEngineState *>(sipCppV);
}


extern "C" {static void *array_QPaintEngineState(Py_ssize_t);}
static void *array_QPaintEngineState(Py_ssize_t sipNrElem)
{
    return new  ::QPaintEngineState[sipNrElem];
}


extern "C" {static void assign_QPaintEngineState(void *, Py_ssize_t, void *);}
static void assign_QPaintEngineState(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPaintEngineState *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPaintEngineState *>(sipSrc);
}


extern "C" {static void *copy_QPaintEngineState(const void *, Py_ssize_t);}
static void *copy_QPaintEngineState(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QPaintEngineState(reinterpret_cast<const  ::QPaintEngineState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPaintEngineState(sipSimpleWrapper *);}
static void dealloc_QPaintEngineState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEngineState(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPaintEngineState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngineState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPaintEngineState *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPaintEngineState();

            return sipCpp;
        }
    }

    {
        const  ::QPaintEngineState* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPaintEngineState, &a0))
        {
            sipCpp = new  ::QPaintEngineState(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPaintEngineState[] = {
    {sipName_backgroundBrush, meth_QPaintEngineState_backgroundBrush, METH_VARARGS, doc_QPaintEngineState_backgroundBrush},
    {sipName_backgroundMode, meth_QPaintEngineState_backgroundMode, METH_VARARGS, doc_QPaintEngineState_backgroundMode},
    {sipName_brush, meth_QPaintEngineState_brush, METH_VARARGS, doc_QPaintEngineState_brush},
    {sipName_brushNeedsResolving, meth_QPaintEngineState_brushNeedsResolving, METH_VARARGS, doc_QPaintEngineState_brushNeedsResolving},
    {sipName_brushOrigin, meth_QPaintEngineState_brushOrigin, METH_VARARGS, doc_QPaintEngineState_brushOrigin},
    {sipName_clipOperation, meth_QPaintEngineState_clipOperation, METH_VARARGS, doc_QPaintEngineState_clipOperation},
    {sipName_clipPath, meth_QPaintEngineState_clipPath, METH_VARARGS, doc_QPaintEngineState_clipPath},
    {sipName_clipRegion, meth_QPaintEngineState_clipRegion, METH_VARARGS, doc_QPaintEngineState_clipRegion},
    {sipName_compositionMode, meth_QPaintEngineState_compositionMode, METH_VARARGS, doc_QPaintEngineState_compositionMode},
    {sipName_font, meth_QPaintEngineState_font, METH_VARARGS, doc_QPaintEngineState_font},
    {sipName_isClipEnabled, meth_QPaintEngineState_isClipEnabled, METH_VARARGS, doc_QPaintEngineState_isClipEnabled},
    {sipName_opacity, meth_QPaintEngineState_opacity, METH_VARARGS, doc_QPaintEngineState_opacity},
    {sipName_painter, meth_QPaintEngineState_painter, METH_VARARGS, doc_QPaintEngineState_painter},
    {sipName_pen, meth_QPaintEngineState_pen, METH_VARARGS, doc_QPaintEngineState_pen},
    {sipName_penNeedsResolving, meth_QPaintEngineState_penNeedsResolving, METH_VARARGS, doc_QPaintEngineState_penNeedsResolving},
    {sipName_renderHints, meth_QPaintEngineState_renderHints, METH_VARARGS, doc_QPaintEngineState_renderHints},
    {sipName_state, meth_QPaintEngineState_state, METH_VARARGS, doc_QPaintEngineState_state},
    {sipName_transform, meth_QPaintEngineState_transform, METH_VARARGS, doc_QPaintEngineState_transform}
};

PyDoc_STRVAR(doc_QPaintEngineState, "\1QPaintEngineState()\n"
"QPaintEngineState(QPaintEngineState)");


static pyqt5ClassPluginDef plugin_QPaintEngineState = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEngineState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngineState,
        SIP_NULLPTR,
        &plugin_QPaintEngineState
    },
    {
        sipNameNr_QPaintEngineState,
        {0, 0, 1},
        18, methods_QPaintEngineState,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEngineState,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPaintEngineState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPaintEngineState,
    assign_QPaintEngineState,
    array_QPaintEngineState,
    copy_QPaintEngineState,
    release_QPaintEngineState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
