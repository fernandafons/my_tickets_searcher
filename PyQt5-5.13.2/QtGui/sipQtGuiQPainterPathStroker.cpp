/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 160 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPainterPathStroker.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 241 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPainterPathStroker.cpp"


PyDoc_STRVAR(doc_QPainterPathStroker_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setWidth, doc_QPainterPathStroker_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_width, "width(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_width(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_width, doc_QPainterPathStroker_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCapStyle, "setCapStyle(self, Qt.PenCapStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenCapStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenCapStyle, &a0))
        {
            sipCpp->setCapStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCapStyle, doc_QPainterPathStroker_setCapStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_capStyle, "capStyle(self) -> Qt.PenCapStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_capStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_capStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::Qt::PenCapStyle sipRes;

            sipRes = sipCpp->capStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenCapStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_capStyle, doc_QPainterPathStroker_capStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setJoinStyle, "setJoinStyle(self, Qt.PenJoinStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenJoinStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenJoinStyle, &a0))
        {
            sipCpp->setJoinStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setJoinStyle, doc_QPainterPathStroker_setJoinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_joinStyle, "joinStyle(self) -> Qt.PenJoinStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::Qt::PenJoinStyle sipRes;

            sipRes = sipCpp->joinStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenJoinStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_joinStyle, doc_QPainterPathStroker_joinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setMiterLimit, "setMiterLimit(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setMiterLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setMiterLimit, doc_QPainterPathStroker_setMiterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_miterLimit, "miterLimit(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->miterLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_miterLimit, doc_QPainterPathStroker_miterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCurveThreshold, "setCurveThreshold(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setCurveThreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCurveThreshold, doc_QPainterPathStroker_setCurveThreshold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_curveThreshold, "curveThreshold(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->curveThreshold();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_curveThreshold, doc_QPainterPathStroker_curveThreshold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashPattern, "setDashPattern(self, Qt.PenStyle)\n"
"setDashPattern(self, Iterable[float])");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setDashPattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QVector< ::qreal>* a0;
        int a0State = 0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QVector_2400,&a0, &a0State))
        {
            sipCpp->setDashPattern(*a0);
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a0),sipType_QVector_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashPattern, doc_QPainterPathStroker_setDashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashPattern, "dashPattern(self) -> List[float]");

extern "C" {static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::QVector< ::qreal>*sipRes;

            sipRes = new  ::QVector< ::qreal>(sipCpp->dashPattern());

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashPattern, doc_QPainterPathStroker_dashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_createStroke, "createStroke(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPathStroker_createStroke(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_createStroke(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->createStroke(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_createStroke, doc_QPainterPathStroker_createStroke);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashOffset, "setDashOffset(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setDashOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashOffset, doc_QPainterPathStroker_setDashOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashOffset, "dashOffset(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dashOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashOffset, doc_QPainterPathStroker_dashOffset);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPathStroker(void *, int);}
static void release_QPainterPathStroker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainterPathStroker *>(sipCppV);
}


extern "C" {static void *array_QPainterPathStroker(Py_ssize_t);}
static void *array_QPainterPathStroker(Py_ssize_t sipNrElem)
{
    return new  ::QPainterPathStroker[sipNrElem];
}


extern "C" {static void dealloc_QPainterPathStroker(sipSimpleWrapper *);}
static void dealloc_QPainterPathStroker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainterPathStroker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainterPathStroker *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainterPathStroker();

            return sipCpp;
        }
    }

    {
        const  ::QPen* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPen, &a0, &a0State))
        {
            sipCpp = new  ::QPainterPathStroker(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPainterPathStroker[] = {
    {sipName_capStyle, meth_QPainterPathStroker_capStyle, METH_VARARGS, doc_QPainterPathStroker_capStyle},
    {sipName_createStroke, meth_QPainterPathStroker_createStroke, METH_VARARGS, doc_QPainterPathStroker_createStroke},
    {sipName_curveThreshold, meth_QPainterPathStroker_curveThreshold, METH_VARARGS, doc_QPainterPathStroker_curveThreshold},
    {sipName_dashOffset, meth_QPainterPathStroker_dashOffset, METH_VARARGS, doc_QPainterPathStroker_dashOffset},
    {sipName_dashPattern, meth_QPainterPathStroker_dashPattern, METH_VARARGS, doc_QPainterPathStroker_dashPattern},
    {sipName_joinStyle, meth_QPainterPathStroker_joinStyle, METH_VARARGS, doc_QPainterPathStroker_joinStyle},
    {sipName_miterLimit, meth_QPainterPathStroker_miterLimit, METH_VARARGS, doc_QPainterPathStroker_miterLimit},
    {sipName_setCapStyle, meth_QPainterPathStroker_setCapStyle, METH_VARARGS, doc_QPainterPathStroker_setCapStyle},
    {sipName_setCurveThreshold, meth_QPainterPathStroker_setCurveThreshold, METH_VARARGS, doc_QPainterPathStroker_setCurveThreshold},
    {sipName_setDashOffset, meth_QPainterPathStroker_setDashOffset, METH_VARARGS, doc_QPainterPathStroker_setDashOffset},
    {sipName_setDashPattern, meth_QPainterPathStroker_setDashPattern, METH_VARARGS, doc_QPainterPathStroker_setDashPattern},
    {sipName_setJoinStyle, meth_QPainterPathStroker_setJoinStyle, METH_VARARGS, doc_QPainterPathStroker_setJoinStyle},
    {sipName_setMiterLimit, meth_QPainterPathStroker_setMiterLimit, METH_VARARGS, doc_QPainterPathStroker_setMiterLimit},
    {sipName_setWidth, meth_QPainterPathStroker_setWidth, METH_VARARGS, doc_QPainterPathStroker_setWidth},
    {sipName_width, meth_QPainterPathStroker_width, METH_VARARGS, doc_QPainterPathStroker_width}
};

PyDoc_STRVAR(doc_QPainterPathStroker, "\1QPainterPathStroker()\n"
"QPainterPathStroker(Union[QPen, QColor, Qt.GlobalColor, QGradient])");


static pyqt5ClassPluginDef plugin_QPainterPathStroker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainterPathStroker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainterPathStroker,
        SIP_NULLPTR,
        &plugin_QPainterPathStroker
    },
    {
        sipNameNr_QPainterPathStroker,
        {0, 0, 1},
        15, methods_QPainterPathStroker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainterPathStroker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPainterPathStroker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPainterPathStroker,
    SIP_NULLPTR,
    array_QPainterPathStroker,
    SIP_NULLPTR,
    release_QPainterPathStroker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
