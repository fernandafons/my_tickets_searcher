/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintDevice.cpp"

#line 52 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQPaintDevice.cpp"


class sipQPaintDevice : public  ::QPaintDevice
{
public:
    sipQPaintDevice();
    virtual ~sipQPaintDevice();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintDevice(const sipQPaintDevice &);
    sipQPaintDevice &operator = (const sipQPaintDevice &);

    char sipPyMethods[2];
};

sipQPaintDevice::sipQPaintDevice():  ::QPaintDevice(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPaintDevice::~sipQPaintDevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQPaintDevice::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QPaintDevice::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQPaintDevice::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QPaintDevice, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), sipPySelf, sipName_QPaintDevice, sipName_paintEngine);
#endif

    if (!sipMeth)
        return 0;

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPaintDevice_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPaintDevice_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintDevice, sipName_paintEngine);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->paintEngine();

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_paintEngine, doc_QPaintDevice_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_width, "width(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_width(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_width, doc_QPaintDevice_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_height, "height(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_height(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_height, doc_QPaintDevice_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_widthMM, "widthMM(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_widthMM(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_widthMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->widthMM();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_widthMM, doc_QPaintDevice_widthMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_heightMM, "heightMM(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_heightMM(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_heightMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->heightMM();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_heightMM, doc_QPaintDevice_heightMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_logicalDpiX, "logicalDpiX(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_logicalDpiX(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_logicalDpiX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->logicalDpiX();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_logicalDpiX, doc_QPaintDevice_logicalDpiX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_logicalDpiY, "logicalDpiY(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_logicalDpiY(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_logicalDpiY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->logicalDpiY();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_logicalDpiY, doc_QPaintDevice_logicalDpiY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_physicalDpiX, "physicalDpiX(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_physicalDpiX(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_physicalDpiX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->physicalDpiX();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_physicalDpiX, doc_QPaintDevice_physicalDpiX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_physicalDpiY, "physicalDpiY(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_physicalDpiY(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_physicalDpiY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->physicalDpiY();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_physicalDpiY, doc_QPaintDevice_physicalDpiY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_depth(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_depth, doc_QPaintDevice_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_paintingActive, "paintingActive(self) -> bool");

extern "C" {static PyObject *meth_QPaintDevice_paintingActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_paintingActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->paintingActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_paintingActive, doc_QPaintDevice_paintingActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_colorCount, "colorCount(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_colorCount(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_colorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->colorCount();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_colorCount, doc_QPaintDevice_colorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatio, "devicePixelRatio(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatio, doc_QPaintDevice_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPaintDevice_metric(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPaintDevice, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPaintDevice::metric(a0) : sipCpp->metric(a0));

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_metric, doc_QPaintDevice_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatioF, "devicePixelRatioF(self) -> float");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatioF(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatioF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatioF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatioF, doc_QPaintDevice_devicePixelRatioF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatioFScale, "devicePixelRatioFScale() -> float");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatioFScale(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatioFScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qreal sipRes;

            sipRes =  ::QPaintDevice::devicePixelRatioFScale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatioFScale, doc_QPaintDevice_devicePixelRatioFScale);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintDevice(void *, int);}
static void release_QPaintDevice(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintDevice *>(sipCppV);
    else
        delete reinterpret_cast< ::QPaintDevice *>(sipCppV);
}


extern "C" {static void dealloc_QPaintDevice(sipSimpleWrapper *);}
static void dealloc_QPaintDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPaintDevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintDevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPaintDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPaintDevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQPaintDevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPaintDevice[] = {
    {sipName_colorCount, meth_QPaintDevice_colorCount, METH_VARARGS, doc_QPaintDevice_colorCount},
    {sipName_depth, meth_QPaintDevice_depth, METH_VARARGS, doc_QPaintDevice_depth},
    {sipName_devicePixelRatio, meth_QPaintDevice_devicePixelRatio, METH_VARARGS, doc_QPaintDevice_devicePixelRatio},
    {sipName_devicePixelRatioF, meth_QPaintDevice_devicePixelRatioF, METH_VARARGS, doc_QPaintDevice_devicePixelRatioF},
    {sipName_devicePixelRatioFScale, meth_QPaintDevice_devicePixelRatioFScale, METH_VARARGS, doc_QPaintDevice_devicePixelRatioFScale},
    {sipName_height, meth_QPaintDevice_height, METH_VARARGS, doc_QPaintDevice_height},
    {sipName_heightMM, meth_QPaintDevice_heightMM, METH_VARARGS, doc_QPaintDevice_heightMM},
    {sipName_logicalDpiX, meth_QPaintDevice_logicalDpiX, METH_VARARGS, doc_QPaintDevice_logicalDpiX},
    {sipName_logicalDpiY, meth_QPaintDevice_logicalDpiY, METH_VARARGS, doc_QPaintDevice_logicalDpiY},
    {sipName_metric, meth_QPaintDevice_metric, METH_VARARGS, doc_QPaintDevice_metric},
    {sipName_paintEngine, meth_QPaintDevice_paintEngine, METH_VARARGS, doc_QPaintDevice_paintEngine},
    {sipName_paintingActive, meth_QPaintDevice_paintingActive, METH_VARARGS, doc_QPaintDevice_paintingActive},
    {sipName_physicalDpiX, meth_QPaintDevice_physicalDpiX, METH_VARARGS, doc_QPaintDevice_physicalDpiX},
    {sipName_physicalDpiY, meth_QPaintDevice_physicalDpiY, METH_VARARGS, doc_QPaintDevice_physicalDpiY},
    {sipName_width, meth_QPaintDevice_width, METH_VARARGS, doc_QPaintDevice_width},
    {sipName_widthMM, meth_QPaintDevice_widthMM, METH_VARARGS, doc_QPaintDevice_widthMM}
};

static sipEnumMemberDef enummembers_QPaintDevice[] = {
    {sipName_PdmDepth, static_cast<int>( ::QPaintDevice::PdmDepth), 194},
    {sipName_PdmDevicePixelRatio, static_cast<int>( ::QPaintDevice::PdmDevicePixelRatio), 194},
    {sipName_PdmDevicePixelRatioScaled, static_cast<int>( ::QPaintDevice::PdmDevicePixelRatioScaled), 194},
    {sipName_PdmDpiX, static_cast<int>( ::QPaintDevice::PdmDpiX), 194},
    {sipName_PdmDpiY, static_cast<int>( ::QPaintDevice::PdmDpiY), 194},
    {sipName_PdmHeight, static_cast<int>( ::QPaintDevice::PdmHeight), 194},
    {sipName_PdmHeightMM, static_cast<int>( ::QPaintDevice::PdmHeightMM), 194},
    {sipName_PdmNumColors, static_cast<int>( ::QPaintDevice::PdmNumColors), 194},
    {sipName_PdmPhysicalDpiX, static_cast<int>( ::QPaintDevice::PdmPhysicalDpiX), 194},
    {sipName_PdmPhysicalDpiY, static_cast<int>( ::QPaintDevice::PdmPhysicalDpiY), 194},
    {sipName_PdmWidth, static_cast<int>( ::QPaintDevice::PdmWidth), 194},
    {sipName_PdmWidthMM, static_cast<int>( ::QPaintDevice::PdmWidthMM), 194},
};

PyDoc_STRVAR(doc_QPaintDevice, "\1QPaintDevice()");


static pyqt5ClassPluginDef plugin_QPaintDevice = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintDevice,
        SIP_NULLPTR,
        &plugin_QPaintDevice
    },
    {
        sipNameNr_QPaintDevice,
        {0, 0, 1},
        16, methods_QPaintDevice,
        12, enummembers_QPaintDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintDevice,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
