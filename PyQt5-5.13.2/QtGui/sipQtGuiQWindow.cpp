/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 296 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 717 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 253 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 205 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 354 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 462 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 451 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 375 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 403 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 416 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 786 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 137 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 143 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 146 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 149 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 152 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 155 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQWindow.cpp"


class sipQWindow : public  ::QWindow
{
public:
    sipQWindow( ::QScreen*);
    sipQWindow( ::QWindow*);
    virtual ~sipQWindow();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void touchEvent( ::QTouchEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void exposeEvent( ::QExposeEvent*) SIP_OVERRIDE;
     ::QObject* focusObject() const SIP_OVERRIDE;
     ::QSurfaceFormat format() const SIP_OVERRIDE;
     ::QSurface::SurfaceType surfaceType() const SIP_OVERRIDE;
     ::QSize size() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWindow(const sipQWindow &);
    sipQWindow &operator = (const sipQWindow &);

    char sipPyMethods[27];
};

sipQWindow::sipQWindow( ::QScreen*a0):  ::QWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::sipQWindow( ::QWindow*a0):  ::QWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::~sipQWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QWindow);

    return  ::QWindow::metaObject();
}

int sipQWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QWindow,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QWindow, _clname, &sipCpp) ? sipCpp :  ::QWindow::qt_metacast(_clname));
}

void sipQWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_51(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_touchEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_touchEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtGui_50(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_49(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_46(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_45(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_43(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_42(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_exposeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_exposeEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtGui_41(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_focusObject);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_focusObject);
#endif

    if (!sipMeth)
        return  ::QWindow::focusObject();

    extern  ::QObject* sipVH_QtGui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_40(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_format);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_format);
#endif

    if (!sipMeth)
        return  ::QWindow::format();

    extern  ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_36(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_surfaceType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_surfaceType);
#endif

    if (!sipMeth)
        return  ::QWindow::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_37(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_size);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_size);
#endif

    if (!sipMeth)
        return  ::QWindow::size();

    extern  ::QSize sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_38(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QWindow::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QWindow::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWindow_setSurfaceType, "setSurfaceType(self, QSurface.SurfaceType)");

extern "C" {static PyObject *meth_QWindow_setSurfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSurfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface::SurfaceType a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurface_SurfaceType, &a0))
        {
            sipCpp->setSurfaceType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSurfaceType, doc_QWindow_setSurfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_surfaceType, "surfaceType(self) -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QWindow_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurface::SurfaceType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::surfaceType() : sipCpp->surfaceType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurface_SurfaceType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_surfaceType, doc_QWindow_surfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isVisible, doc_QWindow_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_create, "create(self)");

extern "C" {static PyObject *meth_QWindow_create(PyObject *, PyObject *);}
static PyObject *meth_QWindow_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->create();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_create, doc_QWindow_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_winId, "winId(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QWindow_winId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_winId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::WId*sipRes;

            sipRes = new  ::WId(sipCpp->winId());

            return sipConvertFromNewType(sipRes,sipType_quintptr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_winId, doc_QWindow_winId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_parent, "parent(self) -> QWindow\n"
"parent(self, QWindow.AncestorMode) -> QWindow");

extern "C" {static PyObject *meth_QWindow_parent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    {
         ::QWindow::AncestorMode a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow_AncestorMode, &a0))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->parent(a0);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_parent, doc_QWindow_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setParent, "setParent(self, QWindow)");

extern "C" {static PyObject *meth_QWindow_setParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setParent, doc_QWindow_setParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isTopLevel, "isTopLevel(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isTopLevel(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTopLevel();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isTopLevel, doc_QWindow_isTopLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isModal, "isModal(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isModal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isModal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModal();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isModal, doc_QWindow_isModal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_modality, "modality(self) -> Qt.WindowModality");

extern "C" {static PyObject *meth_QWindow_modality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_modality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowModality sipRes;

            sipRes = sipCpp->modality();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowModality);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_modality, doc_QWindow_modality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setModality, "setModality(self, Qt.WindowModality)");

extern "C" {static PyObject *meth_QWindow_setModality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowModality a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setModality, doc_QWindow_setModality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QWindow_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFormat, doc_QWindow_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_format(PyObject *, PyObject *);}
static PyObject *meth_QWindow_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat((sipSelfWasArg ? sipCpp-> ::QWindow::format() : sipCpp->format()));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_format, doc_QWindow_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestedFormat, "requestedFormat(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_requestedFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->requestedFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestedFormat, doc_QWindow_requestedFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFlags, "setFlags(self, Union[Qt.WindowFlags, Qt.WindowType])");

extern "C" {static PyObject *meth_QWindow_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowFlags* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFlags, doc_QWindow_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_flags, "flags(self) -> Qt.WindowFlags");

extern "C" {static PyObject *meth_QWindow_flags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_flags, doc_QWindow_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_type, "type(self) -> Qt.WindowType");

extern "C" {static PyObject *meth_QWindow_type(PyObject *, PyObject *);}
static PyObject *meth_QWindow_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_type, doc_QWindow_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWindow_title(PyObject *, PyObject *);}
static PyObject *meth_QWindow_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_title, doc_QWindow_title);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QWindow_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setOpacity, doc_QWindow_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestActivate, "requestActivate(self)");

extern "C" {static PyObject *meth_QWindow_requestActivate(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestActivate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->requestActivate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestActivate, doc_QWindow_requestActivate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isActive(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isActive, doc_QWindow_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_reportContentOrientationChange, "reportContentOrientationChange(self, Qt.ScreenOrientation)");

extern "C" {static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *, PyObject *);}
static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            sipCpp->reportContentOrientationChange(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_reportContentOrientationChange, doc_QWindow_reportContentOrientationChange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_contentOrientation, "contentOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QWindow_contentOrientation(PyObject *, PyObject *);}
static PyObject *meth_QWindow_contentOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->contentOrientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScreenOrientation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_contentOrientation, doc_QWindow_contentOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QWindow_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QWindow_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_devicePixelRatio, doc_QWindow_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_windowState, "windowState(self) -> Qt.WindowState");

extern "C" {static PyObject *meth_QWindow_windowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_windowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowState sipRes;

            sipRes = sipCpp->windowState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_windowState, doc_QWindow_windowState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWindowState, "setWindowState(self, Qt.WindowState)");

extern "C" {static PyObject *meth_QWindow_setWindowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWindowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowState a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowState, &a0))
        {
            sipCpp->setWindowState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWindowState, doc_QWindow_setWindowState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setTransientParent, "setTransientParent(self, QWindow)");

extern "C" {static PyObject *meth_QWindow_setTransientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTransientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setTransientParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTransientParent, doc_QWindow_setTransientParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_transientParent, "transientParent(self) -> QWindow");

extern "C" {static PyObject *meth_QWindow_transientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_transientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->transientParent();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_transientParent, doc_QWindow_transientParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isAncestorOf, "isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool");

extern "C" {static PyObject *meth_QWindow_isAncestorOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_isAncestorOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow* a0;
         ::QWindow::AncestorMode a1 = QWindow::IncludeTransients;
        const  ::QWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|E", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0, sipType_QWindow_AncestorMode, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isAncestorOf(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isAncestorOf, doc_QWindow_isAncestorOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isExposed, "isExposed(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isExposed(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isExposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExposed();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isExposed, doc_QWindow_isExposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumWidth, "minimumWidth(self) -> int");

extern "C" {static PyObject *meth_QWindow_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumWidth, doc_QWindow_minimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumHeight, "minimumHeight(self) -> int");

extern "C" {static PyObject *meth_QWindow_minimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumHeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumHeight, doc_QWindow_minimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumWidth, "maximumWidth(self) -> int");

extern "C" {static PyObject *meth_QWindow_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumWidth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumWidth, doc_QWindow_maximumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumHeight, "maximumHeight(self) -> int");

extern "C" {static PyObject *meth_QWindow_maximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumHeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumHeight, doc_QWindow_maximumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->minimumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumSize, doc_QWindow_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->maximumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumSize, doc_QWindow_maximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_baseSize, "baseSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_baseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_baseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->baseSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_baseSize, doc_QWindow_baseSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_sizeIncrement, "sizeIncrement(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_sizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_sizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizeIncrement());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_sizeIncrement, doc_QWindow_sizeIncrement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumSize, "setMinimumSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMinimumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumSize, doc_QWindow_setMinimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumSize, "setMaximumSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMaximumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumSize, doc_QWindow_setMaximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setBaseSize, "setBaseSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setBaseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setBaseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setBaseSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setBaseSize, doc_QWindow_setBaseSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setSizeIncrement, "setSizeIncrement(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setSizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeIncrement(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSizeIncrement, doc_QWindow_setSizeIncrement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setGeometry, "setGeometry(self, int, int, int, int)\n"
"setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QWindow_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setGeometry(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setGeometry(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setGeometry, doc_QWindow_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QWindow_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_geometry, doc_QWindow_geometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_frameMargins, "frameMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QWindow_frameMargins(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->frameMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameMargins, doc_QWindow_frameMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_frameGeometry, "frameGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QWindow_frameGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->frameGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameGeometry, doc_QWindow_frameGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_framePosition, "framePosition(self) -> QPoint");

extern "C" {static PyObject *meth_QWindow_framePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_framePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->framePosition());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_framePosition, doc_QWindow_framePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFramePosition, "setFramePosition(self, QPoint)");

extern "C" {static PyObject *meth_QWindow_setFramePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFramePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setFramePosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFramePosition, doc_QWindow_setFramePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_width, "width(self) -> int");

extern "C" {static PyObject *meth_QWindow_width(PyObject *, PyObject *);}
static PyObject *meth_QWindow_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_width, doc_QWindow_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_height, "height(self) -> int");

extern "C" {static PyObject *meth_QWindow_height(PyObject *, PyObject *);}
static PyObject *meth_QWindow_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_height, doc_QWindow_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_x, "x(self) -> int");

extern "C" {static PyObject *meth_QWindow_x(PyObject *, PyObject *);}
static PyObject *meth_QWindow_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_x, doc_QWindow_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_y, "y(self) -> int");

extern "C" {static PyObject *meth_QWindow_y(PyObject *, PyObject *);}
static PyObject *meth_QWindow_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_y, doc_QWindow_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_size(PyObject *, PyObject *);}
static PyObject *meth_QWindow_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QWindow::size() : sipCpp->size()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_size, doc_QWindow_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_position, "position(self) -> QPoint");

extern "C" {static PyObject *meth_QWindow_position(PyObject *, PyObject *);}
static PyObject *meth_QWindow_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_position, doc_QWindow_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setPosition, "setPosition(self, QPoint)\n"
"setPosition(self, int, int)");

extern "C" {static PyObject *meth_QWindow_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setPosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->setPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setPosition, doc_QWindow_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_resize, "resize(self, QSize)\n"
"resize(self, int, int)");

extern "C" {static PyObject *meth_QWindow_resize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resize, doc_QWindow_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFilePath, "setFilePath(self, str)");

extern "C" {static PyObject *meth_QWindow_setFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFilePath, doc_QWindow_setFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_filePath, "filePath(self) -> str");

extern "C" {static PyObject *meth_QWindow_filePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_filePath, doc_QWindow_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QWindow_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setIcon, doc_QWindow_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWindow_icon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_icon, doc_QWindow_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QWindow_destroy(PyObject *, PyObject *);}
static PyObject *meth_QWindow_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_destroy, doc_QWindow_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setKeyboardGrabEnabled, "setKeyboardGrabEnabled(self, bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setKeyboardGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setKeyboardGrabEnabled, doc_QWindow_setKeyboardGrabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMouseGrabEnabled, "setMouseGrabEnabled(self, bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setMouseGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMouseGrabEnabled, doc_QWindow_setMouseGrabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QWindow_screen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_screen, doc_QWindow_screen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QWindow_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QScreen* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setScreen, doc_QWindow_setScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusObject, "focusObject(self) -> QObject");

extern "C" {static PyObject *meth_QWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusObject, doc_QWindow_focusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mapToGlobal, "mapToGlobal(self, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapToGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapToGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->mapToGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapToGlobal, doc_QWindow_mapToGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mapFromGlobal, "mapFromGlobal(self, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->mapFromGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapFromGlobal, doc_QWindow_mapFromGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_cursor, "cursor(self) -> QCursor");

extern "C" {static PyObject *meth_QWindow_cursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QCursor*sipRes;

            sipRes = new  ::QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_cursor, doc_QWindow_cursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setCursor, "setCursor(self, Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QWindow_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setCursor, doc_QWindow_setCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_unsetCursor, "unsetCursor(self)");

extern "C" {static PyObject *meth_QWindow_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_unsetCursor, doc_QWindow_unsetCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QWindow_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisible, doc_QWindow_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_show, "show(self)");

extern "C" {static PyObject *meth_QWindow_show(PyObject *, PyObject *);}
static PyObject *meth_QWindow_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->show();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_show, doc_QWindow_show);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_hide, "hide(self)");

extern "C" {static PyObject *meth_QWindow_hide(PyObject *, PyObject *);}
static PyObject *meth_QWindow_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hide, doc_QWindow_hide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showMinimized, "showMinimized(self)");

extern "C" {static PyObject *meth_QWindow_showMinimized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMinimized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMinimized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMinimized, doc_QWindow_showMinimized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showMaximized, "showMaximized(self)");

extern "C" {static PyObject *meth_QWindow_showMaximized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMaximized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMaximized, doc_QWindow_showMaximized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showFullScreen, "showFullScreen(self)");

extern "C" {static PyObject *meth_QWindow_showFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showFullScreen, doc_QWindow_showFullScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showNormal, "showNormal(self)");

extern "C" {static PyObject *meth_QWindow_showNormal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showNormal();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showNormal, doc_QWindow_showNormal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_close, "close(self) -> bool");

extern "C" {static PyObject *meth_QWindow_close(PyObject *, PyObject *);}
static PyObject *meth_QWindow_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->close();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_close, doc_QWindow_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_raise_, "raise_(self)");

extern "C" {static PyObject *meth_QWindow_raise_(PyObject *, PyObject *);}
static PyObject *meth_QWindow_raise_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->raise();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_raise_, doc_QWindow_raise_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_lower, "lower(self)");

extern "C" {static PyObject *meth_QWindow_lower(PyObject *, PyObject *);}
static PyObject *meth_QWindow_lower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->lower();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_lower, doc_QWindow_lower);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setTitle, "setTitle(self, str)");

extern "C" {static PyObject *meth_QWindow_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTitle, doc_QWindow_setTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setX, "setX(self, int)");

extern "C" {static PyObject *meth_QWindow_setX(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setX, doc_QWindow_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setY, "setY(self, int)");

extern "C" {static PyObject *meth_QWindow_setY(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setY, doc_QWindow_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWidth, doc_QWindow_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setHeight, doc_QWindow_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumWidth, "setMinimumWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumWidth, doc_QWindow_setMinimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumHeight, "setMinimumHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumHeight, doc_QWindow_setMinimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumWidth, "setMaximumWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setMaximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumWidth, doc_QWindow_setMaximumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumHeight, "setMaximumHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setMaximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumHeight, doc_QWindow_setMaximumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_alert, "alert(self, int)");

extern "C" {static PyObject *meth_QWindow_alert(PyObject *, PyObject *);}
static PyObject *meth_QWindow_alert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->alert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_alert, doc_QWindow_alert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestUpdate, "requestUpdate(self)");

extern "C" {static PyObject *meth_QWindow_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->requestUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestUpdate, doc_QWindow_requestUpdate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_exposeEvent, "exposeEvent(self, QExposeEvent)");

extern "C" {static PyObject *meth_QWindow_exposeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QExposeEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::exposeEvent(a0) : sipCpp->exposeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_exposeEvent, doc_QWindow_exposeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resizeEvent, doc_QWindow_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QWindow_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::moveEvent(a0) : sipCpp->moveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_moveEvent, doc_QWindow_moveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusInEvent, doc_QWindow_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusOutEvent, doc_QWindow_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QWindow_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showEvent, doc_QWindow_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QWindow_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hideEvent, doc_QWindow_hideEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_event, doc_QWindow_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyPressEvent, doc_QWindow_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyReleaseEvent, doc_QWindow_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mousePressEvent, doc_QWindow_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseReleaseEvent, doc_QWindow_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseDoubleClickEvent, doc_QWindow_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseMoveEvent, doc_QWindow_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QWindow_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_wheelEvent, doc_QWindow_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_touchEvent, "touchEvent(self, QTouchEvent)");

extern "C" {static PyObject *meth_QWindow_touchEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_touchEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTouchEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTouchEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::touchEvent(a0) : sipCpp->touchEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_touchEvent, doc_QWindow_touchEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QWindow_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTabletEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::tabletEvent(a0) : sipCpp->tabletEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_tabletEvent, doc_QWindow_tabletEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_visibility, "visibility(self) -> QWindow.Visibility");

extern "C" {static PyObject *meth_QWindow_visibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_visibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow::Visibility sipRes;

            sipRes = sipCpp->visibility();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QWindow_Visibility);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_visibility, doc_QWindow_visibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setVisibility, "setVisibility(self, QWindow.Visibility)");

extern "C" {static PyObject *meth_QWindow_setVisibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow::Visibility a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow_Visibility, &a0))
        {
            sipCpp->setVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisibility, doc_QWindow_setVisibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QWindow_opacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_opacity, doc_QWindow_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMask, "setMask(self, QRegion)");

extern "C" {static PyObject *meth_QWindow_setMask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMask, doc_QWindow_setMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mask, "mask(self) -> QRegion");

extern "C" {static PyObject *meth_QWindow_mask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mask, doc_QWindow_mask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_fromWinId, "fromWinId(sip.voidptr) -> QWindow");

extern "C" {static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::WId* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_quintptr,&a0, &a0State))
        {
             ::QWindow*sipRes;

            sipRes =  ::QWindow::fromWinId(*a0);
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_fromWinId, doc_QWindow_fromWinId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFlag, "setFlag(self, Qt.WindowType, on: bool = True)");

extern "C" {static PyObject *meth_QWindow_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowType a0;
        bool a1 = 1;
         ::QWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowType, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFlag, doc_QWindow_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_windowStates, "windowStates(self) -> Qt.WindowStates");

extern "C" {static PyObject *meth_QWindow_windowStates(PyObject *, PyObject *);}
static PyObject *meth_QWindow_windowStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates(sipCpp->windowStates());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_windowStates, doc_QWindow_windowStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWindowStates, "setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState])");

extern "C" {static PyObject *meth_QWindow_setWindowStates(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWindowStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowStates* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowStates, &a0, &a0State))
        {
            sipCpp->setWindowStates(*a0);
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWindowStates, doc_QWindow_setWindowStates);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWindow(void *, const sipTypeDef *);}
static void *cast_QWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWindow *sipCpp = reinterpret_cast< ::QWindow *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWindow(void *, int);}
static void release_QWindow(void *sipCppV, int)
{
     ::QWindow *sipCpp = reinterpret_cast< ::QWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QWindow(Py_ssize_t);}
static void *array_QWindow(Py_ssize_t sipNrElem)
{
    return new  ::QWindow[sipNrElem];
}


extern "C" {static void dealloc_QWindow(sipSimpleWrapper *);}
static void dealloc_QWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWindow *sipCpp = SIP_NULLPTR;

    {
         ::QScreen* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QScreen, &a0))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWindow[] = {{25, 0, 0}, {270, 255, 1}};


static PyMethodDef methods_QWindow[] = {
    {sipName_alert, meth_QWindow_alert, METH_VARARGS, doc_QWindow_alert},
    {sipName_baseSize, meth_QWindow_baseSize, METH_VARARGS, doc_QWindow_baseSize},
    {sipName_close, meth_QWindow_close, METH_VARARGS, doc_QWindow_close},
    {sipName_contentOrientation, meth_QWindow_contentOrientation, METH_VARARGS, doc_QWindow_contentOrientation},
    {sipName_create, meth_QWindow_create, METH_VARARGS, doc_QWindow_create},
    {sipName_cursor, meth_QWindow_cursor, METH_VARARGS, doc_QWindow_cursor},
    {sipName_destroy, meth_QWindow_destroy, METH_VARARGS, doc_QWindow_destroy},
    {sipName_devicePixelRatio, meth_QWindow_devicePixelRatio, METH_VARARGS, doc_QWindow_devicePixelRatio},
    {sipName_event, meth_QWindow_event, METH_VARARGS, doc_QWindow_event},
    {sipName_exposeEvent, meth_QWindow_exposeEvent, METH_VARARGS, doc_QWindow_exposeEvent},
    {sipName_filePath, meth_QWindow_filePath, METH_VARARGS, doc_QWindow_filePath},
    {sipName_flags, meth_QWindow_flags, METH_VARARGS, doc_QWindow_flags},
    {sipName_focusInEvent, meth_QWindow_focusInEvent, METH_VARARGS, doc_QWindow_focusInEvent},
    {sipName_focusObject, meth_QWindow_focusObject, METH_VARARGS, doc_QWindow_focusObject},
    {sipName_focusOutEvent, meth_QWindow_focusOutEvent, METH_VARARGS, doc_QWindow_focusOutEvent},
    {sipName_format, meth_QWindow_format, METH_VARARGS, doc_QWindow_format},
    {sipName_frameGeometry, meth_QWindow_frameGeometry, METH_VARARGS, doc_QWindow_frameGeometry},
    {sipName_frameMargins, meth_QWindow_frameMargins, METH_VARARGS, doc_QWindow_frameMargins},
    {sipName_framePosition, meth_QWindow_framePosition, METH_VARARGS, doc_QWindow_framePosition},
    {sipName_fromWinId, meth_QWindow_fromWinId, METH_VARARGS, doc_QWindow_fromWinId},
    {sipName_geometry, meth_QWindow_geometry, METH_VARARGS, doc_QWindow_geometry},
    {sipName_height, meth_QWindow_height, METH_VARARGS, doc_QWindow_height},
    {sipName_hide, meth_QWindow_hide, METH_VARARGS, doc_QWindow_hide},
    {sipName_hideEvent, meth_QWindow_hideEvent, METH_VARARGS, doc_QWindow_hideEvent},
    {sipName_icon, meth_QWindow_icon, METH_VARARGS, doc_QWindow_icon},
    {sipName_isActive, meth_QWindow_isActive, METH_VARARGS, doc_QWindow_isActive},
    {sipName_isAncestorOf, SIP_MLMETH_CAST(meth_QWindow_isAncestorOf), METH_VARARGS|METH_KEYWORDS, doc_QWindow_isAncestorOf},
    {sipName_isExposed, meth_QWindow_isExposed, METH_VARARGS, doc_QWindow_isExposed},
    {sipName_isModal, meth_QWindow_isModal, METH_VARARGS, doc_QWindow_isModal},
    {sipName_isTopLevel, meth_QWindow_isTopLevel, METH_VARARGS, doc_QWindow_isTopLevel},
    {sipName_isVisible, meth_QWindow_isVisible, METH_VARARGS, doc_QWindow_isVisible},
    {sipName_keyPressEvent, meth_QWindow_keyPressEvent, METH_VARARGS, doc_QWindow_keyPressEvent},
    {sipName_keyReleaseEvent, meth_QWindow_keyReleaseEvent, METH_VARARGS, doc_QWindow_keyReleaseEvent},
    {sipName_lower, meth_QWindow_lower, METH_VARARGS, doc_QWindow_lower},
    {sipName_mapFromGlobal, meth_QWindow_mapFromGlobal, METH_VARARGS, doc_QWindow_mapFromGlobal},
    {sipName_mapToGlobal, meth_QWindow_mapToGlobal, METH_VARARGS, doc_QWindow_mapToGlobal},
    {sipName_mask, meth_QWindow_mask, METH_VARARGS, doc_QWindow_mask},
    {sipName_maximumHeight, meth_QWindow_maximumHeight, METH_VARARGS, doc_QWindow_maximumHeight},
    {sipName_maximumSize, meth_QWindow_maximumSize, METH_VARARGS, doc_QWindow_maximumSize},
    {sipName_maximumWidth, meth_QWindow_maximumWidth, METH_VARARGS, doc_QWindow_maximumWidth},
    {sipName_minimumHeight, meth_QWindow_minimumHeight, METH_VARARGS, doc_QWindow_minimumHeight},
    {sipName_minimumSize, meth_QWindow_minimumSize, METH_VARARGS, doc_QWindow_minimumSize},
    {sipName_minimumWidth, meth_QWindow_minimumWidth, METH_VARARGS, doc_QWindow_minimumWidth},
    {sipName_modality, meth_QWindow_modality, METH_VARARGS, doc_QWindow_modality},
    {sipName_mouseDoubleClickEvent, meth_QWindow_mouseDoubleClickEvent, METH_VARARGS, doc_QWindow_mouseDoubleClickEvent},
    {sipName_mouseMoveEvent, meth_QWindow_mouseMoveEvent, METH_VARARGS, doc_QWindow_mouseMoveEvent},
    {sipName_mousePressEvent, meth_QWindow_mousePressEvent, METH_VARARGS, doc_QWindow_mousePressEvent},
    {sipName_mouseReleaseEvent, meth_QWindow_mouseReleaseEvent, METH_VARARGS, doc_QWindow_mouseReleaseEvent},
    {sipName_moveEvent, meth_QWindow_moveEvent, METH_VARARGS, doc_QWindow_moveEvent},
    {sipName_opacity, meth_QWindow_opacity, METH_VARARGS, doc_QWindow_opacity},
    {sipName_parent, meth_QWindow_parent, METH_VARARGS, doc_QWindow_parent},
    {sipName_position, meth_QWindow_position, METH_VARARGS, doc_QWindow_position},
    {sipName_raise_, meth_QWindow_raise_, METH_VARARGS, doc_QWindow_raise_},
    {sipName_reportContentOrientationChange, meth_QWindow_reportContentOrientationChange, METH_VARARGS, doc_QWindow_reportContentOrientationChange},
    {sipName_requestActivate, meth_QWindow_requestActivate, METH_VARARGS, doc_QWindow_requestActivate},
    {sipName_requestUpdate, meth_QWindow_requestUpdate, METH_VARARGS, doc_QWindow_requestUpdate},
    {sipName_requestedFormat, meth_QWindow_requestedFormat, METH_VARARGS, doc_QWindow_requestedFormat},
    {sipName_resize, meth_QWindow_resize, METH_VARARGS, doc_QWindow_resize},
    {sipName_resizeEvent, meth_QWindow_resizeEvent, METH_VARARGS, doc_QWindow_resizeEvent},
    {sipName_screen, meth_QWindow_screen, METH_VARARGS, doc_QWindow_screen},
    {sipName_setBaseSize, meth_QWindow_setBaseSize, METH_VARARGS, doc_QWindow_setBaseSize},
    {sipName_setCursor, meth_QWindow_setCursor, METH_VARARGS, doc_QWindow_setCursor},
    {sipName_setFilePath, meth_QWindow_setFilePath, METH_VARARGS, doc_QWindow_setFilePath},
    {sipName_setFlag, SIP_MLMETH_CAST(meth_QWindow_setFlag), METH_VARARGS|METH_KEYWORDS, doc_QWindow_setFlag},
    {sipName_setFlags, meth_QWindow_setFlags, METH_VARARGS, doc_QWindow_setFlags},
    {sipName_setFormat, meth_QWindow_setFormat, METH_VARARGS, doc_QWindow_setFormat},
    {sipName_setFramePosition, meth_QWindow_setFramePosition, METH_VARARGS, doc_QWindow_setFramePosition},
    {sipName_setGeometry, meth_QWindow_setGeometry, METH_VARARGS, doc_QWindow_setGeometry},
    {sipName_setHeight, meth_QWindow_setHeight, METH_VARARGS, doc_QWindow_setHeight},
    {sipName_setIcon, meth_QWindow_setIcon, METH_VARARGS, doc_QWindow_setIcon},
    {sipName_setKeyboardGrabEnabled, meth_QWindow_setKeyboardGrabEnabled, METH_VARARGS, doc_QWindow_setKeyboardGrabEnabled},
    {sipName_setMask, meth_QWindow_setMask, METH_VARARGS, doc_QWindow_setMask},
    {sipName_setMaximumHeight, meth_QWindow_setMaximumHeight, METH_VARARGS, doc_QWindow_setMaximumHeight},
    {sipName_setMaximumSize, meth_QWindow_setMaximumSize, METH_VARARGS, doc_QWindow_setMaximumSize},
    {sipName_setMaximumWidth, meth_QWindow_setMaximumWidth, METH_VARARGS, doc_QWindow_setMaximumWidth},
    {sipName_setMinimumHeight, meth_QWindow_setMinimumHeight, METH_VARARGS, doc_QWindow_setMinimumHeight},
    {sipName_setMinimumSize, meth_QWindow_setMinimumSize, METH_VARARGS, doc_QWindow_setMinimumSize},
    {sipName_setMinimumWidth, meth_QWindow_setMinimumWidth, METH_VARARGS, doc_QWindow_setMinimumWidth},
    {sipName_setModality, meth_QWindow_setModality, METH_VARARGS, doc_QWindow_setModality},
    {sipName_setMouseGrabEnabled, meth_QWindow_setMouseGrabEnabled, METH_VARARGS, doc_QWindow_setMouseGrabEnabled},
    {sipName_setOpacity, meth_QWindow_setOpacity, METH_VARARGS, doc_QWindow_setOpacity},
    {sipName_setParent, meth_QWindow_setParent, METH_VARARGS, doc_QWindow_setParent},
    {sipName_setPosition, meth_QWindow_setPosition, METH_VARARGS, doc_QWindow_setPosition},
    {sipName_setScreen, meth_QWindow_setScreen, METH_VARARGS, doc_QWindow_setScreen},
    {sipName_setSizeIncrement, meth_QWindow_setSizeIncrement, METH_VARARGS, doc_QWindow_setSizeIncrement},
    {sipName_setSurfaceType, meth_QWindow_setSurfaceType, METH_VARARGS, doc_QWindow_setSurfaceType},
    {sipName_setTitle, meth_QWindow_setTitle, METH_VARARGS, doc_QWindow_setTitle},
    {sipName_setTransientParent, meth_QWindow_setTransientParent, METH_VARARGS, doc_QWindow_setTransientParent},
    {sipName_setVisibility, meth_QWindow_setVisibility, METH_VARARGS, doc_QWindow_setVisibility},
    {sipName_setVisible, meth_QWindow_setVisible, METH_VARARGS, doc_QWindow_setVisible},
    {sipName_setWidth, meth_QWindow_setWidth, METH_VARARGS, doc_QWindow_setWidth},
    {sipName_setWindowState, meth_QWindow_setWindowState, METH_VARARGS, doc_QWindow_setWindowState},
    {sipName_setWindowStates, meth_QWindow_setWindowStates, METH_VARARGS, doc_QWindow_setWindowStates},
    {sipName_setX, meth_QWindow_setX, METH_VARARGS, doc_QWindow_setX},
    {sipName_setY, meth_QWindow_setY, METH_VARARGS, doc_QWindow_setY},
    {sipName_show, meth_QWindow_show, METH_VARARGS, doc_QWindow_show},
    {sipName_showEvent, meth_QWindow_showEvent, METH_VARARGS, doc_QWindow_showEvent},
    {sipName_showFullScreen, meth_QWindow_showFullScreen, METH_VARARGS, doc_QWindow_showFullScreen},
    {sipName_showMaximized, meth_QWindow_showMaximized, METH_VARARGS, doc_QWindow_showMaximized},
    {sipName_showMinimized, meth_QWindow_showMinimized, METH_VARARGS, doc_QWindow_showMinimized},
    {sipName_showNormal, meth_QWindow_showNormal, METH_VARARGS, doc_QWindow_showNormal},
    {sipName_size, meth_QWindow_size, METH_VARARGS, doc_QWindow_size},
    {sipName_sizeIncrement, meth_QWindow_sizeIncrement, METH_VARARGS, doc_QWindow_sizeIncrement},
    {sipName_surfaceType, meth_QWindow_surfaceType, METH_VARARGS, doc_QWindow_surfaceType},
    {sipName_tabletEvent, meth_QWindow_tabletEvent, METH_VARARGS, doc_QWindow_tabletEvent},
    {sipName_title, meth_QWindow_title, METH_VARARGS, doc_QWindow_title},
    {sipName_touchEvent, meth_QWindow_touchEvent, METH_VARARGS, doc_QWindow_touchEvent},
    {sipName_transientParent, meth_QWindow_transientParent, METH_VARARGS, doc_QWindow_transientParent},
    {sipName_type, meth_QWindow_type, METH_VARARGS, doc_QWindow_type},
    {sipName_unsetCursor, meth_QWindow_unsetCursor, METH_VARARGS, doc_QWindow_unsetCursor},
    {sipName_visibility, meth_QWindow_visibility, METH_VARARGS, doc_QWindow_visibility},
    {sipName_wheelEvent, meth_QWindow_wheelEvent, METH_VARARGS, doc_QWindow_wheelEvent},
    {sipName_width, meth_QWindow_width, METH_VARARGS, doc_QWindow_width},
    {sipName_winId, meth_QWindow_winId, METH_VARARGS, doc_QWindow_winId},
    {sipName_windowState, meth_QWindow_windowState, METH_VARARGS, doc_QWindow_windowState},
    {sipName_windowStates, meth_QWindow_windowStates, METH_VARARGS, doc_QWindow_windowStates},
    {sipName_x, meth_QWindow_x, METH_VARARGS, doc_QWindow_x},
    {sipName_y, meth_QWindow_y, METH_VARARGS, doc_QWindow_y}
};

static sipEnumMemberDef enummembers_QWindow[] = {
    {sipName_AutomaticVisibility, static_cast<int>( ::QWindow::AutomaticVisibility), 380},
    {sipName_ExcludeTransients, static_cast<int>( ::QWindow::ExcludeTransients), 379},
    {sipName_FullScreen, static_cast<int>( ::QWindow::FullScreen), 380},
    {sipName_Hidden, static_cast<int>( ::QWindow::Hidden), 380},
    {sipName_IncludeTransients, static_cast<int>( ::QWindow::IncludeTransients), 379},
    {sipName_Maximized, static_cast<int>( ::QWindow::Maximized), 380},
    {sipName_Minimized, static_cast<int>( ::QWindow::Minimized), 380},
    {sipName_Windowed, static_cast<int>( ::QWindow::Windowed), 380},
};

PyDoc_STRVAR(doc_QWindow, "\1QWindow(screen: QScreen = None)\n"
"QWindow(QWindow)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWindow[] = {
    {"opacityChanged(qreal)", "\1opacityChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"activeChanged()", "\1activeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"visibilityChanged(QWindow::Visibility)", "\1visibilityChanged(self, QWindow.Visibility)", SIP_NULLPTR, SIP_NULLPTR},
    {"windowTitleChanged(QString)", "\1windowTitleChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusObjectChanged(QObject*)", "\1focusObjectChanged(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentOrientationChanged(Qt::ScreenOrientation)", "\1contentOrientationChanged(self, Qt.ScreenOrientation)", SIP_NULLPTR, SIP_NULLPTR},
    {"visibleChanged(bool)", "\1visibleChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"maximumHeightChanged(int)", "\1maximumHeightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"maximumWidthChanged(int)", "\1maximumWidthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"minimumHeightChanged(int)", "\1minimumHeightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"minimumWidthChanged(int)", "\1minimumWidthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"heightChanged(int)", "\1heightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"widthChanged(int)", "\1widthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"yChanged(int)", "\1yChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"xChanged(int)", "\1xChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"windowStateChanged(Qt::WindowState)", "\1windowStateChanged(self, Qt.WindowState)", SIP_NULLPTR, SIP_NULLPTR},
    {"modalityChanged(Qt::WindowModality)", "\1modalityChanged(self, Qt.WindowModality)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenChanged(QScreen*)", "\1screenChanged(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QWindow = {
    & ::QWindow::staticMetaObject,
    0,
    signals_QWindow,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWindow,
        SIP_NULLPTR,
        &plugin_QWindow
    },
    {
        sipNameNr_QWindow,
        {0, 0, 1},
        118, methods_QWindow,
        8, enummembers_QWindow,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWindow,
    -1,
    -1,
    supers_QWindow,
    SIP_NULLPTR,
    init_type_QWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QWindow,
    SIP_NULLPTR,
    array_QWindow,
    SIP_NULLPTR,
    release_QWindow,
    cast_QWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
