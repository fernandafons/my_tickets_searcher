/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 427 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 571 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 459 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 482 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 545 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 376 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextListFormat.cpp"


PyDoc_STRVAR(doc_QTextListFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextListFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_isValid, doc_QTextListFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_style, "style(self) -> QTextListFormat.Style");

extern "C" {static PyObject *meth_QTextListFormat_style(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QTextListFormat::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextListFormat_Style);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_style, doc_QTextListFormat_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_indent, "indent(self) -> int");

extern "C" {static PyObject *meth_QTextListFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_indent, doc_QTextListFormat_indent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setStyle, "setStyle(self, QTextListFormat.Style)");

extern "C" {static PyObject *meth_QTextListFormat_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextListFormat::Style a0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setStyle, doc_QTextListFormat_setStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setIndent, "setIndent(self, int)");

extern "C" {static PyObject *meth_QTextListFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextListFormat, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setIndent, doc_QTextListFormat_setIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_numberPrefix, "numberPrefix(self) -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->numberPrefix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberPrefix, doc_QTextListFormat_numberPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_numberSuffix, "numberSuffix(self) -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->numberSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberSuffix, doc_QTextListFormat_numberSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberPrefix, "setNumberPrefix(self, str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberPrefix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberPrefix, doc_QTextListFormat_setNumberPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberSuffix, "setNumberSuffix(self, str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberSuffix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberSuffix, doc_QTextListFormat_setNumberSuffix);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextListFormat(void *, const sipTypeDef *);}
static void *cast_QTextListFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextListFormat *sipCpp = reinterpret_cast< ::QTextListFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextListFormat(void *, int);}
static void release_QTextListFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextListFormat *>(sipCppV);
}


extern "C" {static void *array_QTextListFormat(Py_ssize_t);}
static void *array_QTextListFormat(Py_ssize_t sipNrElem)
{
    return new  ::QTextListFormat[sipNrElem];
}


extern "C" {static void assign_QTextListFormat(void *, Py_ssize_t, void *);}
static void assign_QTextListFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextListFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextListFormat *>(sipSrc);
}


extern "C" {static void *copy_QTextListFormat(const void *, Py_ssize_t);}
static void *copy_QTextListFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextListFormat(reinterpret_cast<const  ::QTextListFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextListFormat(sipSimpleWrapper *);}
static void dealloc_QTextListFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextListFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextListFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextListFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextListFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextListFormat, &a0))
        {
            sipCpp = new  ::QTextListFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextListFormat[] = {{306, 255, 1}};


static PyMethodDef methods_QTextListFormat[] = {
    {sipName_indent, meth_QTextListFormat_indent, METH_VARARGS, doc_QTextListFormat_indent},
    {sipName_isValid, meth_QTextListFormat_isValid, METH_VARARGS, doc_QTextListFormat_isValid},
    {sipName_numberPrefix, meth_QTextListFormat_numberPrefix, METH_VARARGS, doc_QTextListFormat_numberPrefix},
    {sipName_numberSuffix, meth_QTextListFormat_numberSuffix, METH_VARARGS, doc_QTextListFormat_numberSuffix},
    {sipName_setIndent, meth_QTextListFormat_setIndent, METH_VARARGS, doc_QTextListFormat_setIndent},
    {sipName_setNumberPrefix, meth_QTextListFormat_setNumberPrefix, METH_VARARGS, doc_QTextListFormat_setNumberPrefix},
    {sipName_setNumberSuffix, meth_QTextListFormat_setNumberSuffix, METH_VARARGS, doc_QTextListFormat_setNumberSuffix},
    {sipName_setStyle, meth_QTextListFormat_setStyle, METH_VARARGS, doc_QTextListFormat_setStyle},
    {sipName_style, meth_QTextListFormat_style, METH_VARARGS, doc_QTextListFormat_style}
};

static sipEnumMemberDef enummembers_QTextListFormat[] = {
    {sipName_ListCircle, static_cast<int>( ::QTextListFormat::ListCircle), 333},
    {sipName_ListDecimal, static_cast<int>( ::QTextListFormat::ListDecimal), 333},
    {sipName_ListDisc, static_cast<int>( ::QTextListFormat::ListDisc), 333},
    {sipName_ListLowerAlpha, static_cast<int>( ::QTextListFormat::ListLowerAlpha), 333},
    {sipName_ListLowerRoman, static_cast<int>( ::QTextListFormat::ListLowerRoman), 333},
    {sipName_ListSquare, static_cast<int>( ::QTextListFormat::ListSquare), 333},
    {sipName_ListUpperAlpha, static_cast<int>( ::QTextListFormat::ListUpperAlpha), 333},
    {sipName_ListUpperRoman, static_cast<int>( ::QTextListFormat::ListUpperRoman), 333},
};

PyDoc_STRVAR(doc_QTextListFormat, "\1QTextListFormat()\n"
"QTextListFormat(QTextListFormat)");


static pyqt5ClassPluginDef plugin_QTextListFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextListFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextListFormat,
        SIP_NULLPTR,
        &plugin_QTextListFormat
    },
    {
        sipNameNr_QTextListFormat,
        {0, 0, 1},
        9, methods_QTextListFormat,
        8, enummembers_QTextListFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextListFormat,
    -1,
    -1,
    supers_QTextListFormat,
    SIP_NULLPTR,
    init_type_QTextListFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextListFormat,
    assign_QTextListFormat,
    array_QTextListFormat,
    copy_QTextListFormat,
    release_QTextListFormat,
    cast_QTextListFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
