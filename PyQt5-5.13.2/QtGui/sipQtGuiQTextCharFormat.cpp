/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 261 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 571 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 459 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 482 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 545 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 427 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 376 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQTextCharFormat.cpp"


PyDoc_STRVAR(doc_QTextCharFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isValid, doc_QTextCharFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFont, "setFont(self, QFont)\n"
"setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior)");

extern "C" {static PyObject *meth_QTextCharFormat_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QFont* a0;
         ::QTextCharFormat::FontPropertiesInheritanceBehavior a1;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0, sipType_QTextCharFormat_FontPropertiesInheritanceBehavior, &a1))
        {
            sipCpp->setFont(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFont, doc_QTextCharFormat_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QTextCharFormat_font(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_font, doc_QTextCharFormat_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFamily, "setFontFamily(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFontFamily(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFamily, doc_QTextCharFormat_setFontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFamily, "fontFamily(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fontFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFamily, doc_QTextCharFormat_fontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontPointSize, "setFontPointSize(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontPointSize, doc_QTextCharFormat_setFontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontPointSize, "fontPointSize(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontPointSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontPointSize, doc_QTextCharFormat_fontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWeight, "setFontWeight(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWeight, doc_QTextCharFormat_setFontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWeight, "fontWeight(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontWeight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWeight, doc_QTextCharFormat_fontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontItalic, "setFontItalic(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontItalic, doc_QTextCharFormat_setFontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontItalic, "fontItalic(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontItalic();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontItalic, doc_QTextCharFormat_fontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontUnderline, "setFontUnderline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontUnderline, doc_QTextCharFormat_setFontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontUnderline, "fontUnderline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontUnderline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontUnderline, doc_QTextCharFormat_fontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontOverline, "setFontOverline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontOverline, doc_QTextCharFormat_setFontOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontOverline, "fontOverline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontOverline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontOverline, doc_QTextCharFormat_fontOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStrikeOut, "setFontStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStrikeOut, doc_QTextCharFormat_setFontStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStrikeOut, "fontStrikeOut(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontStrikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStrikeOut, doc_QTextCharFormat_fontStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineColor, "setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setUnderlineColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineColor, doc_QTextCharFormat_setUnderlineColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineColor, "underlineColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextCharFormat_underlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->underlineColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineColor, doc_QTextCharFormat_underlineColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFixedPitch, "setFontFixedPitch(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontFixedPitch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFixedPitch, doc_QTextCharFormat_setFontFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFixedPitch, "fontFixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontFixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFixedPitch, doc_QTextCharFormat_fontFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setVerticalAlignment, "setVerticalAlignment(self, QTextCharFormat.VerticalAlignment)");

extern "C" {static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCharFormat::VerticalAlignment a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_VerticalAlignment, &a0))
        {
            sipCpp->setVerticalAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setVerticalAlignment, doc_QTextCharFormat_setVerticalAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_verticalAlignment, "verticalAlignment(self) -> QTextCharFormat.VerticalAlignment");

extern "C" {static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QTextCharFormat::VerticalAlignment sipRes;

            sipRes = sipCpp->verticalAlignment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextCharFormat_VerticalAlignment);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_verticalAlignment, doc_QTextCharFormat_verticalAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchor, "setAnchor(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setAnchor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchor, doc_QTextCharFormat_setAnchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_isAnchor, "isAnchor(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnchor();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isAnchor, doc_QTextCharFormat_isAnchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorHref, "setAnchorHref(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAnchorHref(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorHref, doc_QTextCharFormat_setAnchorHref);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorHref, "anchorHref(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_anchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorHref());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorHref, doc_QTextCharFormat_anchorHref);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellRowSpan, "tableCellRowSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellRowSpan();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellRowSpan, doc_QTextCharFormat_tableCellRowSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellColumnSpan, "tableCellColumnSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellColumnSpan();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellColumnSpan, doc_QTextCharFormat_tableCellColumnSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellRowSpan, "setTableCellRowSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellRowSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellRowSpan, doc_QTextCharFormat_setTableCellRowSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellColumnSpan, "setTableCellColumnSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellColumnSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellColumnSpan, doc_QTextCharFormat_setTableCellColumnSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTextOutline, "setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setTextOutline(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTextOutline, doc_QTextCharFormat_setTextOutline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_textOutline, "textOutline(self) -> QPen");

extern "C" {static PyObject *meth_QTextCharFormat_textOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_textOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->textOutline());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_textOutline, doc_QTextCharFormat_textOutline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineStyle, "setUnderlineStyle(self, QTextCharFormat.UnderlineStyle)");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCharFormat::UnderlineStyle a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_UnderlineStyle, &a0))
        {
            sipCpp->setUnderlineStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineStyle, doc_QTextCharFormat_setUnderlineStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineStyle, "underlineStyle(self) -> QTextCharFormat.UnderlineStyle");

extern "C" {static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QTextCharFormat::UnderlineStyle sipRes;

            sipRes = sipCpp->underlineStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextCharFormat_UnderlineStyle);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineStyle, doc_QTextCharFormat_underlineStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setToolTip, doc_QTextCharFormat_setToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_toolTip, doc_QTextCharFormat_toolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorNames, "setAnchorNames(self, Iterable[str])");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setAnchorNames(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorNames, doc_QTextCharFormat_setAnchorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorNames, "anchorNames(self) -> List[str]");

extern "C" {static PyObject *meth_QTextCharFormat_anchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->anchorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorNames, doc_QTextCharFormat_anchorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontCapitalization, "setFontCapitalization(self, QFont.Capitalization)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::Capitalization a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            sipCpp->setFontCapitalization(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontCapitalization, doc_QTextCharFormat_setFontCapitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontCapitalization, "fontCapitalization(self) -> QFont.Capitalization");

extern "C" {static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::Capitalization sipRes;

            sipRes = sipCpp->fontCapitalization();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Capitalization);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontCapitalization, doc_QTextCharFormat_fontCapitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacing, "setFontLetterSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontLetterSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacing, doc_QTextCharFormat_setFontLetterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacing, "fontLetterSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontLetterSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacing, doc_QTextCharFormat_fontLetterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWordSpacing, "setFontWordSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWordSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWordSpacing, doc_QTextCharFormat_setFontWordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWordSpacing, "fontWordSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontWordSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWordSpacing, doc_QTextCharFormat_fontWordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleHint, "setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleHint a0;
         ::QFont::StyleStrategy a1 = QFont::PreferDefault;
         ::QTextCharFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            sipCpp->setFontStyleHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleHint, doc_QTextCharFormat_setFontStyleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleStrategy, "setFontStyleStrategy(self, QFont.StyleStrategy)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleStrategy a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            sipCpp->setFontStyleStrategy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleStrategy, doc_QTextCharFormat_setFontStyleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleHint, "fontStyleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::StyleHint sipRes;

            sipRes = sipCpp->fontStyleHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleHint);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleHint, doc_QTextCharFormat_fontStyleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleStrategy, "fontStyleStrategy(self) -> QFont.StyleStrategy");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::StyleStrategy sipRes;

            sipRes = sipCpp->fontStyleStrategy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleStrategy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleStrategy, doc_QTextCharFormat_fontStyleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontKerning, "setFontKerning(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontKerning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontKerning, doc_QTextCharFormat_setFontKerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontKerning, "fontKerning(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontKerning();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontKerning, doc_QTextCharFormat_fontKerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontHintingPreference, "setFontHintingPreference(self, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::HintingPreference a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_HintingPreference, &a0))
        {
            sipCpp->setFontHintingPreference(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontHintingPreference, doc_QTextCharFormat_setFontHintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontHintingPreference, "fontHintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::HintingPreference sipRes;

            sipRes = sipCpp->fontHintingPreference();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_HintingPreference);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontHintingPreference, doc_QTextCharFormat_fontHintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStretch, "fontStretch(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontStretch();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStretch, doc_QTextCharFormat_fontStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStretch, "setFontStretch(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStretch, doc_QTextCharFormat_setFontStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacingType, "setFontLetterSpacingType(self, QFont.SpacingType)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::SpacingType a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_SpacingType, &a0))
        {
            sipCpp->setFontLetterSpacingType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacingType, doc_QTextCharFormat_setFontLetterSpacingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacingType, "fontLetterSpacingType(self) -> QFont.SpacingType");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::SpacingType sipRes;

            sipRes = sipCpp->fontLetterSpacingType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_SpacingType);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacingType, doc_QTextCharFormat_fontLetterSpacingType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextCharFormat(void *, const sipTypeDef *);}
static void *cast_QTextCharFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextCharFormat *sipCpp = reinterpret_cast< ::QTextCharFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCharFormat(void *, int);}
static void release_QTextCharFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextCharFormat *>(sipCppV);
}


extern "C" {static void *array_QTextCharFormat(Py_ssize_t);}
static void *array_QTextCharFormat(Py_ssize_t sipNrElem)
{
    return new  ::QTextCharFormat[sipNrElem];
}


extern "C" {static void assign_QTextCharFormat(void *, Py_ssize_t, void *);}
static void assign_QTextCharFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextCharFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextCharFormat *>(sipSrc);
}


extern "C" {static void *copy_QTextCharFormat(const void *, Py_ssize_t);}
static void *copy_QTextCharFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QTextCharFormat(reinterpret_cast<const  ::QTextCharFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCharFormat(sipSimpleWrapper *);}
static void dealloc_QTextCharFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextCharFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextCharFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextCharFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextCharFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextCharFormat, &a0))
        {
            sipCpp = new  ::QTextCharFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextCharFormat[] = {{306, 255, 1}};


static PyMethodDef methods_QTextCharFormat[] = {
    {sipName_anchorHref, meth_QTextCharFormat_anchorHref, METH_VARARGS, doc_QTextCharFormat_anchorHref},
    {sipName_anchorNames, meth_QTextCharFormat_anchorNames, METH_VARARGS, doc_QTextCharFormat_anchorNames},
    {sipName_font, meth_QTextCharFormat_font, METH_VARARGS, doc_QTextCharFormat_font},
    {sipName_fontCapitalization, meth_QTextCharFormat_fontCapitalization, METH_VARARGS, doc_QTextCharFormat_fontCapitalization},
    {sipName_fontFamily, meth_QTextCharFormat_fontFamily, METH_VARARGS, doc_QTextCharFormat_fontFamily},
    {sipName_fontFixedPitch, meth_QTextCharFormat_fontFixedPitch, METH_VARARGS, doc_QTextCharFormat_fontFixedPitch},
    {sipName_fontHintingPreference, meth_QTextCharFormat_fontHintingPreference, METH_VARARGS, doc_QTextCharFormat_fontHintingPreference},
    {sipName_fontItalic, meth_QTextCharFormat_fontItalic, METH_VARARGS, doc_QTextCharFormat_fontItalic},
    {sipName_fontKerning, meth_QTextCharFormat_fontKerning, METH_VARARGS, doc_QTextCharFormat_fontKerning},
    {sipName_fontLetterSpacing, meth_QTextCharFormat_fontLetterSpacing, METH_VARARGS, doc_QTextCharFormat_fontLetterSpacing},
    {sipName_fontLetterSpacingType, meth_QTextCharFormat_fontLetterSpacingType, METH_VARARGS, doc_QTextCharFormat_fontLetterSpacingType},
    {sipName_fontOverline, meth_QTextCharFormat_fontOverline, METH_VARARGS, doc_QTextCharFormat_fontOverline},
    {sipName_fontPointSize, meth_QTextCharFormat_fontPointSize, METH_VARARGS, doc_QTextCharFormat_fontPointSize},
    {sipName_fontStretch, meth_QTextCharFormat_fontStretch, METH_VARARGS, doc_QTextCharFormat_fontStretch},
    {sipName_fontStrikeOut, meth_QTextCharFormat_fontStrikeOut, METH_VARARGS, doc_QTextCharFormat_fontStrikeOut},
    {sipName_fontStyleHint, meth_QTextCharFormat_fontStyleHint, METH_VARARGS, doc_QTextCharFormat_fontStyleHint},
    {sipName_fontStyleStrategy, meth_QTextCharFormat_fontStyleStrategy, METH_VARARGS, doc_QTextCharFormat_fontStyleStrategy},
    {sipName_fontUnderline, meth_QTextCharFormat_fontUnderline, METH_VARARGS, doc_QTextCharFormat_fontUnderline},
    {sipName_fontWeight, meth_QTextCharFormat_fontWeight, METH_VARARGS, doc_QTextCharFormat_fontWeight},
    {sipName_fontWordSpacing, meth_QTextCharFormat_fontWordSpacing, METH_VARARGS, doc_QTextCharFormat_fontWordSpacing},
    {sipName_isAnchor, meth_QTextCharFormat_isAnchor, METH_VARARGS, doc_QTextCharFormat_isAnchor},
    {sipName_isValid, meth_QTextCharFormat_isValid, METH_VARARGS, doc_QTextCharFormat_isValid},
    {sipName_setAnchor, meth_QTextCharFormat_setAnchor, METH_VARARGS, doc_QTextCharFormat_setAnchor},
    {sipName_setAnchorHref, meth_QTextCharFormat_setAnchorHref, METH_VARARGS, doc_QTextCharFormat_setAnchorHref},
    {sipName_setAnchorNames, meth_QTextCharFormat_setAnchorNames, METH_VARARGS, doc_QTextCharFormat_setAnchorNames},
    {sipName_setFont, meth_QTextCharFormat_setFont, METH_VARARGS, doc_QTextCharFormat_setFont},
    {sipName_setFontCapitalization, meth_QTextCharFormat_setFontCapitalization, METH_VARARGS, doc_QTextCharFormat_setFontCapitalization},
    {sipName_setFontFamily, meth_QTextCharFormat_setFontFamily, METH_VARARGS, doc_QTextCharFormat_setFontFamily},
    {sipName_setFontFixedPitch, meth_QTextCharFormat_setFontFixedPitch, METH_VARARGS, doc_QTextCharFormat_setFontFixedPitch},
    {sipName_setFontHintingPreference, meth_QTextCharFormat_setFontHintingPreference, METH_VARARGS, doc_QTextCharFormat_setFontHintingPreference},
    {sipName_setFontItalic, meth_QTextCharFormat_setFontItalic, METH_VARARGS, doc_QTextCharFormat_setFontItalic},
    {sipName_setFontKerning, meth_QTextCharFormat_setFontKerning, METH_VARARGS, doc_QTextCharFormat_setFontKerning},
    {sipName_setFontLetterSpacing, meth_QTextCharFormat_setFontLetterSpacing, METH_VARARGS, doc_QTextCharFormat_setFontLetterSpacing},
    {sipName_setFontLetterSpacingType, meth_QTextCharFormat_setFontLetterSpacingType, METH_VARARGS, doc_QTextCharFormat_setFontLetterSpacingType},
    {sipName_setFontOverline, meth_QTextCharFormat_setFontOverline, METH_VARARGS, doc_QTextCharFormat_setFontOverline},
    {sipName_setFontPointSize, meth_QTextCharFormat_setFontPointSize, METH_VARARGS, doc_QTextCharFormat_setFontPointSize},
    {sipName_setFontStretch, meth_QTextCharFormat_setFontStretch, METH_VARARGS, doc_QTextCharFormat_setFontStretch},
    {sipName_setFontStrikeOut, meth_QTextCharFormat_setFontStrikeOut, METH_VARARGS, doc_QTextCharFormat_setFontStrikeOut},
    {sipName_setFontStyleHint, SIP_MLMETH_CAST(meth_QTextCharFormat_setFontStyleHint), METH_VARARGS|METH_KEYWORDS, doc_QTextCharFormat_setFontStyleHint},
    {sipName_setFontStyleStrategy, meth_QTextCharFormat_setFontStyleStrategy, METH_VARARGS, doc_QTextCharFormat_setFontStyleStrategy},
    {sipName_setFontUnderline, meth_QTextCharFormat_setFontUnderline, METH_VARARGS, doc_QTextCharFormat_setFontUnderline},
    {sipName_setFontWeight, meth_QTextCharFormat_setFontWeight, METH_VARARGS, doc_QTextCharFormat_setFontWeight},
    {sipName_setFontWordSpacing, meth_QTextCharFormat_setFontWordSpacing, METH_VARARGS, doc_QTextCharFormat_setFontWordSpacing},
    {sipName_setTableCellColumnSpan, meth_QTextCharFormat_setTableCellColumnSpan, METH_VARARGS, doc_QTextCharFormat_setTableCellColumnSpan},
    {sipName_setTableCellRowSpan, meth_QTextCharFormat_setTableCellRowSpan, METH_VARARGS, doc_QTextCharFormat_setTableCellRowSpan},
    {sipName_setTextOutline, meth_QTextCharFormat_setTextOutline, METH_VARARGS, doc_QTextCharFormat_setTextOutline},
    {sipName_setToolTip, meth_QTextCharFormat_setToolTip, METH_VARARGS, doc_QTextCharFormat_setToolTip},
    {sipName_setUnderlineColor, meth_QTextCharFormat_setUnderlineColor, METH_VARARGS, doc_QTextCharFormat_setUnderlineColor},
    {sipName_setUnderlineStyle, meth_QTextCharFormat_setUnderlineStyle, METH_VARARGS, doc_QTextCharFormat_setUnderlineStyle},
    {sipName_setVerticalAlignment, meth_QTextCharFormat_setVerticalAlignment, METH_VARARGS, doc_QTextCharFormat_setVerticalAlignment},
    {sipName_tableCellColumnSpan, meth_QTextCharFormat_tableCellColumnSpan, METH_VARARGS, doc_QTextCharFormat_tableCellColumnSpan},
    {sipName_tableCellRowSpan, meth_QTextCharFormat_tableCellRowSpan, METH_VARARGS, doc_QTextCharFormat_tableCellRowSpan},
    {sipName_textOutline, meth_QTextCharFormat_textOutline, METH_VARARGS, doc_QTextCharFormat_textOutline},
    {sipName_toolTip, meth_QTextCharFormat_toolTip, METH_VARARGS, doc_QTextCharFormat_toolTip},
    {sipName_underlineColor, meth_QTextCharFormat_underlineColor, METH_VARARGS, doc_QTextCharFormat_underlineColor},
    {sipName_underlineStyle, meth_QTextCharFormat_underlineStyle, METH_VARARGS, doc_QTextCharFormat_underlineStyle},
    {sipName_verticalAlignment, meth_QTextCharFormat_verticalAlignment, METH_VARARGS, doc_QTextCharFormat_verticalAlignment}
};

static sipEnumMemberDef enummembers_QTextCharFormat[] = {
    {sipName_AlignBaseline, static_cast<int>( ::QTextCharFormat::AlignBaseline), 293},
    {sipName_AlignBottom, static_cast<int>( ::QTextCharFormat::AlignBottom), 293},
    {sipName_AlignMiddle, static_cast<int>( ::QTextCharFormat::AlignMiddle), 293},
    {sipName_AlignNormal, static_cast<int>( ::QTextCharFormat::AlignNormal), 293},
    {sipName_AlignSubScript, static_cast<int>( ::QTextCharFormat::AlignSubScript), 293},
    {sipName_AlignSuperScript, static_cast<int>( ::QTextCharFormat::AlignSuperScript), 293},
    {sipName_AlignTop, static_cast<int>( ::QTextCharFormat::AlignTop), 293},
    {sipName_DashDotDotLine, static_cast<int>( ::QTextCharFormat::DashDotDotLine), 292},
    {sipName_DashDotLine, static_cast<int>( ::QTextCharFormat::DashDotLine), 292},
    {sipName_DashUnderline, static_cast<int>( ::QTextCharFormat::DashUnderline), 292},
    {sipName_DotLine, static_cast<int>( ::QTextCharFormat::DotLine), 292},
    {sipName_FontPropertiesAll, static_cast<int>( ::QTextCharFormat::FontPropertiesAll), 291},
    {sipName_FontPropertiesSpecifiedOnly, static_cast<int>( ::QTextCharFormat::FontPropertiesSpecifiedOnly), 291},
    {sipName_NoUnderline, static_cast<int>( ::QTextCharFormat::NoUnderline), 292},
    {sipName_SingleUnderline, static_cast<int>( ::QTextCharFormat::SingleUnderline), 292},
    {sipName_SpellCheckUnderline, static_cast<int>( ::QTextCharFormat::SpellCheckUnderline), 292},
    {sipName_WaveUnderline, static_cast<int>( ::QTextCharFormat::WaveUnderline), 292},
};

PyDoc_STRVAR(doc_QTextCharFormat, "\1QTextCharFormat()\n"
"QTextCharFormat(QTextCharFormat)");


static pyqt5ClassPluginDef plugin_QTextCharFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextCharFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCharFormat,
        SIP_NULLPTR,
        &plugin_QTextCharFormat
    },
    {
        sipNameNr_QTextCharFormat,
        {0, 0, 1},
        57, methods_QTextCharFormat,
        17, enummembers_QTextCharFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextCharFormat,
    -1,
    -1,
    supers_QTextCharFormat,
    SIP_NULLPTR,
    init_type_QTextCharFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTextCharFormat,
    assign_QTextCharFormat,
    array_QTextCharFormat,
    copy_QTextCharFormat,
    release_QTextCharFormat,
    cast_QTextCharFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
