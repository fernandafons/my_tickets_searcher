/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qfontdatabase.sip"
#include <qfontdatabase.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qlist.sip"
#include <qfontdatabase.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 30 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"


PyDoc_STRVAR(doc_QRawFont_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRawFont_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_isValid, doc_QRawFont_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_familyName, "familyName(self) -> str");

extern "C" {static PyObject *meth_QRawFont_familyName(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_familyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->familyName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_familyName, doc_QRawFont_familyName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_styleName, "styleName(self) -> str");

extern "C" {static PyObject *meth_QRawFont_styleName(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_styleName, doc_QRawFont_styleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_style, "style(self) -> QFont.Style");

extern "C" {static PyObject *meth_QRawFont_style(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QFont::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Style);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_style, doc_QRawFont_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QRawFont_weight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weight();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_weight, doc_QRawFont_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_glyphIndexesForString, "glyphIndexesForString(self, str) -> List[int]");

extern "C" {static PyObject *meth_QRawFont_glyphIndexesForString(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_glyphIndexesForString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->glyphIndexesForString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_glyphIndexesForString, doc_QRawFont_glyphIndexesForString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_advancesForGlyphIndexes, "advancesForGlyphIndexes(self, Iterable[int]) -> List[QPointF]\n"
"advancesForGlyphIndexes(self, Iterable[int], Union[QRawFont.LayoutFlags, QRawFont.LayoutFlag]) -> List[QPointF]");

extern "C" {static PyObject *meth_QRawFont_advancesForGlyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_advancesForGlyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->advancesForGlyphIndexes(*a0));
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QRawFont::LayoutFlags* a1;
        int a1State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QRawFont_LayoutFlags, &a1, &a1State))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->advancesForGlyphIndexes(*a0,*a1));
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QRawFont_LayoutFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_advancesForGlyphIndexes, doc_QRawFont_advancesForGlyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_alphaMapForGlyph, "alphaMapForGlyph(self, int, antialiasingType: QRawFont.AntialiasingType = QRawFont.SubPixelAntialiasing, transform: QTransform = QTransform()) -> QImage");

extern "C" {static PyObject *meth_QRawFont_alphaMapForGlyph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRawFont_alphaMapForGlyph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
         ::QRawFont::AntialiasingType a1 = QRawFont::SubPixelAntialiasing;
        const  ::QTransform& a2def = QTransform();
        const  ::QTransform* a2 = &a2def;
        const  ::QRawFont *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_antialiasingType,
            sipName_transform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|EJ9", &sipSelf, sipType_QRawFont, &sipCpp, &a0, sipType_QRawFont_AntialiasingType, &a1, sipType_QTransform, &a2))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->alphaMapForGlyph(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_alphaMapForGlyph, doc_QRawFont_alphaMapForGlyph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_pathForGlyph, "pathForGlyph(self, int) -> QPainterPath");

extern "C" {static PyObject *meth_QRawFont_pathForGlyph(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_pathForGlyph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->pathForGlyph(a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_pathForGlyph, doc_QRawFont_pathForGlyph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_setPixelSize, "setPixelSize(self, float)");

extern "C" {static PyObject *meth_QRawFont_setPixelSize(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_setPixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
            sipCpp->setPixelSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_setPixelSize, doc_QRawFont_setPixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_pixelSize, "pixelSize(self) -> float");

extern "C" {static PyObject *meth_QRawFont_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pixelSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_pixelSize, doc_QRawFont_pixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_hintingPreference, "hintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QRawFont_hintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_hintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QFont::HintingPreference sipRes;

            sipRes = sipCpp->hintingPreference();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_HintingPreference);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_hintingPreference, doc_QRawFont_hintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QRawFont_ascent(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_ascent, doc_QRawFont_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QRawFont_descent(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_descent, doc_QRawFont_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_leading, "leading(self) -> float");

extern "C" {static PyObject *meth_QRawFont_leading(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leading();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_leading, doc_QRawFont_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_xHeight, "xHeight(self) -> float");

extern "C" {static PyObject *meth_QRawFont_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->xHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_xHeight, doc_QRawFont_xHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_averageCharWidth, "averageCharWidth(self) -> float");

extern "C" {static PyObject *meth_QRawFont_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->averageCharWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_averageCharWidth, doc_QRawFont_averageCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_maxCharWidth, "maxCharWidth(self) -> float");

extern "C" {static PyObject *meth_QRawFont_maxCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_maxCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->maxCharWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_maxCharWidth, doc_QRawFont_maxCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_unitsPerEm, "unitsPerEm(self) -> float");

extern "C" {static PyObject *meth_QRawFont_unitsPerEm(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_unitsPerEm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->unitsPerEm();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_unitsPerEm, doc_QRawFont_unitsPerEm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_loadFromFile, "loadFromFile(self, str, float, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QRawFont_loadFromFile(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_loadFromFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dE", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadFromFile(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_loadFromFile, doc_QRawFont_loadFromFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_loadFromData, "loadFromData(self, Union[QByteArray, bytes, bytearray], float, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QRawFont_loadFromData(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_loadFromData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dE", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadFromData(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_loadFromData, doc_QRawFont_loadFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_supportsCharacter, "supportsCharacter(self, int) -> bool\n"
"supportsCharacter(self, str) -> bool");

extern "C" {static PyObject *meth_QRawFont_supportsCharacter(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_supportsCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->supportsCharacter(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->supportsCharacter(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_supportsCharacter, doc_QRawFont_supportsCharacter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_supportedWritingSystems, "supportedWritingSystems(self) -> List[QFontDatabase.WritingSystem]");

extern "C" {static PyObject *meth_QRawFont_supportedWritingSystems(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_supportedWritingSystems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QList< ::QFontDatabase::WritingSystem>*sipRes;

            sipRes = new  ::QList< ::QFontDatabase::WritingSystem>(sipCpp->supportedWritingSystems());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFontDatabase_WritingSystem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_supportedWritingSystems, doc_QRawFont_supportedWritingSystems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_fontTable, "fontTable(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QRawFont_fontTable(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_fontTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QRawFont, &sipCpp, &a0Keep, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->fontTable(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_fontTable, doc_QRawFont_fontTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_fromFont, "fromFont(QFont, writingSystem: QFontDatabase.WritingSystem = QFontDatabase.Any) -> QRawFont");

extern "C" {static PyObject *meth_QRawFont_fromFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRawFont_fromFont(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QFontDatabase::WritingSystem a1 = QFontDatabase::Any;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_writingSystem,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|E", sipType_QFont, &a0, sipType_QFontDatabase_WritingSystem, &a1))
        {
             ::QRawFont*sipRes;

            sipRes = new  ::QRawFont( ::QRawFont::fromFont(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRawFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_fromFont, doc_QRawFont_fromFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_boundingRect, "boundingRect(self, int) -> QRectF");

extern "C" {static PyObject *meth_QRawFont_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_boundingRect, doc_QRawFont_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_lineThickness, "lineThickness(self) -> float");

extern "C" {static PyObject *meth_QRawFont_lineThickness(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_lineThickness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineThickness();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_lineThickness, doc_QRawFont_lineThickness);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_underlinePosition, "underlinePosition(self) -> float");

extern "C" {static PyObject *meth_QRawFont_underlinePosition(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_underlinePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->underlinePosition();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_underlinePosition, doc_QRawFont_underlinePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_swap, "swap(self, QRawFont)");

extern "C" {static PyObject *meth_QRawFont_swap(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont* a0;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QRawFont, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_swap, doc_QRawFont_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_capHeight, "capHeight(self) -> float");

extern "C" {static PyObject *meth_QRawFont_capHeight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_capHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->capHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_capHeight, doc_QRawFont_capHeight);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QRawFont___hash__(PyObject *);}
static long slot_QRawFont___hash__(PyObject *sipSelf)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 97 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtGui/qrawfont.sip"
        sipRes = qHash(*sipCpp);
#line 979 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtGui/sipQtGuiQRawFont.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRawFont___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRawFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRawFont::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QRawFont, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRawFont___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRawFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRawFont::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QRawFont, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QRawFont(void *, int);}
static void release_QRawFont(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRawFont *>(sipCppV);
}


extern "C" {static void *array_QRawFont(Py_ssize_t);}
static void *array_QRawFont(Py_ssize_t sipNrElem)
{
    return new  ::QRawFont[sipNrElem];
}


extern "C" {static void assign_QRawFont(void *, Py_ssize_t, void *);}
static void assign_QRawFont(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRawFont *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRawFont *>(sipSrc);
}


extern "C" {static void *copy_QRawFont(const void *, Py_ssize_t);}
static void *copy_QRawFont(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QRawFont(reinterpret_cast<const  ::QRawFont *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRawFont(sipSimpleWrapper *);}
static void dealloc_QRawFont(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRawFont(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRawFont(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRawFont(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRawFont *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRawFont();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2 = QFont::PreferDefaultHinting;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hintingPreference,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|E", sipType_QString,&a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            sipCpp = new  ::QRawFont(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2 = QFont::PreferDefaultHinting;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hintingPreference,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|E", sipType_QByteArray, &a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            sipCpp = new  ::QRawFont(*a0,a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRawFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRawFont, &a0))
        {
            sipCpp = new  ::QRawFont(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRawFont[] = {
    {(void *)slot_QRawFont___hash__, hash_slot},
    {(void *)slot_QRawFont___ne__, ne_slot},
    {(void *)slot_QRawFont___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRawFont[] = {
    {sipName_advancesForGlyphIndexes, meth_QRawFont_advancesForGlyphIndexes, METH_VARARGS, doc_QRawFont_advancesForGlyphIndexes},
    {sipName_alphaMapForGlyph, SIP_MLMETH_CAST(meth_QRawFont_alphaMapForGlyph), METH_VARARGS|METH_KEYWORDS, doc_QRawFont_alphaMapForGlyph},
    {sipName_ascent, meth_QRawFont_ascent, METH_VARARGS, doc_QRawFont_ascent},
    {sipName_averageCharWidth, meth_QRawFont_averageCharWidth, METH_VARARGS, doc_QRawFont_averageCharWidth},
    {sipName_boundingRect, meth_QRawFont_boundingRect, METH_VARARGS, doc_QRawFont_boundingRect},
    {sipName_capHeight, meth_QRawFont_capHeight, METH_VARARGS, doc_QRawFont_capHeight},
    {sipName_descent, meth_QRawFont_descent, METH_VARARGS, doc_QRawFont_descent},
    {sipName_familyName, meth_QRawFont_familyName, METH_VARARGS, doc_QRawFont_familyName},
    {sipName_fontTable, meth_QRawFont_fontTable, METH_VARARGS, doc_QRawFont_fontTable},
    {sipName_fromFont, SIP_MLMETH_CAST(meth_QRawFont_fromFont), METH_VARARGS|METH_KEYWORDS, doc_QRawFont_fromFont},
    {sipName_glyphIndexesForString, meth_QRawFont_glyphIndexesForString, METH_VARARGS, doc_QRawFont_glyphIndexesForString},
    {sipName_hintingPreference, meth_QRawFont_hintingPreference, METH_VARARGS, doc_QRawFont_hintingPreference},
    {sipName_isValid, meth_QRawFont_isValid, METH_VARARGS, doc_QRawFont_isValid},
    {sipName_leading, meth_QRawFont_leading, METH_VARARGS, doc_QRawFont_leading},
    {sipName_lineThickness, meth_QRawFont_lineThickness, METH_VARARGS, doc_QRawFont_lineThickness},
    {sipName_loadFromData, meth_QRawFont_loadFromData, METH_VARARGS, doc_QRawFont_loadFromData},
    {sipName_loadFromFile, meth_QRawFont_loadFromFile, METH_VARARGS, doc_QRawFont_loadFromFile},
    {sipName_maxCharWidth, meth_QRawFont_maxCharWidth, METH_VARARGS, doc_QRawFont_maxCharWidth},
    {sipName_pathForGlyph, meth_QRawFont_pathForGlyph, METH_VARARGS, doc_QRawFont_pathForGlyph},
    {sipName_pixelSize, meth_QRawFont_pixelSize, METH_VARARGS, doc_QRawFont_pixelSize},
    {sipName_setPixelSize, meth_QRawFont_setPixelSize, METH_VARARGS, doc_QRawFont_setPixelSize},
    {sipName_style, meth_QRawFont_style, METH_VARARGS, doc_QRawFont_style},
    {sipName_styleName, meth_QRawFont_styleName, METH_VARARGS, doc_QRawFont_styleName},
    {sipName_supportedWritingSystems, meth_QRawFont_supportedWritingSystems, METH_VARARGS, doc_QRawFont_supportedWritingSystems},
    {sipName_supportsCharacter, meth_QRawFont_supportsCharacter, METH_VARARGS, doc_QRawFont_supportsCharacter},
    {sipName_swap, meth_QRawFont_swap, METH_VARARGS, doc_QRawFont_swap},
    {sipName_underlinePosition, meth_QRawFont_underlinePosition, METH_VARARGS, doc_QRawFont_underlinePosition},
    {sipName_unitsPerEm, meth_QRawFont_unitsPerEm, METH_VARARGS, doc_QRawFont_unitsPerEm},
    {sipName_weight, meth_QRawFont_weight, METH_VARARGS, doc_QRawFont_weight},
    {sipName_xHeight, meth_QRawFont_xHeight, METH_VARARGS, doc_QRawFont_xHeight}
};

static sipEnumMemberDef enummembers_QRawFont[] = {
    {sipName_KernedAdvances, static_cast<int>( ::QRawFont::KernedAdvances), 246},
    {sipName_PixelAntialiasing, static_cast<int>( ::QRawFont::PixelAntialiasing), 245},
    {sipName_SeparateAdvances, static_cast<int>( ::QRawFont::SeparateAdvances), 246},
    {sipName_SubPixelAntialiasing, static_cast<int>( ::QRawFont::SubPixelAntialiasing), 245},
    {sipName_UseDesignMetrics, static_cast<int>( ::QRawFont::UseDesignMetrics), 246},
};

PyDoc_STRVAR(doc_QRawFont, "\1QRawFont()\n"
"QRawFont(str, float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)\n"
"QRawFont(Union[QByteArray, bytes, bytearray], float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)\n"
"QRawFont(QRawFont)");


static pyqt5ClassPluginDef plugin_QRawFont = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRawFont = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRawFont,
        SIP_NULLPTR,
        &plugin_QRawFont
    },
    {
        sipNameNr_QRawFont,
        {0, 0, 1},
        30, methods_QRawFont,
        5, enummembers_QRawFont,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRawFont,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRawFont,
    init_type_QRawFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QRawFont,
    assign_QRawFont,
    array_QRawFont,
    copy_QRawFont,
    release_QRawFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
