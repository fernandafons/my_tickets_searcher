/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"


class sipQAbstractNetworkCache : public  ::QAbstractNetworkCache
{
public:
    sipQAbstractNetworkCache( ::QObject*);
    virtual ~sipQAbstractNetworkCache();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void clear() SIP_OVERRIDE;
    void insert( ::QIODevice*) SIP_OVERRIDE;
     ::QIODevice* prepare(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::qint64 cacheSize() const SIP_OVERRIDE;
    bool remove(const  ::QUrl&) SIP_OVERRIDE;
     ::QIODevice* data(const  ::QUrl&) SIP_OVERRIDE;
    void updateMetaData(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::QNetworkCacheMetaData metaData(const  ::QUrl&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractNetworkCache(const sipQAbstractNetworkCache &);
    sipQAbstractNetworkCache &operator = (const sipQAbstractNetworkCache &);

    char sipPyMethods[15];
};

sipQAbstractNetworkCache::sipQAbstractNetworkCache( ::QObject*a0):  ::QAbstractNetworkCache(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractNetworkCache::~sipQAbstractNetworkCache()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractNetworkCache::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractNetworkCache);

    return  ::QAbstractNetworkCache::metaObject();
}

int sipQAbstractNetworkCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractNetworkCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractNetworkCache,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAbstractNetworkCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QAbstractNetworkCache, _clname, &sipCpp) ? sipCpp :  ::QAbstractNetworkCache::qt_metacast(_clname));
}

void sipQAbstractNetworkCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, sipName_QAbstractNetworkCache, sipName_clear);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, sipName_QAbstractNetworkCache, sipName_clear);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractNetworkCache::insert( ::QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, sipName_QAbstractNetworkCache, sipName_insert);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, sipName_QAbstractNetworkCache, sipName_insert);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice*);

    sipVH_QtNetwork_12(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQAbstractNetworkCache::prepare(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, sipName_QAbstractNetworkCache, sipName_prepare);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, sipName_QAbstractNetworkCache, sipName_prepare);
#endif

    if (!sipMeth)
        return 0;

    extern  ::QIODevice* sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    return sipVH_QtNetwork_11(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQAbstractNetworkCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_QAbstractNetworkCache, sipName_cacheSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), sipPySelf, sipName_QAbstractNetworkCache, sipName_cacheSize);
#endif

    if (!sipMeth)
        return 0;

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractNetworkCache::remove(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, sipName_QAbstractNetworkCache, sipName_remove);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, sipName_QAbstractNetworkCache, sipName_remove);
#endif

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_9(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQAbstractNetworkCache::data(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, sipName_QAbstractNetworkCache, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, sipName_QAbstractNetworkCache, sipName_data);
#endif

    if (!sipMeth)
        return 0;

    extern  ::QIODevice* sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_8(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::updateMetaData(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, sipName_QAbstractNetworkCache, sipName_updateMetaData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, sipName_QAbstractNetworkCache, sipName_updateMetaData);
#endif

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    sipVH_QtNetwork_7(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkCacheMetaData sipQAbstractNetworkCache::metaData(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, sipName_QAbstractNetworkCache, sipName_metaData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, sipName_QAbstractNetworkCache, sipName_metaData);
#endif

    if (!sipMeth)
        return  ::QNetworkCacheMetaData();

    extern  ::QNetworkCacheMetaData sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_6(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractNetworkCache::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QAbstractNetworkCache::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractNetworkCache::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QAbstractNetworkCache::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractNetworkCache::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_metaData, "metaData(self, QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QNetworkCacheMetaData*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_metaData);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QNetworkCacheMetaData(sipCpp->metaData(*a0));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_metaData, doc_QAbstractNetworkCache_metaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_updateMetaData, "updateMetaData(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_updateMetaData);
                return SIP_NULLPTR;
            }

            sipCpp->updateMetaData(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_updateMetaData, doc_QAbstractNetworkCache_updateMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_data, "data(self, QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_data(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_data);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->data(*a0);

            return sipConvertFromNewType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_data, doc_QAbstractNetworkCache_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_remove, "remove(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QAbstractNetworkCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_remove);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->remove(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_remove, doc_QAbstractNetworkCache_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_cacheSize, "cacheSize(self) -> int");

extern "C" {static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
             ::qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_cacheSize);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->cacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_cacheSize, doc_QAbstractNetworkCache_cacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_prepare, "prepare(self, QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
             ::QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_prepare);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->prepare(*a0);

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_prepare, doc_QAbstractNetworkCache_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_insert, "insert(self, QIODevice)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QIODevice* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QIODevice, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_insert);
                return SIP_NULLPTR;
            }

            sipCpp->insert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_insert, doc_QAbstractNetworkCache_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_clear, "clear(self)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_clear);
                return SIP_NULLPTR;
            }

            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_clear, doc_QAbstractNetworkCache_clear);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractNetworkCache(void *, const sipTypeDef *);}
static void *cast_QAbstractNetworkCache(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractNetworkCache *sipCpp = reinterpret_cast< ::QAbstractNetworkCache *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractNetworkCache(void *, int);}
static void release_QAbstractNetworkCache(void *sipCppV, int)
{
     ::QAbstractNetworkCache *sipCpp = reinterpret_cast< ::QAbstractNetworkCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *);}
static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractNetworkCache *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractNetworkCache(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractNetworkCache *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractNetworkCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractNetworkCache[] = {{12, 0, 1}};


static PyMethodDef methods_QAbstractNetworkCache[] = {
    {sipName_cacheSize, meth_QAbstractNetworkCache_cacheSize, METH_VARARGS, doc_QAbstractNetworkCache_cacheSize},
    {sipName_clear, meth_QAbstractNetworkCache_clear, METH_VARARGS, doc_QAbstractNetworkCache_clear},
    {sipName_data, meth_QAbstractNetworkCache_data, METH_VARARGS, doc_QAbstractNetworkCache_data},
    {sipName_insert, meth_QAbstractNetworkCache_insert, METH_VARARGS, doc_QAbstractNetworkCache_insert},
    {sipName_metaData, meth_QAbstractNetworkCache_metaData, METH_VARARGS, doc_QAbstractNetworkCache_metaData},
    {sipName_prepare, meth_QAbstractNetworkCache_prepare, METH_VARARGS, doc_QAbstractNetworkCache_prepare},
    {sipName_remove, meth_QAbstractNetworkCache_remove, METH_VARARGS, doc_QAbstractNetworkCache_remove},
    {sipName_updateMetaData, meth_QAbstractNetworkCache_updateMetaData, METH_VARARGS, doc_QAbstractNetworkCache_updateMetaData}
};

PyDoc_STRVAR(doc_QAbstractNetworkCache, "\1QAbstractNetworkCache(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAbstractNetworkCache = {
    & ::QAbstractNetworkCache::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAbstractNetworkCache = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractNetworkCache,
        SIP_NULLPTR,
        &plugin_QAbstractNetworkCache
    },
    {
        sipNameNr_QAbstractNetworkCache,
        {0, 0, 1},
        8, methods_QAbstractNetworkCache,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractNetworkCache,
    -1,
    -1,
    supers_QAbstractNetworkCache,
    SIP_NULLPTR,
    init_type_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractNetworkCache,
    cast_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
