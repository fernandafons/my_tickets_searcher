/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qtcpserver.sip"
#include <qtcpserver.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 160 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQTcpServer.cpp"


class sipQTcpServer : public  ::QTcpServer
{
public:
    sipQTcpServer( ::QObject*);
    virtual ~sipQTcpServer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void incomingConnection( ::qintptr) SIP_OVERRIDE;
     ::QTcpSocket* nextPendingConnection() SIP_OVERRIDE;
    bool hasPendingConnections() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTcpServer(const sipQTcpServer &);
    sipQTcpServer &operator = (const sipQTcpServer &);

    char sipPyMethods[10];
};

sipQTcpServer::sipQTcpServer( ::QObject*a0):  ::QTcpServer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTcpServer::~sipQTcpServer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTcpServer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QTcpServer);

    return  ::QTcpServer::metaObject();
}

int sipQTcpServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTcpServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QTcpServer,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQTcpServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QTcpServer, _clname, &sipCpp) ? sipCpp :  ::QTcpServer::qt_metacast(_clname));
}

void sipQTcpServer::incomingConnection( ::qintptr a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_incomingConnection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_incomingConnection);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::incomingConnection(a0);
        return;
    }

    extern void sipVH_QtNetwork_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qintptr);

    sipVH_QtNetwork_40(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QTcpSocket* sipQTcpServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_nextPendingConnection);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_nextPendingConnection);
#endif

    if (!sipMeth)
        return  ::QTcpServer::nextPendingConnection();

    extern  ::QTcpSocket* sipVH_QtNetwork_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_39(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTcpServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasPendingConnections);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), sipPySelf, SIP_NULLPTR, sipName_hasPendingConnections);
#endif

    if (!sipMeth)
        return  ::QTcpServer::hasPendingConnections();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTcpServer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QTcpServer::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTcpServer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QTcpServer::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTcpServer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTcpServer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QTcpServer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTcpServer_listen, "listen(self, address: Union[QHostAddress, QHostAddress.SpecialAddress] = QHostAddress.Any, port: int = 0) -> bool");

extern "C" {static PyObject *meth_QTcpServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress& a0def = QHostAddress::Any;
        const  ::QHostAddress* a0 = &a0def;
        int a0State = 0;
         ::quint16 a1 = 0;
         ::QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1t", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0,a1);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_listen, doc_QTcpServer_listen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_close, "close(self)");

extern "C" {static PyObject *meth_QTcpServer_close(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_close, doc_QTcpServer_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_isListening, "isListening(self) -> bool");

extern "C" {static PyObject *meth_QTcpServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_isListening, doc_QTcpServer_isListening);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_setMaxPendingConnections, "setMaxPendingConnections(self, int)");

extern "C" {static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setMaxPendingConnections, doc_QTcpServer_setMaxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_maxPendingConnections, "maxPendingConnections(self) -> int");

extern "C" {static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_maxPendingConnections, doc_QTcpServer_maxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_serverPort, "serverPort(self) -> int");

extern "C" {static PyObject *meth_QTcpServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->serverPort();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverPort, doc_QTcpServer_serverPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_serverAddress, "serverAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QTcpServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverAddress, doc_QTcpServer_serverAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QTcpServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_socketDescriptor, doc_QTcpServer_socketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_setSocketDescriptor, "setSocketDescriptor(self, sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(*a0);
            sipReleaseType(a0,sipType_qintptr,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setSocketDescriptor, doc_QTcpServer_setSocketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_waitForNewConnection, "waitForNewConnection(self, msecs: int = 0) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        bool a1;
         ::QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_waitForNewConnection, doc_QTcpServer_waitForNewConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_hasPendingConnections, "hasPendingConnections(self) -> bool");

extern "C" {static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTcpServer::hasPendingConnections() : sipCpp->hasPendingConnections());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_hasPendingConnections, doc_QTcpServer_hasPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_nextPendingConnection, "nextPendingConnection(self) -> QTcpSocket");

extern "C" {static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::QTcpSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTcpServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromType(sipRes,sipType_QTcpSocket,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_nextPendingConnection, doc_QTcpServer_nextPendingConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_serverError, "serverError(self) -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QTcpServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->serverError();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_SocketError);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverError, doc_QTcpServer_serverError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QTcpServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_errorString, doc_QTcpServer_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QTcpServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setProxy, doc_QTcpServer_setProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QTcpServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
             ::QNetworkProxy*sipRes;

            sipRes = new  ::QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_proxy, doc_QTcpServer_proxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_pauseAccepting, "pauseAccepting(self)");

extern "C" {static PyObject *meth_QTcpServer_pauseAccepting(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_pauseAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->pauseAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_pauseAccepting, doc_QTcpServer_pauseAccepting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_resumeAccepting, "resumeAccepting(self)");

extern "C" {static PyObject *meth_QTcpServer_resumeAccepting(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_resumeAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->resumeAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_resumeAccepting, doc_QTcpServer_resumeAccepting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_incomingConnection, "incomingConnection(self, sip.voidptr)");

extern "C" {static PyObject *meth_QTcpServer_incomingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QTcpServer::incomingConnection(*a0) : sipCpp->incomingConnection(*a0));
            sipReleaseType(a0,sipType_qintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_incomingConnection, doc_QTcpServer_incomingConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTcpServer_addPendingConnection, "addPendingConnection(self, QTcpSocket)");

extern "C" {static PyObject *meth_QTcpServer_addPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_addPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTcpSocket* a0;
         ::QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QTcpSocket, &a0))
        {
            sipCpp->addPendingConnection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_addPendingConnection, doc_QTcpServer_addPendingConnection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTcpServer(void *, const sipTypeDef *);}
static void *cast_QTcpServer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTcpServer *sipCpp = reinterpret_cast< ::QTcpServer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTcpServer(void *, int);}
static void release_QTcpServer(void *sipCppV, int)
{
     ::QTcpServer *sipCpp = reinterpret_cast< ::QTcpServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QTcpServer(Py_ssize_t);}
static void *array_QTcpServer(Py_ssize_t sipNrElem)
{
    return new  ::QTcpServer[sipNrElem];
}


extern "C" {static void dealloc_QTcpServer(sipSimpleWrapper *);}
static void dealloc_QTcpServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTcpServer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTcpServer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTcpServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTcpServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTcpServer *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTcpServer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTcpServer[] = {{12, 0, 1}};


static PyMethodDef methods_QTcpServer[] = {
    {sipName_addPendingConnection, meth_QTcpServer_addPendingConnection, METH_VARARGS, doc_QTcpServer_addPendingConnection},
    {sipName_close, meth_QTcpServer_close, METH_VARARGS, doc_QTcpServer_close},
    {sipName_errorString, meth_QTcpServer_errorString, METH_VARARGS, doc_QTcpServer_errorString},
    {sipName_hasPendingConnections, meth_QTcpServer_hasPendingConnections, METH_VARARGS, doc_QTcpServer_hasPendingConnections},
    {sipName_incomingConnection, meth_QTcpServer_incomingConnection, METH_VARARGS, doc_QTcpServer_incomingConnection},
    {sipName_isListening, meth_QTcpServer_isListening, METH_VARARGS, doc_QTcpServer_isListening},
    {sipName_listen, SIP_MLMETH_CAST(meth_QTcpServer_listen), METH_VARARGS|METH_KEYWORDS, doc_QTcpServer_listen},
    {sipName_maxPendingConnections, meth_QTcpServer_maxPendingConnections, METH_VARARGS, doc_QTcpServer_maxPendingConnections},
    {sipName_nextPendingConnection, meth_QTcpServer_nextPendingConnection, METH_VARARGS, doc_QTcpServer_nextPendingConnection},
    {sipName_pauseAccepting, meth_QTcpServer_pauseAccepting, METH_VARARGS, doc_QTcpServer_pauseAccepting},
    {sipName_proxy, meth_QTcpServer_proxy, METH_VARARGS, doc_QTcpServer_proxy},
    {sipName_resumeAccepting, meth_QTcpServer_resumeAccepting, METH_VARARGS, doc_QTcpServer_resumeAccepting},
    {sipName_serverAddress, meth_QTcpServer_serverAddress, METH_VARARGS, doc_QTcpServer_serverAddress},
    {sipName_serverError, meth_QTcpServer_serverError, METH_VARARGS, doc_QTcpServer_serverError},
    {sipName_serverPort, meth_QTcpServer_serverPort, METH_VARARGS, doc_QTcpServer_serverPort},
    {sipName_setMaxPendingConnections, meth_QTcpServer_setMaxPendingConnections, METH_VARARGS, doc_QTcpServer_setMaxPendingConnections},
    {sipName_setProxy, meth_QTcpServer_setProxy, METH_VARARGS, doc_QTcpServer_setProxy},
    {sipName_setSocketDescriptor, meth_QTcpServer_setSocketDescriptor, METH_VARARGS, doc_QTcpServer_setSocketDescriptor},
    {sipName_socketDescriptor, meth_QTcpServer_socketDescriptor, METH_VARARGS, doc_QTcpServer_socketDescriptor},
    {sipName_waitForNewConnection, SIP_MLMETH_CAST(meth_QTcpServer_waitForNewConnection), METH_VARARGS|METH_KEYWORDS, doc_QTcpServer_waitForNewConnection}
};

PyDoc_STRVAR(doc_QTcpServer, "\1QTcpServer(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTcpServer[] = {
    {"acceptError(QAbstractSocket::SocketError)", "\1acceptError(self, QAbstractSocket.SocketError)", SIP_NULLPTR, SIP_NULLPTR},
    {"newConnection()", "\1newConnection(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTcpServer = {
    & ::QTcpServer::staticMetaObject,
    0,
    signals_QTcpServer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QTcpServer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTcpServer,
        SIP_NULLPTR,
        &plugin_QTcpServer
    },
    {
        sipNameNr_QTcpServer,
        {0, 0, 1},
        20, methods_QTcpServer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTcpServer,
    -1,
    -1,
    supers_QTcpServer,
    SIP_NULLPTR,
    init_type_QTcpServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QTcpServer,
    SIP_NULLPTR,
    array_QTcpServer,
    SIP_NULLPTR,
    release_QTcpServer,
    cast_QTcpServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
