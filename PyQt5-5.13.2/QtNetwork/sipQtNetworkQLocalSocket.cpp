/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qlocalsocket.sip"
#include <qlocalsocket.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 160 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"


class sipQLocalSocket : public  ::QLocalSocket
{
public:
    sipQLocalSocket( ::QObject*);
    virtual ~sipQLocalSocket();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLocalSocket(const sipQLocalSocket &);
    sipQLocalSocket &operator = (const sipQLocalSocket &);

    char sipPyMethods[23];
};

sipQLocalSocket::sipQLocalSocket( ::QObject*a0):  ::QLocalSocket(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLocalSocket::~sipQLocalSocket()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLocalSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QLocalSocket);

    return  ::QLocalSocket::metaObject();
}

int sipQLocalSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLocalSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QLocalSocket,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQLocalSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QLocalSocket, _clname, &sipCpp) ? sipCpp :  ::QLocalSocket::qt_metacast(_clname));
}

void sipQLocalSocket::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalSocket::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_isSequential);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), sipPySelf, SIP_NULLPTR, sipName_isSequential);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::isSequential();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_open);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_open);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::open(a0);

    extern bool sipVH_QtNetwork_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtNetwork_20(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_close);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_close);
#endif

    if (!sipMeth)
    {
         ::QLocalSocket::close();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_pos);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), sipPySelf, SIP_NULLPTR, sipName_pos);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::pos();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_size);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), sipPySelf, SIP_NULLPTR, sipName_size);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::size();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_seek);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_seek);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::seek(a0);

    extern bool sipVH_QtNetwork_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtNetwork_19(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_atEnd);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), sipPySelf, SIP_NULLPTR, sipName_atEnd);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::atEnd();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_reset);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_reset);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::reset();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_bytesAvailable);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), sipPySelf, SIP_NULLPTR, sipName_bytesAvailable);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::bytesAvailable();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_bytesToWrite);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), sipPySelf, SIP_NULLPTR, sipName_bytesToWrite);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::bytesToWrite();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_canReadLine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_canReadLine);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::canReadLine();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_waitForReadyRead);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], sipPySelf, SIP_NULLPTR, sipName_waitForReadyRead);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::waitForReadyRead(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_waitForBytesWritten);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], sipPySelf, SIP_NULLPTR, sipName_waitForBytesWritten);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::waitForBytesWritten(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQLocalSocket::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_readData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_readData);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::readData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_16(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQLocalSocket::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_readLineData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], sipPySelf, SIP_NULLPTR, sipName_readLineData);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_15(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQLocalSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_writeData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], sipPySelf, SIP_NULLPTR, sipName_writeData);
#endif

    if (!sipMeth)
        return  ::QLocalSocket::writeData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtNetwork_14(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QLocalSocket_connectToServer, "connectToServer(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"connectToServer(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QLocalSocket_connectToServer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_connectToServer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_connectToServer, doc_QLocalSocket_connectToServer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_disconnectFromServer, "disconnectFromServer(self)");

extern "C" {static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromServer();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_disconnectFromServer, doc_QLocalSocket_disconnectFromServer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_open, "open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::open(*a0) : sipCpp->open(*a0));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_open, doc_QLocalSocket_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_serverName, "serverName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_serverName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_serverName, doc_QLocalSocket_serverName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setServerName, "setServerName(self, str)");

extern "C" {static PyObject *meth_QLocalSocket_setServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServerName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setServerName, doc_QLocalSocket_setServerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_fullServerName, "fullServerName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_fullServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_fullServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fullServerName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_fullServerName, doc_QLocalSocket_fullServerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QLocalSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_abort, doc_QLocalSocket_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isSequential, doc_QLocalSocket_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesAvailable, doc_QLocalSocket_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesToWrite, doc_QLocalSocket_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_canReadLine, doc_QLocalSocket_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_close, "close(self)");

extern "C" {static PyObject *meth_QLocalSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QLocalSocket::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_close, doc_QLocalSocket_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_error, "error(self) -> QLocalSocket.LocalSocketError");

extern "C" {static PyObject *meth_QLocalSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QLocalSocket::LocalSocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocalSocket_LocalSocketError);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_error, doc_QLocalSocket_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->flush();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_flush, doc_QLocalSocket_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isValid, doc_QLocalSocket_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readBufferSize, doc_QLocalSocket_readBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setReadBufferSize, doc_QLocalSocket_setReadBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setSocketDescriptor, "setSocketDescriptor(self, sip.voidptr, state: QLocalSocket.LocalSocketState = QLocalSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QLocalSocket::LocalSocketState a1 = QLocalSocket::ConnectedState;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|EJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_qintptr,&a0, &a0State, sipType_QLocalSocket_LocalSocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(*a0,a1,*a2);
            sipReleaseType(a0,sipType_qintptr,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setSocketDescriptor, doc_QLocalSocket_setSocketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_socketDescriptor, doc_QLocalSocket_socketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_state, "state(self) -> QLocalSocket.LocalSocketState");

extern "C" {static PyObject *meth_QLocalSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QLocalSocket::LocalSocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocalSocket_LocalSocketState);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_state, doc_QLocalSocket_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForBytesWritten, doc_QLocalSocket_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForConnected, "waitForConnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForConnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForConnected, doc_QLocalSocket_waitForConnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForDisconnected, "waitForDisconnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDisconnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForDisconnected, doc_QLocalSocket_waitForDisconnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForReadyRead, doc_QLocalSocket_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QLocalSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qlocalsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QLocalSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1456 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQLocalSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readData, doc_QLocalSocket_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QLocalSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        Py_ssize_t a1;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_writeData, doc_QLocalSocket_writeData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLocalSocket(void *, const sipTypeDef *);}
static void *cast_QLocalSocket(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLocalSocket *sipCpp = reinterpret_cast< ::QLocalSocket *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalSocket(void *, int);}
static void release_QLocalSocket(void *sipCppV, int)
{
     ::QLocalSocket *sipCpp = reinterpret_cast< ::QLocalSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QLocalSocket(Py_ssize_t);}
static void *array_QLocalSocket(Py_ssize_t sipNrElem)
{
    return new  ::QLocalSocket[sipNrElem];
}


extern "C" {static void dealloc_QLocalSocket(sipSimpleWrapper *);}
static void dealloc_QLocalSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLocalSocket *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocalSocket(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLocalSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLocalSocket *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLocalSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLocalSocket[] = {{8, 0, 1}};


static PyMethodDef methods_QLocalSocket[] = {
    {sipName_abort, meth_QLocalSocket_abort, METH_VARARGS, doc_QLocalSocket_abort},
    {sipName_bytesAvailable, meth_QLocalSocket_bytesAvailable, METH_VARARGS, doc_QLocalSocket_bytesAvailable},
    {sipName_bytesToWrite, meth_QLocalSocket_bytesToWrite, METH_VARARGS, doc_QLocalSocket_bytesToWrite},
    {sipName_canReadLine, meth_QLocalSocket_canReadLine, METH_VARARGS, doc_QLocalSocket_canReadLine},
    {sipName_close, meth_QLocalSocket_close, METH_VARARGS, doc_QLocalSocket_close},
    {sipName_connectToServer, SIP_MLMETH_CAST(meth_QLocalSocket_connectToServer), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_connectToServer},
    {sipName_disconnectFromServer, meth_QLocalSocket_disconnectFromServer, METH_VARARGS, doc_QLocalSocket_disconnectFromServer},
    {sipName_error, meth_QLocalSocket_error, METH_VARARGS, doc_QLocalSocket_error},
    {sipName_flush, meth_QLocalSocket_flush, METH_VARARGS, doc_QLocalSocket_flush},
    {sipName_fullServerName, meth_QLocalSocket_fullServerName, METH_VARARGS, doc_QLocalSocket_fullServerName},
    {sipName_isSequential, meth_QLocalSocket_isSequential, METH_VARARGS, doc_QLocalSocket_isSequential},
    {sipName_isValid, meth_QLocalSocket_isValid, METH_VARARGS, doc_QLocalSocket_isValid},
    {sipName_open, SIP_MLMETH_CAST(meth_QLocalSocket_open), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_open},
    {sipName_readBufferSize, meth_QLocalSocket_readBufferSize, METH_VARARGS, doc_QLocalSocket_readBufferSize},
    {sipName_readData, meth_QLocalSocket_readData, METH_VARARGS, doc_QLocalSocket_readData},
    {sipName_serverName, meth_QLocalSocket_serverName, METH_VARARGS, doc_QLocalSocket_serverName},
    {sipName_setReadBufferSize, meth_QLocalSocket_setReadBufferSize, METH_VARARGS, doc_QLocalSocket_setReadBufferSize},
    {sipName_setServerName, meth_QLocalSocket_setServerName, METH_VARARGS, doc_QLocalSocket_setServerName},
    {sipName_setSocketDescriptor, SIP_MLMETH_CAST(meth_QLocalSocket_setSocketDescriptor), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_setSocketDescriptor},
    {sipName_socketDescriptor, meth_QLocalSocket_socketDescriptor, METH_VARARGS, doc_QLocalSocket_socketDescriptor},
    {sipName_state, meth_QLocalSocket_state, METH_VARARGS, doc_QLocalSocket_state},
    {sipName_waitForBytesWritten, SIP_MLMETH_CAST(meth_QLocalSocket_waitForBytesWritten), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_waitForBytesWritten},
    {sipName_waitForConnected, SIP_MLMETH_CAST(meth_QLocalSocket_waitForConnected), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_waitForConnected},
    {sipName_waitForDisconnected, SIP_MLMETH_CAST(meth_QLocalSocket_waitForDisconnected), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_waitForDisconnected},
    {sipName_waitForReadyRead, SIP_MLMETH_CAST(meth_QLocalSocket_waitForReadyRead), METH_VARARGS|METH_KEYWORDS, doc_QLocalSocket_waitForReadyRead},
    {sipName_writeData, meth_QLocalSocket_writeData, METH_VARARGS, doc_QLocalSocket_writeData}
};

static sipEnumMemberDef enummembers_QLocalSocket[] = {
    {sipName_ClosingState, static_cast<int>( ::QLocalSocket::ClosingState), 54},
    {sipName_ConnectedState, static_cast<int>( ::QLocalSocket::ConnectedState), 54},
    {sipName_ConnectingState, static_cast<int>( ::QLocalSocket::ConnectingState), 54},
    {sipName_ConnectionError, static_cast<int>( ::QLocalSocket::ConnectionError), 53},
    {sipName_ConnectionRefusedError, static_cast<int>( ::QLocalSocket::ConnectionRefusedError), 53},
    {sipName_DatagramTooLargeError, static_cast<int>( ::QLocalSocket::DatagramTooLargeError), 53},
    {sipName_OperationError, static_cast<int>( ::QLocalSocket::OperationError), 53},
    {sipName_PeerClosedError, static_cast<int>( ::QLocalSocket::PeerClosedError), 53},
    {sipName_ServerNotFoundError, static_cast<int>( ::QLocalSocket::ServerNotFoundError), 53},
    {sipName_SocketAccessError, static_cast<int>( ::QLocalSocket::SocketAccessError), 53},
    {sipName_SocketResourceError, static_cast<int>( ::QLocalSocket::SocketResourceError), 53},
    {sipName_SocketTimeoutError, static_cast<int>( ::QLocalSocket::SocketTimeoutError), 53},
    {sipName_UnconnectedState, static_cast<int>( ::QLocalSocket::UnconnectedState), 54},
    {sipName_UnknownSocketError, static_cast<int>( ::QLocalSocket::UnknownSocketError), 53},
    {sipName_UnsupportedSocketOperationError, static_cast<int>( ::QLocalSocket::UnsupportedSocketOperationError), 53},
};

PyDoc_STRVAR(doc_QLocalSocket, "\1QLocalSocket(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLocalSocket[] = {
    {"stateChanged(QLocalSocket::LocalSocketState)", "\1stateChanged(self, QLocalSocket.LocalSocketState)", SIP_NULLPTR, SIP_NULLPTR},
    {"disconnected()", "\1disconnected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"connected()", "\1connected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QLocalSocket::LocalSocketError)", "\1error(self, QLocalSocket.LocalSocketError)", &methods_QLocalSocket[7], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QLocalSocket = {
    & ::QLocalSocket::staticMetaObject,
    0,
    signals_QLocalSocket,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QLocalSocket = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocalSocket,
        SIP_NULLPTR,
        &plugin_QLocalSocket
    },
    {
        sipNameNr_QLocalSocket,
        {0, 0, 1},
        26, methods_QLocalSocket,
        15, enummembers_QLocalSocket,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocalSocket,
    -1,
    -1,
    supers_QLocalSocket,
    SIP_NULLPTR,
    init_type_QLocalSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QLocalSocket,
    SIP_NULLPTR,
    array_QLocalSocket,
    SIP_NULLPTR,
    release_QLocalSocket,
    cast_QLocalSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
