/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"

#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qssldiffiehellmanparameters.sip"
#include <qssldiffiehellmanparameters.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslellipticcurve.sip"
#include <qsslellipticcurve.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslcipher.sip"
#include <qsslcipher.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslsocket.sip"
#include <qsslsocket.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslConfiguration.cpp"


PyDoc_STRVAR(doc_QSslConfiguration_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSslConfiguration_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_isNull, doc_QSslConfiguration_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_protocol, "protocol(self) -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslConfiguration_protocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSsl::SslProtocol sipRes;

            sipRes = sipCpp->protocol();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSsl_SslProtocol);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_protocol, doc_QSslConfiguration_protocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setProtocol, "setProtocol(self, QSsl.SslProtocol)");

extern "C" {static PyObject *meth_QSslConfiguration_setProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSsl::SslProtocol a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslProtocol, &a0))
        {
            sipCpp->setProtocol(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setProtocol, doc_QSslConfiguration_setProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerVerifyMode, "peerVerifyMode(self) -> QSslSocket.PeerVerifyMode");

extern "C" {static PyObject *meth_QSslConfiguration_peerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslSocket::PeerVerifyMode sipRes;

            sipRes = sipCpp->peerVerifyMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSslSocket_PeerVerifyMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerVerifyMode, doc_QSslConfiguration_peerVerifyMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPeerVerifyMode, "setPeerVerifyMode(self, QSslSocket.PeerVerifyMode)");

extern "C" {static PyObject *meth_QSslConfiguration_setPeerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPeerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslSocket::PeerVerifyMode a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslSocket_PeerVerifyMode, &a0))
        {
            sipCpp->setPeerVerifyMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPeerVerifyMode, doc_QSslConfiguration_setPeerVerifyMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerVerifyDepth, "peerVerifyDepth(self) -> int");

extern "C" {static PyObject *meth_QSslConfiguration_peerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->peerVerifyDepth();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerVerifyDepth, doc_QSslConfiguration_peerVerifyDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPeerVerifyDepth, "setPeerVerifyDepth(self, int)");

extern "C" {static PyObject *meth_QSslConfiguration_setPeerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPeerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSslConfiguration, &sipCpp, &a0))
        {
            sipCpp->setPeerVerifyDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPeerVerifyDepth, doc_QSslConfiguration_setPeerVerifyDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_localCertificate, "localCertificate(self) -> QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_localCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_localCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslCertificate*sipRes;

            sipRes = new  ::QSslCertificate(sipCpp->localCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_localCertificate, doc_QSslConfiguration_localCertificate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setLocalCertificate, "setLocalCertificate(self, QSslCertificate)");

extern "C" {static PyObject *meth_QSslConfiguration_setLocalCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setLocalCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate* a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->setLocalCertificate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setLocalCertificate, doc_QSslConfiguration_setLocalCertificate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerCertificate, "peerCertificate(self) -> QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_peerCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslCertificate*sipRes;

            sipRes = new  ::QSslCertificate(sipCpp->peerCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerCertificate, doc_QSslConfiguration_peerCertificate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerCertificateChain, "peerCertificateChain(self) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslConfiguration_peerCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>(sipCpp->peerCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerCertificateChain, doc_QSslConfiguration_peerCertificateChain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionCipher, "sessionCipher(self) -> QSslCipher");

extern "C" {static PyObject *meth_QSslConfiguration_sessionCipher(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionCipher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslCipher*sipRes;

            sipRes = new  ::QSslCipher(sipCpp->sessionCipher());

            return sipConvertFromNewType(sipRes,sipType_QSslCipher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionCipher, doc_QSslConfiguration_sessionCipher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_privateKey, "privateKey(self) -> QSslKey");

extern "C" {static PyObject *meth_QSslConfiguration_privateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_privateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslKey*sipRes;

            sipRes = new  ::QSslKey(sipCpp->privateKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_privateKey, doc_QSslConfiguration_privateKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPrivateKey, "setPrivateKey(self, QSslKey)");

extern "C" {static PyObject *meth_QSslConfiguration_setPrivateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPrivateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslKey* a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslKey, &a0))
        {
            sipCpp->setPrivateKey(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPrivateKey, doc_QSslConfiguration_setPrivateKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_ciphers, "ciphers(self) -> List[QSslCipher]");

extern "C" {static PyObject *meth_QSslConfiguration_ciphers(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_ciphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList< ::QSslCipher>*sipRes;

            sipRes = new QList< ::QSslCipher>(sipCpp->ciphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_ciphers, doc_QSslConfiguration_ciphers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setCiphers, "setCiphers(self, Iterable[QSslCipher])");

extern "C" {static PyObject *meth_QSslConfiguration_setCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setCiphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QSslCipher>* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            sipCpp->setCiphers(*a0);
            sipReleaseType(const_cast<QList< ::QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setCiphers, doc_QSslConfiguration_setCiphers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_caCertificates, "caCertificates(self) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslConfiguration_caCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_caCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>(sipCpp->caCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_caCertificates, doc_QSslConfiguration_caCertificates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setCaCertificates, "setCaCertificates(self, Iterable[QSslCertificate])");

extern "C" {static PyObject *meth_QSslConfiguration_setCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setCaCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QSslCertificate>* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setCaCertificates(*a0);
            sipReleaseType(const_cast<QList< ::QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setCaCertificates, doc_QSslConfiguration_setCaCertificates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_defaultConfiguration, "defaultConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QSslConfiguration_defaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_defaultConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSslConfiguration*sipRes;

            sipRes = new  ::QSslConfiguration( ::QSslConfiguration::defaultConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_defaultConfiguration, doc_QSslConfiguration_defaultConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setDefaultConfiguration, "setDefaultConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QSslConfiguration_setDefaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setDefaultConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSslConfiguration, &a0))
        {
             ::QSslConfiguration::setDefaultConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setDefaultConfiguration, doc_QSslConfiguration_setDefaultConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setSslOption, "setSslOption(self, QSsl.SslOption, bool)");

extern "C" {static PyObject *meth_QSslConfiguration_setSslOption(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setSslOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSsl::SslOption a0;
        bool a1;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslOption, &a0, &a1))
        {
            sipCpp->setSslOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setSslOption, doc_QSslConfiguration_setSslOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_testSslOption, "testSslOption(self, QSsl.SslOption) -> bool");

extern "C" {static PyObject *meth_QSslConfiguration_testSslOption(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_testSslOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSsl::SslOption a0;
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testSslOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_testSslOption, doc_QSslConfiguration_testSslOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_swap, "swap(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QSslConfiguration_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslConfiguration* a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_swap, doc_QSslConfiguration_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_localCertificateChain, "localCertificateChain(self) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslConfiguration_localCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_localCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>(sipCpp->localCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_localCertificateChain, doc_QSslConfiguration_localCertificateChain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setLocalCertificateChain, "setLocalCertificateChain(self, Iterable[QSslCertificate])");

extern "C" {static PyObject *meth_QSslConfiguration_setLocalCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setLocalCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QSslCertificate>* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setLocalCertificateChain(*a0);
            sipReleaseType(const_cast<QList< ::QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setLocalCertificateChain, doc_QSslConfiguration_setLocalCertificateChain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionTicket, "sessionTicket(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_sessionTicket(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionTicket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->sessionTicket());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionTicket, doc_QSslConfiguration_sessionTicket);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setSessionTicket, "setSessionTicket(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QSslConfiguration_setSessionTicket(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setSessionTicket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setSessionTicket(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setSessionTicket, doc_QSslConfiguration_setSessionTicket);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionTicketLifeTimeHint, "sessionTicketLifeTimeHint(self) -> int");

extern "C" {static PyObject *meth_QSslConfiguration_sessionTicketLifeTimeHint(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionTicketLifeTimeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sessionTicketLifeTimeHint();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionTicketLifeTimeHint, doc_QSslConfiguration_sessionTicketLifeTimeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setAllowedNextProtocols, "setAllowedNextProtocols(self, Iterable[Union[QByteArray, bytes, bytearray]])");

extern "C" {static PyObject *meth_QSslConfiguration_setAllowedNextProtocols(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setAllowedNextProtocols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        QList< ::QByteArray>* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QByteArray,&a0, &a0State))
        {
            sipCpp->setAllowedNextProtocols(*a0);
            sipReleaseType(a0,sipType_QList_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setAllowedNextProtocols, doc_QSslConfiguration_setAllowedNextProtocols);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_allowedNextProtocols, "allowedNextProtocols(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QSslConfiguration_allowedNextProtocols(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_allowedNextProtocols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->allowedNextProtocols());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_allowedNextProtocols, doc_QSslConfiguration_allowedNextProtocols);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_nextNegotiatedProtocol, "nextNegotiatedProtocol(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_nextNegotiatedProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_nextNegotiatedProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->nextNegotiatedProtocol());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_nextNegotiatedProtocol, doc_QSslConfiguration_nextNegotiatedProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_nextProtocolNegotiationStatus, "nextProtocolNegotiationStatus(self) -> QSslConfiguration.NextProtocolNegotiationStatus");

extern "C" {static PyObject *meth_QSslConfiguration_nextProtocolNegotiationStatus(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_nextProtocolNegotiationStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslConfiguration::NextProtocolNegotiationStatus sipRes;

            sipRes = sipCpp->nextProtocolNegotiationStatus();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSslConfiguration_NextProtocolNegotiationStatus);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_nextProtocolNegotiationStatus, doc_QSslConfiguration_nextProtocolNegotiationStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionProtocol, "sessionProtocol(self) -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslConfiguration_sessionProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSsl::SslProtocol sipRes;

            sipRes = sipCpp->sessionProtocol();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSsl_SslProtocol);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionProtocol, doc_QSslConfiguration_sessionProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_supportedCiphers, "supportedCiphers() -> List[QSslCipher]");

extern "C" {static PyObject *meth_QSslConfiguration_supportedCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_supportedCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QSslCipher>*sipRes;

            sipRes = new QList< ::QSslCipher>( ::QSslConfiguration::supportedCiphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_supportedCiphers, doc_QSslConfiguration_supportedCiphers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_systemCaCertificates, "systemCaCertificates() -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslConfiguration_systemCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_systemCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>( ::QSslConfiguration::systemCaCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_systemCaCertificates, doc_QSslConfiguration_systemCaCertificates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_ellipticCurves, "ellipticCurves(self) -> List[QSslEllipticCurve]");

extern "C" {static PyObject *meth_QSslConfiguration_ellipticCurves(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_ellipticCurves(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QVector< ::QSslEllipticCurve>*sipRes;

            sipRes = new QVector< ::QSslEllipticCurve>(sipCpp->ellipticCurves());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QSslEllipticCurve,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_ellipticCurves, doc_QSslConfiguration_ellipticCurves);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setEllipticCurves, "setEllipticCurves(self, Iterable[QSslEllipticCurve])");

extern "C" {static PyObject *meth_QSslConfiguration_setEllipticCurves(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setEllipticCurves(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QSslEllipticCurve>* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QVector_0100QSslEllipticCurve,&a0, &a0State))
        {
            sipCpp->setEllipticCurves(*a0);
            sipReleaseType(const_cast<QVector< ::QSslEllipticCurve> *>(a0),sipType_QVector_0100QSslEllipticCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setEllipticCurves, doc_QSslConfiguration_setEllipticCurves);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_supportedEllipticCurves, "supportedEllipticCurves() -> List[QSslEllipticCurve]");

extern "C" {static PyObject *meth_QSslConfiguration_supportedEllipticCurves(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_supportedEllipticCurves(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QVector< ::QSslEllipticCurve>*sipRes;

            sipRes = new QVector< ::QSslEllipticCurve>( ::QSslConfiguration::supportedEllipticCurves());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QSslEllipticCurve,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_supportedEllipticCurves, doc_QSslConfiguration_supportedEllipticCurves);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_ephemeralServerKey, "ephemeralServerKey(self) -> QSslKey");

extern "C" {static PyObject *meth_QSslConfiguration_ephemeralServerKey(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_ephemeralServerKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslKey*sipRes;

            sipRes = new  ::QSslKey(sipCpp->ephemeralServerKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_ephemeralServerKey, doc_QSslConfiguration_ephemeralServerKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_preSharedKeyIdentityHint, "preSharedKeyIdentityHint(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_preSharedKeyIdentityHint(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_preSharedKeyIdentityHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->preSharedKeyIdentityHint());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_preSharedKeyIdentityHint, doc_QSslConfiguration_preSharedKeyIdentityHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPreSharedKeyIdentityHint, "setPreSharedKeyIdentityHint(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QSslConfiguration_setPreSharedKeyIdentityHint(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPreSharedKeyIdentityHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setPreSharedKeyIdentityHint(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPreSharedKeyIdentityHint, doc_QSslConfiguration_setPreSharedKeyIdentityHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_diffieHellmanParameters, "diffieHellmanParameters(self) -> QSslDiffieHellmanParameters");

extern "C" {static PyObject *meth_QSslConfiguration_diffieHellmanParameters(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_diffieHellmanParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
             ::QSslDiffieHellmanParameters*sipRes;

            sipRes = new  ::QSslDiffieHellmanParameters(sipCpp->diffieHellmanParameters());

            return sipConvertFromNewType(sipRes,sipType_QSslDiffieHellmanParameters,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_diffieHellmanParameters, doc_QSslConfiguration_diffieHellmanParameters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setDiffieHellmanParameters, "setDiffieHellmanParameters(self, QSslDiffieHellmanParameters)");

extern "C" {static PyObject *meth_QSslConfiguration_setDiffieHellmanParameters(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setDiffieHellmanParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslDiffieHellmanParameters* a0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslDiffieHellmanParameters, &a0))
        {
            sipCpp->setDiffieHellmanParameters(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setDiffieHellmanParameters, doc_QSslConfiguration_setDiffieHellmanParameters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_backendConfiguration, "backendConfiguration(self) -> Dict[QByteArray, Any]");

extern "C" {static PyObject *meth_QSslConfiguration_backendConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_backendConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QMap< ::QByteArray, ::QVariant>*sipRes;

            sipRes = new QMap< ::QByteArray, ::QVariant>(sipCpp->backendConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QByteArray_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_backendConfiguration, doc_QSslConfiguration_backendConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setBackendConfigurationOption, "setBackendConfigurationOption(self, Union[QByteArray, bytes, bytearray], Any)");

extern "C" {static PyObject *meth_QSslConfiguration_setBackendConfigurationOption(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setBackendConfigurationOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setBackendConfigurationOption(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setBackendConfigurationOption, doc_QSslConfiguration_setBackendConfigurationOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslConfiguration_setBackendConfiguration, "setBackendConfiguration(self, backendConfiguration: Dict[Union[QByteArray, bytes, bytearray], Any] = {})");

extern "C" {static PyObject *meth_QSslConfiguration_setBackendConfiguration(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setBackendConfiguration(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QMap< ::QByteArray, ::QVariant>& a0def = QMap<QByteArray,QVariant>();
        const QMap< ::QByteArray, ::QVariant>* a0 = &a0def;
        int a0State = 0;
         ::QSslConfiguration *sipCpp;

        static const char *sipKwdList[] = {
            sipName_backendConfiguration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QMap_0100QByteArray_0100QVariant,&a0, &a0State))
        {
            sipCpp->setBackendConfiguration(*a0);
            sipReleaseType(const_cast<QMap< ::QByteArray, ::QVariant> *>(a0),sipType_QMap_0100QByteArray_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setBackendConfiguration, doc_QSslConfiguration_setBackendConfiguration);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSslConfiguration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslConfiguration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslConfiguration *sipCpp = reinterpret_cast< ::QSslConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslConfiguration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSslConfiguration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QSslConfiguration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSslConfiguration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslConfiguration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslConfiguration *sipCpp = reinterpret_cast< ::QSslConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslConfiguration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSslConfiguration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QSslConfiguration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslConfiguration(void *, int);}
static void release_QSslConfiguration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSslConfiguration *>(sipCppV);
}


extern "C" {static void *array_QSslConfiguration(Py_ssize_t);}
static void *array_QSslConfiguration(Py_ssize_t sipNrElem)
{
    return new  ::QSslConfiguration[sipNrElem];
}


extern "C" {static void assign_QSslConfiguration(void *, Py_ssize_t, void *);}
static void assign_QSslConfiguration(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSslConfiguration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSslConfiguration *>(sipSrc);
}


extern "C" {static void *copy_QSslConfiguration(const void *, Py_ssize_t);}
static void *copy_QSslConfiguration(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QSslConfiguration(reinterpret_cast<const  ::QSslConfiguration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslConfiguration(sipSimpleWrapper *);}
static void dealloc_QSslConfiguration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSslConfiguration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSslConfiguration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslConfiguration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSslConfiguration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSslConfiguration();

            return sipCpp;
        }
    }

    {
        const  ::QSslConfiguration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSslConfiguration, &a0))
        {
            sipCpp = new  ::QSslConfiguration(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslConfiguration[] = {
    {(void *)slot_QSslConfiguration___ne__, ne_slot},
    {(void *)slot_QSslConfiguration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslConfiguration[] = {
    {sipName_allowedNextProtocols, meth_QSslConfiguration_allowedNextProtocols, METH_VARARGS, doc_QSslConfiguration_allowedNextProtocols},
    {sipName_backendConfiguration, meth_QSslConfiguration_backendConfiguration, METH_VARARGS, doc_QSslConfiguration_backendConfiguration},
    {sipName_caCertificates, meth_QSslConfiguration_caCertificates, METH_VARARGS, doc_QSslConfiguration_caCertificates},
    {sipName_ciphers, meth_QSslConfiguration_ciphers, METH_VARARGS, doc_QSslConfiguration_ciphers},
    {sipName_defaultConfiguration, meth_QSslConfiguration_defaultConfiguration, METH_VARARGS, doc_QSslConfiguration_defaultConfiguration},
    {sipName_diffieHellmanParameters, meth_QSslConfiguration_diffieHellmanParameters, METH_VARARGS, doc_QSslConfiguration_diffieHellmanParameters},
    {sipName_ellipticCurves, meth_QSslConfiguration_ellipticCurves, METH_VARARGS, doc_QSslConfiguration_ellipticCurves},
    {sipName_ephemeralServerKey, meth_QSslConfiguration_ephemeralServerKey, METH_VARARGS, doc_QSslConfiguration_ephemeralServerKey},
    {sipName_isNull, meth_QSslConfiguration_isNull, METH_VARARGS, doc_QSslConfiguration_isNull},
    {sipName_localCertificate, meth_QSslConfiguration_localCertificate, METH_VARARGS, doc_QSslConfiguration_localCertificate},
    {sipName_localCertificateChain, meth_QSslConfiguration_localCertificateChain, METH_VARARGS, doc_QSslConfiguration_localCertificateChain},
    {sipName_nextNegotiatedProtocol, meth_QSslConfiguration_nextNegotiatedProtocol, METH_VARARGS, doc_QSslConfiguration_nextNegotiatedProtocol},
    {sipName_nextProtocolNegotiationStatus, meth_QSslConfiguration_nextProtocolNegotiationStatus, METH_VARARGS, doc_QSslConfiguration_nextProtocolNegotiationStatus},
    {sipName_peerCertificate, meth_QSslConfiguration_peerCertificate, METH_VARARGS, doc_QSslConfiguration_peerCertificate},
    {sipName_peerCertificateChain, meth_QSslConfiguration_peerCertificateChain, METH_VARARGS, doc_QSslConfiguration_peerCertificateChain},
    {sipName_peerVerifyDepth, meth_QSslConfiguration_peerVerifyDepth, METH_VARARGS, doc_QSslConfiguration_peerVerifyDepth},
    {sipName_peerVerifyMode, meth_QSslConfiguration_peerVerifyMode, METH_VARARGS, doc_QSslConfiguration_peerVerifyMode},
    {sipName_preSharedKeyIdentityHint, meth_QSslConfiguration_preSharedKeyIdentityHint, METH_VARARGS, doc_QSslConfiguration_preSharedKeyIdentityHint},
    {sipName_privateKey, meth_QSslConfiguration_privateKey, METH_VARARGS, doc_QSslConfiguration_privateKey},
    {sipName_protocol, meth_QSslConfiguration_protocol, METH_VARARGS, doc_QSslConfiguration_protocol},
    {sipName_sessionCipher, meth_QSslConfiguration_sessionCipher, METH_VARARGS, doc_QSslConfiguration_sessionCipher},
    {sipName_sessionProtocol, meth_QSslConfiguration_sessionProtocol, METH_VARARGS, doc_QSslConfiguration_sessionProtocol},
    {sipName_sessionTicket, meth_QSslConfiguration_sessionTicket, METH_VARARGS, doc_QSslConfiguration_sessionTicket},
    {sipName_sessionTicketLifeTimeHint, meth_QSslConfiguration_sessionTicketLifeTimeHint, METH_VARARGS, doc_QSslConfiguration_sessionTicketLifeTimeHint},
    {sipName_setAllowedNextProtocols, meth_QSslConfiguration_setAllowedNextProtocols, METH_VARARGS, doc_QSslConfiguration_setAllowedNextProtocols},
    {sipName_setBackendConfiguration, SIP_MLMETH_CAST(meth_QSslConfiguration_setBackendConfiguration), METH_VARARGS|METH_KEYWORDS, doc_QSslConfiguration_setBackendConfiguration},
    {sipName_setBackendConfigurationOption, meth_QSslConfiguration_setBackendConfigurationOption, METH_VARARGS, doc_QSslConfiguration_setBackendConfigurationOption},
    {sipName_setCaCertificates, meth_QSslConfiguration_setCaCertificates, METH_VARARGS, doc_QSslConfiguration_setCaCertificates},
    {sipName_setCiphers, meth_QSslConfiguration_setCiphers, METH_VARARGS, doc_QSslConfiguration_setCiphers},
    {sipName_setDefaultConfiguration, meth_QSslConfiguration_setDefaultConfiguration, METH_VARARGS, doc_QSslConfiguration_setDefaultConfiguration},
    {sipName_setDiffieHellmanParameters, meth_QSslConfiguration_setDiffieHellmanParameters, METH_VARARGS, doc_QSslConfiguration_setDiffieHellmanParameters},
    {sipName_setEllipticCurves, meth_QSslConfiguration_setEllipticCurves, METH_VARARGS, doc_QSslConfiguration_setEllipticCurves},
    {sipName_setLocalCertificate, meth_QSslConfiguration_setLocalCertificate, METH_VARARGS, doc_QSslConfiguration_setLocalCertificate},
    {sipName_setLocalCertificateChain, meth_QSslConfiguration_setLocalCertificateChain, METH_VARARGS, doc_QSslConfiguration_setLocalCertificateChain},
    {sipName_setPeerVerifyDepth, meth_QSslConfiguration_setPeerVerifyDepth, METH_VARARGS, doc_QSslConfiguration_setPeerVerifyDepth},
    {sipName_setPeerVerifyMode, meth_QSslConfiguration_setPeerVerifyMode, METH_VARARGS, doc_QSslConfiguration_setPeerVerifyMode},
    {sipName_setPreSharedKeyIdentityHint, meth_QSslConfiguration_setPreSharedKeyIdentityHint, METH_VARARGS, doc_QSslConfiguration_setPreSharedKeyIdentityHint},
    {sipName_setPrivateKey, meth_QSslConfiguration_setPrivateKey, METH_VARARGS, doc_QSslConfiguration_setPrivateKey},
    {sipName_setProtocol, meth_QSslConfiguration_setProtocol, METH_VARARGS, doc_QSslConfiguration_setProtocol},
    {sipName_setSessionTicket, meth_QSslConfiguration_setSessionTicket, METH_VARARGS, doc_QSslConfiguration_setSessionTicket},
    {sipName_setSslOption, meth_QSslConfiguration_setSslOption, METH_VARARGS, doc_QSslConfiguration_setSslOption},
    {sipName_supportedCiphers, meth_QSslConfiguration_supportedCiphers, METH_VARARGS, doc_QSslConfiguration_supportedCiphers},
    {sipName_supportedEllipticCurves, meth_QSslConfiguration_supportedEllipticCurves, METH_VARARGS, doc_QSslConfiguration_supportedEllipticCurves},
    {sipName_swap, meth_QSslConfiguration_swap, METH_VARARGS, doc_QSslConfiguration_swap},
    {sipName_systemCaCertificates, meth_QSslConfiguration_systemCaCertificates, METH_VARARGS, doc_QSslConfiguration_systemCaCertificates},
    {sipName_testSslOption, meth_QSslConfiguration_testSslOption, METH_VARARGS, doc_QSslConfiguration_testSslOption}
};

static sipEnumMemberDef enummembers_QSslConfiguration[] = {
    {sipName_NextProtocolNegotiationNegotiated, static_cast<int>( ::QSslConfiguration::NextProtocolNegotiationNegotiated), 117},
    {sipName_NextProtocolNegotiationNone, static_cast<int>( ::QSslConfiguration::NextProtocolNegotiationNone), 117},
    {sipName_NextProtocolNegotiationUnsupported, static_cast<int>( ::QSslConfiguration::NextProtocolNegotiationUnsupported), 117},
};


extern "C" {static PyObject *varget_QSslConfiguration_NextProtocolHttp1_1(void *, PyObject *, PyObject *);}
static PyObject *varget_QSslConfiguration_NextProtocolHttp1_1(void *, PyObject *, PyObject *)
{
    const char*sipVal;

    sipVal =  ::QSslConfiguration::NextProtocolHttp1_1;

    if (sipVal == SIP_NULLPTR)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyBytes_FromString(sipVal);
}


extern "C" {static PyObject *varget_QSslConfiguration_NextProtocolSpdy3_0(void *, PyObject *, PyObject *);}
static PyObject *varget_QSslConfiguration_NextProtocolSpdy3_0(void *, PyObject *, PyObject *)
{
    const char*sipVal;

    sipVal =  ::QSslConfiguration::NextProtocolSpdy3_0;

    if (sipVal == SIP_NULLPTR)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyBytes_FromString(sipVal);
}

sipVariableDef variables_QSslConfiguration[] = {
    {ClassVariable, sipName_NextProtocolHttp1_1, (PyMethodDef *)varget_QSslConfiguration_NextProtocolHttp1_1, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_NextProtocolSpdy3_0, (PyMethodDef *)varget_QSslConfiguration_NextProtocolSpdy3_0, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSslConfiguration, "\1QSslConfiguration()\n"
"QSslConfiguration(QSslConfiguration)");


static pyqt5ClassPluginDef plugin_QSslConfiguration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QSslConfiguration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSslConfiguration,
        SIP_NULLPTR,
        &plugin_QSslConfiguration
    },
    {
        sipNameNr_QSslConfiguration,
        {0, 0, 1},
        46, methods_QSslConfiguration,
        3, enummembers_QSslConfiguration,
        2, variables_QSslConfiguration,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSslConfiguration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSslConfiguration,
    init_type_QSslConfiguration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSslConfiguration,
    assign_QSslConfiguration,
    array_QSslConfiguration,
    copy_QSslConfiguration,
    release_QSslConfiguration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
