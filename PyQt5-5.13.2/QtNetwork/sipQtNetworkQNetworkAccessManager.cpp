/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslpresharedkeyauthenticator.sip"
#include <qsslpresharedkeyauthenticator.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 98 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 110 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 113 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 116 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 122 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 125 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 128 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 131 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 134 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"


class sipQNetworkAccessManager : public  ::QNetworkAccessManager
{
public:
    sipQNetworkAccessManager( ::QObject*);
    virtual ~sipQNetworkAccessManager();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QNetworkReply* createRequest( ::QNetworkAccessManager::Operation,const  ::QNetworkRequest&, ::QIODevice*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkAccessManager(const sipQNetworkAccessManager &);
    sipQNetworkAccessManager &operator = (const sipQNetworkAccessManager &);

    char sipPyMethods[8];
};

sipQNetworkAccessManager::sipQNetworkAccessManager( ::QObject*a0):  ::QNetworkAccessManager(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkAccessManager::~sipQNetworkAccessManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkAccessManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkAccessManager);

    return  ::QNetworkAccessManager::metaObject();
}

int sipQNetworkAccessManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkAccessManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkAccessManager,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQNetworkAccessManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkAccessManager, _clname, &sipCpp) ? sipCpp :  ::QNetworkAccessManager::qt_metacast(_clname));
}

 ::QNetworkReply* sipQNetworkAccessManager::createRequest( ::QNetworkAccessManager::Operation a0,const  ::QNetworkRequest& a1, ::QIODevice*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_createRequest);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_createRequest);
#endif

    if (!sipMeth)
        return  ::QNetworkAccessManager::createRequest(a0,a1,a2);

    extern  ::QNetworkReply* sipVH_QtNetwork_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QNetworkAccessManager::Operation,const  ::QNetworkRequest&, ::QIODevice*);

    return sipVH_QtNetwork_30(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQNetworkAccessManager::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QNetworkAccessManager::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkAccessManager::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QNetworkAccessManager::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkAccessManager::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkAccessManager::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkAccessManager::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkAccessManager::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkAccessManager::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkAccessManager::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkProxy*sipRes;

            sipRes = new  ::QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxy, doc_QNetworkAccessManager_proxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxy, doc_QNetworkAccessManager_setProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cookieJar, "cookieJar(self) -> QNetworkCookieJar");

extern "C" {static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkCookieJar*sipRes;

            sipRes = sipCpp->cookieJar();

            return sipConvertFromType(sipRes,sipType_QNetworkCookieJar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cookieJar, doc_QNetworkAccessManager_cookieJar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCookieJar, "setCookieJar(self, QNetworkCookieJar)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookieJar* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkCookieJar, &a0))
        {
            sipCpp->setCookieJar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCookieJar, doc_QNetworkAccessManager_setCookieJar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_head, "head(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_head(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->head(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_head, doc_QNetworkAccessManager_head);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_get, "get(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_get(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->get(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_get, doc_QNetworkAccessManager_get);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_post, "post(self, QNetworkRequest, QIODevice) -> QNetworkReply\n"
"post(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"post(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_post(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_post(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QIODevice* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QHttpMultiPart* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_post, doc_QNetworkAccessManager_post);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_put, "put(self, QNetworkRequest, QIODevice) -> QNetworkReply\n"
"put(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"put(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_put(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QIODevice* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QHttpMultiPart* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_put, doc_QNetworkAccessManager_put);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_createRequest, "createRequest(self, QNetworkAccessManager.Operation, QNetworkRequest, device: QIODevice = None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkAccessManager::Operation a0;
        const  ::QNetworkRequest* a1;
         ::QIODevice* a2 = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_device,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "pEJ9|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QNetworkRequest, &a1, sipType_QIODevice, &a2))
        {
             ::QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkAccessManager::createRequest(a0,*a1,a2) : sipCpp->createRequest(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_createRequest, doc_QNetworkAccessManager_createRequest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxyFactory, "proxyFactory(self) -> QNetworkProxyFactory");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkProxyFactory*sipRes;

            sipRes = sipCpp->proxyFactory();

            return sipConvertFromType(sipRes,sipType_QNetworkProxyFactory,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxyFactory, doc_QNetworkAccessManager_proxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxyFactory, "setProxyFactory(self, QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyFactory* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxyFactory, &a0))
        {
            sipCpp->setProxyFactory(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxyFactory, doc_QNetworkAccessManager_setProxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cache, "cache(self) -> QAbstractNetworkCache");

extern "C" {static PyObject *meth_QNetworkAccessManager_cache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QAbstractNetworkCache*sipRes;

            sipRes = sipCpp->cache();

            return sipConvertFromType(sipRes,sipType_QAbstractNetworkCache,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cache, doc_QNetworkAccessManager_cache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCache, "setCache(self, QAbstractNetworkCache)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNetworkCache* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QAbstractNetworkCache, &a0))
        {
            sipCpp->setCache(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCache, doc_QNetworkAccessManager_setCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_deleteResource, "deleteResource(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->deleteResource(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_deleteResource, doc_QNetworkAccessManager_deleteResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_sendCustomRequest, "sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], data: QIODevice = None) -> QNetworkReply\n"
"sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QIODevice* a2 = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
        const  ::QByteArray* a2;
        int a2State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J1J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QHttpMultiPart* a2;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J1J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QHttpMultiPart, &a2))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sendCustomRequest, doc_QNetworkAccessManager_sendCustomRequest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setConfiguration, "setConfiguration(self, QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            sipCpp->setConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setConfiguration, doc_QNetworkAccessManager_setConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_configuration, "configuration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_configuration, doc_QNetworkAccessManager_configuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_activeConfiguration, "activeConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->activeConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_activeConfiguration, doc_QNetworkAccessManager_activeConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setNetworkAccessible, "setNetworkAccessible(self, QNetworkAccessManager.NetworkAccessibility)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager::NetworkAccessibility a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            sipCpp->setNetworkAccessible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setNetworkAccessible, doc_QNetworkAccessManager_setNetworkAccessible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_networkAccessible, "networkAccessible(self) -> QNetworkAccessManager.NetworkAccessibility");

extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkAccessManager::NetworkAccessibility sipRes;

            sipRes = sipCpp->networkAccessible();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkAccessManager_NetworkAccessibility);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessible, doc_QNetworkAccessManager_networkAccessible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_clearAccessCache, "clearAccessCache(self)");

extern "C" {static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            sipCpp->clearAccessCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_clearAccessCache, doc_QNetworkAccessManager_clearAccessCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemes, "supportedSchemes(self) -> List[str]");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->supportedSchemes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemes, doc_QNetworkAccessManager_supportedSchemes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHostEncrypted, "connectToHostEncrypted(self, str, port: int = 443, sslConfiguration: QSslConfiguration = QSslConfiguration.defaultConfiguration())");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 443;
        const  ::QSslConfiguration& a2def = QSslConfiguration::defaultConfiguration();
        const  ::QSslConfiguration* a2 = &a2def;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
            sipName_sslConfiguration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|tJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QSslConfiguration, &a2))
        {
            sipCpp->connectToHostEncrypted(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHostEncrypted, doc_QNetworkAccessManager_connectToHostEncrypted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHost, "connectToHost(self, str, port: int = 80)");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 80;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|t", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->connectToHost(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHost, doc_QNetworkAccessManager_connectToHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemesImplementation, "supportedSchemesImplementation(self) -> List[str]");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->supportedSchemesImplementation());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemesImplementation, doc_QNetworkAccessManager_supportedSchemesImplementation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_clearConnectionCache, "clearConnectionCache(self)");

extern "C" {static PyObject *meth_QNetworkAccessManager_clearConnectionCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_clearConnectionCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            sipCpp->clearConnectionCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_clearConnectionCache, doc_QNetworkAccessManager_clearConnectionCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setStrictTransportSecurityEnabled, "setStrictTransportSecurityEnabled(self, bool)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setStrictTransportSecurityEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setStrictTransportSecurityEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            sipCpp->setStrictTransportSecurityEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setStrictTransportSecurityEnabled, doc_QNetworkAccessManager_setStrictTransportSecurityEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_isStrictTransportSecurityEnabled, "isStrictTransportSecurityEnabled(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStrictTransportSecurityEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_isStrictTransportSecurityEnabled, doc_QNetworkAccessManager_isStrictTransportSecurityEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_addStrictTransportSecurityHosts, "addStrictTransportSecurityHosts(self, Iterable[QHstsPolicy])");

extern "C" {static PyObject *meth_QNetworkAccessManager_addStrictTransportSecurityHosts(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_addStrictTransportSecurityHosts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QHstsPolicy>* a0;
        int a0State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QVector_0100QHstsPolicy,&a0, &a0State))
        {
            sipCpp->addStrictTransportSecurityHosts(*a0);
            sipReleaseType(const_cast<QVector< ::QHstsPolicy> *>(a0),sipType_QVector_0100QHstsPolicy,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_addStrictTransportSecurityHosts, doc_QNetworkAccessManager_addStrictTransportSecurityHosts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_strictTransportSecurityHosts, "strictTransportSecurityHosts(self) -> List[QHstsPolicy]");

extern "C" {static PyObject *meth_QNetworkAccessManager_strictTransportSecurityHosts(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_strictTransportSecurityHosts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QVector< ::QHstsPolicy>*sipRes;

            sipRes = new QVector< ::QHstsPolicy>(sipCpp->strictTransportSecurityHosts());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QHstsPolicy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_strictTransportSecurityHosts, doc_QNetworkAccessManager_strictTransportSecurityHosts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setRedirectPolicy, "setRedirectPolicy(self, QNetworkRequest.RedirectPolicy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setRedirectPolicy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setRedirectPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::RedirectPolicy a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest_RedirectPolicy, &a0))
        {
            sipCpp->setRedirectPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setRedirectPolicy, doc_QNetworkAccessManager_setRedirectPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_redirectPolicy, "redirectPolicy(self) -> QNetworkRequest.RedirectPolicy");

extern "C" {static PyObject *meth_QNetworkAccessManager_redirectPolicy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_redirectPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkRequest::RedirectPolicy sipRes;

            sipRes = sipCpp->redirectPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkRequest_RedirectPolicy);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_redirectPolicy, doc_QNetworkAccessManager_redirectPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_enableStrictTransportSecurityStore, "enableStrictTransportSecurityStore(self, bool, storeDir: str = '')");

extern "C" {static PyObject *meth_QNetworkAccessManager_enableStrictTransportSecurityStore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_enableStrictTransportSecurityStore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_storeDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->enableStrictTransportSecurityStore(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_enableStrictTransportSecurityStore, doc_QNetworkAccessManager_enableStrictTransportSecurityStore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled, "isStrictTransportSecurityStoreEnabled(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStrictTransportSecurityStoreEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_isStrictTransportSecurityStoreEnabled, doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkAccessManager(void *, const sipTypeDef *);}
static void *cast_QNetworkAccessManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkAccessManager *sipCpp = reinterpret_cast< ::QNetworkAccessManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAccessManager(void *, int);}
static void release_QNetworkAccessManager(void *sipCppV, int)
{
     ::QNetworkAccessManager *sipCpp = reinterpret_cast< ::QNetworkAccessManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QNetworkAccessManager(Py_ssize_t);}
static void *array_QNetworkAccessManager(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkAccessManager[sipNrElem];
}


extern "C" {static void dealloc_QNetworkAccessManager(sipSimpleWrapper *);}
static void dealloc_QNetworkAccessManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkAccessManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkAccessManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkAccessManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkAccessManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkAccessManager *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkAccessManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkAccessManager[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkAccessManager[] = {
    {sipName_activeConfiguration, meth_QNetworkAccessManager_activeConfiguration, METH_VARARGS, doc_QNetworkAccessManager_activeConfiguration},
    {sipName_addStrictTransportSecurityHosts, meth_QNetworkAccessManager_addStrictTransportSecurityHosts, METH_VARARGS, doc_QNetworkAccessManager_addStrictTransportSecurityHosts},
    {sipName_cache, meth_QNetworkAccessManager_cache, METH_VARARGS, doc_QNetworkAccessManager_cache},
    {sipName_clearAccessCache, meth_QNetworkAccessManager_clearAccessCache, METH_VARARGS, doc_QNetworkAccessManager_clearAccessCache},
    {sipName_clearConnectionCache, meth_QNetworkAccessManager_clearConnectionCache, METH_VARARGS, doc_QNetworkAccessManager_clearConnectionCache},
    {sipName_configuration, meth_QNetworkAccessManager_configuration, METH_VARARGS, doc_QNetworkAccessManager_configuration},
    {sipName_connectToHost, SIP_MLMETH_CAST(meth_QNetworkAccessManager_connectToHost), METH_VARARGS|METH_KEYWORDS, doc_QNetworkAccessManager_connectToHost},
    {sipName_connectToHostEncrypted, SIP_MLMETH_CAST(meth_QNetworkAccessManager_connectToHostEncrypted), METH_VARARGS|METH_KEYWORDS, doc_QNetworkAccessManager_connectToHostEncrypted},
    {sipName_cookieJar, meth_QNetworkAccessManager_cookieJar, METH_VARARGS, doc_QNetworkAccessManager_cookieJar},
    {sipName_createRequest, SIP_MLMETH_CAST(meth_QNetworkAccessManager_createRequest), METH_VARARGS|METH_KEYWORDS, doc_QNetworkAccessManager_createRequest},
    {sipName_deleteResource, meth_QNetworkAccessManager_deleteResource, METH_VARARGS, doc_QNetworkAccessManager_deleteResource},
    {sipName_enableStrictTransportSecurityStore, SIP_MLMETH_CAST(meth_QNetworkAccessManager_enableStrictTransportSecurityStore), METH_VARARGS|METH_KEYWORDS, doc_QNetworkAccessManager_enableStrictTransportSecurityStore},
    {sipName_get, meth_QNetworkAccessManager_get, METH_VARARGS, doc_QNetworkAccessManager_get},
    {sipName_head, meth_QNetworkAccessManager_head, METH_VARARGS, doc_QNetworkAccessManager_head},
    {sipName_isStrictTransportSecurityEnabled, meth_QNetworkAccessManager_isStrictTransportSecurityEnabled, METH_VARARGS, doc_QNetworkAccessManager_isStrictTransportSecurityEnabled},
    {sipName_isStrictTransportSecurityStoreEnabled, meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled, METH_VARARGS, doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled},
    {sipName_networkAccessible, meth_QNetworkAccessManager_networkAccessible, METH_VARARGS, doc_QNetworkAccessManager_networkAccessible},
    {sipName_post, meth_QNetworkAccessManager_post, METH_VARARGS, doc_QNetworkAccessManager_post},
    {sipName_proxy, meth_QNetworkAccessManager_proxy, METH_VARARGS, doc_QNetworkAccessManager_proxy},
    {sipName_proxyFactory, meth_QNetworkAccessManager_proxyFactory, METH_VARARGS, doc_QNetworkAccessManager_proxyFactory},
    {sipName_put, meth_QNetworkAccessManager_put, METH_VARARGS, doc_QNetworkAccessManager_put},
    {sipName_redirectPolicy, meth_QNetworkAccessManager_redirectPolicy, METH_VARARGS, doc_QNetworkAccessManager_redirectPolicy},
    {sipName_sendCustomRequest, SIP_MLMETH_CAST(meth_QNetworkAccessManager_sendCustomRequest), METH_VARARGS|METH_KEYWORDS, doc_QNetworkAccessManager_sendCustomRequest},
    {sipName_setCache, meth_QNetworkAccessManager_setCache, METH_VARARGS, doc_QNetworkAccessManager_setCache},
    {sipName_setConfiguration, meth_QNetworkAccessManager_setConfiguration, METH_VARARGS, doc_QNetworkAccessManager_setConfiguration},
    {sipName_setCookieJar, meth_QNetworkAccessManager_setCookieJar, METH_VARARGS, doc_QNetworkAccessManager_setCookieJar},
    {sipName_setNetworkAccessible, meth_QNetworkAccessManager_setNetworkAccessible, METH_VARARGS, doc_QNetworkAccessManager_setNetworkAccessible},
    {sipName_setProxy, meth_QNetworkAccessManager_setProxy, METH_VARARGS, doc_QNetworkAccessManager_setProxy},
    {sipName_setProxyFactory, meth_QNetworkAccessManager_setProxyFactory, METH_VARARGS, doc_QNetworkAccessManager_setProxyFactory},
    {sipName_setRedirectPolicy, meth_QNetworkAccessManager_setRedirectPolicy, METH_VARARGS, doc_QNetworkAccessManager_setRedirectPolicy},
    {sipName_setStrictTransportSecurityEnabled, meth_QNetworkAccessManager_setStrictTransportSecurityEnabled, METH_VARARGS, doc_QNetworkAccessManager_setStrictTransportSecurityEnabled},
    {sipName_strictTransportSecurityHosts, meth_QNetworkAccessManager_strictTransportSecurityHosts, METH_VARARGS, doc_QNetworkAccessManager_strictTransportSecurityHosts},
    {sipName_supportedSchemes, meth_QNetworkAccessManager_supportedSchemes, METH_VARARGS, doc_QNetworkAccessManager_supportedSchemes},
    {sipName_supportedSchemesImplementation, meth_QNetworkAccessManager_supportedSchemesImplementation, METH_VARARGS, doc_QNetworkAccessManager_supportedSchemesImplementation}
};

static sipEnumMemberDef enummembers_QNetworkAccessManager[] = {
    {sipName_Accessible, static_cast<int>( ::QNetworkAccessManager::Accessible), 58},
    {sipName_CustomOperation, static_cast<int>( ::QNetworkAccessManager::CustomOperation), 59},
    {sipName_DeleteOperation, static_cast<int>( ::QNetworkAccessManager::DeleteOperation), 59},
    {sipName_GetOperation, static_cast<int>( ::QNetworkAccessManager::GetOperation), 59},
    {sipName_HeadOperation, static_cast<int>( ::QNetworkAccessManager::HeadOperation), 59},
    {sipName_NotAccessible, static_cast<int>( ::QNetworkAccessManager::NotAccessible), 58},
    {sipName_PostOperation, static_cast<int>( ::QNetworkAccessManager::PostOperation), 59},
    {sipName_PutOperation, static_cast<int>( ::QNetworkAccessManager::PutOperation), 59},
    {sipName_UnknownAccessibility, static_cast<int>( ::QNetworkAccessManager::UnknownAccessibility), 58},
};

PyDoc_STRVAR(doc_QNetworkAccessManager, "\1QNetworkAccessManager(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkAccessManager[] = {
    {"preSharedKeyAuthenticationRequired(QNetworkReply*,QSslPreSharedKeyAuthenticator*)", "\1preSharedKeyAuthenticationRequired(self, QNetworkReply, QSslPreSharedKeyAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)", "\1networkAccessibleChanged(self, QNetworkAccessManager.NetworkAccessibility)", SIP_NULLPTR, SIP_NULLPTR},
    {"sslErrors(QNetworkReply*,QList<QSslError>)", "\1sslErrors(self, QNetworkReply, Iterable[QSslError])", SIP_NULLPTR, SIP_NULLPTR},
    {"encrypted(QNetworkReply*)", "\1encrypted(self, QNetworkReply)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished(QNetworkReply*)", "\1finished(self, QNetworkReply)", SIP_NULLPTR, SIP_NULLPTR},
    {"authenticationRequired(QNetworkReply*,QAuthenticator*)", "\1authenticationRequired(self, QNetworkReply, QAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QNetworkAccessManager = {
    & ::QNetworkAccessManager::staticMetaObject,
    0,
    signals_QNetworkAccessManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkAccessManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAccessManager,
        SIP_NULLPTR,
        &plugin_QNetworkAccessManager
    },
    {
        sipNameNr_QNetworkAccessManager,
        {0, 0, 1},
        34, methods_QNetworkAccessManager,
        9, enummembers_QNetworkAccessManager,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkAccessManager,
    -1,
    -1,
    supers_QNetworkAccessManager,
    SIP_NULLPTR,
    init_type_QNetworkAccessManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkAccessManager,
    SIP_NULLPTR,
    array_QNetworkAccessManager,
    SIP_NULLPTR,
    release_QNetworkAccessManager,
    cast_QNetworkAccessManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
