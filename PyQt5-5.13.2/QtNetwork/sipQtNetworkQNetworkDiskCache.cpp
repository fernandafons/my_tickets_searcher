/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkdiskcache.sip"
#include <qnetworkdiskcache.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"


class sipQNetworkDiskCache : public  ::QNetworkDiskCache
{
public:
    sipQNetworkDiskCache( ::QObject*);
    virtual ~sipQNetworkDiskCache();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qint64 expire() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QNetworkCacheMetaData metaData(const  ::QUrl&) SIP_OVERRIDE;
    void updateMetaData(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::QIODevice* data(const  ::QUrl&) SIP_OVERRIDE;
    bool remove(const  ::QUrl&) SIP_OVERRIDE;
     ::qint64 cacheSize() const SIP_OVERRIDE;
     ::QIODevice* prepare(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
    void insert( ::QIODevice*) SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkDiskCache(const sipQNetworkDiskCache &);
    sipQNetworkDiskCache &operator = (const sipQNetworkDiskCache &);

    char sipPyMethods[16];
};

sipQNetworkDiskCache::sipQNetworkDiskCache( ::QObject*a0):  ::QNetworkDiskCache(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkDiskCache::~sipQNetworkDiskCache()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkDiskCache::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkDiskCache);

    return  ::QNetworkDiskCache::metaObject();
}

int sipQNetworkDiskCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkDiskCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkDiskCache,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQNetworkDiskCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkDiskCache, _clname, &sipCpp) ? sipCpp :  ::QNetworkDiskCache::qt_metacast(_clname));
}

 ::qint64 sipQNetworkDiskCache::expire()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_expire);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_expire);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::expire();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkDiskCache::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkCacheMetaData sipQNetworkDiskCache::metaData(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_metaData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_metaData);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::metaData(a0);

    extern  ::QNetworkCacheMetaData sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_6(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::updateMetaData(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_updateMetaData);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_updateMetaData);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::updateMetaData(a0);
        return;
    }

    extern void sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    sipVH_QtNetwork_7(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQNetworkDiskCache::data(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_data);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_data);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::data(a0);

    extern  ::QIODevice* sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_8(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::remove(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_remove);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_remove);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::remove(a0);

    extern bool sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_9(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQNetworkDiskCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_cacheSize);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), sipPySelf, SIP_NULLPTR, sipName_cacheSize);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::cacheSize();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QIODevice* sipQNetworkDiskCache::prepare(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_prepare);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_prepare);
#endif

    if (!sipMeth)
        return  ::QNetworkDiskCache::prepare(a0);

    extern  ::QIODevice* sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    return sipVH_QtNetwork_11(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::insert( ::QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_insert);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_insert);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::insert(a0);
        return;
    }

    extern void sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice*);

    sipVH_QtNetwork_12(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_clear);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_clear);
#endif

    if (!sipMeth)
    {
         ::QNetworkDiskCache::clear();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheDirectory, "cacheDirectory(self) -> str");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->cacheDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheDirectory, doc_QNetworkDiskCache_cacheDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setCacheDirectory, "setCacheDirectory(self, str)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCacheDirectory(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setCacheDirectory, doc_QNetworkDiskCache_setCacheDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_maximumCacheSize, "maximumCacheSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->maximumCacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_maximumCacheSize, doc_QNetworkDiskCache_maximumCacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setMaximumCacheSize, "setMaximumCacheSize(self, int)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, &a0))
        {
            sipCpp->setMaximumCacheSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setMaximumCacheSize, doc_QNetworkDiskCache_setMaximumCacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheSize, "cacheSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::cacheSize() : sipCpp->cacheSize());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheSize, doc_QNetworkDiskCache_cacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_metaData, "metaData(self, QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QNetworkCacheMetaData*sipRes;

            sipRes = new  ::QNetworkCacheMetaData((sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::metaData(*a0) : sipCpp->metaData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_metaData, doc_QNetworkDiskCache_metaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_updateMetaData, "updateMetaData(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::updateMetaData(*a0) : sipCpp->updateMetaData(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_updateMetaData, doc_QNetworkDiskCache_updateMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_data, "data(self, QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_data(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::data(*a0) : sipCpp->data(*a0));

            return sipConvertFromNewType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_data, doc_QNetworkDiskCache_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_remove, "remove(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkDiskCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::remove(*a0) : sipCpp->remove(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_remove, doc_QNetworkDiskCache_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_prepare, "prepare(self, QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
             ::QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::prepare(*a0) : sipCpp->prepare(*a0));

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_prepare, doc_QNetworkDiskCache_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_insert, "insert(self, QIODevice)");

extern "C" {static PyObject *meth_QNetworkDiskCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QIODevice, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::insert(a0) : sipCpp->insert(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_insert, doc_QNetworkDiskCache_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_fileMetaData, "fileMetaData(self, str) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QNetworkCacheMetaData*sipRes;

            sipRes = new  ::QNetworkCacheMetaData(sipCpp->fileMetaData(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_fileMetaData, doc_QNetworkDiskCache_fileMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_clear, "clear(self)");

extern "C" {static PyObject *meth_QNetworkDiskCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_clear, doc_QNetworkDiskCache_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_expire, "expire(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_expire(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_expire(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::expire() : sipCpp->expire());

            return PyLong_FromLongLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_expire, doc_QNetworkDiskCache_expire);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkDiskCache(void *, const sipTypeDef *);}
static void *cast_QNetworkDiskCache(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkDiskCache *sipCpp = reinterpret_cast< ::QNetworkDiskCache *>(sipCppV);

    if (targetType == sipType_QAbstractNetworkCache)
        return static_cast< ::QAbstractNetworkCache *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkDiskCache(void *, int);}
static void release_QNetworkDiskCache(void *sipCppV, int)
{
     ::QNetworkDiskCache *sipCpp = reinterpret_cast< ::QNetworkDiskCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QNetworkDiskCache(Py_ssize_t);}
static void *array_QNetworkDiskCache(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkDiskCache[sipNrElem];
}


extern "C" {static void dealloc_QNetworkDiskCache(sipSimpleWrapper *);}
static void dealloc_QNetworkDiskCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkDiskCache *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkDiskCache(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkDiskCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkDiskCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkDiskCache *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkDiskCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkDiskCache[] = {{0, 255, 1}};


static PyMethodDef methods_QNetworkDiskCache[] = {
    {sipName_cacheDirectory, meth_QNetworkDiskCache_cacheDirectory, METH_VARARGS, doc_QNetworkDiskCache_cacheDirectory},
    {sipName_cacheSize, meth_QNetworkDiskCache_cacheSize, METH_VARARGS, doc_QNetworkDiskCache_cacheSize},
    {sipName_clear, meth_QNetworkDiskCache_clear, METH_VARARGS, doc_QNetworkDiskCache_clear},
    {sipName_data, meth_QNetworkDiskCache_data, METH_VARARGS, doc_QNetworkDiskCache_data},
    {sipName_expire, meth_QNetworkDiskCache_expire, METH_VARARGS, doc_QNetworkDiskCache_expire},
    {sipName_fileMetaData, meth_QNetworkDiskCache_fileMetaData, METH_VARARGS, doc_QNetworkDiskCache_fileMetaData},
    {sipName_insert, meth_QNetworkDiskCache_insert, METH_VARARGS, doc_QNetworkDiskCache_insert},
    {sipName_maximumCacheSize, meth_QNetworkDiskCache_maximumCacheSize, METH_VARARGS, doc_QNetworkDiskCache_maximumCacheSize},
    {sipName_metaData, meth_QNetworkDiskCache_metaData, METH_VARARGS, doc_QNetworkDiskCache_metaData},
    {sipName_prepare, meth_QNetworkDiskCache_prepare, METH_VARARGS, doc_QNetworkDiskCache_prepare},
    {sipName_remove, meth_QNetworkDiskCache_remove, METH_VARARGS, doc_QNetworkDiskCache_remove},
    {sipName_setCacheDirectory, meth_QNetworkDiskCache_setCacheDirectory, METH_VARARGS, doc_QNetworkDiskCache_setCacheDirectory},
    {sipName_setMaximumCacheSize, meth_QNetworkDiskCache_setMaximumCacheSize, METH_VARARGS, doc_QNetworkDiskCache_setMaximumCacheSize},
    {sipName_updateMetaData, meth_QNetworkDiskCache_updateMetaData, METH_VARARGS, doc_QNetworkDiskCache_updateMetaData}
};

PyDoc_STRVAR(doc_QNetworkDiskCache, "\1QNetworkDiskCache(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QNetworkDiskCache = {
    & ::QNetworkDiskCache::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkDiskCache = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkDiskCache,
        SIP_NULLPTR,
        &plugin_QNetworkDiskCache
    },
    {
        sipNameNr_QNetworkDiskCache,
        {0, 0, 1},
        14, methods_QNetworkDiskCache,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkDiskCache,
    -1,
    -1,
    supers_QNetworkDiskCache,
    SIP_NULLPTR,
    init_type_QNetworkDiskCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkDiskCache,
    SIP_NULLPTR,
    array_QNetworkDiskCache,
    SIP_NULLPTR,
    release_QNetworkDiskCache,
    cast_QNetworkDiskCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
