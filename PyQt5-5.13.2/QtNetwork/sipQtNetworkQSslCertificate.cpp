/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslcertificateextension.sip"
#include <qsslcertificateextension.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qpynetwork_qmap.sip"
#include <qmap.h>
#include <qssl.h>
#line 73 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 76 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 26 "sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 79 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"


PyDoc_STRVAR(doc_QSslCertificate_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isNull, doc_QSslCertificate_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_clear, "clear(self)");

extern "C" {static PyObject *meth_QSslCertificate_clear(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_clear, doc_QSslCertificate_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_version, "version(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_version(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_version, doc_QSslCertificate_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_serialNumber, "serialNumber(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->serialNumber());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_serialNumber, doc_QSslCertificate_serialNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_digest, "digest(self, algorithm: QCryptographicHash.Algorithm = QCryptographicHash.Md5) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_digest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_digest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCryptographicHash::Algorithm a0 = QCryptographicHash::Md5;
        const  ::QSslCertificate *sipCpp;

        static const char *sipKwdList[] = {
            sipName_algorithm,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QCryptographicHash_Algorithm, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->digest(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_digest, doc_QSslCertificate_digest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerInfo, "issuerInfo(self, QSslCertificate.SubjectInfo) -> List[str]\n"
"issuerInfo(self, Union[QByteArray, bytes, bytearray]) -> List[str]");

extern "C" {static PyObject *meth_QSslCertificate_issuerInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslCertificate::SubjectInfo a0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->issuerInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->issuerInfo(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerInfo, doc_QSslCertificate_issuerInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectInfo, "subjectInfo(self, QSslCertificate.SubjectInfo) -> List[str]\n"
"subjectInfo(self, Union[QByteArray, bytes, bytearray]) -> List[str]");

extern "C" {static PyObject *meth_QSslCertificate_subjectInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslCertificate::SubjectInfo a0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->subjectInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->subjectInfo(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectInfo, doc_QSslCertificate_subjectInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectAlternativeNames, "subjectAlternativeNames(self) -> Dict[QSsl.AlternativeNameEntryType, List[str]]");

extern "C" {static PyObject *meth_QSslCertificate_subjectAlternativeNames(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectAlternativeNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QMultiMap< ::QSsl::AlternativeNameEntryType, ::QString>*sipRes;

            sipRes = new  ::QMultiMap< ::QSsl::AlternativeNameEntryType, ::QString>(sipCpp->subjectAlternativeNames());

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QSsl_AlternativeNameEntryType_0100QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectAlternativeNames, doc_QSslCertificate_subjectAlternativeNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_effectiveDate, "effectiveDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_effectiveDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_effectiveDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->effectiveDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_effectiveDate, doc_QSslCertificate_effectiveDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_expiryDate, "expiryDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_expiryDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_expiryDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expiryDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_expiryDate, doc_QSslCertificate_expiryDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_publicKey, "publicKey(self) -> QSslKey");

extern "C" {static PyObject *meth_QSslCertificate_publicKey(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_publicKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QSslKey*sipRes;

            sipRes = new  ::QSslKey(sipCpp->publicKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_publicKey, doc_QSslCertificate_publicKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_toPem, "toPem(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toPem(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toPem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toPem());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toPem, doc_QSslCertificate_toPem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_toDer, "toDer(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toDer(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toDer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toDer());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toDer, doc_QSslCertificate_toDer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_fromPath, "fromPath(str, format: QSsl.EncodingFormat = QSsl.Pem, syntax: QRegExp.PatternSyntax = QRegExp.FixedString) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;
         ::QRegExp::PatternSyntax a2 = QRegExp::FixedString;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|EE", sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromPath(*a0,a1,a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromPath, doc_QSslCertificate_fromPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_fromDevice, "fromDevice(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromDevice(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromDevice, doc_QSslCertificate_fromDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_fromData, "fromData(Union[QByteArray, bytes, bytearray], format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            QList< ::QSslCertificate>*sipRes;

            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromData(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromData, doc_QSslCertificate_fromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_handle, "handle(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSslCertificate_handle(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::Qt::HANDLE sipRes;

            sipRes = sipCpp->handle();

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_handle, doc_QSslCertificate_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_swap, "swap(self, QSslCertificate)");

extern "C" {static PyObject *meth_QSslCertificate_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSslCertificate* a0;
         ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_swap, doc_QSslCertificate_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_isBlacklisted, "isBlacklisted(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isBlacklisted(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isBlacklisted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBlacklisted();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isBlacklisted, doc_QSslCertificate_isBlacklisted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectInfoAttributes, "subjectInfoAttributes(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QSslCertificate_subjectInfoAttributes(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectInfoAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->subjectInfoAttributes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectInfoAttributes, doc_QSslCertificate_subjectInfoAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerInfoAttributes, "issuerInfoAttributes(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QSslCertificate_issuerInfoAttributes(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerInfoAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->issuerInfoAttributes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerInfoAttributes, doc_QSslCertificate_issuerInfoAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_extensions, "extensions(self) -> List[QSslCertificateExtension]");

extern "C" {static PyObject *meth_QSslCertificate_extensions(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_extensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList< ::QSslCertificateExtension>*sipRes;

            sipRes = new QList< ::QSslCertificateExtension>(sipCpp->extensions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificateExtension,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_extensions, doc_QSslCertificate_extensions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_toText, "toText(self) -> str");

extern "C" {static PyObject *meth_QSslCertificate_toText(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toText, doc_QSslCertificate_toText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_verify, "verify(Iterable[QSslCertificate], hostName: str = '') -> List[QSslError]");

extern "C" {static PyObject *meth_QSslCertificate_verify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_verify(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        QList< ::QSslCertificate>* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_hostName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QList_0100QSslCertificate,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QList< ::QSslError>*sipRes;

            sipRes = new QList< ::QSslError>( ::QSslCertificate::verify(*a0,*a1));
            sipReleaseType(a0,sipType_QList_0100QSslCertificate,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslError,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_verify, doc_QSslCertificate_verify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_isSelfSigned, "isSelfSigned(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isSelfSigned(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isSelfSigned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelfSigned();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isSelfSigned, doc_QSslCertificate_isSelfSigned);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_importPkcs12, "importPkcs12(QIODevice, QSslKey, QSslCertificate, caCertificates: Iterable[QSslCertificate] = [], passPhrase: Union[QByteArray, bytes, bytearray] = QByteArray()) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_importPkcs12(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_importPkcs12(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QSslKey* a1;
         ::QSslCertificate* a2;
        QList< ::QSslCertificate>* a3 = 0;
        int a3State = 0;
        const  ::QByteArray& a4def = QByteArray();
        const  ::QByteArray* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_caCertificates,
            sipName_passPhrase,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J8J8|J0J1", sipType_QIODevice, &a0, sipType_QSslKey, &a1, sipType_QSslCertificate, &a2, sipType_QList_0100QSslCertificate,&a3, &a3State, sipType_QByteArray, &a4, &a4State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QSslCertificate::importPkcs12(a0,a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_QList_0100QSslCertificate,a3State);
            sipReleaseType(const_cast< ::QByteArray *>(a4),sipType_QByteArray,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_importPkcs12, doc_QSslCertificate_importPkcs12);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerDisplayName, "issuerDisplayName(self) -> str");

extern "C" {static PyObject *meth_QSslCertificate_issuerDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerDisplayName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->issuerDisplayName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerDisplayName, doc_QSslCertificate_issuerDisplayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectDisplayName, "subjectDisplayName(self) -> str");

extern "C" {static PyObject *meth_QSslCertificate_subjectDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectDisplayName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->subjectDisplayName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectDisplayName, doc_QSslCertificate_subjectDisplayName);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QSslCertificate___hash__(PyObject *);}
static long slot_QSslCertificate___hash__(PyObject *sipSelf)
{
     ::QSslCertificate *sipCpp = reinterpret_cast< ::QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslcertificate.sip"
        sipRes = qHash(*sipCpp);
#line 949 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQSslCertificate.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSslCertificate___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslCertificate *sipCpp = reinterpret_cast< ::QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSslCertificate::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QSslCertificate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSslCertificate___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslCertificate *sipCpp = reinterpret_cast< ::QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QSslCertificate::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QSslCertificate, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslCertificate(void *, int);}
static void release_QSslCertificate(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSslCertificate *>(sipCppV);
}


extern "C" {static void *array_QSslCertificate(Py_ssize_t);}
static void *array_QSslCertificate(Py_ssize_t sipNrElem)
{
    return new  ::QSslCertificate[sipNrElem];
}


extern "C" {static void assign_QSslCertificate(void *, Py_ssize_t, void *);}
static void assign_QSslCertificate(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSslCertificate *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSslCertificate *>(sipSrc);
}


extern "C" {static void *copy_QSslCertificate(const void *, Py_ssize_t);}
static void *copy_QSslCertificate(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QSslCertificate(reinterpret_cast<const  ::QSslCertificate *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslCertificate(sipSimpleWrapper *);}
static void dealloc_QSslCertificate(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSslCertificate(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSslCertificate *sipCpp = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QSslCertificate(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            sipCpp = new  ::QSslCertificate(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QSslCertificate* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSslCertificate, &a0))
        {
            sipCpp = new  ::QSslCertificate(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslCertificate[] = {
    {(void *)slot_QSslCertificate___hash__, hash_slot},
    {(void *)slot_QSslCertificate___ne__, ne_slot},
    {(void *)slot_QSslCertificate___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslCertificate[] = {
    {sipName_clear, meth_QSslCertificate_clear, METH_VARARGS, doc_QSslCertificate_clear},
    {sipName_digest, SIP_MLMETH_CAST(meth_QSslCertificate_digest), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_digest},
    {sipName_effectiveDate, meth_QSslCertificate_effectiveDate, METH_VARARGS, doc_QSslCertificate_effectiveDate},
    {sipName_expiryDate, meth_QSslCertificate_expiryDate, METH_VARARGS, doc_QSslCertificate_expiryDate},
    {sipName_extensions, meth_QSslCertificate_extensions, METH_VARARGS, doc_QSslCertificate_extensions},
    {sipName_fromData, SIP_MLMETH_CAST(meth_QSslCertificate_fromData), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_fromData},
    {sipName_fromDevice, SIP_MLMETH_CAST(meth_QSslCertificate_fromDevice), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_fromDevice},
    {sipName_fromPath, SIP_MLMETH_CAST(meth_QSslCertificate_fromPath), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_fromPath},
    {sipName_handle, meth_QSslCertificate_handle, METH_VARARGS, doc_QSslCertificate_handle},
    {sipName_importPkcs12, SIP_MLMETH_CAST(meth_QSslCertificate_importPkcs12), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_importPkcs12},
    {sipName_isBlacklisted, meth_QSslCertificate_isBlacklisted, METH_VARARGS, doc_QSslCertificate_isBlacklisted},
    {sipName_isNull, meth_QSslCertificate_isNull, METH_VARARGS, doc_QSslCertificate_isNull},
    {sipName_isSelfSigned, meth_QSslCertificate_isSelfSigned, METH_VARARGS, doc_QSslCertificate_isSelfSigned},
    {sipName_issuerDisplayName, meth_QSslCertificate_issuerDisplayName, METH_VARARGS, doc_QSslCertificate_issuerDisplayName},
    {sipName_issuerInfo, meth_QSslCertificate_issuerInfo, METH_VARARGS, doc_QSslCertificate_issuerInfo},
    {sipName_issuerInfoAttributes, meth_QSslCertificate_issuerInfoAttributes, METH_VARARGS, doc_QSslCertificate_issuerInfoAttributes},
    {sipName_publicKey, meth_QSslCertificate_publicKey, METH_VARARGS, doc_QSslCertificate_publicKey},
    {sipName_serialNumber, meth_QSslCertificate_serialNumber, METH_VARARGS, doc_QSslCertificate_serialNumber},
    {sipName_subjectAlternativeNames, meth_QSslCertificate_subjectAlternativeNames, METH_VARARGS, doc_QSslCertificate_subjectAlternativeNames},
    {sipName_subjectDisplayName, meth_QSslCertificate_subjectDisplayName, METH_VARARGS, doc_QSslCertificate_subjectDisplayName},
    {sipName_subjectInfo, meth_QSslCertificate_subjectInfo, METH_VARARGS, doc_QSslCertificate_subjectInfo},
    {sipName_subjectInfoAttributes, meth_QSslCertificate_subjectInfoAttributes, METH_VARARGS, doc_QSslCertificate_subjectInfoAttributes},
    {sipName_swap, meth_QSslCertificate_swap, METH_VARARGS, doc_QSslCertificate_swap},
    {sipName_toDer, meth_QSslCertificate_toDer, METH_VARARGS, doc_QSslCertificate_toDer},
    {sipName_toPem, meth_QSslCertificate_toPem, METH_VARARGS, doc_QSslCertificate_toPem},
    {sipName_toText, meth_QSslCertificate_toText, METH_VARARGS, doc_QSslCertificate_toText},
    {sipName_verify, SIP_MLMETH_CAST(meth_QSslCertificate_verify), METH_VARARGS|METH_KEYWORDS, doc_QSslCertificate_verify},
    {sipName_version, meth_QSslCertificate_version, METH_VARARGS, doc_QSslCertificate_version}
};

static sipEnumMemberDef enummembers_QSslCertificate[] = {
    {sipName_CommonName, static_cast<int>( ::QSslCertificate::CommonName), 113},
    {sipName_CountryName, static_cast<int>( ::QSslCertificate::CountryName), 113},
    {sipName_DistinguishedNameQualifier, static_cast<int>( ::QSslCertificate::DistinguishedNameQualifier), 113},
    {sipName_EmailAddress, static_cast<int>( ::QSslCertificate::EmailAddress), 113},
    {sipName_LocalityName, static_cast<int>( ::QSslCertificate::LocalityName), 113},
    {sipName_Organization, static_cast<int>( ::QSslCertificate::Organization), 113},
    {sipName_OrganizationalUnitName, static_cast<int>( ::QSslCertificate::OrganizationalUnitName), 113},
    {sipName_SerialNumber, static_cast<int>( ::QSslCertificate::SerialNumber), 113},
    {sipName_StateOrProvinceName, static_cast<int>( ::QSslCertificate::StateOrProvinceName), 113},
};

PyDoc_STRVAR(doc_QSslCertificate, "\1QSslCertificate(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem)\n"
"QSslCertificate(data: Union[QByteArray, bytes, bytearray] = QByteArray(), format: QSsl.EncodingFormat = QSsl.Pem)\n"
"QSslCertificate(QSslCertificate)");


static pyqt5ClassPluginDef plugin_QSslCertificate = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QSslCertificate = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSslCertificate,
        SIP_NULLPTR,
        &plugin_QSslCertificate
    },
    {
        sipNameNr_QSslCertificate,
        {0, 0, 1},
        28, methods_QSslCertificate,
        9, enummembers_QSslCertificate,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSslCertificate,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSslCertificate,
    init_type_QSslCertificate,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QSslCertificate,
    assign_QSslCertificate,
    array_QSslCertificate,
    copy_QSslCertificate,
    release_QSslCertificate,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
