/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkcookie.sip"
#include <qnetworkcookie.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 47 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 50 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookieJar.cpp"


class sipQNetworkCookieJar : public  ::QNetworkCookieJar
{
public:
    sipQNetworkCookieJar( ::QObject*);
    virtual ~sipQNetworkCookieJar();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool validateCookie(const  ::QNetworkCookie&,const  ::QUrl&) const SIP_OVERRIDE;
    bool deleteCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool updateCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool insertCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool setCookiesFromUrl(const QList< ::QNetworkCookie>&,const  ::QUrl&) SIP_OVERRIDE;
    QList< ::QNetworkCookie> cookiesForUrl(const  ::QUrl&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkCookieJar(const sipQNetworkCookieJar &);
    sipQNetworkCookieJar &operator = (const sipQNetworkCookieJar &);

    char sipPyMethods[13];
};

sipQNetworkCookieJar::sipQNetworkCookieJar( ::QObject*a0):  ::QNetworkCookieJar(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkCookieJar::~sipQNetworkCookieJar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkCookieJar::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkCookieJar);

    return  ::QNetworkCookieJar::metaObject();
}

int sipQNetworkCookieJar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkCookieJar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkCookieJar,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQNetworkCookieJar::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkCookieJar, _clname, &sipCpp) ? sipCpp :  ::QNetworkCookieJar::qt_metacast(_clname));
}

bool sipQNetworkCookieJar::validateCookie(const  ::QNetworkCookie& a0,const  ::QUrl& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_validateCookie);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), sipPySelf, SIP_NULLPTR, sipName_validateCookie);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::validateCookie(a0,a1);

    extern bool sipVH_QtNetwork_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&,const  ::QUrl&);

    return sipVH_QtNetwork_34(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkCookieJar::deleteCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_deleteCookie);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_deleteCookie);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::deleteCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::updateCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_updateCookie);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_updateCookie);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::updateCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::insertCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_insertCookie);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_insertCookie);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::insertCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::setCookiesFromUrl(const QList< ::QNetworkCookie>& a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_setCookiesFromUrl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_setCookiesFromUrl);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::setCookiesFromUrl(a0,a1);

    extern bool sipVH_QtNetwork_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList< ::QNetworkCookie>&,const  ::QUrl&);

    return sipVH_QtNetwork_32(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

QList< ::QNetworkCookie> sipQNetworkCookieJar::cookiesForUrl(const  ::QUrl& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_cookiesForUrl);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), sipPySelf, SIP_NULLPTR, sipName_cookiesForUrl);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::cookiesForUrl(a0);

    extern QList< ::QNetworkCookie> sipVH_QtNetwork_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_31(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QNetworkCookieJar::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkCookieJar::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkCookieJar::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkCookieJar::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkCookieJar::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkCookieJar::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkCookieJar::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkCookieJar_cookiesForUrl, "cookiesForUrl(self, QUrl) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookieJar_cookiesForUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_cookiesForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QUrl, &a0))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>((sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::cookiesForUrl(*a0) : sipCpp->cookiesForUrl(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_cookiesForUrl, doc_QNetworkCookieJar_cookiesForUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_setCookiesFromUrl, "setCookiesFromUrl(self, Iterable[QNetworkCookie], QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_setCookiesFromUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_setCookiesFromUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const QList< ::QNetworkCookie>* a0;
        int a0State = 0;
        const  ::QUrl* a1;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QList_0100QNetworkCookie,&a0, &a0State, sipType_QUrl, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::setCookiesFromUrl(*a0,*a1) : sipCpp->setCookiesFromUrl(*a0,*a1));
            sipReleaseType(const_cast<QList< ::QNetworkCookie> *>(a0),sipType_QList_0100QNetworkCookie,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_setCookiesFromUrl, doc_QNetworkCookieJar_setCookiesFromUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_insertCookie, "insertCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_insertCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_insertCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::insertCookie(*a0) : sipCpp->insertCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_insertCookie, doc_QNetworkCookieJar_insertCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_updateCookie, "updateCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_updateCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_updateCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::updateCookie(*a0) : sipCpp->updateCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_updateCookie, doc_QNetworkCookieJar_updateCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_deleteCookie, "deleteCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_deleteCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_deleteCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::deleteCookie(*a0) : sipCpp->deleteCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_deleteCookie, doc_QNetworkCookieJar_deleteCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_setAllCookies, "setAllCookies(self, Iterable[QNetworkCookie])");

extern "C" {static PyObject *meth_QNetworkCookieJar_setAllCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_setAllCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QNetworkCookie>* a0;
        int a0State = 0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QList_0100QNetworkCookie,&a0, &a0State))
        {
            sipCpp->setAllCookies(*a0);
            sipReleaseType(const_cast<QList< ::QNetworkCookie> *>(a0),sipType_QList_0100QNetworkCookie,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_setAllCookies, doc_QNetworkCookieJar_setAllCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_allCookies, "allCookies(self) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookieJar_allCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_allCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkCookieJar, &sipCpp))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>(sipCpp->allCookies());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_allCookies, doc_QNetworkCookieJar_allCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_validateCookie, "validateCookie(self, QNetworkCookie, QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_validateCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_validateCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
        const  ::QUrl* a1;
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0, sipType_QUrl, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::validateCookie(*a0,*a1) : sipCpp->validateCookie(*a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_validateCookie, doc_QNetworkCookieJar_validateCookie);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkCookieJar(void *, const sipTypeDef *);}
static void *cast_QNetworkCookieJar(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkCookieJar *sipCpp = reinterpret_cast< ::QNetworkCookieJar *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCookieJar(void *, int);}
static void release_QNetworkCookieJar(void *sipCppV, int)
{
     ::QNetworkCookieJar *sipCpp = reinterpret_cast< ::QNetworkCookieJar *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QNetworkCookieJar(Py_ssize_t);}
static void *array_QNetworkCookieJar(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkCookieJar[sipNrElem];
}


extern "C" {static void dealloc_QNetworkCookieJar(sipSimpleWrapper *);}
static void dealloc_QNetworkCookieJar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkCookieJar *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCookieJar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkCookieJar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCookieJar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkCookieJar *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkCookieJar(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkCookieJar[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkCookieJar[] = {
    {sipName_allCookies, meth_QNetworkCookieJar_allCookies, METH_VARARGS, doc_QNetworkCookieJar_allCookies},
    {sipName_cookiesForUrl, meth_QNetworkCookieJar_cookiesForUrl, METH_VARARGS, doc_QNetworkCookieJar_cookiesForUrl},
    {sipName_deleteCookie, meth_QNetworkCookieJar_deleteCookie, METH_VARARGS, doc_QNetworkCookieJar_deleteCookie},
    {sipName_insertCookie, meth_QNetworkCookieJar_insertCookie, METH_VARARGS, doc_QNetworkCookieJar_insertCookie},
    {sipName_setAllCookies, meth_QNetworkCookieJar_setAllCookies, METH_VARARGS, doc_QNetworkCookieJar_setAllCookies},
    {sipName_setCookiesFromUrl, meth_QNetworkCookieJar_setCookiesFromUrl, METH_VARARGS, doc_QNetworkCookieJar_setCookiesFromUrl},
    {sipName_updateCookie, meth_QNetworkCookieJar_updateCookie, METH_VARARGS, doc_QNetworkCookieJar_updateCookie},
    {sipName_validateCookie, meth_QNetworkCookieJar_validateCookie, METH_VARARGS, doc_QNetworkCookieJar_validateCookie}
};

PyDoc_STRVAR(doc_QNetworkCookieJar, "\1QNetworkCookieJar(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QNetworkCookieJar = {
    & ::QNetworkCookieJar::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCookieJar = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCookieJar,
        SIP_NULLPTR,
        &plugin_QNetworkCookieJar
    },
    {
        sipNameNr_QNetworkCookieJar,
        {0, 0, 1},
        8, methods_QNetworkCookieJar,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCookieJar,
    -1,
    -1,
    supers_QNetworkCookieJar,
    SIP_NULLPTR,
    init_type_QNetworkCookieJar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkCookieJar,
    SIP_NULLPTR,
    array_QNetworkCookieJar,
    SIP_NULLPTR,
    release_QNetworkCookieJar,
    cast_QNetworkCookieJar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
