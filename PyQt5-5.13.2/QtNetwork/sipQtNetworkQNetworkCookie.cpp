/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkcookie.sip"
#include <qnetworkcookie.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCookie.cpp"


PyDoc_STRVAR(doc_QNetworkCookie_isSecure, "isSecure(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isSecure(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isSecure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSecure();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isSecure, doc_QNetworkCookie_isSecure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setSecure, "setSecure(self, bool)");

extern "C" {static PyObject *meth_QNetworkCookie_setSecure(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setSecure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCookie, &sipCpp, &a0))
        {
            sipCpp->setSecure(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setSecure, doc_QNetworkCookie_setSecure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_isSessionCookie, "isSessionCookie(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isSessionCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isSessionCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSessionCookie();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isSessionCookie, doc_QNetworkCookie_isSessionCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_expirationDate, "expirationDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCookie_expirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_expirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expirationDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_expirationDate, doc_QNetworkCookie_expirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setExpirationDate, "setExpirationDate(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCookie_setExpirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setExpirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setExpirationDate(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setExpirationDate, doc_QNetworkCookie_setExpirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_domain, "domain(self) -> str");

extern "C" {static PyObject *meth_QNetworkCookie_domain(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_domain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->domain());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_domain, doc_QNetworkCookie_domain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setDomain, "setDomain(self, str)");

extern "C" {static PyObject *meth_QNetworkCookie_setDomain(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setDomain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDomain(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setDomain, doc_QNetworkCookie_setDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_path, "path(self) -> str");

extern "C" {static PyObject *meth_QNetworkCookie_path(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_path, doc_QNetworkCookie_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QNetworkCookie_setPath(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setPath, doc_QNetworkCookie_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_name, "name(self) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_name(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_name, doc_QNetworkCookie_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setName, "setName(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkCookie_setName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setName, doc_QNetworkCookie_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_value, "value(self) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_value(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_value, doc_QNetworkCookie_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setValue, "setValue(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkCookie_setValue(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setValue, doc_QNetworkCookie_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_toRawForm, "toRawForm(self, form: QNetworkCookie.RawForm = QNetworkCookie.Full) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_toRawForm(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_toRawForm(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookie::RawForm a0 = QNetworkCookie::Full;
        const  ::QNetworkCookie *sipCpp;

        static const char *sipKwdList[] = {
            sipName_form,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie_RawForm, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toRawForm(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_toRawForm, doc_QNetworkCookie_toRawForm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_parseCookies, "parseCookies(Union[QByteArray, bytes, bytearray]) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookie_parseCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_parseCookies(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>( ::QNetworkCookie::parseCookies(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_parseCookies, doc_QNetworkCookie_parseCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_isHttpOnly, "isHttpOnly(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isHttpOnly(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isHttpOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHttpOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isHttpOnly, doc_QNetworkCookie_isHttpOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setHttpOnly, "setHttpOnly(self, bool)");

extern "C" {static PyObject *meth_QNetworkCookie_setHttpOnly(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setHttpOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCookie, &sipCpp, &a0))
        {
            sipCpp->setHttpOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setHttpOnly, doc_QNetworkCookie_setHttpOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_swap, "swap(self, QNetworkCookie)");

extern "C" {static PyObject *meth_QNetworkCookie_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookie* a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_swap, doc_QNetworkCookie_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_hasSameIdentifier, "hasSameIdentifier(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_hasSameIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_hasSameIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasSameIdentifier(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_hasSameIdentifier, doc_QNetworkCookie_hasSameIdentifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_normalize, "normalize(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkCookie_normalize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->normalize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_normalize, doc_QNetworkCookie_normalize);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkCookie___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCookie___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCookie *sipCpp = reinterpret_cast< ::QNetworkCookie *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCookie));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCookie::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkCookie, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkCookie___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCookie___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCookie *sipCpp = reinterpret_cast< ::QNetworkCookie *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCookie));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCookie::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkCookie, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCookie(void *, int);}
static void release_QNetworkCookie(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkCookie *>(sipCppV);
}


extern "C" {static void *array_QNetworkCookie(Py_ssize_t);}
static void *array_QNetworkCookie(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkCookie[sipNrElem];
}


extern "C" {static void assign_QNetworkCookie(void *, Py_ssize_t, void *);}
static void assign_QNetworkCookie(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkCookie *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkCookie *>(sipSrc);
}


extern "C" {static void *copy_QNetworkCookie(const void *, Py_ssize_t);}
static void *copy_QNetworkCookie(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QNetworkCookie(reinterpret_cast<const  ::QNetworkCookie *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkCookie(sipSimpleWrapper *);}
static void dealloc_QNetworkCookie(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCookie(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkCookie(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCookie(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkCookie *sipCpp = SIP_NULLPTR;

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1", sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QNetworkCookie(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkCookie* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkCookie, &a0))
        {
            sipCpp = new  ::QNetworkCookie(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkCookie[] = {
    {(void *)slot_QNetworkCookie___ne__, ne_slot},
    {(void *)slot_QNetworkCookie___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkCookie[] = {
    {sipName_domain, meth_QNetworkCookie_domain, METH_VARARGS, doc_QNetworkCookie_domain},
    {sipName_expirationDate, meth_QNetworkCookie_expirationDate, METH_VARARGS, doc_QNetworkCookie_expirationDate},
    {sipName_hasSameIdentifier, meth_QNetworkCookie_hasSameIdentifier, METH_VARARGS, doc_QNetworkCookie_hasSameIdentifier},
    {sipName_isHttpOnly, meth_QNetworkCookie_isHttpOnly, METH_VARARGS, doc_QNetworkCookie_isHttpOnly},
    {sipName_isSecure, meth_QNetworkCookie_isSecure, METH_VARARGS, doc_QNetworkCookie_isSecure},
    {sipName_isSessionCookie, meth_QNetworkCookie_isSessionCookie, METH_VARARGS, doc_QNetworkCookie_isSessionCookie},
    {sipName_name, meth_QNetworkCookie_name, METH_VARARGS, doc_QNetworkCookie_name},
    {sipName_normalize, meth_QNetworkCookie_normalize, METH_VARARGS, doc_QNetworkCookie_normalize},
    {sipName_parseCookies, meth_QNetworkCookie_parseCookies, METH_VARARGS, doc_QNetworkCookie_parseCookies},
    {sipName_path, meth_QNetworkCookie_path, METH_VARARGS, doc_QNetworkCookie_path},
    {sipName_setDomain, meth_QNetworkCookie_setDomain, METH_VARARGS, doc_QNetworkCookie_setDomain},
    {sipName_setExpirationDate, meth_QNetworkCookie_setExpirationDate, METH_VARARGS, doc_QNetworkCookie_setExpirationDate},
    {sipName_setHttpOnly, meth_QNetworkCookie_setHttpOnly, METH_VARARGS, doc_QNetworkCookie_setHttpOnly},
    {sipName_setName, meth_QNetworkCookie_setName, METH_VARARGS, doc_QNetworkCookie_setName},
    {sipName_setPath, meth_QNetworkCookie_setPath, METH_VARARGS, doc_QNetworkCookie_setPath},
    {sipName_setSecure, meth_QNetworkCookie_setSecure, METH_VARARGS, doc_QNetworkCookie_setSecure},
    {sipName_setValue, meth_QNetworkCookie_setValue, METH_VARARGS, doc_QNetworkCookie_setValue},
    {sipName_swap, meth_QNetworkCookie_swap, METH_VARARGS, doc_QNetworkCookie_swap},
    {sipName_toRawForm, SIP_MLMETH_CAST(meth_QNetworkCookie_toRawForm), METH_VARARGS|METH_KEYWORDS, doc_QNetworkCookie_toRawForm},
    {sipName_value, meth_QNetworkCookie_value, METH_VARARGS, doc_QNetworkCookie_value}
};

static sipEnumMemberDef enummembers_QNetworkCookie[] = {
    {sipName_Full, static_cast<int>( ::QNetworkCookie::Full), 73},
    {sipName_NameAndValueOnly, static_cast<int>( ::QNetworkCookie::NameAndValueOnly), 73},
};

PyDoc_STRVAR(doc_QNetworkCookie, "\1QNetworkCookie(name: Union[QByteArray, bytes, bytearray] = QByteArray(), value: Union[QByteArray, bytes, bytearray] = QByteArray())\n"
"QNetworkCookie(QNetworkCookie)");


static pyqt5ClassPluginDef plugin_QNetworkCookie = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCookie = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCookie,
        SIP_NULLPTR,
        &plugin_QNetworkCookie
    },
    {
        sipNameNr_QNetworkCookie,
        {0, 0, 1},
        20, methods_QNetworkCookie,
        2, enummembers_QNetworkCookie,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCookie,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkCookie,
    init_type_QNetworkCookie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkCookie,
    assign_QNetworkCookie,
    array_QNetworkCookie,
    copy_QNetworkCookie,
    release_QNetworkCookie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
