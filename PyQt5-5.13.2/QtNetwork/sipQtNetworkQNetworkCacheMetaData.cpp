/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"

#line 27 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qpynetwork_qhash.sip"
#include <qhash.h>
#include <qnetworkrequest.h>
#include <qvariant.h>
#line 35 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 38 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 44 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 263 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkCacheMetaData.cpp"


PyDoc_STRVAR(doc_QNetworkCacheMetaData_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_isValid, doc_QNetworkCacheMetaData_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_url, doc_QNetworkCacheMetaData_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setUrl, doc_QNetworkCacheMetaData_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_rawHeaders, "rawHeaders(self) -> List[Tuple[QByteArray, QByteArray]]");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_rawHeaders(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_rawHeaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QNetworkCacheMetaData::RawHeaderList*sipRes;

            sipRes = new  ::QNetworkCacheMetaData::RawHeaderList(sipCpp->rawHeaders());

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_rawHeaders, doc_QNetworkCacheMetaData_rawHeaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setRawHeaders, "setRawHeaders(self, Iterable[Tuple[Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]]])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setRawHeaders(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setRawHeaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData::RawHeaderList* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QList_0600QPair_0100QByteArray_0100QByteArray,&a0, &a0State))
        {
            sipCpp->setRawHeaders(*a0);
            sipReleaseType(const_cast< ::QNetworkCacheMetaData::RawHeaderList *>(a0),sipType_QList_0600QPair_0100QByteArray_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setRawHeaders, doc_QNetworkCacheMetaData_setRawHeaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_lastModified, "lastModified(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_lastModified, doc_QNetworkCacheMetaData_lastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setLastModified, "setLastModified(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setLastModified(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setLastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setLastModified(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setLastModified, doc_QNetworkCacheMetaData_setLastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_expirationDate, "expirationDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_expirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_expirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expirationDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_expirationDate, doc_QNetworkCacheMetaData_expirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setExpirationDate, "setExpirationDate(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setExpirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setExpirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setExpirationDate(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setExpirationDate, doc_QNetworkCacheMetaData_setExpirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_saveToDisk, "saveToDisk(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_saveToDisk(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_saveToDisk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->saveToDisk();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_saveToDisk, doc_QNetworkCacheMetaData_saveToDisk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setSaveToDisk, "setSaveToDisk(self, bool)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setSaveToDisk(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setSaveToDisk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, &a0))
        {
            sipCpp->setSaveToDisk(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setSaveToDisk, doc_QNetworkCacheMetaData_setSaveToDisk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_attributes, "attributes(self) -> Dict[QNetworkRequest.Attribute, Any]");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_attributes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QNetworkCacheMetaData::AttributesMap*sipRes;

            sipRes = new  ::QNetworkCacheMetaData::AttributesMap(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_attributes, doc_QNetworkCacheMetaData_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setAttributes, "setAttributes(self, Dict[QNetworkRequest.Attribute, Any])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setAttributes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData::AttributesMap* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,&a0, &a0State))
        {
            sipCpp->setAttributes(*a0);
            sipReleaseType(const_cast< ::QNetworkCacheMetaData::AttributesMap *>(a0),sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setAttributes, doc_QNetworkCacheMetaData_setAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_swap, "swap(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCacheMetaData* a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_swap, doc_QNetworkCacheMetaData_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkCacheMetaData___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCacheMetaData___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCacheMetaData *sipCpp = reinterpret_cast< ::QNetworkCacheMetaData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCacheMetaData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCacheMetaData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCacheMetaData::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkCacheMetaData, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkCacheMetaData___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCacheMetaData___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCacheMetaData *sipCpp = reinterpret_cast< ::QNetworkCacheMetaData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCacheMetaData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCacheMetaData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCacheMetaData::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkCacheMetaData, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCacheMetaData(void *, int);}
static void release_QNetworkCacheMetaData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkCacheMetaData *>(sipCppV);
}


extern "C" {static void *array_QNetworkCacheMetaData(Py_ssize_t);}
static void *array_QNetworkCacheMetaData(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkCacheMetaData[sipNrElem];
}


extern "C" {static void assign_QNetworkCacheMetaData(void *, Py_ssize_t, void *);}
static void assign_QNetworkCacheMetaData(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkCacheMetaData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkCacheMetaData *>(sipSrc);
}


extern "C" {static void *copy_QNetworkCacheMetaData(const void *, Py_ssize_t);}
static void *copy_QNetworkCacheMetaData(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QNetworkCacheMetaData(reinterpret_cast<const  ::QNetworkCacheMetaData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkCacheMetaData(sipSimpleWrapper *);}
static void dealloc_QNetworkCacheMetaData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCacheMetaData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkCacheMetaData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCacheMetaData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkCacheMetaData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkCacheMetaData();

            return sipCpp;
        }
    }

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkCacheMetaData, &a0))
        {
            sipCpp = new  ::QNetworkCacheMetaData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkCacheMetaData[] = {
    {(void *)slot_QNetworkCacheMetaData___ne__, ne_slot},
    {(void *)slot_QNetworkCacheMetaData___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkCacheMetaData[] = {
    {sipName_attributes, meth_QNetworkCacheMetaData_attributes, METH_VARARGS, doc_QNetworkCacheMetaData_attributes},
    {sipName_expirationDate, meth_QNetworkCacheMetaData_expirationDate, METH_VARARGS, doc_QNetworkCacheMetaData_expirationDate},
    {sipName_isValid, meth_QNetworkCacheMetaData_isValid, METH_VARARGS, doc_QNetworkCacheMetaData_isValid},
    {sipName_lastModified, meth_QNetworkCacheMetaData_lastModified, METH_VARARGS, doc_QNetworkCacheMetaData_lastModified},
    {sipName_rawHeaders, meth_QNetworkCacheMetaData_rawHeaders, METH_VARARGS, doc_QNetworkCacheMetaData_rawHeaders},
    {sipName_saveToDisk, meth_QNetworkCacheMetaData_saveToDisk, METH_VARARGS, doc_QNetworkCacheMetaData_saveToDisk},
    {sipName_setAttributes, meth_QNetworkCacheMetaData_setAttributes, METH_VARARGS, doc_QNetworkCacheMetaData_setAttributes},
    {sipName_setExpirationDate, meth_QNetworkCacheMetaData_setExpirationDate, METH_VARARGS, doc_QNetworkCacheMetaData_setExpirationDate},
    {sipName_setLastModified, meth_QNetworkCacheMetaData_setLastModified, METH_VARARGS, doc_QNetworkCacheMetaData_setLastModified},
    {sipName_setRawHeaders, meth_QNetworkCacheMetaData_setRawHeaders, METH_VARARGS, doc_QNetworkCacheMetaData_setRawHeaders},
    {sipName_setSaveToDisk, meth_QNetworkCacheMetaData_setSaveToDisk, METH_VARARGS, doc_QNetworkCacheMetaData_setSaveToDisk},
    {sipName_setUrl, meth_QNetworkCacheMetaData_setUrl, METH_VARARGS, doc_QNetworkCacheMetaData_setUrl},
    {sipName_swap, meth_QNetworkCacheMetaData_swap, METH_VARARGS, doc_QNetworkCacheMetaData_swap},
    {sipName_url, meth_QNetworkCacheMetaData_url, METH_VARARGS, doc_QNetworkCacheMetaData_url}
};

PyDoc_STRVAR(doc_QNetworkCacheMetaData, "\1QNetworkCacheMetaData()\n"
"QNetworkCacheMetaData(QNetworkCacheMetaData)");


static pyqt5ClassPluginDef plugin_QNetworkCacheMetaData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCacheMetaData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCacheMetaData,
        SIP_NULLPTR,
        &plugin_QNetworkCacheMetaData
    },
    {
        sipNameNr_QNetworkCacheMetaData,
        {0, 0, 1},
        14, methods_QNetworkCacheMetaData,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCacheMetaData,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkCacheMetaData,
    init_type_QNetworkCacheMetaData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkCacheMetaData,
    assign_QNetworkCacheMetaData,
    array_QNetworkCacheMetaData,
    copy_QNetworkCacheMetaData,
    release_QNetworkCacheMetaData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
