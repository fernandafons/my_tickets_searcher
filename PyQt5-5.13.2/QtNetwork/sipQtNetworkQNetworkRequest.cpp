/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkRequest.cpp"


PyDoc_STRVAR(doc_QNetworkRequest_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkRequest_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_url, doc_QNetworkRequest_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkRequest_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setUrl, doc_QNetworkRequest_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_header, "header(self, QNetworkRequest.KnownHeaders) -> Any");

extern "C" {static PyObject *meth_QNetworkRequest_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_header, doc_QNetworkRequest_header);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, Any)");

extern "C" {static PyObject *meth_QNetworkRequest_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setHeader, doc_QNetworkRequest_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_hasRawHeader, "hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_hasRawHeader, doc_QNetworkRequest_hasRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeaderList, "rawHeaderList(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeaderList, doc_QNetworkRequest_rawHeaderList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeader, "rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeader, doc_QNetworkRequest_rawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setRawHeader, "setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setRawHeader, doc_QNetworkRequest_setRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_attribute, "attribute(self, QNetworkRequest.Attribute, defaultValue: Any = None) -> Any");

extern "C" {static PyObject *meth_QNetworkRequest_attribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_attribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        const  ::QNetworkRequest *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->attribute(a0,*a1));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_attribute, doc_QNetworkRequest_attribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setAttribute, "setAttribute(self, QNetworkRequest.Attribute, Any)");

extern "C" {static PyObject *meth_QNetworkRequest_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setAttribute, doc_QNetworkRequest_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QSslConfiguration*sipRes;

            sipRes = new  ::QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_sslConfiguration, doc_QNetworkRequest_sslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setSslConfiguration, doc_QNetworkRequest_setSslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setOriginatingObject, "setOriginatingObject(self, QObject)");

extern "C" {static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QNetworkRequest, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setOriginatingObject(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setOriginatingObject, doc_QNetworkRequest_setOriginatingObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_originatingObject, "originatingObject(self) -> QObject");

extern "C" {static PyObject *meth_QNetworkRequest_originatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_originatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->originatingObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_originatingObject, doc_QNetworkRequest_originatingObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_priority, "priority(self) -> QNetworkRequest.Priority");

extern "C" {static PyObject *meth_QNetworkRequest_priority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QNetworkRequest::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkRequest_Priority);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_priority, doc_QNetworkRequest_priority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setPriority, "setPriority(self, QNetworkRequest.Priority)");

extern "C" {static PyObject *meth_QNetworkRequest_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Priority a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setPriority, doc_QNetworkRequest_setPriority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_swap, "swap(self, QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkRequest_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_swap, doc_QNetworkRequest_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_maximumRedirectsAllowed, "maximumRedirectsAllowed(self) -> int");

extern "C" {static PyObject *meth_QNetworkRequest_maximumRedirectsAllowed(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_maximumRedirectsAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumRedirectsAllowed();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_maximumRedirectsAllowed, doc_QNetworkRequest_maximumRedirectsAllowed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setMaximumRedirectsAllowed, "setMaximumRedirectsAllowed(self, int)");

extern "C" {static PyObject *meth_QNetworkRequest_setMaximumRedirectsAllowed(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setMaximumRedirectsAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkRequest, &sipCpp, &a0))
        {
            sipCpp->setMaximumRedirectsAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setMaximumRedirectsAllowed, doc_QNetworkRequest_setMaximumRedirectsAllowed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkRequest *sipCpp = reinterpret_cast< ::QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkRequest, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkRequest *sipCpp = reinterpret_cast< ::QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkRequest, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkRequest(void *, int);}
static void release_QNetworkRequest(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkRequest *>(sipCppV);
}


extern "C" {static void *array_QNetworkRequest(Py_ssize_t);}
static void *array_QNetworkRequest(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkRequest[sipNrElem];
}


extern "C" {static void assign_QNetworkRequest(void *, Py_ssize_t, void *);}
static void assign_QNetworkRequest(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkRequest *>(sipSrc);
}


extern "C" {static void *copy_QNetworkRequest(const void *, Py_ssize_t);}
static void *copy_QNetworkRequest(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QNetworkRequest(reinterpret_cast<const  ::QNetworkRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkRequest(sipSimpleWrapper *);}
static void dealloc_QNetworkRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkRequest(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkRequest *sipCpp = SIP_NULLPTR;

    {
        const  ::QUrl& a0def = QUrl();
        const  ::QUrl* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_url,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9", sipType_QUrl, &a0))
        {
            sipCpp = new  ::QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkRequest, &a0))
        {
            sipCpp = new  ::QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkRequest[] = {
    {(void *)slot_QNetworkRequest___ne__, ne_slot},
    {(void *)slot_QNetworkRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkRequest[] = {
    {sipName_attribute, SIP_MLMETH_CAST(meth_QNetworkRequest_attribute), METH_VARARGS|METH_KEYWORDS, doc_QNetworkRequest_attribute},
    {sipName_hasRawHeader, meth_QNetworkRequest_hasRawHeader, METH_VARARGS, doc_QNetworkRequest_hasRawHeader},
    {sipName_header, meth_QNetworkRequest_header, METH_VARARGS, doc_QNetworkRequest_header},
    {sipName_maximumRedirectsAllowed, meth_QNetworkRequest_maximumRedirectsAllowed, METH_VARARGS, doc_QNetworkRequest_maximumRedirectsAllowed},
    {sipName_originatingObject, meth_QNetworkRequest_originatingObject, METH_VARARGS, doc_QNetworkRequest_originatingObject},
    {sipName_priority, meth_QNetworkRequest_priority, METH_VARARGS, doc_QNetworkRequest_priority},
    {sipName_rawHeader, meth_QNetworkRequest_rawHeader, METH_VARARGS, doc_QNetworkRequest_rawHeader},
    {sipName_rawHeaderList, meth_QNetworkRequest_rawHeaderList, METH_VARARGS, doc_QNetworkRequest_rawHeaderList},
    {sipName_setAttribute, meth_QNetworkRequest_setAttribute, METH_VARARGS, doc_QNetworkRequest_setAttribute},
    {sipName_setHeader, meth_QNetworkRequest_setHeader, METH_VARARGS, doc_QNetworkRequest_setHeader},
    {sipName_setMaximumRedirectsAllowed, meth_QNetworkRequest_setMaximumRedirectsAllowed, METH_VARARGS, doc_QNetworkRequest_setMaximumRedirectsAllowed},
    {sipName_setOriginatingObject, meth_QNetworkRequest_setOriginatingObject, METH_VARARGS, doc_QNetworkRequest_setOriginatingObject},
    {sipName_setPriority, meth_QNetworkRequest_setPriority, METH_VARARGS, doc_QNetworkRequest_setPriority},
    {sipName_setRawHeader, meth_QNetworkRequest_setRawHeader, METH_VARARGS, doc_QNetworkRequest_setRawHeader},
    {sipName_setSslConfiguration, meth_QNetworkRequest_setSslConfiguration, METH_VARARGS, doc_QNetworkRequest_setSslConfiguration},
    {sipName_setUrl, meth_QNetworkRequest_setUrl, METH_VARARGS, doc_QNetworkRequest_setUrl},
    {sipName_sslConfiguration, meth_QNetworkRequest_sslConfiguration, METH_VARARGS, doc_QNetworkRequest_sslConfiguration},
    {sipName_swap, meth_QNetworkRequest_swap, METH_VARARGS, doc_QNetworkRequest_swap},
    {sipName_url, meth_QNetworkRequest_url, METH_VARARGS, doc_QNetworkRequest_url}
};

static sipEnumMemberDef enummembers_QNetworkRequest[] = {
    {sipName_AlwaysCache, static_cast<int>( ::QNetworkRequest::AlwaysCache), 92},
    {sipName_AlwaysNetwork, static_cast<int>( ::QNetworkRequest::AlwaysNetwork), 92},
    {sipName_AuthenticationReuseAttribute, static_cast<int>( ::QNetworkRequest::AuthenticationReuseAttribute), 91},
    {sipName_Automatic, static_cast<int>( ::QNetworkRequest::Automatic), 94},
    {sipName_BackgroundRequestAttribute, static_cast<int>( ::QNetworkRequest::BackgroundRequestAttribute), 91},
    {sipName_CacheLoadControlAttribute, static_cast<int>( ::QNetworkRequest::CacheLoadControlAttribute), 91},
    {sipName_CacheSaveControlAttribute, static_cast<int>( ::QNetworkRequest::CacheSaveControlAttribute), 91},
    {sipName_ConnectionEncryptedAttribute, static_cast<int>( ::QNetworkRequest::ConnectionEncryptedAttribute), 91},
    {sipName_ContentDispositionHeader, static_cast<int>( ::QNetworkRequest::ContentDispositionHeader), 93},
    {sipName_ContentLengthHeader, static_cast<int>( ::QNetworkRequest::ContentLengthHeader), 93},
    {sipName_ContentTypeHeader, static_cast<int>( ::QNetworkRequest::ContentTypeHeader), 93},
    {sipName_CookieHeader, static_cast<int>( ::QNetworkRequest::CookieHeader), 93},
    {sipName_CookieLoadControlAttribute, static_cast<int>( ::QNetworkRequest::CookieLoadControlAttribute), 91},
    {sipName_CookieSaveControlAttribute, static_cast<int>( ::QNetworkRequest::CookieSaveControlAttribute), 91},
    {sipName_CustomVerbAttribute, static_cast<int>( ::QNetworkRequest::CustomVerbAttribute), 91},
    {sipName_DoNotBufferUploadDataAttribute, static_cast<int>( ::QNetworkRequest::DoNotBufferUploadDataAttribute), 91},
    {sipName_ETagHeader, static_cast<int>( ::QNetworkRequest::ETagHeader), 93},
    {sipName_EmitAllUploadProgressSignalsAttribute, static_cast<int>( ::QNetworkRequest::EmitAllUploadProgressSignalsAttribute), 91},
    {sipName_FollowRedirectsAttribute, static_cast<int>( ::QNetworkRequest::FollowRedirectsAttribute), 91},
    {sipName_HTTP2AllowedAttribute, static_cast<int>( ::QNetworkRequest::HTTP2AllowedAttribute), 91},
    {sipName_HTTP2WasUsedAttribute, static_cast<int>( ::QNetworkRequest::HTTP2WasUsedAttribute), 91},
    {sipName_HighPriority, static_cast<int>( ::QNetworkRequest::HighPriority), 95},
    {sipName_Http2DirectAttribute, static_cast<int>( ::QNetworkRequest::Http2DirectAttribute), 91},
    {sipName_HttpPipeliningAllowedAttribute, static_cast<int>( ::QNetworkRequest::HttpPipeliningAllowedAttribute), 91},
    {sipName_HttpPipeliningWasUsedAttribute, static_cast<int>( ::QNetworkRequest::HttpPipeliningWasUsedAttribute), 91},
    {sipName_HttpReasonPhraseAttribute, static_cast<int>( ::QNetworkRequest::HttpReasonPhraseAttribute), 91},
    {sipName_HttpStatusCodeAttribute, static_cast<int>( ::QNetworkRequest::HttpStatusCodeAttribute), 91},
    {sipName_IfMatchHeader, static_cast<int>( ::QNetworkRequest::IfMatchHeader), 93},
    {sipName_IfModifiedSinceHeader, static_cast<int>( ::QNetworkRequest::IfModifiedSinceHeader), 93},
    {sipName_IfNoneMatchHeader, static_cast<int>( ::QNetworkRequest::IfNoneMatchHeader), 93},
    {sipName_LastModifiedHeader, static_cast<int>( ::QNetworkRequest::LastModifiedHeader), 93},
    {sipName_LocationHeader, static_cast<int>( ::QNetworkRequest::LocationHeader), 93},
    {sipName_LowPriority, static_cast<int>( ::QNetworkRequest::LowPriority), 95},
    {sipName_Manual, static_cast<int>( ::QNetworkRequest::Manual), 94},
    {sipName_ManualRedirectPolicy, static_cast<int>( ::QNetworkRequest::ManualRedirectPolicy), 96},
    {sipName_NoLessSafeRedirectPolicy, static_cast<int>( ::QNetworkRequest::NoLessSafeRedirectPolicy), 96},
    {sipName_NormalPriority, static_cast<int>( ::QNetworkRequest::NormalPriority), 95},
    {sipName_OriginalContentLengthAttribute, static_cast<int>( ::QNetworkRequest::OriginalContentLengthAttribute), 91},
    {sipName_PreferCache, static_cast<int>( ::QNetworkRequest::PreferCache), 92},
    {sipName_PreferNetwork, static_cast<int>( ::QNetworkRequest::PreferNetwork), 92},
    {sipName_RedirectPolicyAttribute, static_cast<int>( ::QNetworkRequest::RedirectPolicyAttribute), 91},
    {sipName_RedirectionTargetAttribute, static_cast<int>( ::QNetworkRequest::RedirectionTargetAttribute), 91},
    {sipName_SameOriginRedirectPolicy, static_cast<int>( ::QNetworkRequest::SameOriginRedirectPolicy), 96},
    {sipName_ServerHeader, static_cast<int>( ::QNetworkRequest::ServerHeader), 93},
    {sipName_SetCookieHeader, static_cast<int>( ::QNetworkRequest::SetCookieHeader), 93},
    {sipName_SourceIsFromCacheAttribute, static_cast<int>( ::QNetworkRequest::SourceIsFromCacheAttribute), 91},
    {sipName_SpdyAllowedAttribute, static_cast<int>( ::QNetworkRequest::SpdyAllowedAttribute), 91},
    {sipName_SpdyWasUsedAttribute, static_cast<int>( ::QNetworkRequest::SpdyWasUsedAttribute), 91},
    {sipName_User, static_cast<int>( ::QNetworkRequest::User), 91},
    {sipName_UserAgentHeader, static_cast<int>( ::QNetworkRequest::UserAgentHeader), 93},
    {sipName_UserMax, static_cast<int>( ::QNetworkRequest::UserMax), 91},
    {sipName_UserVerifiedRedirectPolicy, static_cast<int>( ::QNetworkRequest::UserVerifiedRedirectPolicy), 96},
};

PyDoc_STRVAR(doc_QNetworkRequest, "\1QNetworkRequest(url: QUrl = QUrl())\n"
"QNetworkRequest(QNetworkRequest)");


static pyqt5ClassPluginDef plugin_QNetworkRequest = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkRequest = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkRequest,
        SIP_NULLPTR,
        &plugin_QNetworkRequest
    },
    {
        sipNameNr_QNetworkRequest,
        {0, 0, 1},
        19, methods_QNetworkRequest,
        52, enummembers_QNetworkRequest,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkRequest,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkRequest,
    init_type_QNetworkRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkRequest,
    assign_QNetworkRequest,
    array_QNetworkRequest,
    copy_QNetworkRequest,
    release_QNetworkRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
