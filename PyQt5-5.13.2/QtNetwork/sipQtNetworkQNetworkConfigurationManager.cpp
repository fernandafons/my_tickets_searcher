/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 53 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 56 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 92 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkConfigurationManager.cpp"


class sipQNetworkConfigurationManager : public  ::QNetworkConfigurationManager
{
public:
    sipQNetworkConfigurationManager( ::QObject*);
    virtual ~sipQNetworkConfigurationManager();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkConfigurationManager(const sipQNetworkConfigurationManager &);
    sipQNetworkConfigurationManager &operator = (const sipQNetworkConfigurationManager &);

    char sipPyMethods[7];
};

sipQNetworkConfigurationManager::sipQNetworkConfigurationManager( ::QObject*a0):  ::QNetworkConfigurationManager(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkConfigurationManager::~sipQNetworkConfigurationManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkConfigurationManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkConfigurationManager);

    return  ::QNetworkConfigurationManager::metaObject();
}

int sipQNetworkConfigurationManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkConfigurationManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkConfigurationManager,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQNetworkConfigurationManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkConfigurationManager, _clname, &sipCpp) ? sipCpp :  ::QNetworkConfigurationManager::qt_metacast(_clname));
}

bool sipQNetworkConfigurationManager::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QNetworkConfigurationManager::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkConfigurationManager::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QNetworkConfigurationManager::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkConfigurationManager::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_capabilities, "capabilities(self) -> QNetworkConfigurationManager.Capabilities");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities(sipCpp->capabilities());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_capabilities, doc_QNetworkConfigurationManager_capabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_defaultConfiguration, "defaultConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->defaultConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_defaultConfiguration, doc_QNetworkConfigurationManager_defaultConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_allConfigurations, "allConfigurations(self, flags: Union[QNetworkConfiguration.StateFlags, QNetworkConfiguration.StateFlag] = QNetworkConfiguration.StateFlags()) -> List[QNetworkConfiguration]");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration::StateFlags a0def = QNetworkConfiguration::StateFlags();
         ::QNetworkConfiguration::StateFlags* a0 = &a0def;
        int a0State = 0;
        const  ::QNetworkConfigurationManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            QList< ::QNetworkConfiguration>*sipRes;

            sipRes = new QList< ::QNetworkConfiguration>(sipCpp->allConfigurations(*a0));
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_allConfigurations, doc_QNetworkConfigurationManager_allConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_configurationFromIdentifier, "configurationFromIdentifier(self, str) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->configurationFromIdentifier(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_configurationFromIdentifier, doc_QNetworkConfigurationManager_configurationFromIdentifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_updateConfigurations, "updateConfigurations(self)");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            sipCpp->updateConfigurations();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_updateConfigurations, doc_QNetworkConfigurationManager_updateConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_isOnline, "isOnline(self) -> bool");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOnline();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_isOnline, doc_QNetworkConfigurationManager_isOnline);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkConfigurationManager(void *, const sipTypeDef *);}
static void *cast_QNetworkConfigurationManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkConfigurationManager *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfigurationManager(void *, int);}
static void release_QNetworkConfigurationManager(void *sipCppV, int)
{
     ::QNetworkConfigurationManager *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QNetworkConfigurationManager(Py_ssize_t);}
static void *array_QNetworkConfigurationManager(Py_ssize_t sipNrElem)
{
    return new  ::QNetworkConfigurationManager[sipNrElem];
}


extern "C" {static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *);}
static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkConfigurationManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkConfigurationManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkConfigurationManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkConfigurationManager *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkConfigurationManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkConfigurationManager[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkConfigurationManager[] = {
    {sipName_allConfigurations, SIP_MLMETH_CAST(meth_QNetworkConfigurationManager_allConfigurations), METH_VARARGS|METH_KEYWORDS, doc_QNetworkConfigurationManager_allConfigurations},
    {sipName_capabilities, meth_QNetworkConfigurationManager_capabilities, METH_VARARGS, doc_QNetworkConfigurationManager_capabilities},
    {sipName_configurationFromIdentifier, meth_QNetworkConfigurationManager_configurationFromIdentifier, METH_VARARGS, doc_QNetworkConfigurationManager_configurationFromIdentifier},
    {sipName_defaultConfiguration, meth_QNetworkConfigurationManager_defaultConfiguration, METH_VARARGS, doc_QNetworkConfigurationManager_defaultConfiguration},
    {sipName_isOnline, meth_QNetworkConfigurationManager_isOnline, METH_VARARGS, doc_QNetworkConfigurationManager_isOnline},
    {sipName_updateConfigurations, meth_QNetworkConfigurationManager_updateConfigurations, METH_VARARGS, doc_QNetworkConfigurationManager_updateConfigurations}
};

static sipEnumMemberDef enummembers_QNetworkConfigurationManager[] = {
    {sipName_ApplicationLevelRoaming, static_cast<int>( ::QNetworkConfigurationManager::ApplicationLevelRoaming), 71},
    {sipName_CanStartAndStopInterfaces, static_cast<int>( ::QNetworkConfigurationManager::CanStartAndStopInterfaces), 71},
    {sipName_DataStatistics, static_cast<int>( ::QNetworkConfigurationManager::DataStatistics), 71},
    {sipName_DirectConnectionRouting, static_cast<int>( ::QNetworkConfigurationManager::DirectConnectionRouting), 71},
    {sipName_ForcedRoaming, static_cast<int>( ::QNetworkConfigurationManager::ForcedRoaming), 71},
    {sipName_NetworkSessionRequired, static_cast<int>( ::QNetworkConfigurationManager::NetworkSessionRequired), 71},
    {sipName_SystemSessionSupport, static_cast<int>( ::QNetworkConfigurationManager::SystemSessionSupport), 71},
};

PyDoc_STRVAR(doc_QNetworkConfigurationManager, "\1QNetworkConfigurationManager(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkConfigurationManager[] = {
    {"updateCompleted()", "\1updateCompleted(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"onlineStateChanged(bool)", "\1onlineStateChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationChanged(QNetworkConfiguration)", "\1configurationChanged(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationRemoved(QNetworkConfiguration)", "\1configurationRemoved(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationAdded(QNetworkConfiguration)", "\1configurationAdded(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QNetworkConfigurationManager = {
    & ::QNetworkConfigurationManager::staticMetaObject,
    0,
    signals_QNetworkConfigurationManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkConfigurationManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfigurationManager,
        SIP_NULLPTR,
        &plugin_QNetworkConfigurationManager
    },
    {
        sipNameNr_QNetworkConfigurationManager,
        {0, 0, 1},
        6, methods_QNetworkConfigurationManager,
        7, enummembers_QNetworkConfigurationManager,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkConfigurationManager,
    -1,
    -1,
    supers_QNetworkConfigurationManager,
    SIP_NULLPTR,
    init_type_QNetworkConfigurationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkConfigurationManager,
    SIP_NULLPTR,
    array_QNetworkConfigurationManager,
    SIP_NULLPTR,
    release_QNetworkConfigurationManager,
    cast_QNetworkConfigurationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
