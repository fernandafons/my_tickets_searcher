/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 140 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkProxyFactory.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkProxyFactory.cpp"
#line 26 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkProxyFactory.cpp"
#line 91 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtNetwork/sipQtNetworkQNetworkProxyFactory.cpp"


class sipQNetworkProxyFactory : public  ::QNetworkProxyFactory
{
public:
    sipQNetworkProxyFactory();
    sipQNetworkProxyFactory(const  ::QNetworkProxyFactory&);
    virtual ~sipQNetworkProxyFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QList< ::QNetworkProxy> queryProxy(const  ::QNetworkProxyQuery&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkProxyFactory(const sipQNetworkProxyFactory &);
    sipQNetworkProxyFactory &operator = (const sipQNetworkProxyFactory &);

    char sipPyMethods[1];
};

sipQNetworkProxyFactory::sipQNetworkProxyFactory():  ::QNetworkProxyFactory(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkProxyFactory::sipQNetworkProxyFactory(const  ::QNetworkProxyFactory& a0):  ::QNetworkProxyFactory(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkProxyFactory::~sipQNetworkProxyFactory()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

QList< ::QNetworkProxy> sipQNetworkProxyFactory::queryProxy(const  ::QNetworkProxyQuery& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, sipName_QNetworkProxyFactory, sipName_queryProxy);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, sipName_QNetworkProxyFactory, sipName_queryProxy);
#endif

    if (!sipMeth)
        return QList< ::QNetworkProxy>();

    extern QList< ::QNetworkProxy> sipVH_QtNetwork_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkProxyQuery&);

    return sipVH_QtNetwork_35(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_queryProxy, "queryProxy(self, query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_queryProxy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_queryProxy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkProxyQuery& a0def = QNetworkProxyQuery();
        const  ::QNetworkProxyQuery* a0 = &a0def;
         ::QNetworkProxyFactory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_query,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QNetworkProxyFactory, &sipCpp, sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkProxyFactory, sipName_queryProxy);
                return SIP_NULLPTR;
            }

            sipRes = new QList< ::QNetworkProxy>(sipCpp->queryProxy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_queryProxy, doc_QNetworkProxyFactory_queryProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_setApplicationProxyFactory, "setApplicationProxyFactory(QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkProxyFactory_setApplicationProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_setApplicationProxyFactory(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyFactory* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QNetworkProxyFactory, &a0))
        {
             ::QNetworkProxyFactory::setApplicationProxyFactory(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_setApplicationProxyFactory, doc_QNetworkProxyFactory_setApplicationProxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_proxyForQuery, "proxyForQuery(QNetworkProxyQuery) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_proxyForQuery(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_proxyForQuery(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            sipRes = new QList< ::QNetworkProxy>( ::QNetworkProxyFactory::proxyForQuery(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_proxyForQuery, doc_QNetworkProxyFactory_proxyForQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_systemProxyForQuery, "systemProxyForQuery(query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_systemProxyForQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_systemProxyForQuery(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery& a0def = QNetworkProxyQuery();
        const  ::QNetworkProxyQuery* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_query,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J9", sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            sipRes = new QList< ::QNetworkProxy>( ::QNetworkProxyFactory::systemProxyForQuery(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_systemProxyForQuery, doc_QNetworkProxyFactory_systemProxyForQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_setUseSystemConfiguration, "setUseSystemConfiguration(bool)");

extern "C" {static PyObject *meth_QNetworkProxyFactory_setUseSystemConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_setUseSystemConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QNetworkProxyFactory::setUseSystemConfiguration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_setUseSystemConfiguration, doc_QNetworkProxyFactory_setUseSystemConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_usesSystemConfiguration, "usesSystemConfiguration() -> bool");

extern "C" {static PyObject *meth_QNetworkProxyFactory_usesSystemConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_usesSystemConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QNetworkProxyFactory::usesSystemConfiguration();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_usesSystemConfiguration, doc_QNetworkProxyFactory_usesSystemConfiguration);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkProxyFactory(void *, int);}
static void release_QNetworkProxyFactory(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkProxyFactory *>(sipCppV);
    else
        delete reinterpret_cast< ::QNetworkProxyFactory *>(sipCppV);
}


extern "C" {static void dealloc_QNetworkProxyFactory(sipSimpleWrapper *);}
static void dealloc_QNetworkProxyFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkProxyFactory *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkProxyFactory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkProxyFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkProxyFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQNetworkProxyFactory *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQNetworkProxyFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QNetworkProxyFactory* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkProxyFactory, &a0))
        {
            sipCpp = new sipQNetworkProxyFactory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QNetworkProxyFactory[] = {
    {sipName_proxyForQuery, meth_QNetworkProxyFactory_proxyForQuery, METH_VARARGS, doc_QNetworkProxyFactory_proxyForQuery},
    {sipName_queryProxy, SIP_MLMETH_CAST(meth_QNetworkProxyFactory_queryProxy), METH_VARARGS|METH_KEYWORDS, doc_QNetworkProxyFactory_queryProxy},
    {sipName_setApplicationProxyFactory, meth_QNetworkProxyFactory_setApplicationProxyFactory, METH_VARARGS, doc_QNetworkProxyFactory_setApplicationProxyFactory},
    {sipName_setUseSystemConfiguration, meth_QNetworkProxyFactory_setUseSystemConfiguration, METH_VARARGS, doc_QNetworkProxyFactory_setUseSystemConfiguration},
    {sipName_systemProxyForQuery, SIP_MLMETH_CAST(meth_QNetworkProxyFactory_systemProxyForQuery), METH_VARARGS|METH_KEYWORDS, doc_QNetworkProxyFactory_systemProxyForQuery},
    {sipName_usesSystemConfiguration, meth_QNetworkProxyFactory_usesSystemConfiguration, METH_VARARGS, doc_QNetworkProxyFactory_usesSystemConfiguration}
};

PyDoc_STRVAR(doc_QNetworkProxyFactory, "\1QNetworkProxyFactory()\n"
"QNetworkProxyFactory(QNetworkProxyFactory)");


static pyqt5ClassPluginDef plugin_QNetworkProxyFactory = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkProxyFactory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkProxyFactory,
        SIP_NULLPTR,
        &plugin_QNetworkProxyFactory
    },
    {
        sipNameNr_QNetworkProxyFactory,
        {0, 0, 1},
        6, methods_QNetworkProxyFactory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkProxyFactory,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
