/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 244 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 179 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 39 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 42 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 60 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 63 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 179 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 72 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 75 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 84 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 87 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 93 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 96 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 102 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 108 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 111 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 114 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 117 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 120 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 123 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 126 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 129 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 132 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 141 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 192 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 195 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 198 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 224 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 227 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 230 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 233 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 236 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 239 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 242 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 245 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 248 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 251 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 254 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 257 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLWidget.cpp"


class sipQGLWidget : public  ::QGLWidget
{
public:
    sipQGLWidget( ::QWidget*,const  ::QGLWidget*, ::Qt::WindowFlags);
    sipQGLWidget( ::QGLContext*, ::QWidget*,const  ::QGLWidget*, ::Qt::WindowFlags);
    sipQGLWidget(const  ::QGLFormat&, ::QWidget*,const  ::QGLWidget*, ::Qt::WindowFlags);
    virtual ~sipQGLWidget();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void glDraw() SIP_OVERRIDE;
    void glInit() SIP_OVERRIDE;
    void paintOverlayGL() SIP_OVERRIDE;
    void resizeOverlayGL(int,int) SIP_OVERRIDE;
    void initializeOverlayGL() SIP_OVERRIDE;
    void paintGL() SIP_OVERRIDE;
    void resizeGL(int,int) SIP_OVERRIDE;
    void initializeGL() SIP_OVERRIDE;
    void updateOverlayGL() SIP_OVERRIDE;
    void updateGL() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGLWidget(const sipQGLWidget &);
    sipQGLWidget &operator = (const sipQGLWidget &);

    char sipPyMethods[56];
};

sipQGLWidget::sipQGLWidget( ::QWidget*a0,const  ::QGLWidget*a1, ::Qt::WindowFlags a2):  ::QGLWidget(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::sipQGLWidget( ::QGLContext*a0, ::QWidget*a1,const  ::QGLWidget*a2, ::Qt::WindowFlags a3):  ::QGLWidget(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::sipQGLWidget(const  ::QGLFormat& a0, ::QWidget*a1,const  ::QGLWidget*a2, ::Qt::WindowFlags a3):  ::QGLWidget(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::~sipQGLWidget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGLWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtOpenGL_qt_metaobject(sipPySelf,sipType_QGLWidget);

    return  ::QGLWidget::metaObject();
}

int sipQGLWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGLWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtOpenGL_qt_metacall(sipPySelf,sipType_QGLWidget,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQGLWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtOpenGL_qt_metacast(sipPySelf, sipType_QGLWidget, _clname, &sipCpp) ? sipCpp :  ::QGLWidget::qt_metacast(_clname));
}

void sipQGLWidget::glDraw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_glDraw);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], sipPySelf, SIP_NULLPTR, sipName_glDraw);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::glDraw();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::glInit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_glInit);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], sipPySelf, SIP_NULLPTR, sipName_glInit);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::glInit();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::paintOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_paintOverlayGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], sipPySelf, SIP_NULLPTR, sipName_paintOverlayGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::paintOverlayGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::resizeOverlayGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_resizeOverlayGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], sipPySelf, SIP_NULLPTR, sipName_resizeOverlayGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::resizeOverlayGL(a0,a1);
        return;
    }

    extern void sipVH_QtOpenGL_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtOpenGL_38(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQGLWidget::initializeOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_initializeOverlayGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], sipPySelf, SIP_NULLPTR, sipName_initializeOverlayGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::initializeOverlayGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::paintGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_paintGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], sipPySelf, SIP_NULLPTR, sipName_paintGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::paintGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::resizeGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_resizeGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], sipPySelf, SIP_NULLPTR, sipName_resizeGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::resizeGL(a0,a1);
        return;
    }

    extern void sipVH_QtOpenGL_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtOpenGL_38(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQGLWidget::initializeGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_initializeGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], sipPySelf, SIP_NULLPTR, sipName_initializeGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::initializeGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::updateOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_updateOverlayGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], sipPySelf, SIP_NULLPTR, sipName_updateOverlayGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::updateOverlayGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::updateGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_updateGL);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], sipPySelf, SIP_NULLPTR, sipName_updateGL);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::updateGL();
        return;
    }

    extern void sipVH_QtOpenGL_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtOpenGL_1(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], sipPySelf, SIP_NULLPTR, sipName_disconnectNotify);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtOpenGL_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtOpenGL_37(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_connectNotify);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], sipPySelf, SIP_NULLPTR, sipName_connectNotify);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtOpenGL_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtOpenGL_37(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_customEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], sipPySelf, SIP_NULLPTR, sipName_customEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::customEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtOpenGL_9(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_childEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], sipPySelf, SIP_NULLPTR, sipName_childEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::childEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtOpenGL_36(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_timerEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], sipPySelf, SIP_NULLPTR, sipName_timerEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtOpenGL_35(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGLWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_eventFilter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], sipPySelf, SIP_NULLPTR, sipName_eventFilter);
#endif

    if (!sipMeth)
        return  ::QGLWidget::eventFilter(a0,a1);

    extern bool sipVH_QtOpenGL_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtOpenGL_34(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGLWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_event);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], sipPySelf, SIP_NULLPTR, sipName_event);
#endif

    if (!sipMeth)
        return  ::QGLWidget::event(a0);

    extern bool sipVH_QtOpenGL_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtOpenGL_33(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQGLWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_metric);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), sipPySelf, SIP_NULLPTR, sipName_metric);
#endif

    if (!sipMeth)
        return  ::QGLWidget::metric(a0);

    extern int sipVH_QtOpenGL_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtOpenGL_32(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQGLWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_paintEngine);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), sipPySelf, SIP_NULLPTR, sipName_paintEngine);
#endif

    if (!sipMeth)
        return  ::QGLWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_QtOpenGL_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_31(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQGLWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_devType);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), sipPySelf, SIP_NULLPTR, sipName_devType);
#endif

    if (!sipMeth)
        return  ::QGLWidget::devType();

    extern int sipVH_QtOpenGL_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_30(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_setVisible);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], sipPySelf, SIP_NULLPTR, sipName_setVisible);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtOpenGL_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtOpenGL_29(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQGLWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), sipPySelf, SIP_NULLPTR, sipName_sizeHint);
#endif

    if (!sipMeth)
        return  ::QGLWidget::sizeHint();

    extern  ::QSize sipVH_QtOpenGL_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_28(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQGLWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[22]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_minimumSizeHint);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[22]), sipPySelf, SIP_NULLPTR, sipName_minimumSizeHint);
#endif

    if (!sipMeth)
        return  ::QGLWidget::minimumSizeHint();

    extern  ::QSize sipVH_QtOpenGL_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_28(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQGLWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_heightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), sipPySelf, SIP_NULLPTR, sipName_heightForWidth);
#endif

    if (!sipMeth)
        return  ::QGLWidget::heightForWidth(a0);

    extern int sipVH_QtOpenGL_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtOpenGL_27(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], sipPySelf, SIP_NULLPTR, sipName_mousePressEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtOpenGL_26(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], sipPySelf, SIP_NULLPTR, sipName_mouseReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtOpenGL_26(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], sipPySelf, SIP_NULLPTR, sipName_mouseDoubleClickEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtOpenGL_26(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], sipPySelf, SIP_NULLPTR, sipName_mouseMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtOpenGL_26(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_wheelEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], sipPySelf, SIP_NULLPTR, sipName_wheelEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtOpenGL_25(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], sipPySelf, SIP_NULLPTR, sipName_keyPressEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtOpenGL_24(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], sipPySelf, SIP_NULLPTR, sipName_keyReleaseEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtOpenGL_24(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_focusInEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], sipPySelf, SIP_NULLPTR, sipName_focusInEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtOpenGL_23(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], sipPySelf, SIP_NULLPTR, sipName_focusOutEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtOpenGL_23(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_enterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], sipPySelf, SIP_NULLPTR, sipName_enterEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtOpenGL_9(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_leaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], sipPySelf, SIP_NULLPTR, sipName_leaveEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtOpenGL_9(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_paintEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], sipPySelf, SIP_NULLPTR, sipName_paintEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtOpenGL_22(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_moveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], sipPySelf, SIP_NULLPTR, sipName_moveEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtOpenGL_21(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_resizeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], sipPySelf, SIP_NULLPTR, sipName_resizeEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtOpenGL_20(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_closeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], sipPySelf, SIP_NULLPTR, sipName_closeEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtOpenGL_19(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], sipPySelf, SIP_NULLPTR, sipName_contextMenuEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtOpenGL_18(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_tabletEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], sipPySelf, SIP_NULLPTR, sipName_tabletEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtOpenGL_17(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_actionEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], sipPySelf, SIP_NULLPTR, sipName_actionEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtOpenGL_16(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], sipPySelf, SIP_NULLPTR, sipName_dragEnterEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtOpenGL_15(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], sipPySelf, SIP_NULLPTR, sipName_dragMoveEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtOpenGL_14(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], sipPySelf, SIP_NULLPTR, sipName_dragLeaveEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtOpenGL_13(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_dropEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], sipPySelf, SIP_NULLPTR, sipName_dropEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtOpenGL_12(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[46], &sipPySelf, SIP_NULLPTR, sipName_showEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[46], sipPySelf, SIP_NULLPTR, sipName_showEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtOpenGL_11(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_hideEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], sipPySelf, SIP_NULLPTR, sipName_hideEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtOpenGL_10(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_changeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], sipPySelf, SIP_NULLPTR, sipName_changeEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtOpenGL_9(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGLWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], sipPySelf, SIP_NULLPTR, sipName_inputMethodEvent);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtOpenGL_8(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQGLWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[50]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_inputMethodQuery);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[50]), sipPySelf, SIP_NULLPTR, sipName_inputMethodQuery);
#endif

    if (!sipMeth)
        return  ::QGLWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtOpenGL_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtOpenGL_7(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGLWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], sipPySelf, SIP_NULLPTR, sipName_focusNextPrevChild);
#endif

    if (!sipMeth)
        return  ::QGLWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtOpenGL_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtOpenGL_6(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGLWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[52]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_hasHeightForWidth);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[52]), sipPySelf, SIP_NULLPTR, sipName_hasHeightForWidth);
#endif

    if (!sipMeth)
        return  ::QGLWidget::hasHeightForWidth();

    extern bool sipVH_QtOpenGL_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_5(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQGLWidget::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_nativeEvent);

#else
    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], sipPySelf, SIP_NULLPTR, sipName_nativeEvent);
#endif

    if (!sipMeth)
        return  ::QGLWidget::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtOpenGL_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtOpenGL_4(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQGLWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[54]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_sharedPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[54]), sipPySelf, SIP_NULLPTR, sipName_sharedPainter);
#endif

    if (!sipMeth)
        return  ::QGLWidget::sharedPainter();

    extern  ::QPainter* sipVH_QtOpenGL_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_3(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGLWidget::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

#if SIP_ABI_MAJOR_VERSION >= 12 && SIP_ABI_MINOR_VERSION >= 8
    sipMeth = sipIsPyMethod_12_8(&sipGILState, const_cast<char *>(&sipPyMethods[55]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_initPainter);

#else
    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[55]), sipPySelf, SIP_NULLPTR, sipName_initPainter);
#endif

    if (!sipMeth)
    {
         ::QGLWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtOpenGL_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtOpenGL_2(sipGILState, sipImportedVirtErrorHandlers_QtOpenGL_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGLWidget_qglColor, "qglColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QGLWidget_qglColor(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_qglColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->qglColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_qglColor, doc_QGLWidget_qglColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_qglClearColor, "qglClearColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QGLWidget_qglClearColor(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_qglClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->qglClearColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_qglClearColor, doc_QGLWidget_qglClearColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_isValid(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_isValid, doc_QGLWidget_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_isSharing, "isSharing(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_isSharing(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_isSharing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSharing();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_isSharing, doc_QGLWidget_isSharing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_makeCurrent, "makeCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->makeCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_makeCurrent, doc_QGLWidget_makeCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_doneCurrent, doc_QGLWidget_doneCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_doubleBuffer, "doubleBuffer(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_doubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_doubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->doubleBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_doubleBuffer, doc_QGLWidget_doubleBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_swapBuffers, "swapBuffers(self)");

extern "C" {static PyObject *meth_QGLWidget_swapBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_swapBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->swapBuffers();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_swapBuffers, doc_QGLWidget_swapBuffers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_format, "format(self) -> QGLFormat");

extern "C" {static PyObject *meth_QGLWidget_format(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
             ::QGLFormat*sipRes;

            sipRes = new  ::QGLFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_format, doc_QGLWidget_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_context, "context(self) -> QGLContext");

extern "C" {static PyObject *meth_QGLWidget_context(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
             ::QGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QGLContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_context, doc_QGLWidget_context);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_setContext, "setContext(self, QGLContext, shareContext: QGLContext = None, deleteOldContext: bool = True)");

extern "C" {static PyObject *meth_QGLWidget_setContext(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_setContext(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLContext* a0;
        const  ::QGLContext* a1 = 0;
        bool a2 = 1;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_shareContext,
            sipName_deleteOldContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|J8b", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QGLContext, &a0, sipType_QGLContext, &a1, &a2))
        {
            sipCpp->setContext(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_setContext, doc_QGLWidget_setContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_renderPixmap, "renderPixmap(self, width: int = 0, height: int = 0, useContext: bool = False) -> QPixmap");

extern "C" {static PyObject *meth_QGLWidget_renderPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_renderPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        int a1 = 0;
        bool a2 = 0;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
            sipName_useContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iib", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->renderPixmap(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_renderPixmap, doc_QGLWidget_renderPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_grabFrameBuffer, "grabFrameBuffer(self, withAlpha: bool = False) -> QImage");

extern "C" {static PyObject *meth_QGLWidget_grabFrameBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_grabFrameBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_withAlpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->grabFrameBuffer(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_grabFrameBuffer, doc_QGLWidget_grabFrameBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_makeOverlayCurrent, "makeOverlayCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_makeOverlayCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_makeOverlayCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->makeOverlayCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_makeOverlayCurrent, doc_QGLWidget_makeOverlayCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_overlayContext, "overlayContext(self) -> QGLContext");

extern "C" {static PyObject *meth_QGLWidget_overlayContext(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_overlayContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            const  ::QGLContext*sipRes;

            sipRes = sipCpp->overlayContext();

            return sipConvertFromType(const_cast< ::QGLContext *>(sipRes),sipType_QGLContext,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_overlayContext, doc_QGLWidget_overlayContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_convertToGLFormat, "convertToGLFormat(QImage) -> QImage");

extern "C" {static PyObject *meth_QGLWidget_convertToGLFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_convertToGLFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QImage, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage( ::QGLWidget::convertToGLFormat(*a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_convertToGLFormat, doc_QGLWidget_convertToGLFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_renderText, "renderText(self, int, int, str, font: QFont = QFont())\n"
"renderText(self, float, float, float, str, font: QFont = QFont())");

extern "C" {static PyObject *meth_QGLWidget_renderText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_renderText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QFont& a3def = QFont();
        const  ::QFont* a3 = &a3def;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1|J9", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State, sipType_QFont, &a3))
        {
            sipCpp->renderText(a0,a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QFont& a4def = QFont();
        const  ::QFont* a4 = &a4def;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BdddJ1|J9", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, &a2, sipType_QString,&a3, &a3State, sipType_QFont, &a4))
        {
            sipCpp->renderText(a0,a1,a2,*a3,*a4);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_renderText, doc_QGLWidget_renderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QGLWidget_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGLWidget::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintEngine, doc_QGLWidget_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_bindTexture, "bindTexture(self, QImage, target: int = GL_TEXTURE_2D, format: int = GL_RGBA) -> int\n"
"bindTexture(self, QPixmap, target: int = GL_TEXTURE_2D, format: int = GL_RGBA) -> int\n"
"bindTexture(self, str) -> int\n"
"bindTexture(self, QImage, int, int, Union[QGLContext.BindOptions, QGLContext.BindOption]) -> int\n"
"bindTexture(self, QPixmap, int, int, Union[QGLContext.BindOptions, QGLContext.BindOption]) -> int");

extern "C" {static PyObject *meth_QGLWidget_bindTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_bindTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::GLenum a1 = GL_TEXTURE_2D;
         ::GLint a2 = GL_RGBA;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_target,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|ui", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QImage, &a0, &a1, &a2))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const  ::QPixmap* a0;
         ::GLenum a1 = GL_TEXTURE_2D;
         ::GLint a2 = GL_RGBA;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_target,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|ui", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPixmap, &a0, &a1, &a2))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const  ::QImage* a0;
         ::GLenum a1;
         ::GLint a2;
         ::QGLContext::BindOptions* a3;
        int a3State = 0;
         ::QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9uiJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QImage, &a0, &a1, &a2, sipType_QGLContext_BindOptions, &a3, &a3State))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QGLContext_BindOptions,a3State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const  ::QPixmap* a0;
         ::GLenum a1;
         ::GLint a2;
         ::QGLContext::BindOptions* a3;
        int a3State = 0;
         ::QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9uiJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPixmap, &a0, &a1, &a2, sipType_QGLContext_BindOptions, &a3, &a3State))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QGLContext_BindOptions,a3State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_bindTexture, doc_QGLWidget_bindTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_drawTexture, "drawTexture(self, QRectF, int, textureTarget: int = GL_TEXTURE_2D)\n"
"drawTexture(self, Union[QPointF, QPoint], int, textureTarget: int = GL_TEXTURE_2D)");

extern "C" {static PyObject *meth_QGLWidget_drawTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_drawTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::GLuint a1;
         ::GLenum a2 = GL_TEXTURE_2D;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9u|u", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawTexture(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::GLuint a1;
         ::GLenum a2 = GL_TEXTURE_2D;
         ::QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1u|u", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->drawTexture(*a0,a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_drawTexture, doc_QGLWidget_drawTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_deleteTexture, "deleteTexture(self, int)");

extern "C" {static PyObject *meth_QGLWidget_deleteTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_deleteTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLuint a0;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
            sipCpp->deleteTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_deleteTexture, doc_QGLWidget_deleteTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_updateGL, "updateGL(self)");

extern "C" {static PyObject *meth_QGLWidget_updateGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_updateGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::updateGL() : sipCpp->updateGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_updateGL, doc_QGLWidget_updateGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_updateOverlayGL, "updateOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_updateOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_updateOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::updateOverlayGL() : sipCpp->updateOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_updateOverlayGL, doc_QGLWidget_updateOverlayGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGLWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGLWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_event, doc_QGLWidget_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_initializeGL, "initializeGL(self)");

extern "C" {static PyObject *meth_QGLWidget_initializeGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_initializeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::initializeGL() : sipCpp->initializeGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_initializeGL, doc_QGLWidget_initializeGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_resizeGL, "resizeGL(self, int, int)");

extern "C" {static PyObject *meth_QGLWidget_resizeGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::resizeGL(a0,a1) : sipCpp->resizeGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeGL, doc_QGLWidget_resizeGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_paintGL, "paintGL(self)");

extern "C" {static PyObject *meth_QGLWidget_paintGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::paintGL() : sipCpp->paintGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintGL, doc_QGLWidget_paintGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_initializeOverlayGL, "initializeOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_initializeOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_initializeOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::initializeOverlayGL() : sipCpp->initializeOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_initializeOverlayGL, doc_QGLWidget_initializeOverlayGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_resizeOverlayGL, "resizeOverlayGL(self, int, int)");

extern "C" {static PyObject *meth_QGLWidget_resizeOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::resizeOverlayGL(a0,a1) : sipCpp->resizeOverlayGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeOverlayGL, doc_QGLWidget_resizeOverlayGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_paintOverlayGL, "paintOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_paintOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::paintOverlayGL() : sipCpp->paintOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintOverlayGL, doc_QGLWidget_paintOverlayGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_setAutoBufferSwap, "setAutoBufferSwap(self, bool)");

extern "C" {static PyObject *meth_QGLWidget_setAutoBufferSwap(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_setAutoBufferSwap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
            sipCpp->setAutoBufferSwap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_setAutoBufferSwap, doc_QGLWidget_setAutoBufferSwap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_autoBufferSwap, "autoBufferSwap(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_autoBufferSwap(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_autoBufferSwap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoBufferSwap();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_autoBufferSwap, doc_QGLWidget_autoBufferSwap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QGLWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintEvent, doc_QGLWidget_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QGLWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeEvent, doc_QGLWidget_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_glInit, "glInit(self)");

extern "C" {static PyObject *meth_QGLWidget_glInit(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_glInit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::glInit() : sipCpp->glInit());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_glInit, doc_QGLWidget_glInit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLWidget_glDraw, "glDraw(self)");

extern "C" {static PyObject *meth_QGLWidget_glDraw(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_glDraw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QGLWidget::glDraw() : sipCpp->glDraw());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_glDraw, doc_QGLWidget_glDraw);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGLWidget(void *, const sipTypeDef *);}
static void *cast_QGLWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGLWidget *sipCpp = reinterpret_cast< ::QGLWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLWidget(void *, int);}
static void release_QGLWidget(void *sipCppV, int)
{
     ::QGLWidget *sipCpp = reinterpret_cast< ::QGLWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void *array_QGLWidget(Py_ssize_t);}
static void *array_QGLWidget(Py_ssize_t sipNrElem)
{
    return new  ::QGLWidget[sipNrElem];
}


extern "C" {static void dealloc_QGLWidget(sipSimpleWrapper *);}
static void dealloc_QGLWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGLWidget *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGLWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGLWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGLWidget *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;
        const  ::QGLWidget* a1 = 0;
         ::Qt::WindowFlags a2def = Qt::WindowFlags();
         ::Qt::WindowFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ8J1", sipType_QWidget, &a0, sipOwner, sipType_QGLWidget, &a1, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            sipCpp = new sipQGLWidget(a0,a1,*a2);
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QGLContext* a0;
        PyObject *a0Wrapper;
         ::QWidget* a1 = 0;
        const  ::QGLWidget* a2 = 0;
         ::Qt::WindowFlags a3def = Qt::WindowFlags();
         ::Qt::WindowFlags* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JHJ8J1", &a0Wrapper, sipType_QGLContext, &a0, sipType_QWidget, &a1, sipOwner, sipType_QGLWidget, &a2, sipType_Qt_WindowFlags, &a3, &a3State))
        {
            sipCpp = new sipQGLWidget(a0,a1,a2,*a3);

            sipTransferTo(a0Wrapper, (PyObject *)sipSelf);
            sipReleaseType(a3,sipType_Qt_WindowFlags,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QGLFormat* a0;
         ::QWidget* a1 = 0;
        const  ::QGLWidget* a2 = 0;
         ::Qt::WindowFlags a3def = Qt::WindowFlags();
         ::Qt::WindowFlags* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JHJ8J1", sipType_QGLFormat, &a0, sipType_QWidget, &a1, sipOwner, sipType_QGLWidget, &a2, sipType_Qt_WindowFlags, &a3, &a3State))
        {
            sipCpp = new sipQGLWidget(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_Qt_WindowFlags,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGLWidget[] = {{0, 2, 1}};


static PyMethodDef methods_QGLWidget[] = {
    {sipName_autoBufferSwap, meth_QGLWidget_autoBufferSwap, METH_VARARGS, doc_QGLWidget_autoBufferSwap},
    {sipName_bindTexture, SIP_MLMETH_CAST(meth_QGLWidget_bindTexture), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_bindTexture},
    {sipName_context, meth_QGLWidget_context, METH_VARARGS, doc_QGLWidget_context},
    {sipName_convertToGLFormat, meth_QGLWidget_convertToGLFormat, METH_VARARGS, doc_QGLWidget_convertToGLFormat},
    {sipName_deleteTexture, meth_QGLWidget_deleteTexture, METH_VARARGS, doc_QGLWidget_deleteTexture},
    {sipName_doneCurrent, meth_QGLWidget_doneCurrent, METH_VARARGS, doc_QGLWidget_doneCurrent},
    {sipName_doubleBuffer, meth_QGLWidget_doubleBuffer, METH_VARARGS, doc_QGLWidget_doubleBuffer},
    {sipName_drawTexture, SIP_MLMETH_CAST(meth_QGLWidget_drawTexture), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_drawTexture},
    {sipName_event, meth_QGLWidget_event, METH_VARARGS, doc_QGLWidget_event},
    {sipName_format, meth_QGLWidget_format, METH_VARARGS, doc_QGLWidget_format},
    {sipName_glDraw, meth_QGLWidget_glDraw, METH_VARARGS, doc_QGLWidget_glDraw},
    {sipName_glInit, meth_QGLWidget_glInit, METH_VARARGS, doc_QGLWidget_glInit},
    {sipName_grabFrameBuffer, SIP_MLMETH_CAST(meth_QGLWidget_grabFrameBuffer), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_grabFrameBuffer},
    {sipName_initializeGL, meth_QGLWidget_initializeGL, METH_VARARGS, doc_QGLWidget_initializeGL},
    {sipName_initializeOverlayGL, meth_QGLWidget_initializeOverlayGL, METH_VARARGS, doc_QGLWidget_initializeOverlayGL},
    {sipName_isSharing, meth_QGLWidget_isSharing, METH_VARARGS, doc_QGLWidget_isSharing},
    {sipName_isValid, meth_QGLWidget_isValid, METH_VARARGS, doc_QGLWidget_isValid},
    {sipName_makeCurrent, meth_QGLWidget_makeCurrent, METH_VARARGS, doc_QGLWidget_makeCurrent},
    {sipName_makeOverlayCurrent, meth_QGLWidget_makeOverlayCurrent, METH_VARARGS, doc_QGLWidget_makeOverlayCurrent},
    {sipName_overlayContext, meth_QGLWidget_overlayContext, METH_VARARGS, doc_QGLWidget_overlayContext},
    {sipName_paintEngine, meth_QGLWidget_paintEngine, METH_VARARGS, doc_QGLWidget_paintEngine},
    {sipName_paintEvent, meth_QGLWidget_paintEvent, METH_VARARGS, doc_QGLWidget_paintEvent},
    {sipName_paintGL, meth_QGLWidget_paintGL, METH_VARARGS, doc_QGLWidget_paintGL},
    {sipName_paintOverlayGL, meth_QGLWidget_paintOverlayGL, METH_VARARGS, doc_QGLWidget_paintOverlayGL},
    {sipName_qglClearColor, meth_QGLWidget_qglClearColor, METH_VARARGS, doc_QGLWidget_qglClearColor},
    {sipName_qglColor, meth_QGLWidget_qglColor, METH_VARARGS, doc_QGLWidget_qglColor},
    {sipName_renderPixmap, SIP_MLMETH_CAST(meth_QGLWidget_renderPixmap), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_renderPixmap},
    {sipName_renderText, SIP_MLMETH_CAST(meth_QGLWidget_renderText), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_renderText},
    {sipName_resizeEvent, meth_QGLWidget_resizeEvent, METH_VARARGS, doc_QGLWidget_resizeEvent},
    {sipName_resizeGL, meth_QGLWidget_resizeGL, METH_VARARGS, doc_QGLWidget_resizeGL},
    {sipName_resizeOverlayGL, meth_QGLWidget_resizeOverlayGL, METH_VARARGS, doc_QGLWidget_resizeOverlayGL},
    {sipName_setAutoBufferSwap, meth_QGLWidget_setAutoBufferSwap, METH_VARARGS, doc_QGLWidget_setAutoBufferSwap},
    {sipName_setContext, SIP_MLMETH_CAST(meth_QGLWidget_setContext), METH_VARARGS|METH_KEYWORDS, doc_QGLWidget_setContext},
    {sipName_swapBuffers, meth_QGLWidget_swapBuffers, METH_VARARGS, doc_QGLWidget_swapBuffers},
    {sipName_updateGL, meth_QGLWidget_updateGL, METH_VARARGS, doc_QGLWidget_updateGL},
    {sipName_updateOverlayGL, meth_QGLWidget_updateOverlayGL, METH_VARARGS, doc_QGLWidget_updateOverlayGL}
};

PyDoc_STRVAR(doc_QGLWidget, "\1QGLWidget(parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())\n"
"QGLWidget(QGLContext, parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())\n"
"QGLWidget(QGLFormat, parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())");


static pyqt5ClassPluginDef plugin_QGLWidget = {
    & ::QGLWidget::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtOpenGL_QGLWidget = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGLWidget,
        SIP_NULLPTR,
        &plugin_QGLWidget
    },
    {
        sipNameNr_QGLWidget,
        {0, 0, 1},
        36, methods_QGLWidget,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGLWidget,
    -1,
    -1,
    supers_QGLWidget,
    SIP_NULLPTR,
    init_type_QGLWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGLWidget,
    SIP_NULLPTR,
    array_QGLWidget,
    SIP_NULLPTR,
    release_QGLWidget,
    cast_QGLWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
