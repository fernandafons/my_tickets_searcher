/*
 * Interface wrapper code.
 *
 * Generated by SIP 5.3.0
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 29 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLFormat.cpp"

#line 28 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 33 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLFormat.cpp"
#line 69 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 36 "/home/fernandaabreu/projetos/MyTicketsSearcher/PyQt5-5.13.2/QtOpenGL/sipQtOpenGLQGLFormat.cpp"


PyDoc_STRVAR(doc_QGLFormat_setDepthBufferSize, "setDepthBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDepthBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDepthBufferSize, doc_QGLFormat_setDepthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_depthBufferSize, "depthBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depthBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_depthBufferSize, doc_QGLFormat_depthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setAccumBufferSize, "setAccumBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAccumBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAccumBufferSize, doc_QGLFormat_setAccumBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_accumBufferSize, "accumBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_accumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->accumBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_accumBufferSize, doc_QGLFormat_accumBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setAlphaBufferSize, "setAlphaBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAlphaBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAlphaBufferSize, doc_QGLFormat_setAlphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_alphaBufferSize, "alphaBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alphaBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_alphaBufferSize, doc_QGLFormat_alphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setStencilBufferSize, "setStencilBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStencilBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStencilBufferSize, doc_QGLFormat_setStencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_stencilBufferSize, "stencilBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stencilBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stencilBufferSize, doc_QGLFormat_stencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setSampleBuffers, "setSampleBuffers(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSampleBuffers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSampleBuffers, doc_QGLFormat_setSampleBuffers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSamples, doc_QGLFormat_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_samples, doc_QGLFormat_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setDoubleBuffer, "setDoubleBuffer(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDoubleBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDoubleBuffer, doc_QGLFormat_setDoubleBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setDepth, "setDepth(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setDepth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDepth, doc_QGLFormat_setDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setRgba, "setRgba(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setRgba(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setRgba, doc_QGLFormat_setRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setAlpha, "setAlpha(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAlpha, doc_QGLFormat_setAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setAccum, "setAccum(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setAccum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAccum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAccum, doc_QGLFormat_setAccum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setStencil, "setStencil(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setStencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStencil, doc_QGLFormat_setStencil);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setStereo, "setStereo(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStereo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStereo, doc_QGLFormat_setStereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setDirectRendering, "setDirectRendering(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setDirectRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDirectRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDirectRendering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDirectRendering, doc_QGLFormat_setDirectRendering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setOverlay, "setOverlay(self, bool)");

extern "C" {static PyObject *meth_QGLFormat_setOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setOverlay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setOverlay, doc_QGLFormat_setOverlay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_plane, "plane(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_plane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_plane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->plane();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_plane, doc_QGLFormat_plane);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setPlane, "setPlane(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setPlane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setPlane(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setPlane, doc_QGLFormat_setPlane);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setOption, "setOption(self, Union[QGL.FormatOptions, QGL.FormatOption])");

extern "C" {static PyObject *meth_QGLFormat_setOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGL::FormatOptions* a0;
        int a0State = 0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGL_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOption(*a0);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setOption, doc_QGLFormat_setOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_testOption, "testOption(self, Union[QGL.FormatOptions, QGL.FormatOption]) -> bool");

extern "C" {static PyObject *meth_QGLFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGL::FormatOptions* a0;
        int a0State = 0;
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGL_FormatOptions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(*a0);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_testOption, doc_QGLFormat_testOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_defaultFormat, "defaultFormat() -> QGLFormat");

extern "C" {static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGLFormat*sipRes;

            sipRes = new  ::QGLFormat( ::QGLFormat::defaultFormat());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_defaultFormat, doc_QGLFormat_defaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setDefaultFormat, "setDefaultFormat(QGLFormat)");

extern "C" {static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QGLFormat, &a0))
        {
             ::QGLFormat::setDefaultFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDefaultFormat, doc_QGLFormat_setDefaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_defaultOverlayFormat, "defaultOverlayFormat() -> QGLFormat");

extern "C" {static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGLFormat*sipRes;

            sipRes = new  ::QGLFormat( ::QGLFormat::defaultOverlayFormat());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_defaultOverlayFormat, doc_QGLFormat_defaultOverlayFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setDefaultOverlayFormat, "setDefaultOverlayFormat(QGLFormat)");

extern "C" {static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QGLFormat, &a0))
        {
             ::QGLFormat::setDefaultOverlayFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDefaultOverlayFormat, doc_QGLFormat_setDefaultOverlayFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_hasOpenGL, "hasOpenGL() -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGLFormat::hasOpenGL();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOpenGL, doc_QGLFormat_hasOpenGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_hasOpenGLOverlays, "hasOpenGLOverlays() -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGLFormat::hasOpenGLOverlays();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOpenGLOverlays, doc_QGLFormat_hasOpenGLOverlays);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_doubleBuffer, "doubleBuffer(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_doubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_doubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->doubleBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_doubleBuffer, doc_QGLFormat_doubleBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_depth, "depth(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_depth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->depth();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_depth, doc_QGLFormat_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_rgba, "rgba(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_rgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rgba();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_rgba, doc_QGLFormat_rgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_alpha, "alpha(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_alpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->alpha();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_alpha, doc_QGLFormat_alpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_accum, "accum(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_accum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->accum();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_accum, doc_QGLFormat_accum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_stencil, "stencil(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_stencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stencil();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stencil, doc_QGLFormat_stencil);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_stereo, "stereo(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stereo();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stereo, doc_QGLFormat_stereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_directRendering, "directRendering(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_directRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_directRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->directRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_directRendering, doc_QGLFormat_directRendering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_hasOverlay, "hasOverlay(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasOverlay();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOverlay, doc_QGLFormat_hasOverlay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_sampleBuffers, "sampleBuffers(self) -> bool");

extern "C" {static PyObject *meth_QGLFormat_sampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_sampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sampleBuffers();

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_sampleBuffers, doc_QGLFormat_sampleBuffers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setRedBufferSize, "setRedBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setRedBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setRedBufferSize, doc_QGLFormat_setRedBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_redBufferSize, "redBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->redBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_redBufferSize, doc_QGLFormat_redBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setGreenBufferSize, "setGreenBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setGreenBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setGreenBufferSize, doc_QGLFormat_setGreenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_greenBufferSize, "greenBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->greenBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_greenBufferSize, doc_QGLFormat_greenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setBlueBufferSize, "setBlueBufferSize(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setBlueBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setBlueBufferSize, doc_QGLFormat_setBlueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_blueBufferSize, "blueBufferSize(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blueBufferSize();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_blueBufferSize, doc_QGLFormat_blueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setSwapInterval, "setSwapInterval(self, int)");

extern "C" {static PyObject *meth_QGLFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSwapInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSwapInterval, doc_QGLFormat_setSwapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_swapInterval, "swapInterval(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->swapInterval();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_swapInterval, doc_QGLFormat_swapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_openGLVersionFlags, "openGLVersionFlags() -> QGLFormat.OpenGLVersionFlags");

extern "C" {static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGLFormat::OpenGLVersionFlags*sipRes;

            sipRes = new  ::QGLFormat::OpenGLVersionFlags( ::QGLFormat::openGLVersionFlags());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat_OpenGLVersionFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_openGLVersionFlags, doc_QGLFormat_openGLVersionFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setVersion, "setVersion(self, int, int)");

extern "C" {static PyObject *meth_QGLFormat_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGLFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setVersion, doc_QGLFormat_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_majorVersion, "majorVersion(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_majorVersion, doc_QGLFormat_majorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_minorVersion, "minorVersion(self) -> int");

extern "C" {static PyObject *meth_QGLFormat_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_minorVersion, doc_QGLFormat_minorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_setProfile, "setProfile(self, QGLFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QGLFormat_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGLFormat::OpenGLContextProfile a0;
         ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGLFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setProfile, doc_QGLFormat_setProfile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGLFormat_profile, "profile(self) -> QGLFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QGLFormat_profile(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
             ::QGLFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGLFormat_OpenGLContextProfile);
        }
    }

    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_profile, doc_QGLFormat_profile);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QGLFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGLFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGLFormat *sipCpp = reinterpret_cast< ::QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGLFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, eq_slot, sipType_QGLFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGLFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGLFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGLFormat *sipCpp = reinterpret_cast< ::QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGLFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, ne_slot, sipType_QGLFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLFormat(void *, int);}
static void release_QGLFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGLFormat *>(sipCppV);
}


extern "C" {static void *array_QGLFormat(Py_ssize_t);}
static void *array_QGLFormat(Py_ssize_t sipNrElem)
{
    return new  ::QGLFormat[sipNrElem];
}


extern "C" {static void assign_QGLFormat(void *, Py_ssize_t, void *);}
static void assign_QGLFormat(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGLFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGLFormat *>(sipSrc);
}


extern "C" {static void *copy_QGLFormat(const void *, Py_ssize_t);}
static void *copy_QGLFormat(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::QGLFormat(reinterpret_cast<const  ::QGLFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGLFormat(sipSimpleWrapper *);}
static void dealloc_QGLFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGLFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGLFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGLFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QGLFormat();

            return sipCpp;
        }
    }

    {
         ::QGL::FormatOptions* a0;
        int a0State = 0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_plane,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QGL_FormatOptions, &a0, &a0State, &a1))
        {
            sipCpp = new  ::QGLFormat(*a0,a1);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QGLFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QGLFormat, &a0))
        {
            sipCpp = new  ::QGLFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGLFormat[] = {
    {(void *)slot_QGLFormat___eq__, eq_slot},
    {(void *)slot_QGLFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGLFormat[] = {
    {sipName_accum, meth_QGLFormat_accum, METH_VARARGS, doc_QGLFormat_accum},
    {sipName_accumBufferSize, meth_QGLFormat_accumBufferSize, METH_VARARGS, doc_QGLFormat_accumBufferSize},
    {sipName_alpha, meth_QGLFormat_alpha, METH_VARARGS, doc_QGLFormat_alpha},
    {sipName_alphaBufferSize, meth_QGLFormat_alphaBufferSize, METH_VARARGS, doc_QGLFormat_alphaBufferSize},
    {sipName_blueBufferSize, meth_QGLFormat_blueBufferSize, METH_VARARGS, doc_QGLFormat_blueBufferSize},
    {sipName_defaultFormat, meth_QGLFormat_defaultFormat, METH_VARARGS, doc_QGLFormat_defaultFormat},
    {sipName_defaultOverlayFormat, meth_QGLFormat_defaultOverlayFormat, METH_VARARGS, doc_QGLFormat_defaultOverlayFormat},
    {sipName_depth, meth_QGLFormat_depth, METH_VARARGS, doc_QGLFormat_depth},
    {sipName_depthBufferSize, meth_QGLFormat_depthBufferSize, METH_VARARGS, doc_QGLFormat_depthBufferSize},
    {sipName_directRendering, meth_QGLFormat_directRendering, METH_VARARGS, doc_QGLFormat_directRendering},
    {sipName_doubleBuffer, meth_QGLFormat_doubleBuffer, METH_VARARGS, doc_QGLFormat_doubleBuffer},
    {sipName_greenBufferSize, meth_QGLFormat_greenBufferSize, METH_VARARGS, doc_QGLFormat_greenBufferSize},
    {sipName_hasOpenGL, meth_QGLFormat_hasOpenGL, METH_VARARGS, doc_QGLFormat_hasOpenGL},
    {sipName_hasOpenGLOverlays, meth_QGLFormat_hasOpenGLOverlays, METH_VARARGS, doc_QGLFormat_hasOpenGLOverlays},
    {sipName_hasOverlay, meth_QGLFormat_hasOverlay, METH_VARARGS, doc_QGLFormat_hasOverlay},
    {sipName_majorVersion, meth_QGLFormat_majorVersion, METH_VARARGS, doc_QGLFormat_majorVersion},
    {sipName_minorVersion, meth_QGLFormat_minorVersion, METH_VARARGS, doc_QGLFormat_minorVersion},
    {sipName_openGLVersionFlags, meth_QGLFormat_openGLVersionFlags, METH_VARARGS, doc_QGLFormat_openGLVersionFlags},
    {sipName_plane, meth_QGLFormat_plane, METH_VARARGS, doc_QGLFormat_plane},
    {sipName_profile, meth_QGLFormat_profile, METH_VARARGS, doc_QGLFormat_profile},
    {sipName_redBufferSize, meth_QGLFormat_redBufferSize, METH_VARARGS, doc_QGLFormat_redBufferSize},
    {sipName_rgba, meth_QGLFormat_rgba, METH_VARARGS, doc_QGLFormat_rgba},
    {sipName_sampleBuffers, meth_QGLFormat_sampleBuffers, METH_VARARGS, doc_QGLFormat_sampleBuffers},
    {sipName_samples, meth_QGLFormat_samples, METH_VARARGS, doc_QGLFormat_samples},
    {sipName_setAccum, meth_QGLFormat_setAccum, METH_VARARGS, doc_QGLFormat_setAccum},
    {sipName_setAccumBufferSize, meth_QGLFormat_setAccumBufferSize, METH_VARARGS, doc_QGLFormat_setAccumBufferSize},
    {sipName_setAlpha, meth_QGLFormat_setAlpha, METH_VARARGS, doc_QGLFormat_setAlpha},
    {sipName_setAlphaBufferSize, meth_QGLFormat_setAlphaBufferSize, METH_VARARGS, doc_QGLFormat_setAlphaBufferSize},
    {sipName_setBlueBufferSize, meth_QGLFormat_setBlueBufferSize, METH_VARARGS, doc_QGLFormat_setBlueBufferSize},
    {sipName_setDefaultFormat, meth_QGLFormat_setDefaultFormat, METH_VARARGS, doc_QGLFormat_setDefaultFormat},
    {sipName_setDefaultOverlayFormat, meth_QGLFormat_setDefaultOverlayFormat, METH_VARARGS, doc_QGLFormat_setDefaultOverlayFormat},
    {sipName_setDepth, meth_QGLFormat_setDepth, METH_VARARGS, doc_QGLFormat_setDepth},
    {sipName_setDepthBufferSize, meth_QGLFormat_setDepthBufferSize, METH_VARARGS, doc_QGLFormat_setDepthBufferSize},
    {sipName_setDirectRendering, meth_QGLFormat_setDirectRendering, METH_VARARGS, doc_QGLFormat_setDirectRendering},
    {sipName_setDoubleBuffer, meth_QGLFormat_setDoubleBuffer, METH_VARARGS, doc_QGLFormat_setDoubleBuffer},
    {sipName_setGreenBufferSize, meth_QGLFormat_setGreenBufferSize, METH_VARARGS, doc_QGLFormat_setGreenBufferSize},
    {sipName_setOption, meth_QGLFormat_setOption, METH_VARARGS, doc_QGLFormat_setOption},
    {sipName_setOverlay, meth_QGLFormat_setOverlay, METH_VARARGS, doc_QGLFormat_setOverlay},
    {sipName_setPlane, meth_QGLFormat_setPlane, METH_VARARGS, doc_QGLFormat_setPlane},
    {sipName_setProfile, meth_QGLFormat_setProfile, METH_VARARGS, doc_QGLFormat_setProfile},
    {sipName_setRedBufferSize, meth_QGLFormat_setRedBufferSize, METH_VARARGS, doc_QGLFormat_setRedBufferSize},
    {sipName_setRgba, meth_QGLFormat_setRgba, METH_VARARGS, doc_QGLFormat_setRgba},
    {sipName_setSampleBuffers, meth_QGLFormat_setSampleBuffers, METH_VARARGS, doc_QGLFormat_setSampleBuffers},
    {sipName_setSamples, meth_QGLFormat_setSamples, METH_VARARGS, doc_QGLFormat_setSamples},
    {sipName_setStencil, meth_QGLFormat_setStencil, METH_VARARGS, doc_QGLFormat_setStencil},
    {sipName_setStencilBufferSize, meth_QGLFormat_setStencilBufferSize, METH_VARARGS, doc_QGLFormat_setStencilBufferSize},
    {sipName_setStereo, meth_QGLFormat_setStereo, METH_VARARGS, doc_QGLFormat_setStereo},
    {sipName_setSwapInterval, meth_QGLFormat_setSwapInterval, METH_VARARGS, doc_QGLFormat_setSwapInterval},
    {sipName_setVersion, meth_QGLFormat_setVersion, METH_VARARGS, doc_QGLFormat_setVersion},
    {sipName_stencil, meth_QGLFormat_stencil, METH_VARARGS, doc_QGLFormat_stencil},
    {sipName_stencilBufferSize, meth_QGLFormat_stencilBufferSize, METH_VARARGS, doc_QGLFormat_stencilBufferSize},
    {sipName_stereo, meth_QGLFormat_stereo, METH_VARARGS, doc_QGLFormat_stereo},
    {sipName_swapInterval, meth_QGLFormat_swapInterval, METH_VARARGS, doc_QGLFormat_swapInterval},
    {sipName_testOption, meth_QGLFormat_testOption, METH_VARARGS, doc_QGLFormat_testOption}
};

static sipEnumMemberDef enummembers_QGLFormat[] = {
    {sipName_CompatibilityProfile, static_cast<int>( ::QGLFormat::CompatibilityProfile), 7},
    {sipName_CoreProfile, static_cast<int>( ::QGLFormat::CoreProfile), 7},
    {sipName_NoProfile, static_cast<int>( ::QGLFormat::NoProfile), 7},
    {sipName_OpenGL_ES_CommonLite_Version_1_0, static_cast<int>( ::QGLFormat::OpenGL_ES_CommonLite_Version_1_0), 8},
    {sipName_OpenGL_ES_CommonLite_Version_1_1, static_cast<int>( ::QGLFormat::OpenGL_ES_CommonLite_Version_1_1), 8},
    {sipName_OpenGL_ES_Common_Version_1_0, static_cast<int>( ::QGLFormat::OpenGL_ES_Common_Version_1_0), 8},
    {sipName_OpenGL_ES_Common_Version_1_1, static_cast<int>( ::QGLFormat::OpenGL_ES_Common_Version_1_1), 8},
    {sipName_OpenGL_ES_Version_2_0, static_cast<int>( ::QGLFormat::OpenGL_ES_Version_2_0), 8},
    {sipName_OpenGL_Version_1_1, static_cast<int>( ::QGLFormat::OpenGL_Version_1_1), 8},
    {sipName_OpenGL_Version_1_2, static_cast<int>( ::QGLFormat::OpenGL_Version_1_2), 8},
    {sipName_OpenGL_Version_1_3, static_cast<int>( ::QGLFormat::OpenGL_Version_1_3), 8},
    {sipName_OpenGL_Version_1_4, static_cast<int>( ::QGLFormat::OpenGL_Version_1_4), 8},
    {sipName_OpenGL_Version_1_5, static_cast<int>( ::QGLFormat::OpenGL_Version_1_5), 8},
    {sipName_OpenGL_Version_2_0, static_cast<int>( ::QGLFormat::OpenGL_Version_2_0), 8},
    {sipName_OpenGL_Version_2_1, static_cast<int>( ::QGLFormat::OpenGL_Version_2_1), 8},
    {sipName_OpenGL_Version_3_0, static_cast<int>( ::QGLFormat::OpenGL_Version_3_0), 8},
    {sipName_OpenGL_Version_3_1, static_cast<int>( ::QGLFormat::OpenGL_Version_3_1), 8},
    {sipName_OpenGL_Version_3_2, static_cast<int>( ::QGLFormat::OpenGL_Version_3_2), 8},
    {sipName_OpenGL_Version_3_3, static_cast<int>( ::QGLFormat::OpenGL_Version_3_3), 8},
    {sipName_OpenGL_Version_4_0, static_cast<int>( ::QGLFormat::OpenGL_Version_4_0), 8},
    {sipName_OpenGL_Version_4_1, static_cast<int>( ::QGLFormat::OpenGL_Version_4_1), 8},
    {sipName_OpenGL_Version_4_2, static_cast<int>( ::QGLFormat::OpenGL_Version_4_2), 8},
    {sipName_OpenGL_Version_4_3, static_cast<int>( ::QGLFormat::OpenGL_Version_4_3), 8},
    {sipName_OpenGL_Version_None, static_cast<int>( ::QGLFormat::OpenGL_Version_None), 8},
};

PyDoc_STRVAR(doc_QGLFormat, "\1QGLFormat()\n"
"QGLFormat(Union[QGL.FormatOptions, QGL.FormatOption], plane: int = 0)\n"
"QGLFormat(QGLFormat)");


static pyqt5ClassPluginDef plugin_QGLFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtOpenGL_QGLFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGLFormat,
        SIP_NULLPTR,
        &plugin_QGLFormat
    },
    {
        sipNameNr_QGLFormat,
        {0, 0, 1},
        54, methods_QGLFormat,
        24, enummembers_QGLFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGLFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QGLFormat,
    init_type_QGLFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_QGLFormat,
    assign_QGLFormat,
    array_QGLFormat,
    copy_QGLFormat,
    release_QGLFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
